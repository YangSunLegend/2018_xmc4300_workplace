   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_usic.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_USIC_CH_SetInputTriggerCombinationMode,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_USIC_CH_SetInputTriggerCombinationMode:
  25              	.LFB142:
  26              	 .file 1 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc/xmc_usic.h"
   1:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
   2:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @file xmc_usic.h
   3:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @date 2016-04-10
   4:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
   5:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @cond
   6:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   *************************************************************************************************
   7:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
   9:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * All rights reserved.                        
  11:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *                                             
  12:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * following conditions are met:   
  14:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  15:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * disclaimer.                        
  17:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  18:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  21:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * products derived from this software without specific prior written permission.                  
  23:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  24:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  32:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  **************************************************************************************************
  35:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
  36:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Change History
  37:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * --------------
  38:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
  39:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-02-20:
  40:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Initial draft<br>
  41:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Documentation improved <br>
  42:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
  43:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-05-08:
  44:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  45:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *      
  46:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-06-20:
  47:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  49:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-17:
  50:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  51:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
  52:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-24:
  53:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  54:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  55:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
  56:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-25:
  57:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  58:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  59:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  60:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
  61:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-27:
  62:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  63:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  64:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  65:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
  66:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-28:
  67:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  68:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  69:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
  70:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-03-09:
  71:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Optimization of write only registers
  72:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
  73:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-04-10:
  74:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  75:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
  76:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @endcond
  77:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
  78:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
  79:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
  80:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #ifndef XMC_USIC_H
  81:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC_H
  82:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
  83:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * HEADER FILES
  84:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
  85:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
  86:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc_common.h"
  87:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
  88:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
  89:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
  90:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
  91:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
  92:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
  93:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
  94:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup USIC
  95:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
  96:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
  97:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
  98:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
  99:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 100:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 101:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * by each communication channel and which pins are used.
 102:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 103:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * communication protocols.
 104:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 105:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC driver features:
 106:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 107:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 108:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  friendly format.
 109:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 110:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 111:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 112:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 113:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 114:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
 115:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 116:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 117:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 118:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * MACROS
 119:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 120:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 121:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 122:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 123:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 124:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 125:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC1)
 126:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 127:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 128:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 129:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 130:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 131:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC2)
 132:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 133:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 134:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 135:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 136:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 137:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 138:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 139:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 140:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 141:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 142:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 143:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 144:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 145:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 146:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 147:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 148:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 149:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC1
 150:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  #include "xmc1_usic_map.h"
 151:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 152:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 153:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC4
 154:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  #include "xmc4_usic_map.h"
 155:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 156:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 157:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 158:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * ENUMS
 159:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 160:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 161:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 162:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel driver status
 163:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 164:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 165:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 166:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 167:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 168:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 169:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 170:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 171:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 172:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel kernel mode
 173:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** */
 174:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 175:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 176:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 177:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 178:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 179:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 180:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 181:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 182:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 183:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel operating mode
 184:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 185:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 186:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 187:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 188:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 189:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 190:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 191:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 192:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 193:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 194:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 195:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel inputs
 196:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 197:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 198:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 199:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 200:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 201:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 202:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 203:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 204:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 205:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 206:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 207:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 208:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input source sampling frequency
 209:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 210:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 211:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 212:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 213:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 214:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 215:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 216:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 217:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input combination mode
 218:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 219:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 220:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 221:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 222:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 223:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 224:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 225:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 226:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 227:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 228:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel data transmission start modes.
 229:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 230:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 231:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * the TCSR->TDEN bitfield.
 232:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 233:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 234:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 235:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 236:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 237:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 238:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 239:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 240:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 241:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 242:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel interrupt node pointers
 243:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 244:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 245:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 246:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 247:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 248:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 249:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 250:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 251:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 252:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 253:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 254:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel events
 255:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 256:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 257:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 258:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 259:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 260:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 261:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 262:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 263:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 264:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 265:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 266:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 267:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 268:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel parity mode
 269:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** */
 270:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 271:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 272:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 273:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 274:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 275:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 276:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 277:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 278:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data output mode
 279:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** */
 280:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 281:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 282:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 283:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 284:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 285:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 286:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 287:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status
 288:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** */
 289:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 290:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 291:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 292:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 293:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 294:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 295:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 296:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 297:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 298:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status modification
 299:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** */
 300:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 301:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 302:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 303:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 304:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 305:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 306:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 307:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive buffer status
 308:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** */
 309:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 310:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 311:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 312:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 313:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 314:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 315:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 316:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel output signal passive data level
 317:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** */
 318:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 319:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 320:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 321:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 322:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 323:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 324:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 325:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO size
 326:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** */
 327:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 328:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 329:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 330:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 331:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 332:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 333:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 334:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 335:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 336:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 337:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 338:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 339:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 340:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** */
 341:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 342:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 343:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 344:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 345:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 346:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 347:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 348:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO event configuration
 349:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** */
 350:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 351:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 352:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 353:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 354:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 355:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 356:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 357:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO status
 358:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** */
 359:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 360:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 361:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 362:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 363:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 364:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 365:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 366:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 367:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** */
 368:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 369:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 370:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 371:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 372:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 373:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 374:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 375:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO event configuration
 376:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** */
 377:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 378:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 379:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 380:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 381:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 382:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 383:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 384:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 385:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO status
 386:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** */
 387:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 388:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 389:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 390:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 391:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 392:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 393:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 394:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 395:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator clock source
 396:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** */
 397:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 398:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 399:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 400:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 401:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 402:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 403:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 404:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator divider mode
 405:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** */
 406:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 407:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 408:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 409:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 410:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 411:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 412:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 413:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 414:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 415:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** */
 416:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 417:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 418:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 419:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 420:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 421:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 422:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 423:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 424:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** */
 425:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 426:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 427:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 428:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 429:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 430:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 431:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 432:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 433:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 434:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock output
 435:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** */
 436:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 437:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 438:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 439:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 440:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 441:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 442:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 443:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * DATA STRUCTURES
 444:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 445:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 446:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard start*/
 447:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 448:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma push
 449:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma anon_unions
 450:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 451:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma warning 586
 452:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 453:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 454:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 455:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC module structure
 456:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 457:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 458:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 459:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 460:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file, 
 461:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * except for some registers.
 462:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 463:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 464:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 465:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 466:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** typedef struct XMC_USIC_CH
 467:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 468:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED0;
 469:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 470:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED1;
 471:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 472:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 473:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 474:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 475:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 476:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 477:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TCSR;
 478:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 479:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   union {
 480:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 481:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 482:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 483:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 484:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 485:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   };
 486:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 487:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 488:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 489:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   union {
 490:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 491:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 492:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 493:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 494:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 495:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   };
 496:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 497:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 498:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 499:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 500:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 501:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 502:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 503:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 504:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 505:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 506:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 507:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 508:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 509:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 510:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 511:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 512:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 513:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 514:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 515:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 516:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 517:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_t;
 518:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 519:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 520:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard end*/
 521:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 522:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma pop
 523:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 524:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma warning restore
 525:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 526:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 527:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 528:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * API PROTOTYPES
 529:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  ******************************************************************************/
 530:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 531:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #ifdef __cplusplus
 532:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** extern "C" {
 533:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 534:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 535:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 536:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 537:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 538:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 539:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = (module == XMC_USIC0);
 540:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 541:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 542:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 543:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 544:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 545:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 546:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 547:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 548:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** }
 549:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 550:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 551:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 552:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 553:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 554:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 555:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 556:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 557:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 558:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 559:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 560:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 561:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 562:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 563:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** }
 564:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 565:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /* Common APIs */
 566:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 567:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 568:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 569:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 570:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 571:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 572:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 573:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC module.\n\n
 574:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the clock for the USIC module by following the
 575:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * clock enabling sequence for the selected device.
 576:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 577:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 578:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 579:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 580:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 581:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 582:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 583:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 584:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 585:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 586:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 587:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC module.\n\n
 588:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 589:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * disabling sequence for the selected device.
 590:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 591:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 592:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 593:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 594:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 595:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 596:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 597:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 598:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 599:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 600:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 601:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC channel. \n\n
 602:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 603:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 604:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 605:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 606:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 607:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 608:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 609:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 610:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 611:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 612:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 613:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 614:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 615:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC channel.\n\n
 616:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 617:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 618:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 619:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 620:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 621:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 622:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 623:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 624:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 625:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 626:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 627:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 628:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 629:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 630:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 631:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 632:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 633:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 634:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 635:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 636:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 637:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 638:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 639:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * baudrate.
 640:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 641:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 642:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 643:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 644:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 645:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 646:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 647:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 648:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 649:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 650:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 651:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 652:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 653:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 654:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *                          output DXnT of the input stage.
 655:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 656:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 657:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 658:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 659:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 660:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 661:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 662:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 663:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 664:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 665:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 666:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 		                                         const uint16_t pdiv,
 667:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 												 const uint32_t oversampling,
 668:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 												 const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 669:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 670:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 671:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 672:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 673:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 674:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 675:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 676:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 677:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 678:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * </tr></table>
 679:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 680:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 681:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 682:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 683:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 684:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * like DX0CR, DX1CR etc. 
 685:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *  
 686:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 687:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 688:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 689:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 690:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 691:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 692:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 693:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 694:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** }
 695:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 696:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 697:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 698:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 699:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 700:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 701:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 702:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 703:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is controlled by the
 704:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * protocol pre-processor. \n\n
 705:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 706:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 707:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 708:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 709:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 710:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 711:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_INSW_Msk;
 712:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** }
 713:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 714:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 715:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 716:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 717:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 718:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 719:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 720:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 721:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 722:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is connected to
 723:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * the selected data input line. \n\n
 724:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 725:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * This setting is used
 726:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * if the signals are directly derived from an input
 727:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 728:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 729:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 730:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 731:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 732:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 733:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 734:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** }
 735:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 736:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 737:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 738:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 739:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 740:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 741:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 742:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 743:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 744:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 745:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 746:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 747:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 748:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 749:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 750:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 751:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 752:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 753:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** }
 754:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 755:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 756:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 757:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 758:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 759:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 760:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 761:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 762:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 763:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 764:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 765:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 766:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 767:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 768:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 769:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 770:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 771:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 772:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** }
 773:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 774:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 775:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 776:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 777:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 778:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 779:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 780:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables delay compensation. \n\n
 781:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 782:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 783:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 784:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 785:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 786:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 787:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 788:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 789:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** }
 790:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 791:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 792:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 793:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 794:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 795:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 796:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 797:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables delay compensation.. \n\n
 798:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 799:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 800:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 801:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 802:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 803:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 804:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] &=(uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 805:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** }
 806:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 807:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 808:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 809:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 810:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 811:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 812:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 813:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 814:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 815:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 816:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 817:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 818:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 819:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 820:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 821:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 822:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 823:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 824:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** }
 825:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 826:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 827:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 828:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 829:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 830:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 831:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 832:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 833:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 834:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 835:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 836:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 837:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 838:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 839:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 840:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 841:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 842:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** }
 843:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 844:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 845:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 846:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 847:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 848:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 849:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 850:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 851:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
 852:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
 853:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
 854:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 855:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 856:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 857:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 858:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
 859:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 860:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 861:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** }
 862:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 863:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 864:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 865:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 866:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 867:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 868:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 869:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 870:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
 871:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
 872:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 873:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 874:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
 875:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 876:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
 877:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 878:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DSEN_Msk;
 879:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** }
 880:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 881:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 882:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 883:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 884:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 885:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
 886:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 887:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 888:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 889:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
 890:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 891:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 892:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 893:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 894:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
 895:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_t input,
 896:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_fr
 897:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
 898:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
 899:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)sampling_freq);
 900:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** }
 901:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 902:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 903:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 904:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 905:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 906:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 907:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
 908:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 909:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 910:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 911:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
 912:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 913:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 914:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 915:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 916:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
 917:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_t input,
 918:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_COMBINATION_MODE_
 919:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
  27              	 .loc 1 919 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
  45 000c 1346     	 mov r3,r2
  46 000e BB70     	 strb r3,[r7,#2]
 920:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
  47              	 .loc 1 920 0
  48 0010 F878     	 ldrb r0,[r7,#3]
  49 0012 FB78     	 ldrb r3,[r7,#3]
  50 0014 7A68     	 ldr r2,[r7,#4]
  51 0016 0633     	 adds r3,r3,#6
  52 0018 9B00     	 lsls r3,r3,#2
  53 001a 1344     	 add r3,r3,r2
  54 001c 5B68     	 ldr r3,[r3,#4]
  55 001e 23F44062 	 bic r2,r3,#3072
 921:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
  56              	 .loc 1 921 0
  57 0022 BB78     	 ldrb r3,[r7,#2]
  58 0024 9B02     	 lsls r3,r3,#10
 920:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
  59              	 .loc 1 920 0
  60 0026 1A43     	 orrs r2,r2,r3
  61 0028 7968     	 ldr r1,[r7,#4]
  62 002a 831D     	 adds r3,r0,#6
  63 002c 9B00     	 lsls r3,r3,#2
  64 002e 0B44     	 add r3,r3,r1
  65 0030 5A60     	 str r2,[r3,#4]
 922:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** }
  66              	 .loc 1 922 0
  67 0032 0C37     	 adds r7,r7,#12
  68              	.LCFI3:
  69              	 .cfi_def_cfa_offset 4
  70 0034 BD46     	 mov sp,r7
  71              	.LCFI4:
  72              	 .cfi_def_cfa_register 13
  73              	 
  74 0036 5DF8047B 	 ldr r7,[sp],#4
  75              	.LCFI5:
  76              	 .cfi_restore 7
  77              	 .cfi_def_cfa_offset 0
  78 003a 7047     	 bx lr
  79              	 .cfi_endproc
  80              	.LFE142:
  82              	 .section .text.XMC_USIC_CH_SetBRGInputClockSource,"ax",%progbits
  83              	 .align 2
  84              	 .thumb
  85              	 .thumb_func
  87              	XMC_USIC_CH_SetBRGInputClockSource:
  88              	.LFB143:
 923:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** 
 924:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** /**
 925:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 926:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 927:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  clock_source clock source for the BRG.
 928:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 929:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 930:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 931:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
 932:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  *
 933:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 934:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
 935:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****  */
 936:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
 937:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** {
  89              	 .loc 1 937 0
  90              	 .cfi_startproc
  91              	 
  92              	 
  93              	 
  94 0000 80B4     	 push {r7}
  95              	.LCFI6:
  96              	 .cfi_def_cfa_offset 4
  97              	 .cfi_offset 7,-4
  98 0002 83B0     	 sub sp,sp,#12
  99              	.LCFI7:
 100              	 .cfi_def_cfa_offset 16
 101 0004 00AF     	 add r7,sp,#0
 102              	.LCFI8:
 103              	 .cfi_def_cfa_register 7
 104 0006 7860     	 str r0,[r7,#4]
 105 0008 0B46     	 mov r3,r1
 106 000a FB70     	 strb r3,[r7,#3]
 938:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
 107              	 .loc 1 938 0
 108 000c 7B68     	 ldr r3,[r7,#4]
 109 000e 5B69     	 ldr r3,[r3,#20]
 110 0010 23F00302 	 bic r2,r3,#3
 111 0014 FB78     	 ldrb r3,[r7,#3]
 112 0016 1A43     	 orrs r2,r2,r3
 113 0018 7B68     	 ldr r3,[r7,#4]
 114 001a 5A61     	 str r2,[r3,#20]
 939:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_usic.h **** }
 115              	 .loc 1 939 0
 116 001c 0C37     	 adds r7,r7,#12
 117              	.LCFI9:
 118              	 .cfi_def_cfa_offset 4
 119 001e BD46     	 mov sp,r7
 120              	.LCFI10:
 121              	 .cfi_def_cfa_register 13
 122              	 
 123 0020 5DF8047B 	 ldr r7,[sp],#4
 124              	.LCFI11:
 125              	 .cfi_restore 7
 126              	 .cfi_def_cfa_offset 0
 127 0024 7047     	 bx lr
 128              	 .cfi_endproc
 129              	.LFE143:
 131 0026 00BF     	 .section .text.XMC_USIC_CH_Enable,"ax",%progbits
 132              	 .align 2
 133              	 .global XMC_USIC_CH_Enable
 134              	 .thumb
 135              	 .thumb_func
 137              	XMC_USIC_CH_Enable:
 138              	.LFB218:
 139              	 .file 2 "../Libraries/XMCLib/src/xmc_usic.c"
   1:../Libraries/XMCLib/src/xmc_usic.c **** /**
   2:../Libraries/XMCLib/src/xmc_usic.c ****  * @file xmc_usic.c
   3:../Libraries/XMCLib/src/xmc_usic.c ****  * @date 2015-09-01
   4:../Libraries/XMCLib/src/xmc_usic.c ****  *
   5:../Libraries/XMCLib/src/xmc_usic.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_usic.c ****   *************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_usic.c ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_usic.c ****  *
   9:../Libraries/XMCLib/src/xmc_usic.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_usic.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_usic.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_usic.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_usic.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_usic.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_usic.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_usic.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_usic.c ****  * 
  18:../Libraries/XMCLib/src/xmc_usic.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_usic.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_usic.c ****  * 
  21:../Libraries/XMCLib/src/xmc_usic.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_usic.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_usic.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_usic.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_usic.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_usic.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_usic.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_usic.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_usic.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_usic.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_usic.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_usic.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_usic.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_usic.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_usic.c ****  *
  36:../Libraries/XMCLib/src/xmc_usic.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_usic.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_usic.c ****  *
  39:../Libraries/XMCLib/src/xmc_usic.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_usic.c ****  *     - Initial draft <br>
  41:../Libraries/XMCLib/src/xmc_usic.c ****  *     - Documentation improved <br>
  42:../Libraries/XMCLib/src/xmc_usic.c ****  *
  43:../Libraries/XMCLib/src/xmc_usic.c ****  * 2015-05-08:
  44:../Libraries/XMCLib/src/xmc_usic.c ****  *     - Clearing bit fields PDIV, PCTQ, PPPEN in XMC_USIC_CH_SetBaudrate() API <br>
  45:../Libraries/XMCLib/src/xmc_usic.c ****  *      
  46:../Libraries/XMCLib/src/xmc_usic.c ****  * 2015-06-20:
  47:../Libraries/XMCLib/src/xmc_usic.c ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  48:../Libraries/XMCLib/src/xmc_usic.c ****  *
  49:../Libraries/XMCLib/src/xmc_usic.c ****  * 2015-08-27:
  50:../Libraries/XMCLib/src/xmc_usic.c ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  51:../Libraries/XMCLib/src/xmc_usic.c ****  *
  52:../Libraries/XMCLib/src/xmc_usic.c ****  * 2015-08-28:
  53:../Libraries/XMCLib/src/xmc_usic.c ****  *     - Added asserts to XMC_USIC_CH_ConfigExternalInputSignalToBRG() <br>
  54:../Libraries/XMCLib/src/xmc_usic.c ****  *
  55:../Libraries/XMCLib/src/xmc_usic.c ****  * 2015-09-01:
  56:../Libraries/XMCLib/src/xmc_usic.c ****  *     - Fixed warning in the asserts <br>
  57:../Libraries/XMCLib/src/xmc_usic.c ****  *
  58:../Libraries/XMCLib/src/xmc_usic.c ****  * @endcond
  59:../Libraries/XMCLib/src/xmc_usic.c ****  *
  60:../Libraries/XMCLib/src/xmc_usic.c ****  */
  61:../Libraries/XMCLib/src/xmc_usic.c **** 
  62:../Libraries/XMCLib/src/xmc_usic.c **** /*******************************************************************************
  63:../Libraries/XMCLib/src/xmc_usic.c ****  * HEADER FILES
  64:../Libraries/XMCLib/src/xmc_usic.c ****  *******************************************************************************/
  65:../Libraries/XMCLib/src/xmc_usic.c **** 
  66:../Libraries/XMCLib/src/xmc_usic.c **** #include "xmc_usic.h"
  67:../Libraries/XMCLib/src/xmc_usic.c **** #include "xmc_scu.h"
  68:../Libraries/XMCLib/src/xmc_usic.c **** 
  69:../Libraries/XMCLib/src/xmc_usic.c **** /*******************************************************************************
  70:../Libraries/XMCLib/src/xmc_usic.c ****  * MACROS
  71:../Libraries/XMCLib/src/xmc_usic.c ****  *******************************************************************************/
  72:../Libraries/XMCLib/src/xmc_usic.c **** 
  73:../Libraries/XMCLib/src/xmc_usic.c **** #define USIC_CH_INPR_Msk       (0x7UL)
  74:../Libraries/XMCLib/src/xmc_usic.c **** 
  75:../Libraries/XMCLib/src/xmc_usic.c **** /*******************************************************************************
  76:../Libraries/XMCLib/src/xmc_usic.c ****  * API IMPLEMENTATION
  77:../Libraries/XMCLib/src/xmc_usic.c ****  *******************************************************************************/
  78:../Libraries/XMCLib/src/xmc_usic.c **** 
  79:../Libraries/XMCLib/src/xmc_usic.c **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
  80:../Libraries/XMCLib/src/xmc_usic.c **** {
 140              	 .loc 2 80 0
 141              	 .cfi_startproc
 142              	 
 143              	 
 144 0000 80B5     	 push {r7,lr}
 145              	.LCFI12:
 146              	 .cfi_def_cfa_offset 8
 147              	 .cfi_offset 7,-8
 148              	 .cfi_offset 14,-4
 149 0002 82B0     	 sub sp,sp,#8
 150              	.LCFI13:
 151              	 .cfi_def_cfa_offset 16
 152 0004 00AF     	 add r7,sp,#0
 153              	.LCFI14:
 154              	 .cfi_def_cfa_register 7
 155 0006 7860     	 str r0,[r7,#4]
  81:../Libraries/XMCLib/src/xmc_usic.c ****   XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));
  82:../Libraries/XMCLib/src/xmc_usic.c **** 
  83:../Libraries/XMCLib/src/xmc_usic.c ****   if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 156              	 .loc 2 83 0
 157 0008 7B68     	 ldr r3,[r7,#4]
 158 000a 144A     	 ldr r2,.L9
 159 000c 9342     	 cmp r3,r2
 160 000e 03D0     	 beq .L4
 161              	 .loc 2 83 0 is_stmt 0 discriminator 1
 162 0010 7B68     	 ldr r3,[r7,#4]
 163 0012 134A     	 ldr r2,.L9+4
 164 0014 9342     	 cmp r3,r2
 165 0016 03D1     	 bne .L5
 166              	.L4:
  84:../Libraries/XMCLib/src/xmc_usic.c ****   {
  85:../Libraries/XMCLib/src/xmc_usic.c ****     XMC_USIC_Enable(XMC_USIC0);
 167              	 .loc 2 85 0 is_stmt 1
 168 0018 1248     	 ldr r0,.L9+8
 169 001a FFF7FEFF 	 bl XMC_USIC_Enable
 170 001e 0AE0     	 b .L6
 171              	.L5:
  86:../Libraries/XMCLib/src/xmc_usic.c ****   }
  87:../Libraries/XMCLib/src/xmc_usic.c **** #if defined(USIC1)
  88:../Libraries/XMCLib/src/xmc_usic.c ****   else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 172              	 .loc 2 88 0
 173 0020 7B68     	 ldr r3,[r7,#4]
 174 0022 114A     	 ldr r2,.L9+12
 175 0024 9342     	 cmp r3,r2
 176 0026 03D0     	 beq .L7
 177              	 .loc 2 88 0 is_stmt 0 discriminator 1
 178 0028 7B68     	 ldr r3,[r7,#4]
 179 002a 104A     	 ldr r2,.L9+16
 180 002c 9342     	 cmp r3,r2
 181 002e 02D1     	 bne .L6
 182              	.L7:
  89:../Libraries/XMCLib/src/xmc_usic.c ****   {
  90:../Libraries/XMCLib/src/xmc_usic.c ****     XMC_USIC_Enable(XMC_USIC1);
 183              	 .loc 2 90 0 is_stmt 1
 184 0030 0F48     	 ldr r0,.L9+20
 185 0032 FFF7FEFF 	 bl XMC_USIC_Enable
 186              	.L6:
  91:../Libraries/XMCLib/src/xmc_usic.c ****   }
  92:../Libraries/XMCLib/src/xmc_usic.c **** #endif
  93:../Libraries/XMCLib/src/xmc_usic.c **** #if defined(USIC2)
  94:../Libraries/XMCLib/src/xmc_usic.c ****   else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
  95:../Libraries/XMCLib/src/xmc_usic.c ****   {
  96:../Libraries/XMCLib/src/xmc_usic.c ****     XMC_USIC_Enable(XMC_USIC2);
  97:../Libraries/XMCLib/src/xmc_usic.c ****   }
  98:../Libraries/XMCLib/src/xmc_usic.c **** #endif
  99:../Libraries/XMCLib/src/xmc_usic.c ****   else
 100:../Libraries/XMCLib/src/xmc_usic.c ****   {
 101:../Libraries/XMCLib/src/xmc_usic.c ****     XMC_ASSERT("USIC module not available", 0U/*Always*/);
 102:../Libraries/XMCLib/src/xmc_usic.c ****   }
 103:../Libraries/XMCLib/src/xmc_usic.c **** 
 104:../Libraries/XMCLib/src/xmc_usic.c ****   /* USIC channel switched on*/
 105:../Libraries/XMCLib/src/xmc_usic.c ****   channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 187              	 .loc 2 105 0
 188 0036 7B68     	 ldr r3,[r7,#4]
 189 0038 0322     	 movs r2,#3
 190 003a DA60     	 str r2,[r3,#12]
 106:../Libraries/XMCLib/src/xmc_usic.c ****   while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 191              	 .loc 2 106 0
 192 003c 00BF     	 nop
 193              	.L8:
 194              	 .loc 2 106 0 is_stmt 0 discriminator 1
 195 003e 7B68     	 ldr r3,[r7,#4]
 196 0040 DB68     	 ldr r3,[r3,#12]
 197 0042 03F00103 	 and r3,r3,#1
 198 0046 002B     	 cmp r3,#0
 199 0048 F9D0     	 beq .L8
 107:../Libraries/XMCLib/src/xmc_usic.c ****   {
 108:../Libraries/XMCLib/src/xmc_usic.c ****     /* Wait till the channel is enabled */
 109:../Libraries/XMCLib/src/xmc_usic.c ****   }
 110:../Libraries/XMCLib/src/xmc_usic.c **** 
 111:../Libraries/XMCLib/src/xmc_usic.c ****   /* Set USIC channel in IDLE mode */
 112:../Libraries/XMCLib/src/xmc_usic.c ****   channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 200              	 .loc 2 112 0 is_stmt 1
 201 004a 7B68     	 ldr r3,[r7,#4]
 202 004c 1B6C     	 ldr r3,[r3,#64]
 203 004e 23F00F02 	 bic r2,r3,#15
 204 0052 7B68     	 ldr r3,[r7,#4]
 205 0054 1A64     	 str r2,[r3,#64]
 113:../Libraries/XMCLib/src/xmc_usic.c **** }
 206              	 .loc 2 113 0
 207 0056 0837     	 adds r7,r7,#8
 208              	.LCFI15:
 209              	 .cfi_def_cfa_offset 8
 210 0058 BD46     	 mov sp,r7
 211              	.LCFI16:
 212              	 .cfi_def_cfa_register 13
 213              	 
 214 005a 80BD     	 pop {r7,pc}
 215              	.L10:
 216              	 .align 2
 217              	.L9:
 218 005c 00000340 	 .word 1073938432
 219 0060 00020340 	 .word 1073938944
 220 0064 08000340 	 .word 1073938440
 221 0068 00000248 	 .word 1208090624
 222 006c 00020248 	 .word 1208091136
 223 0070 08000248 	 .word 1208090632
 224              	 .cfi_endproc
 225              	.LFE218:
 227              	 .section .text.XMC_USIC_CH_Disable,"ax",%progbits
 228              	 .align 2
 229              	 .global XMC_USIC_CH_Disable
 230              	 .thumb
 231              	 .thumb_func
 233              	XMC_USIC_CH_Disable:
 234              	.LFB219:
 114:../Libraries/XMCLib/src/xmc_usic.c **** 
 115:../Libraries/XMCLib/src/xmc_usic.c **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel)
 116:../Libraries/XMCLib/src/xmc_usic.c **** {
 235              	 .loc 2 116 0
 236              	 .cfi_startproc
 237              	 
 238              	 
 239              	 
 240 0000 80B4     	 push {r7}
 241              	.LCFI17:
 242              	 .cfi_def_cfa_offset 4
 243              	 .cfi_offset 7,-4
 244 0002 83B0     	 sub sp,sp,#12
 245              	.LCFI18:
 246              	 .cfi_def_cfa_offset 16
 247 0004 00AF     	 add r7,sp,#0
 248              	.LCFI19:
 249              	 .cfi_def_cfa_register 7
 250 0006 7860     	 str r0,[r7,#4]
 117:../Libraries/XMCLib/src/xmc_usic.c ****   channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN
 251              	 .loc 2 117 0
 252 0008 7B68     	 ldr r3,[r7,#4]
 253 000a DB68     	 ldr r3,[r3,#12]
 254 000c 23F00303 	 bic r3,r3,#3
 255 0010 43F00202 	 orr r2,r3,#2
 256 0014 7B68     	 ldr r3,[r7,#4]
 257 0016 DA60     	 str r2,[r3,#12]
 118:../Libraries/XMCLib/src/xmc_usic.c **** }
 258              	 .loc 2 118 0
 259 0018 0C37     	 adds r7,r7,#12
 260              	.LCFI20:
 261              	 .cfi_def_cfa_offset 4
 262 001a BD46     	 mov sp,r7
 263              	.LCFI21:
 264              	 .cfi_def_cfa_register 13
 265              	 
 266 001c 5DF8047B 	 ldr r7,[sp],#4
 267              	.LCFI22:
 268              	 .cfi_restore 7
 269              	 .cfi_def_cfa_offset 0
 270 0020 7047     	 bx lr
 271              	 .cfi_endproc
 272              	.LFE219:
 274 0022 00BF     	 .section .text.XMC_USIC_CH_SetBaudrate,"ax",%progbits
 275              	 .align 2
 276              	 .global XMC_USIC_CH_SetBaudrate
 277              	 .thumb
 278              	 .thumb_func
 280              	XMC_USIC_CH_SetBaudrate:
 281              	.LFB220:
 119:../Libraries/XMCLib/src/xmc_usic.c **** 
 120:../Libraries/XMCLib/src/xmc_usic.c **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 121:../Libraries/XMCLib/src/xmc_usic.c **** {
 282              	 .loc 2 121 0
 283              	 .cfi_startproc
 284              	 
 285              	 
 286 0000 80B5     	 push {r7,lr}
 287              	.LCFI23:
 288              	 .cfi_def_cfa_offset 8
 289              	 .cfi_offset 7,-8
 290              	 .cfi_offset 14,-4
 291 0002 8EB0     	 sub sp,sp,#56
 292              	.LCFI24:
 293              	 .cfi_def_cfa_offset 64
 294 0004 00AF     	 add r7,sp,#0
 295              	.LCFI25:
 296              	 .cfi_def_cfa_register 7
 297 0006 F860     	 str r0,[r7,#12]
 298 0008 B960     	 str r1,[r7,#8]
 299 000a 7A60     	 str r2,[r7,#4]
 122:../Libraries/XMCLib/src/xmc_usic.c ****   XMC_USIC_CH_STATUS_t status;
 123:../Libraries/XMCLib/src/xmc_usic.c ****   
 124:../Libraries/XMCLib/src/xmc_usic.c ****   uint32_t peripheral_clock;
 125:../Libraries/XMCLib/src/xmc_usic.c ****   
 126:../Libraries/XMCLib/src/xmc_usic.c ****   uint32_t clock_divider;
 127:../Libraries/XMCLib/src/xmc_usic.c ****   uint32_t clock_divider_min;
 128:../Libraries/XMCLib/src/xmc_usic.c **** 
 129:../Libraries/XMCLib/src/xmc_usic.c ****   uint32_t pdiv;
 130:../Libraries/XMCLib/src/xmc_usic.c ****   uint32_t pdiv_int;
 131:../Libraries/XMCLib/src/xmc_usic.c ****   uint32_t pdiv_int_min;
 132:../Libraries/XMCLib/src/xmc_usic.c ****   
 133:../Libraries/XMCLib/src/xmc_usic.c ****   uint32_t pdiv_frac;
 134:../Libraries/XMCLib/src/xmc_usic.c ****   uint32_t pdiv_frac_min;
 135:../Libraries/XMCLib/src/xmc_usic.c **** 
 136:../Libraries/XMCLib/src/xmc_usic.c ****   /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
 137:../Libraries/XMCLib/src/xmc_usic.c ****   if ((rate >= 100U) && (oversampling != 0U))
 300              	 .loc 2 137 0
 301 000c BB68     	 ldr r3,[r7,#8]
 302 000e 632B     	 cmp r3,#99
 303 0010 58D9     	 bls .L13
 304              	 .loc 2 137 0 is_stmt 0 discriminator 1
 305 0012 7B68     	 ldr r3,[r7,#4]
 306 0014 002B     	 cmp r3,#0
 307 0016 55D0     	 beq .L13
 138:../Libraries/XMCLib/src/xmc_usic.c ****   {
 139:../Libraries/XMCLib/src/xmc_usic.c ****     peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 308              	 .loc 2 139 0 is_stmt 1
 309 0018 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 310 001c 0246     	 mov r2,r0
 311 001e 2E4B     	 ldr r3,.L19
 312 0020 A3FB0223 	 umull r2,r3,r3,r2
 313 0024 5B09     	 lsrs r3,r3,#5
 314 0026 3B62     	 str r3,[r7,#32]
 140:../Libraries/XMCLib/src/xmc_usic.c ****     rate = rate / 100U;
 315              	 .loc 2 140 0
 316 0028 BB68     	 ldr r3,[r7,#8]
 317 002a 2B4A     	 ldr r2,.L19
 318 002c A2FB0323 	 umull r2,r3,r2,r3
 319 0030 5B09     	 lsrs r3,r3,#5
 320 0032 BB60     	 str r3,[r7,#8]
 141:../Libraries/XMCLib/src/xmc_usic.c **** 
 142:../Libraries/XMCLib/src/xmc_usic.c ****     clock_divider_min = 1U;
 321              	 .loc 2 142 0
 322 0034 0123     	 movs r3,#1
 323 0036 FB62     	 str r3,[r7,#44]
 143:../Libraries/XMCLib/src/xmc_usic.c ****     pdiv_int_min = 1U;
 324              	 .loc 2 143 0
 325 0038 0123     	 movs r3,#1
 326 003a BB62     	 str r3,[r7,#40]
 144:../Libraries/XMCLib/src/xmc_usic.c ****     pdiv_frac_min = 0x3ffU;
 327              	 .loc 2 144 0
 328 003c 40F2FF33 	 movw r3,#1023
 329 0040 7B62     	 str r3,[r7,#36]
 145:../Libraries/XMCLib/src/xmc_usic.c **** 
 146:../Libraries/XMCLib/src/xmc_usic.c ****     for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 330              	 .loc 2 146 0
 331 0042 40F2FF33 	 movw r3,#1023
 332 0046 3B63     	 str r3,[r7,#48]
 333 0048 22E0     	 b .L14
 334              	.L16:
 147:../Libraries/XMCLib/src/xmc_usic.c ****     {
 148:../Libraries/XMCLib/src/xmc_usic.c ****       pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 335              	 .loc 2 148 0
 336 004a 3B6A     	 ldr r3,[r7,#32]
 337 004c 3A6B     	 ldr r2,[r7,#48]
 338 004e 02FB03F2 	 mul r2,r2,r3
 339 0052 BB68     	 ldr r3,[r7,#8]
 340 0054 7968     	 ldr r1,[r7,#4]
 341 0056 01FB03F3 	 mul r3,r1,r3
 342 005a B2FBF3F3 	 udiv r3,r2,r3
 343 005e FB61     	 str r3,[r7,#28]
 149:../Libraries/XMCLib/src/xmc_usic.c ****       pdiv_int = pdiv >> 10U;
 344              	 .loc 2 149 0
 345 0060 FB69     	 ldr r3,[r7,#28]
 346 0062 9B0A     	 lsrs r3,r3,#10
 347 0064 BB61     	 str r3,[r7,#24]
 150:../Libraries/XMCLib/src/xmc_usic.c ****       pdiv_frac = pdiv & 0x3ffU;
 348              	 .loc 2 150 0
 349 0066 FB69     	 ldr r3,[r7,#28]
 350 0068 C3F30903 	 ubfx r3,r3,#0,#10
 351 006c 7B61     	 str r3,[r7,#20]
 151:../Libraries/XMCLib/src/xmc_usic.c **** 
 152:../Libraries/XMCLib/src/xmc_usic.c ****       if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 352              	 .loc 2 152 0
 353 006e BB69     	 ldr r3,[r7,#24]
 354 0070 B3F5806F 	 cmp r3,#1024
 355 0074 09D2     	 bcs .L15
 356              	 .loc 2 152 0 is_stmt 0 discriminator 1
 357 0076 7A69     	 ldr r2,[r7,#20]
 358 0078 7B6A     	 ldr r3,[r7,#36]
 359 007a 9A42     	 cmp r2,r3
 360 007c 05D2     	 bcs .L15
 153:../Libraries/XMCLib/src/xmc_usic.c ****       {
 154:../Libraries/XMCLib/src/xmc_usic.c ****         pdiv_frac_min = pdiv_frac;
 361              	 .loc 2 154 0 is_stmt 1
 362 007e 7B69     	 ldr r3,[r7,#20]
 363 0080 7B62     	 str r3,[r7,#36]
 155:../Libraries/XMCLib/src/xmc_usic.c ****         pdiv_int_min = pdiv_int;
 364              	 .loc 2 155 0
 365 0082 BB69     	 ldr r3,[r7,#24]
 366 0084 BB62     	 str r3,[r7,#40]
 156:../Libraries/XMCLib/src/xmc_usic.c ****         clock_divider_min = clock_divider;
 367              	 .loc 2 156 0
 368 0086 3B6B     	 ldr r3,[r7,#48]
 369 0088 FB62     	 str r3,[r7,#44]
 370              	.L15:
 146:../Libraries/XMCLib/src/xmc_usic.c ****     {
 371              	 .loc 2 146 0 discriminator 2
 372 008a 3B6B     	 ldr r3,[r7,#48]
 373 008c 013B     	 subs r3,r3,#1
 374 008e 3B63     	 str r3,[r7,#48]
 375              	.L14:
 146:../Libraries/XMCLib/src/xmc_usic.c ****     {
 376              	 .loc 2 146 0 is_stmt 0 discriminator 1
 377 0090 3B6B     	 ldr r3,[r7,#48]
 378 0092 002B     	 cmp r3,#0
 379 0094 D9D1     	 bne .L16
 157:../Libraries/XMCLib/src/xmc_usic.c ****       }
 158:../Libraries/XMCLib/src/xmc_usic.c ****     }
 159:../Libraries/XMCLib/src/xmc_usic.c **** 
 160:../Libraries/XMCLib/src/xmc_usic.c ****     channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 380              	 .loc 2 160 0 is_stmt 1
 381 0096 FB6A     	 ldr r3,[r7,#44]
 382 0098 43F40042 	 orr r2,r3,#32768
 383 009c FB68     	 ldr r3,[r7,#12]
 384 009e 1A61     	 str r2,[r3,#16]
 161:../Libraries/XMCLib/src/xmc_usic.c ****                    (clock_divider_min << USIC_CH_FDR_STEP_Pos);
 162:../Libraries/XMCLib/src/xmc_usic.c **** 
 163:../Libraries/XMCLib/src/xmc_usic.c ****     channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 385              	 .loc 2 163 0
 386 00a0 FB68     	 ldr r3,[r7,#12]
 387 00a2 5A69     	 ldr r2,[r3,#20]
 388 00a4 0D4B     	 ldr r3,.L19+4
 389 00a6 1340     	 ands r3,r3,r2
 164:../Libraries/XMCLib/src/xmc_usic.c ****                                      USIC_CH_BRG_PDIV_Msk |
 165:../Libraries/XMCLib/src/xmc_usic.c ****                                      USIC_CH_BRG_PCTQ_Msk |
 166:../Libraries/XMCLib/src/xmc_usic.c ****                                      USIC_CH_BRG_PPPEN_Msk)) |
 167:../Libraries/XMCLib/src/xmc_usic.c ****                    ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 390              	 .loc 2 167 0
 391 00a8 7A68     	 ldr r2,[r7,#4]
 392 00aa 013A     	 subs r2,r2,#1
 393 00ac 9202     	 lsls r2,r2,#10
 166:../Libraries/XMCLib/src/xmc_usic.c ****                    ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 394              	 .loc 2 166 0
 395 00ae 1A43     	 orrs r2,r2,r3
 168:../Libraries/XMCLib/src/xmc_usic.c ****                    ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 396              	 .loc 2 168 0
 397 00b0 BB6A     	 ldr r3,[r7,#40]
 398 00b2 013B     	 subs r3,r3,#1
 399 00b4 1B04     	 lsls r3,r3,#16
 167:../Libraries/XMCLib/src/xmc_usic.c ****                    ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 400              	 .loc 2 167 0
 401 00b6 1A43     	 orrs r2,r2,r3
 163:../Libraries/XMCLib/src/xmc_usic.c ****                                      USIC_CH_BRG_PDIV_Msk |
 402              	 .loc 2 163 0
 403 00b8 FB68     	 ldr r3,[r7,#12]
 404 00ba 5A61     	 str r2,[r3,#20]
 169:../Libraries/XMCLib/src/xmc_usic.c ****                     
 170:../Libraries/XMCLib/src/xmc_usic.c ****     status = XMC_USIC_CH_STATUS_OK;
 405              	 .loc 2 170 0
 406 00bc 0023     	 movs r3,#0
 407 00be 87F83730 	 strb r3,[r7,#55]
 408 00c2 02E0     	 b .L17
 409              	.L13:
 171:../Libraries/XMCLib/src/xmc_usic.c ****   }
 172:../Libraries/XMCLib/src/xmc_usic.c ****   else 
 173:../Libraries/XMCLib/src/xmc_usic.c ****   {
 174:../Libraries/XMCLib/src/xmc_usic.c ****     status = XMC_USIC_CH_STATUS_ERROR;
 410              	 .loc 2 174 0
 411 00c4 0123     	 movs r3,#1
 412 00c6 87F83730 	 strb r3,[r7,#55]
 413              	.L17:
 175:../Libraries/XMCLib/src/xmc_usic.c ****   }
 176:../Libraries/XMCLib/src/xmc_usic.c ****   
 177:../Libraries/XMCLib/src/xmc_usic.c ****   return status;
 414              	 .loc 2 177 0
 415 00ca 97F83730 	 ldrb r3,[r7,#55]
 178:../Libraries/XMCLib/src/xmc_usic.c **** }
 416              	 .loc 2 178 0
 417 00ce 1846     	 mov r0,r3
 418 00d0 3837     	 adds r7,r7,#56
 419              	.LCFI26:
 420              	 .cfi_def_cfa_offset 8
 421 00d2 BD46     	 mov sp,r7
 422              	.LCFI27:
 423              	 .cfi_def_cfa_register 13
 424              	 
 425 00d4 80BD     	 pop {r7,pc}
 426              	.L20:
 427 00d6 00BF     	 .align 2
 428              	.L19:
 429 00d8 1F85EB51 	 .word 1374389535
 430 00dc EF8000FC 	 .word -67075857
 431              	 .cfi_endproc
 432              	.LFE220:
 434              	 .section .text.XMC_USIC_CH_ConfigExternalInputSignalToBRG,"ax",%progbits
 435              	 .align 2
 436              	 .global XMC_USIC_CH_ConfigExternalInputSignalToBRG
 437              	 .thumb
 438              	 .thumb_func
 440              	XMC_USIC_CH_ConfigExternalInputSignalToBRG:
 441              	.LFB221:
 179:../Libraries/XMCLib/src/xmc_usic.c **** 
 180:../Libraries/XMCLib/src/xmc_usic.c **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 181:../Libraries/XMCLib/src/xmc_usic.c **** 		                                        const uint16_t pdiv,
 182:../Libraries/XMCLib/src/xmc_usic.c **** 												const uint32_t oversampling,
 183:../Libraries/XMCLib/src/xmc_usic.c **** 												const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode)
 184:../Libraries/XMCLib/src/xmc_usic.c **** {
 442              	 .loc 2 184 0
 443              	 .cfi_startproc
 444              	 
 445              	 
 446 0000 80B5     	 push {r7,lr}
 447              	.LCFI28:
 448              	 .cfi_def_cfa_offset 8
 449              	 .cfi_offset 7,-8
 450              	 .cfi_offset 14,-4
 451 0002 84B0     	 sub sp,sp,#16
 452              	.LCFI29:
 453              	 .cfi_def_cfa_offset 24
 454 0004 00AF     	 add r7,sp,#0
 455              	.LCFI30:
 456              	 .cfi_def_cfa_register 7
 457 0006 F860     	 str r0,[r7,#12]
 458 0008 7A60     	 str r2,[r7,#4]
 459 000a 1A46     	 mov r2,r3
 460 000c 0B46     	 mov r3,r1
 461 000e 7B81     	 strh r3,[r7,#10]
 462 0010 1346     	 mov r3,r2
 463 0012 7B72     	 strb r3,[r7,#9]
 185:../Libraries/XMCLib/src/xmc_usic.c ****   XMC_ASSERT("XMC_USIC_CH_ConfigExternalInputSignalToBRG: Divider out of range", ((1U < pdiv) || (p
 186:../Libraries/XMCLib/src/xmc_usic.c ****   XMC_ASSERT("XMC_USIC_CH_ConfigExternalInputSignalToBRG: Oversampling out of range", ((1U < oversa
 187:../Libraries/XMCLib/src/xmc_usic.c **** 
 188:../Libraries/XMCLib/src/xmc_usic.c ****   /* Setting the external input frequency source through DX1 */
 189:../Libraries/XMCLib/src/xmc_usic.c ****   XMC_USIC_CH_SetBRGInputClockSource(channel, XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T);
 464              	 .loc 2 189 0
 465 0014 F868     	 ldr r0,[r7,#12]
 466 0016 0221     	 movs r1,#2
 467 0018 FFF7FEFF 	 bl XMC_USIC_CH_SetBRGInputClockSource
 190:../Libraries/XMCLib/src/xmc_usic.c **** 
 191:../Libraries/XMCLib/src/xmc_usic.c ****   /* Setting the trigger combination mode */
 192:../Libraries/XMCLib/src/xmc_usic.c ****   XMC_USIC_CH_SetInputTriggerCombinationMode(channel,XMC_USIC_CH_INPUT_DX1,combination_mode);
 468              	 .loc 2 192 0
 469 001c 7B7A     	 ldrb r3,[r7,#9]
 470 001e F868     	 ldr r0,[r7,#12]
 471 0020 0121     	 movs r1,#1
 472 0022 1A46     	 mov r2,r3
 473 0024 FFF7FEFF 	 bl XMC_USIC_CH_SetInputTriggerCombinationMode
 193:../Libraries/XMCLib/src/xmc_usic.c **** 
 194:../Libraries/XMCLib/src/xmc_usic.c ****   /* Configuring the dividers and oversampling */
 195:../Libraries/XMCLib/src/xmc_usic.c ****   channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 474              	 .loc 2 195 0
 475 0028 FB68     	 ldr r3,[r7,#12]
 476 002a 5A69     	 ldr r2,[r3,#20]
 477 002c 074B     	 ldr r3,.L22
 478 002e 1340     	 ands r3,r3,r2
 196:../Libraries/XMCLib/src/xmc_usic.c ****                                    USIC_CH_BRG_PDIV_Msk |
 197:../Libraries/XMCLib/src/xmc_usic.c ****                                    USIC_CH_BRG_PCTQ_Msk |
 198:../Libraries/XMCLib/src/xmc_usic.c ****                                    USIC_CH_BRG_PPPEN_Msk)) |
 199:../Libraries/XMCLib/src/xmc_usic.c ****                   (((oversampling) - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 479              	 .loc 2 199 0
 480 0030 7A68     	 ldr r2,[r7,#4]
 481 0032 013A     	 subs r2,r2,#1
 482 0034 9202     	 lsls r2,r2,#10
 198:../Libraries/XMCLib/src/xmc_usic.c ****                   (((oversampling) - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 483              	 .loc 2 198 0
 484 0036 1A43     	 orrs r2,r2,r3
 200:../Libraries/XMCLib/src/xmc_usic.c ****                   (((pdiv) - 1U) << USIC_CH_BRG_PDIV_Pos);
 485              	 .loc 2 200 0
 486 0038 7B89     	 ldrh r3,[r7,#10]
 487 003a 013B     	 subs r3,r3,#1
 488 003c 1B04     	 lsls r3,r3,#16
 199:../Libraries/XMCLib/src/xmc_usic.c ****                   (((pdiv) - 1U) << USIC_CH_BRG_PDIV_Pos);
 489              	 .loc 2 199 0
 490 003e 1A43     	 orrs r2,r2,r3
 195:../Libraries/XMCLib/src/xmc_usic.c ****                                    USIC_CH_BRG_PDIV_Msk |
 491              	 .loc 2 195 0
 492 0040 FB68     	 ldr r3,[r7,#12]
 493 0042 5A61     	 str r2,[r3,#20]
 201:../Libraries/XMCLib/src/xmc_usic.c **** }
 494              	 .loc 2 201 0
 495 0044 1037     	 adds r7,r7,#16
 496              	.LCFI31:
 497              	 .cfi_def_cfa_offset 8
 498 0046 BD46     	 mov sp,r7
 499              	.LCFI32:
 500              	 .cfi_def_cfa_register 13
 501              	 
 502 0048 80BD     	 pop {r7,pc}
 503              	.L23:
 504 004a 00BF     	 .align 2
 505              	.L22:
 506 004c EF8000FC 	 .word -67075857
 507              	 .cfi_endproc
 508              	.LFE221:
 510              	 .section .text.XMC_USIC_CH_TXFIFO_Configure,"ax",%progbits
 511              	 .align 2
 512              	 .global XMC_USIC_CH_TXFIFO_Configure
 513              	 .thumb
 514              	 .thumb_func
 516              	XMC_USIC_CH_TXFIFO_Configure:
 517              	.LFB222:
 202:../Libraries/XMCLib/src/xmc_usic.c **** 
 203:../Libraries/XMCLib/src/xmc_usic.c **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
 204:../Libraries/XMCLib/src/xmc_usic.c ****                                   const uint32_t data_pointer,
 205:../Libraries/XMCLib/src/xmc_usic.c ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
 206:../Libraries/XMCLib/src/xmc_usic.c ****                                   const uint32_t limit)
 207:../Libraries/XMCLib/src/xmc_usic.c **** {
 518              	 .loc 2 207 0
 519              	 .cfi_startproc
 520              	 
 521              	 
 522              	 
 523 0000 80B4     	 push {r7}
 524              	.LCFI33:
 525              	 .cfi_def_cfa_offset 4
 526              	 .cfi_offset 7,-4
 527 0002 85B0     	 sub sp,sp,#20
 528              	.LCFI34:
 529              	 .cfi_def_cfa_offset 24
 530 0004 00AF     	 add r7,sp,#0
 531              	.LCFI35:
 532              	 .cfi_def_cfa_register 7
 533 0006 F860     	 str r0,[r7,#12]
 534 0008 B960     	 str r1,[r7,#8]
 535 000a 3B60     	 str r3,[r7]
 536 000c 1346     	 mov r3,r2
 537 000e FB71     	 strb r3,[r7,#7]
 208:../Libraries/XMCLib/src/xmc_usic.c ****   /* Disable FIFO */
 209:../Libraries/XMCLib/src/xmc_usic.c ****   channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 538              	 .loc 2 209 0
 539 0010 FB68     	 ldr r3,[r7,#12]
 540 0012 D3F80831 	 ldr r3,[r3,#264]
 541 0016 23F0E062 	 bic r2,r3,#117440512
 542 001a FB68     	 ldr r3,[r7,#12]
 543 001c C3F80821 	 str r2,[r3,#264]
 210:../Libraries/XMCLib/src/xmc_usic.c **** 
 211:../Libraries/XMCLib/src/xmc_usic.c ****   /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value
 212:../Libraries/XMCLib/src/xmc_usic.c ****    * lower due to transmission of a data word
 213:../Libraries/XMCLib/src/xmc_usic.c ****    * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of th
 214:../Libraries/XMCLib/src/xmc_usic.c ****    *  from equal to below the limit, not the fact being below
 215:../Libraries/XMCLib/src/xmc_usic.c ****    */
 216:../Libraries/XMCLib/src/xmc_usic.c ****   channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 544              	 .loc 2 216 0
 545 0020 FB68     	 ldr r3,[r7,#12]
 546 0022 D3F80821 	 ldr r2,[r3,#264]
 547 0026 094B     	 ldr r3,.L25
 548 0028 1340     	 ands r3,r3,r2
 217:../Libraries/XMCLib/src/xmc_usic.c ****                                                            USIC_CH_TBCTR_DPTR_Msk |
 218:../Libraries/XMCLib/src/xmc_usic.c ****                                                            USIC_CH_TBCTR_SIZE_Msk)) |
 219:../Libraries/XMCLib/src/xmc_usic.c ****                    (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 549              	 .loc 2 219 0
 550 002a 3A68     	 ldr r2,[r7]
 551 002c 1102     	 lsls r1,r2,#8
 552 002e BA68     	 ldr r2,[r7,#8]
 553 0030 1143     	 orrs r1,r1,r2
 220:../Libraries/XMCLib/src/xmc_usic.c ****                    (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
 221:../Libraries/XMCLib/src/xmc_usic.c ****                    ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 554              	 .loc 2 221 0
 555 0032 FA79     	 ldrb r2,[r7,#7]
 556 0034 1206     	 lsls r2,r2,#24
 219:../Libraries/XMCLib/src/xmc_usic.c ****                    (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
 557              	 .loc 2 219 0
 558 0036 0A43     	 orrs r2,r2,r1
 218:../Libraries/XMCLib/src/xmc_usic.c ****                    (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 559              	 .loc 2 218 0
 560 0038 1A43     	 orrs r2,r2,r3
 216:../Libraries/XMCLib/src/xmc_usic.c ****                                                            USIC_CH_TBCTR_DPTR_Msk |
 561              	 .loc 2 216 0
 562 003a FB68     	 ldr r3,[r7,#12]
 563 003c C3F80821 	 str r2,[r3,#264]
 222:../Libraries/XMCLib/src/xmc_usic.c **** }
 564              	 .loc 2 222 0
 565 0040 1437     	 adds r7,r7,#20
 566              	.LCFI36:
 567              	 .cfi_def_cfa_offset 4
 568 0042 BD46     	 mov sp,r7
 569              	.LCFI37:
 570              	 .cfi_def_cfa_register 13
 571              	 
 572 0044 5DF8047B 	 ldr r7,[sp],#4
 573              	.LCFI38:
 574              	 .cfi_restore 7
 575              	 .cfi_def_cfa_offset 0
 576 0048 7047     	 bx lr
 577              	.L26:
 578 004a 00BF     	 .align 2
 579              	.L25:
 580 004c C0C0FFF8 	 .word -117456704
 581              	 .cfi_endproc
 582              	.LFE222:
 584              	 .section .text.XMC_USIC_CH_RXFIFO_Configure,"ax",%progbits
 585              	 .align 2
 586              	 .global XMC_USIC_CH_RXFIFO_Configure
 587              	 .thumb
 588              	 .thumb_func
 590              	XMC_USIC_CH_RXFIFO_Configure:
 591              	.LFB223:
 223:../Libraries/XMCLib/src/xmc_usic.c **** 
 224:../Libraries/XMCLib/src/xmc_usic.c **** 
 225:../Libraries/XMCLib/src/xmc_usic.c **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
 226:../Libraries/XMCLib/src/xmc_usic.c ****                                   const uint32_t data_pointer,
 227:../Libraries/XMCLib/src/xmc_usic.c ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
 228:../Libraries/XMCLib/src/xmc_usic.c ****                                   const uint32_t limit)
 229:../Libraries/XMCLib/src/xmc_usic.c **** {
 592              	 .loc 2 229 0
 593              	 .cfi_startproc
 594              	 
 595              	 
 596              	 
 597 0000 80B4     	 push {r7}
 598              	.LCFI39:
 599              	 .cfi_def_cfa_offset 4
 600              	 .cfi_offset 7,-4
 601 0002 85B0     	 sub sp,sp,#20
 602              	.LCFI40:
 603              	 .cfi_def_cfa_offset 24
 604 0004 00AF     	 add r7,sp,#0
 605              	.LCFI41:
 606              	 .cfi_def_cfa_register 7
 607 0006 F860     	 str r0,[r7,#12]
 608 0008 B960     	 str r1,[r7,#8]
 609 000a 3B60     	 str r3,[r7]
 610 000c 1346     	 mov r3,r2
 611 000e FB71     	 strb r3,[r7,#7]
 230:../Libraries/XMCLib/src/xmc_usic.c ****   /* Disable FIFO */
 231:../Libraries/XMCLib/src/xmc_usic.c ****   channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 612              	 .loc 2 231 0
 613 0010 FB68     	 ldr r3,[r7,#12]
 614 0012 D3F80C31 	 ldr r3,[r3,#268]
 615 0016 23F0E062 	 bic r2,r3,#117440512
 616 001a FB68     	 ldr r3,[r7,#12]
 617 001c C3F80C21 	 str r2,[r3,#268]
 232:../Libraries/XMCLib/src/xmc_usic.c **** 
 233:../Libraries/XMCLib/src/xmc_usic.c ****   /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value 
 234:../Libraries/XMCLib/src/xmc_usic.c ****    *  due to the reception of a new data word
 235:../Libraries/XMCLib/src/xmc_usic.c ****    */
 236:../Libraries/XMCLib/src/xmc_usic.c ****   channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 618              	 .loc 2 236 0
 619 0020 FB68     	 ldr r3,[r7,#12]
 620 0022 D3F80C21 	 ldr r2,[r3,#268]
 621 0026 0A4B     	 ldr r3,.L28
 622 0028 1340     	 ands r3,r3,r2
 237:../Libraries/XMCLib/src/xmc_usic.c ****                                                             USIC_CH_RBCTR_DPTR_Msk |
 238:../Libraries/XMCLib/src/xmc_usic.c ****                                                             USIC_CH_RBCTR_LOF_Msk)) |
 239:../Libraries/XMCLib/src/xmc_usic.c ****                    ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 623              	 .loc 2 239 0
 624 002a 3A68     	 ldr r2,[r7]
 625 002c 1102     	 lsls r1,r2,#8
 626 002e BA68     	 ldr r2,[r7,#8]
 627 0030 1143     	 orrs r1,r1,r2
 240:../Libraries/XMCLib/src/xmc_usic.c ****                    (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 241:../Libraries/XMCLib/src/xmc_usic.c ****                    ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 628              	 .loc 2 241 0
 629 0032 FA79     	 ldrb r2,[r7,#7]
 630 0034 1206     	 lsls r2,r2,#24
 240:../Libraries/XMCLib/src/xmc_usic.c ****                    (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 631              	 .loc 2 240 0
 632 0036 0A43     	 orrs r2,r2,r1
 236:../Libraries/XMCLib/src/xmc_usic.c ****                                                             USIC_CH_RBCTR_DPTR_Msk |
 633              	 .loc 2 236 0
 634 0038 1343     	 orrs r3,r3,r2
 635 003a 43F08052 	 orr r2,r3,#268435456
 636 003e FB68     	 ldr r3,[r7,#12]
 637 0040 C3F80C21 	 str r2,[r3,#268]
 242:../Libraries/XMCLib/src/xmc_usic.c ****                    (uint32_t)USIC_CH_RBCTR_LOF_Msk));
 243:../Libraries/XMCLib/src/xmc_usic.c **** }
 638              	 .loc 2 243 0
 639 0044 1437     	 adds r7,r7,#20
 640              	.LCFI42:
 641              	 .cfi_def_cfa_offset 4
 642 0046 BD46     	 mov sp,r7
 643              	.LCFI43:
 644              	 .cfi_def_cfa_register 13
 645              	 
 646 0048 5DF8047B 	 ldr r7,[sp],#4
 647              	.LCFI44:
 648              	 .cfi_restore 7
 649              	 .cfi_def_cfa_offset 0
 650 004c 7047     	 bx lr
 651              	.L29:
 652 004e 00BF     	 .align 2
 653              	.L28:
 654 0050 C0C0FFEF 	 .word -268451648
 655              	 .cfi_endproc
 656              	.LFE223:
 658              	 .section .text.XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit,"ax",%progbits
 659              	 .align 2
 660              	 .global XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit
 661              	 .thumb
 662              	 .thumb_func
 664              	XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit:
 665              	.LFB224:
 244:../Libraries/XMCLib/src/xmc_usic.c **** 
 245:../Libraries/XMCLib/src/xmc_usic.c **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
 246:../Libraries/XMCLib/src/xmc_usic.c ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
 247:../Libraries/XMCLib/src/xmc_usic.c ****                                             const uint32_t limit)
 248:../Libraries/XMCLib/src/xmc_usic.c **** {
 666              	 .loc 2 248 0
 667              	 .cfi_startproc
 668              	 
 669              	 
 670              	 
 671 0000 80B4     	 push {r7}
 672              	.LCFI45:
 673              	 .cfi_def_cfa_offset 4
 674              	 .cfi_offset 7,-4
 675 0002 85B0     	 sub sp,sp,#20
 676              	.LCFI46:
 677              	 .cfi_def_cfa_offset 24
 678 0004 00AF     	 add r7,sp,#0
 679              	.LCFI47:
 680              	 .cfi_def_cfa_register 7
 681 0006 F860     	 str r0,[r7,#12]
 682 0008 0B46     	 mov r3,r1
 683 000a 7A60     	 str r2,[r7,#4]
 684 000c FB72     	 strb r3,[r7,#11]
 249:../Libraries/XMCLib/src/xmc_usic.c ****   /* Disable FIFO */
 250:../Libraries/XMCLib/src/xmc_usic.c ****   channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 685              	 .loc 2 250 0
 686 000e FB68     	 ldr r3,[r7,#12]
 687 0010 D3F80831 	 ldr r3,[r3,#264]
 688 0014 23F0E062 	 bic r2,r3,#117440512
 689 0018 FB68     	 ldr r3,[r7,#12]
 690 001a C3F80821 	 str r2,[r3,#264]
 251:../Libraries/XMCLib/src/xmc_usic.c **** 
 252:../Libraries/XMCLib/src/xmc_usic.c ****   /* STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of th
 253:../Libraries/XMCLib/src/xmc_usic.c ****    *  from equal to below the limit, not the fact being below
 254:../Libraries/XMCLib/src/xmc_usic.c ****    */
 255:../Libraries/XMCLib/src/xmc_usic.c ****   channel->TBCTR = (uint32_t)((uint32_t)(channel->TBCTR & (uint32_t)~USIC_CH_TBCTR_LIMIT_Msk) |
 691              	 .loc 2 255 0
 692 001e FB68     	 ldr r3,[r7,#12]
 693 0020 D3F80831 	 ldr r3,[r3,#264]
 694 0024 23F47C52 	 bic r2,r3,#16128
 256:../Libraries/XMCLib/src/xmc_usic.c ****                    (limit << USIC_CH_TBCTR_LIMIT_Pos) |
 695              	 .loc 2 256 0
 696 0028 7B68     	 ldr r3,[r7,#4]
 697 002a 1B02     	 lsls r3,r3,#8
 255:../Libraries/XMCLib/src/xmc_usic.c ****                    (limit << USIC_CH_TBCTR_LIMIT_Pos) |
 698              	 .loc 2 255 0
 699 002c 1A43     	 orrs r2,r2,r3
 257:../Libraries/XMCLib/src/xmc_usic.c ****                    ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 700              	 .loc 2 257 0
 701 002e FB7A     	 ldrb r3,[r7,#11]
 702 0030 1B06     	 lsls r3,r3,#24
 255:../Libraries/XMCLib/src/xmc_usic.c ****                    (limit << USIC_CH_TBCTR_LIMIT_Pos) |
 703              	 .loc 2 255 0
 704 0032 1A43     	 orrs r2,r2,r3
 705 0034 FB68     	 ldr r3,[r7,#12]
 706 0036 C3F80821 	 str r2,[r3,#264]
 258:../Libraries/XMCLib/src/xmc_usic.c **** }
 707              	 .loc 2 258 0
 708 003a 1437     	 adds r7,r7,#20
 709              	.LCFI48:
 710              	 .cfi_def_cfa_offset 4
 711 003c BD46     	 mov sp,r7
 712              	.LCFI49:
 713              	 .cfi_def_cfa_register 13
 714              	 
 715 003e 5DF8047B 	 ldr r7,[sp],#4
 716              	.LCFI50:
 717              	 .cfi_restore 7
 718              	 .cfi_def_cfa_offset 0
 719 0042 7047     	 bx lr
 720              	 .cfi_endproc
 721              	.LFE224:
 723              	 .section .text.XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit,"ax",%progbits
 724              	 .align 2
 725              	 .global XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit
 726              	 .thumb
 727              	 .thumb_func
 729              	XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit:
 730              	.LFB225:
 259:../Libraries/XMCLib/src/xmc_usic.c **** 
 260:../Libraries/XMCLib/src/xmc_usic.c **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
 261:../Libraries/XMCLib/src/xmc_usic.c ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
 262:../Libraries/XMCLib/src/xmc_usic.c ****                                             const uint32_t limit)
 263:../Libraries/XMCLib/src/xmc_usic.c **** {
 731              	 .loc 2 263 0
 732              	 .cfi_startproc
 733              	 
 734              	 
 735              	 
 736 0000 80B4     	 push {r7}
 737              	.LCFI51:
 738              	 .cfi_def_cfa_offset 4
 739              	 .cfi_offset 7,-4
 740 0002 85B0     	 sub sp,sp,#20
 741              	.LCFI52:
 742              	 .cfi_def_cfa_offset 24
 743 0004 00AF     	 add r7,sp,#0
 744              	.LCFI53:
 745              	 .cfi_def_cfa_register 7
 746 0006 F860     	 str r0,[r7,#12]
 747 0008 0B46     	 mov r3,r1
 748 000a 7A60     	 str r2,[r7,#4]
 749 000c FB72     	 strb r3,[r7,#11]
 264:../Libraries/XMCLib/src/xmc_usic.c ****   /* Disable FIFO */
 265:../Libraries/XMCLib/src/xmc_usic.c ****   channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 750              	 .loc 2 265 0
 751 000e FB68     	 ldr r3,[r7,#12]
 752 0010 D3F80C31 	 ldr r3,[r3,#268]
 753 0014 23F0E062 	 bic r2,r3,#117440512
 754 0018 FB68     	 ldr r3,[r7,#12]
 755 001a C3F80C21 	 str r2,[r3,#268]
 266:../Libraries/XMCLib/src/xmc_usic.c **** 
 267:../Libraries/XMCLib/src/xmc_usic.c ****   channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 756              	 .loc 2 267 0
 757 001e FB68     	 ldr r3,[r7,#12]
 758 0020 D3F80C31 	 ldr r3,[r3,#268]
 759 0024 23F47C52 	 bic r2,r3,#16128
 268:../Libraries/XMCLib/src/xmc_usic.c ****                    (limit << USIC_CH_RBCTR_LIMIT_Pos) |
 760              	 .loc 2 268 0
 761 0028 7B68     	 ldr r3,[r7,#4]
 762 002a 1B02     	 lsls r3,r3,#8
 267:../Libraries/XMCLib/src/xmc_usic.c ****                    (limit << USIC_CH_RBCTR_LIMIT_Pos) |
 763              	 .loc 2 267 0
 764 002c 1A43     	 orrs r2,r2,r3
 269:../Libraries/XMCLib/src/xmc_usic.c ****                    ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 765              	 .loc 2 269 0
 766 002e FB7A     	 ldrb r3,[r7,#11]
 767 0030 1B06     	 lsls r3,r3,#24
 267:../Libraries/XMCLib/src/xmc_usic.c ****                    (limit << USIC_CH_RBCTR_LIMIT_Pos) |
 768              	 .loc 2 267 0
 769 0032 1A43     	 orrs r2,r2,r3
 770 0034 FB68     	 ldr r3,[r7,#12]
 771 0036 C3F80C21 	 str r2,[r3,#268]
 270:../Libraries/XMCLib/src/xmc_usic.c **** }
 772              	 .loc 2 270 0
 773 003a 1437     	 adds r7,r7,#20
 774              	.LCFI54:
 775              	 .cfi_def_cfa_offset 4
 776 003c BD46     	 mov sp,r7
 777              	.LCFI55:
 778              	 .cfi_def_cfa_register 13
 779              	 
 780 003e 5DF8047B 	 ldr r7,[sp],#4
 781              	.LCFI56:
 782              	 .cfi_restore 7
 783              	 .cfi_def_cfa_offset 0
 784 0042 7047     	 bx lr
 785              	 .cfi_endproc
 786              	.LFE225:
 788              	 .section .text.XMC_USIC_CH_SetInterruptNodePointer,"ax",%progbits
 789              	 .align 2
 790              	 .global XMC_USIC_CH_SetInterruptNodePointer
 791              	 .thumb
 792              	 .thumb_func
 794              	XMC_USIC_CH_SetInterruptNodePointer:
 795              	.LFB226:
 271:../Libraries/XMCLib/src/xmc_usic.c **** 
 272:../Libraries/XMCLib/src/xmc_usic.c **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
 273:../Libraries/XMCLib/src/xmc_usic.c ****                                          const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
 274:../Libraries/XMCLib/src/xmc_usic.c ****                                          const uint32_t service_request)
 275:../Libraries/XMCLib/src/xmc_usic.c **** {
 796              	 .loc 2 275 0
 797              	 .cfi_startproc
 798              	 
 799              	 
 800              	 
 801 0000 80B4     	 push {r7}
 802              	.LCFI57:
 803              	 .cfi_def_cfa_offset 4
 804              	 .cfi_offset 7,-4
 805 0002 85B0     	 sub sp,sp,#20
 806              	.LCFI58:
 807              	 .cfi_def_cfa_offset 24
 808 0004 00AF     	 add r7,sp,#0
 809              	.LCFI59:
 810              	 .cfi_def_cfa_register 7
 811 0006 F860     	 str r0,[r7,#12]
 812 0008 0B46     	 mov r3,r1
 813 000a 7A60     	 str r2,[r7,#4]
 814 000c FB72     	 strb r3,[r7,#11]
 276:../Libraries/XMCLib/src/xmc_usic.c ****   channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_
 815              	 .loc 2 276 0
 816 000e FB68     	 ldr r3,[r7,#12]
 817 0010 9A69     	 ldr r2,[r3,#24]
 818 0012 FB7A     	 ldrb r3,[r7,#11]
 819 0014 0721     	 movs r1,#7
 820 0016 01FA03F3 	 lsl r3,r1,r3
 821 001a DB43     	 mvns r3,r3
 822 001c 1A40     	 ands r2,r2,r3
 277:../Libraries/XMCLib/src/xmc_usic.c ****                   (service_request << (uint32_t)interrupt_node));
 823              	 .loc 2 277 0
 824 001e FB7A     	 ldrb r3,[r7,#11]
 825 0020 7968     	 ldr r1,[r7,#4]
 826 0022 01FA03F3 	 lsl r3,r1,r3
 276:../Libraries/XMCLib/src/xmc_usic.c ****   channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_
 827              	 .loc 2 276 0
 828 0026 1A43     	 orrs r2,r2,r3
 829 0028 FB68     	 ldr r3,[r7,#12]
 830 002a 9A61     	 str r2,[r3,#24]
 278:../Libraries/XMCLib/src/xmc_usic.c **** }
 831              	 .loc 2 278 0
 832 002c 1437     	 adds r7,r7,#20
 833              	.LCFI60:
 834              	 .cfi_def_cfa_offset 4
 835 002e BD46     	 mov sp,r7
 836              	.LCFI61:
 837              	 .cfi_def_cfa_register 13
 838              	 
 839 0030 5DF8047B 	 ldr r7,[sp],#4
 840              	.LCFI62:
 841              	 .cfi_restore 7
 842              	 .cfi_def_cfa_offset 0
 843 0034 7047     	 bx lr
 844              	 .cfi_endproc
 845              	.LFE226:
 847 0036 00BF     	 .section .text.XMC_USIC_CH_TXFIFO_SetInterruptNodePointer,"ax",%progbits
 848              	 .align 2
 849              	 .global XMC_USIC_CH_TXFIFO_SetInterruptNodePointer
 850              	 .thumb
 851              	 .thumb_func
 853              	XMC_USIC_CH_TXFIFO_SetInterruptNodePointer:
 854              	.LFB227:
 279:../Libraries/XMCLib/src/xmc_usic.c **** 
 280:../Libraries/XMCLib/src/xmc_usic.c **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
 281:../Libraries/XMCLib/src/xmc_usic.c ****                                                 const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t i
 282:../Libraries/XMCLib/src/xmc_usic.c ****                                                 const uint32_t service_request)
 283:../Libraries/XMCLib/src/xmc_usic.c **** {
 855              	 .loc 2 283 0
 856              	 .cfi_startproc
 857              	 
 858              	 
 859              	 
 860 0000 80B4     	 push {r7}
 861              	.LCFI63:
 862              	 .cfi_def_cfa_offset 4
 863              	 .cfi_offset 7,-4
 864 0002 85B0     	 sub sp,sp,#20
 865              	.LCFI64:
 866              	 .cfi_def_cfa_offset 24
 867 0004 00AF     	 add r7,sp,#0
 868              	.LCFI65:
 869              	 .cfi_def_cfa_register 7
 870 0006 F860     	 str r0,[r7,#12]
 871 0008 0B46     	 mov r3,r1
 872 000a 7A60     	 str r2,[r7,#4]
 873 000c FB72     	 strb r3,[r7,#11]
 284:../Libraries/XMCLib/src/xmc_usic.c ****   channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrup
 874              	 .loc 2 284 0
 875 000e FB68     	 ldr r3,[r7,#12]
 876 0010 D3F80821 	 ldr r2,[r3,#264]
 877 0014 FB7A     	 ldrb r3,[r7,#11]
 878 0016 0721     	 movs r1,#7
 879 0018 01FA03F3 	 lsl r3,r1,r3
 880 001c DB43     	 mvns r3,r3
 881 001e 1A40     	 ands r2,r2,r3
 285:../Libraries/XMCLib/src/xmc_usic.c ****                    (service_request << (uint32_t)interrupt_node));
 882              	 .loc 2 285 0
 883 0020 FB7A     	 ldrb r3,[r7,#11]
 884 0022 7968     	 ldr r1,[r7,#4]
 885 0024 01FA03F3 	 lsl r3,r1,r3
 284:../Libraries/XMCLib/src/xmc_usic.c ****   channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrup
 886              	 .loc 2 284 0
 887 0028 1A43     	 orrs r2,r2,r3
 888 002a FB68     	 ldr r3,[r7,#12]
 889 002c C3F80821 	 str r2,[r3,#264]
 286:../Libraries/XMCLib/src/xmc_usic.c **** }
 890              	 .loc 2 286 0
 891 0030 1437     	 adds r7,r7,#20
 892              	.LCFI66:
 893              	 .cfi_def_cfa_offset 4
 894 0032 BD46     	 mov sp,r7
 895              	.LCFI67:
 896              	 .cfi_def_cfa_register 13
 897              	 
 898 0034 5DF8047B 	 ldr r7,[sp],#4
 899              	.LCFI68:
 900              	 .cfi_restore 7
 901              	 .cfi_def_cfa_offset 0
 902 0038 7047     	 bx lr
 903              	 .cfi_endproc
 904              	.LFE227:
 906 003a 00BF     	 .section .text.XMC_USIC_CH_RXFIFO_SetInterruptNodePointer,"ax",%progbits
 907              	 .align 2
 908              	 .global XMC_USIC_CH_RXFIFO_SetInterruptNodePointer
 909              	 .thumb
 910              	 .thumb_func
 912              	XMC_USIC_CH_RXFIFO_SetInterruptNodePointer:
 913              	.LFB228:
 287:../Libraries/XMCLib/src/xmc_usic.c **** 
 288:../Libraries/XMCLib/src/xmc_usic.c **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
 289:../Libraries/XMCLib/src/xmc_usic.c ****                                                 const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t i
 290:../Libraries/XMCLib/src/xmc_usic.c ****                                                 const uint32_t service_request)
 291:../Libraries/XMCLib/src/xmc_usic.c **** {
 914              	 .loc 2 291 0
 915              	 .cfi_startproc
 916              	 
 917              	 
 918              	 
 919 0000 80B4     	 push {r7}
 920              	.LCFI69:
 921              	 .cfi_def_cfa_offset 4
 922              	 .cfi_offset 7,-4
 923 0002 85B0     	 sub sp,sp,#20
 924              	.LCFI70:
 925              	 .cfi_def_cfa_offset 24
 926 0004 00AF     	 add r7,sp,#0
 927              	.LCFI71:
 928              	 .cfi_def_cfa_register 7
 929 0006 F860     	 str r0,[r7,#12]
 930 0008 0B46     	 mov r3,r1
 931 000a 7A60     	 str r2,[r7,#4]
 932 000c FB72     	 strb r3,[r7,#11]
 292:../Libraries/XMCLib/src/xmc_usic.c ****   channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrup
 933              	 .loc 2 292 0
 934 000e FB68     	 ldr r3,[r7,#12]
 935 0010 D3F80C21 	 ldr r2,[r3,#268]
 936 0014 FB7A     	 ldrb r3,[r7,#11]
 937 0016 0721     	 movs r1,#7
 938 0018 01FA03F3 	 lsl r3,r1,r3
 939 001c DB43     	 mvns r3,r3
 940 001e 1A40     	 ands r2,r2,r3
 293:../Libraries/XMCLib/src/xmc_usic.c ****                    (service_request << (uint32_t)interrupt_node));
 941              	 .loc 2 293 0
 942 0020 FB7A     	 ldrb r3,[r7,#11]
 943 0022 7968     	 ldr r1,[r7,#4]
 944 0024 01FA03F3 	 lsl r3,r1,r3
 292:../Libraries/XMCLib/src/xmc_usic.c ****   channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrup
 945              	 .loc 2 292 0
 946 0028 1A43     	 orrs r2,r2,r3
 947 002a FB68     	 ldr r3,[r7,#12]
 948 002c C3F80C21 	 str r2,[r3,#268]
 294:../Libraries/XMCLib/src/xmc_usic.c **** }
 949              	 .loc 2 294 0
 950 0030 1437     	 adds r7,r7,#20
 951              	.LCFI72:
 952              	 .cfi_def_cfa_offset 4
 953 0032 BD46     	 mov sp,r7
 954              	.LCFI73:
 955              	 .cfi_def_cfa_register 13
 956              	 
 957 0034 5DF8047B 	 ldr r7,[sp],#4
 958              	.LCFI74:
 959              	 .cfi_restore 7
 960              	 .cfi_def_cfa_offset 0
 961 0038 7047     	 bx lr
 962              	 .cfi_endproc
 963              	.LFE228:
 965 003a 00BF     	 .section .text.XMC_USIC_Enable,"ax",%progbits
 966              	 .align 2
 967              	 .global XMC_USIC_Enable
 968              	 .thumb
 969              	 .thumb_func
 971              	XMC_USIC_Enable:
 972              	.LFB229:
 295:../Libraries/XMCLib/src/xmc_usic.c **** 
 296:../Libraries/XMCLib/src/xmc_usic.c **** void XMC_USIC_Enable(XMC_USIC_t *const usic)
 297:../Libraries/XMCLib/src/xmc_usic.c **** {
 973              	 .loc 2 297 0
 974              	 .cfi_startproc
 975              	 
 976              	 
 977 0000 80B5     	 push {r7,lr}
 978              	.LCFI75:
 979              	 .cfi_def_cfa_offset 8
 980              	 .cfi_offset 7,-8
 981              	 .cfi_offset 14,-4
 982 0002 82B0     	 sub sp,sp,#8
 983              	.LCFI76:
 984              	 .cfi_def_cfa_offset 16
 985 0004 00AF     	 add r7,sp,#0
 986              	.LCFI77:
 987              	 .cfi_def_cfa_register 7
 988 0006 7860     	 str r0,[r7,#4]
 298:../Libraries/XMCLib/src/xmc_usic.c ****   if (usic == USIC0)
 989              	 .loc 2 298 0
 990 0008 7B68     	 ldr r3,[r7,#4]
 991 000a 0C4A     	 ldr r2,.L38
 992 000c 9342     	 cmp r3,r2
 993 000e 08D1     	 bne .L36
 299:../Libraries/XMCLib/src/xmc_usic.c ****   {
 300:../Libraries/XMCLib/src/xmc_usic.c **** #if defined(CLOCK_GATING_SUPPORTED)
 301:../Libraries/XMCLib/src/xmc_usic.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 994              	 .loc 2 301 0
 995 0010 4FF40060 	 mov r0,#2048
 996 0014 FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 302:../Libraries/XMCLib/src/xmc_usic.c **** #endif
 303:../Libraries/XMCLib/src/xmc_usic.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 304:../Libraries/XMCLib/src/xmc_usic.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 997              	 .loc 2 304 0
 998 0018 4FF40060 	 mov r0,#2048
 999 001c FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 1000 0020 09E0     	 b .L35
 1001              	.L36:
 305:../Libraries/XMCLib/src/xmc_usic.c **** #endif	
 306:../Libraries/XMCLib/src/xmc_usic.c ****   }
 307:../Libraries/XMCLib/src/xmc_usic.c **** #if defined(USIC1)  
 308:../Libraries/XMCLib/src/xmc_usic.c ****   else if (usic == USIC1)
 1002              	 .loc 2 308 0
 1003 0022 7B68     	 ldr r3,[r7,#4]
 1004 0024 064A     	 ldr r2,.L38+4
 1005 0026 9342     	 cmp r3,r2
 1006 0028 05D1     	 bne .L35
 309:../Libraries/XMCLib/src/xmc_usic.c ****   {
 310:../Libraries/XMCLib/src/xmc_usic.c **** #if defined(CLOCK_GATING_SUPPORTED)
 311:../Libraries/XMCLib/src/xmc_usic.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 1007              	 .loc 2 311 0
 1008 002a 0648     	 ldr r0,.L38+8
 1009 002c FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 312:../Libraries/XMCLib/src/xmc_usic.c **** #endif	
 313:../Libraries/XMCLib/src/xmc_usic.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 314:../Libraries/XMCLib/src/xmc_usic.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 1010              	 .loc 2 314 0
 1011 0030 0448     	 ldr r0,.L38+8
 1012 0032 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 1013              	.L35:
 315:../Libraries/XMCLib/src/xmc_usic.c **** #endif	
 316:../Libraries/XMCLib/src/xmc_usic.c ****   }
 317:../Libraries/XMCLib/src/xmc_usic.c **** #endif  
 318:../Libraries/XMCLib/src/xmc_usic.c **** #if defined(USIC2)  
 319:../Libraries/XMCLib/src/xmc_usic.c ****   else if (usic == USIC2)
 320:../Libraries/XMCLib/src/xmc_usic.c ****   {
 321:../Libraries/XMCLib/src/xmc_usic.c **** #if defined(CLOCK_GATING_SUPPORTED) 
 322:../Libraries/XMCLib/src/xmc_usic.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 323:../Libraries/XMCLib/src/xmc_usic.c **** #endif
 324:../Libraries/XMCLib/src/xmc_usic.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 325:../Libraries/XMCLib/src/xmc_usic.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 326:../Libraries/XMCLib/src/xmc_usic.c **** #endif	
 327:../Libraries/XMCLib/src/xmc_usic.c ****   }
 328:../Libraries/XMCLib/src/xmc_usic.c **** #endif  
 329:../Libraries/XMCLib/src/xmc_usic.c ****   else
 330:../Libraries/XMCLib/src/xmc_usic.c ****   {
 331:../Libraries/XMCLib/src/xmc_usic.c ****     XMC_ASSERT("USIC module not available", 0/*Always*/);
 332:../Libraries/XMCLib/src/xmc_usic.c ****   }
 333:../Libraries/XMCLib/src/xmc_usic.c **** }
 1014              	 .loc 2 333 0
 1015 0036 0837     	 adds r7,r7,#8
 1016              	.LCFI78:
 1017              	 .cfi_def_cfa_offset 8
 1018 0038 BD46     	 mov sp,r7
 1019              	.LCFI79:
 1020              	 .cfi_def_cfa_register 13
 1021              	 
 1022 003a 80BD     	 pop {r7,pc}
 1023              	.L39:
 1024              	 .align 2
 1025              	.L38:
 1026 003c 08000340 	 .word 1073938440
 1027 0040 08000248 	 .word 1208090632
 1028 0044 80000010 	 .word 268435584
 1029              	 .cfi_endproc
 1030              	.LFE229:
 1032              	 .section .text.XMC_USIC_Disable,"ax",%progbits
 1033              	 .align 2
 1034              	 .global XMC_USIC_Disable
 1035              	 .thumb
 1036              	 .thumb_func
 1038              	XMC_USIC_Disable:
 1039              	.LFB230:
 334:../Libraries/XMCLib/src/xmc_usic.c **** 
 335:../Libraries/XMCLib/src/xmc_usic.c **** void XMC_USIC_Disable(XMC_USIC_t *const usic)
 336:../Libraries/XMCLib/src/xmc_usic.c **** {
 1040              	 .loc 2 336 0
 1041              	 .cfi_startproc
 1042              	 
 1043              	 
 1044 0000 80B5     	 push {r7,lr}
 1045              	.LCFI80:
 1046              	 .cfi_def_cfa_offset 8
 1047              	 .cfi_offset 7,-8
 1048              	 .cfi_offset 14,-4
 1049 0002 82B0     	 sub sp,sp,#8
 1050              	.LCFI81:
 1051              	 .cfi_def_cfa_offset 16
 1052 0004 00AF     	 add r7,sp,#0
 1053              	.LCFI82:
 1054              	 .cfi_def_cfa_register 7
 1055 0006 7860     	 str r0,[r7,#4]
 337:../Libraries/XMCLib/src/xmc_usic.c ****   if (usic == (XMC_USIC_t *)USIC0)
 1056              	 .loc 2 337 0
 1057 0008 7B68     	 ldr r3,[r7,#4]
 1058 000a 0C4A     	 ldr r2,.L43
 1059 000c 9342     	 cmp r3,r2
 1060 000e 08D1     	 bne .L41
 338:../Libraries/XMCLib/src/xmc_usic.c ****   {
 339:../Libraries/XMCLib/src/xmc_usic.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)  
 340:../Libraries/XMCLib/src/xmc_usic.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 1061              	 .loc 2 340 0
 1062 0010 4FF40060 	 mov r0,#2048
 1063 0014 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 341:../Libraries/XMCLib/src/xmc_usic.c **** #endif	
 342:../Libraries/XMCLib/src/xmc_usic.c **** #if defined(CLOCK_GATING_SUPPORTED) 
 343:../Libraries/XMCLib/src/xmc_usic.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 1064              	 .loc 2 343 0
 1065 0018 4FF40060 	 mov r0,#2048
 1066 001c FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 1067 0020 09E0     	 b .L40
 1068              	.L41:
 344:../Libraries/XMCLib/src/xmc_usic.c **** #endif
 345:../Libraries/XMCLib/src/xmc_usic.c ****   }
 346:../Libraries/XMCLib/src/xmc_usic.c **** #if defined(USIC1)  
 347:../Libraries/XMCLib/src/xmc_usic.c ****   else if (usic == (XMC_USIC_t *)USIC1)
 1069              	 .loc 2 347 0
 1070 0022 7B68     	 ldr r3,[r7,#4]
 1071 0024 064A     	 ldr r2,.L43+4
 1072 0026 9342     	 cmp r3,r2
 1073 0028 05D1     	 bne .L40
 348:../Libraries/XMCLib/src/xmc_usic.c ****   {
 349:../Libraries/XMCLib/src/xmc_usic.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)  
 350:../Libraries/XMCLib/src/xmc_usic.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 1074              	 .loc 2 350 0
 1075 002a 0648     	 ldr r0,.L43+8
 1076 002c FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 351:../Libraries/XMCLib/src/xmc_usic.c **** #endif	
 352:../Libraries/XMCLib/src/xmc_usic.c **** #if defined(CLOCK_GATING_SUPPORTED) 
 353:../Libraries/XMCLib/src/xmc_usic.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 1077              	 .loc 2 353 0
 1078 0030 0448     	 ldr r0,.L43+8
 1079 0032 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 1080              	.L40:
 354:../Libraries/XMCLib/src/xmc_usic.c **** #endif
 355:../Libraries/XMCLib/src/xmc_usic.c ****   }
 356:../Libraries/XMCLib/src/xmc_usic.c **** #endif  
 357:../Libraries/XMCLib/src/xmc_usic.c **** #if defined(USIC2)  
 358:../Libraries/XMCLib/src/xmc_usic.c ****   else if (usic == (XMC_USIC_t *)USIC2)
 359:../Libraries/XMCLib/src/xmc_usic.c ****   {
 360:../Libraries/XMCLib/src/xmc_usic.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)  
 361:../Libraries/XMCLib/src/xmc_usic.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 362:../Libraries/XMCLib/src/xmc_usic.c **** #endif	
 363:../Libraries/XMCLib/src/xmc_usic.c **** #if defined(CLOCK_GATING_SUPPORTED) 
 364:../Libraries/XMCLib/src/xmc_usic.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 365:../Libraries/XMCLib/src/xmc_usic.c **** #endif
 366:../Libraries/XMCLib/src/xmc_usic.c ****   }
 367:../Libraries/XMCLib/src/xmc_usic.c **** #endif  
 368:../Libraries/XMCLib/src/xmc_usic.c ****   else
 369:../Libraries/XMCLib/src/xmc_usic.c ****   {
 370:../Libraries/XMCLib/src/xmc_usic.c **** 	  XMC_ASSERT("USIC module not available", 0/*Always*/);
 371:../Libraries/XMCLib/src/xmc_usic.c ****   }
 372:../Libraries/XMCLib/src/xmc_usic.c ****   
 373:../Libraries/XMCLib/src/xmc_usic.c **** }
 1081              	 .loc 2 373 0
 1082 0036 0837     	 adds r7,r7,#8
 1083              	.LCFI83:
 1084              	 .cfi_def_cfa_offset 8
 1085 0038 BD46     	 mov sp,r7
 1086              	.LCFI84:
 1087              	 .cfi_def_cfa_register 13
 1088              	 
 1089 003a 80BD     	 pop {r7,pc}
 1090              	.L44:
 1091              	 .align 2
 1092              	.L43:
 1093 003c 08000340 	 .word 1073938440
 1094 0040 08000248 	 .word 1208090632
 1095 0044 80000010 	 .word 268435584
 1096              	 .cfi_endproc
 1097              	.LFE230:
 1099              	 .text
 1100              	.Letext0:
 1101              	 .file 3 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1102              	 .file 4 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1103              	 .file 5 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Infineon/XMC4300_series/Include/XMC4300.h"
 1104              	 .file 6 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc/xmc4_scu.h"
 1105              	 .file 7 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include/core_cm4.h"
 1106              	 .file 8 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Infineon/XMC4300_series/Include/system_XMC4300.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_usic.c
    {standard input}:20     .text.XMC_USIC_CH_SetInputTriggerCombinationMode:00000000 $t
    {standard input}:24     .text.XMC_USIC_CH_SetInputTriggerCombinationMode:00000000 XMC_USIC_CH_SetInputTriggerCombinationMode
    {standard input}:83     .text.XMC_USIC_CH_SetBRGInputClockSource:00000000 $t
    {standard input}:87     .text.XMC_USIC_CH_SetBRGInputClockSource:00000000 XMC_USIC_CH_SetBRGInputClockSource
    {standard input}:132    .text.XMC_USIC_CH_Enable:00000000 $t
    {standard input}:137    .text.XMC_USIC_CH_Enable:00000000 XMC_USIC_CH_Enable
    {standard input}:971    .text.XMC_USIC_Enable:00000000 XMC_USIC_Enable
    {standard input}:218    .text.XMC_USIC_CH_Enable:0000005c $d
    {standard input}:228    .text.XMC_USIC_CH_Disable:00000000 $t
    {standard input}:233    .text.XMC_USIC_CH_Disable:00000000 XMC_USIC_CH_Disable
    {standard input}:275    .text.XMC_USIC_CH_SetBaudrate:00000000 $t
    {standard input}:280    .text.XMC_USIC_CH_SetBaudrate:00000000 XMC_USIC_CH_SetBaudrate
    {standard input}:429    .text.XMC_USIC_CH_SetBaudrate:000000d8 $d
    {standard input}:435    .text.XMC_USIC_CH_ConfigExternalInputSignalToBRG:00000000 $t
    {standard input}:440    .text.XMC_USIC_CH_ConfigExternalInputSignalToBRG:00000000 XMC_USIC_CH_ConfigExternalInputSignalToBRG
    {standard input}:506    .text.XMC_USIC_CH_ConfigExternalInputSignalToBRG:0000004c $d
    {standard input}:511    .text.XMC_USIC_CH_TXFIFO_Configure:00000000 $t
    {standard input}:516    .text.XMC_USIC_CH_TXFIFO_Configure:00000000 XMC_USIC_CH_TXFIFO_Configure
    {standard input}:580    .text.XMC_USIC_CH_TXFIFO_Configure:0000004c $d
    {standard input}:585    .text.XMC_USIC_CH_RXFIFO_Configure:00000000 $t
    {standard input}:590    .text.XMC_USIC_CH_RXFIFO_Configure:00000000 XMC_USIC_CH_RXFIFO_Configure
    {standard input}:654    .text.XMC_USIC_CH_RXFIFO_Configure:00000050 $d
    {standard input}:659    .text.XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit:00000000 $t
    {standard input}:664    .text.XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit:00000000 XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit
    {standard input}:724    .text.XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit:00000000 $t
    {standard input}:729    .text.XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit:00000000 XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit
    {standard input}:789    .text.XMC_USIC_CH_SetInterruptNodePointer:00000000 $t
    {standard input}:794    .text.XMC_USIC_CH_SetInterruptNodePointer:00000000 XMC_USIC_CH_SetInterruptNodePointer
    {standard input}:848    .text.XMC_USIC_CH_TXFIFO_SetInterruptNodePointer:00000000 $t
    {standard input}:853    .text.XMC_USIC_CH_TXFIFO_SetInterruptNodePointer:00000000 XMC_USIC_CH_TXFIFO_SetInterruptNodePointer
    {standard input}:907    .text.XMC_USIC_CH_RXFIFO_SetInterruptNodePointer:00000000 $t
    {standard input}:912    .text.XMC_USIC_CH_RXFIFO_SetInterruptNodePointer:00000000 XMC_USIC_CH_RXFIFO_SetInterruptNodePointer
    {standard input}:966    .text.XMC_USIC_Enable:00000000 $t
    {standard input}:1026   .text.XMC_USIC_Enable:0000003c $d
    {standard input}:1033   .text.XMC_USIC_Disable:00000000 $t
    {standard input}:1038   .text.XMC_USIC_Disable:00000000 XMC_USIC_Disable
    {standard input}:1093   .text.XMC_USIC_Disable:0000003c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_GetPeripheralClockFrequency
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_CLOCK_GatePeripheralClock
