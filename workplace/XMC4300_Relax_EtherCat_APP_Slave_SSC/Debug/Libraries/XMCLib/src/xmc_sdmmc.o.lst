   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_sdmmc.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_SDMMC_SetDataLineTimeout,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_SDMMC_SetDataLineTimeout:
  25              	.LFB160:
  26              	 .file 1 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc/xmc_sdmmc.h"
   1:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
   2:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
   3:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @file xmc_sdmmc.h
   4:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @date 2016-04-07
   5:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
   6:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @cond
   7:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  **************************************************************************************************
   8:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   9:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
  10:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  11:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * All rights reserved.                        
  12:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *                                             
  13:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * following conditions are met:   
  15:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *                                                                              
  16:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * disclaimer.                        
  18:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 
  19:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 
  22:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * products derived from this software without specific prior written permission.                  
  24:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *                                                                              
  25:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *                                                                              
  33:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  **************************************************************************************************
  36:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
  37:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Change History
  38:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * --------------
  39:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
  40:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 2015-02-20:
  41:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *     - Initial version
  42:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *     - Documentation updates
  43:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
  44:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 2015-06-20:
  45:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  46:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
  47:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 2016-01-16:
  48:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *     - Added the following APIs to the XMC_SDMMC low level driver <br>
  49:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *         1) XMC_SDMMC_EnableDelayCmdDatLines <br>
  50:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *         2) XMC_SDMMC_DisableDelayCmdDatLines <br>
  51:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *         3) XMC_SDMMC_SetDelay <br>
  52:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *         4) XMC_SDMMC_EnableHighSpeed <br>
  53:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *         5) XMC_SDMMC_DisableHighSpeed <br>
  54:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
  55:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 2016-04-07:
  56:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *     - Added XMC_SDMMC_COMMAND_RESPONSE_t
  57:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
  58:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @endcond
  59:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
  60:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
  61:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #ifndef XMC_SDMMC_H
  62:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #define XMC_SDMMC_H
  63:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
  64:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /*******************************************************************************
  65:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * HEADER FILES
  66:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *******************************************************************************/
  67:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  
  68:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #include "xmc_common.h"
  69:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
  70:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #if defined (SDMMC)
  71:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
  72:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
  73:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @addtogroup XMClib XMC Peripheral Library
  74:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @{
  75:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
  76:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
  77:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
  78:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @addtogroup SDMMC
  79:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @brief Secure Digital/Multi Media Card (SDMMC) driver for the XMC4500 microcontroller
  80:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
  81:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The SDMMC peripheral provides an interface between SD/SDIO/MMC cards and the AHB. It handles
  82:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * the SD/SDIO protocol at transmission level. It automatically packs data and checks for CRC,
  83:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * start/end bits and format correctness. For SD cards, a maximum transfer rate of 24MB/sec is
  84:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * supported and for MMC cards, 48MB/sec.
  85:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
  86:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The peripheral can be used for applications that require large storage memory; e.g. Data logging
  87:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * firmware updates or an embedded database.
  88:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
  89:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The SDMMC low level driver provides functions to configure and initialize the SDMMC hardware
  90:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * peripheral.
  91:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @{
  92:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
  93:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
  94:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /*******************************************************************************
  95:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * MACROS
  96:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *******************************************************************************/
  97:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
  98:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
  99:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * A convenient symbol for the SDMMC peripheral base address
 100:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 101:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #if defined (SDMMC)
 102:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** # define XMC_SDMMC ((XMC_SDMMC_t *)SDMMC_BASE)
 103:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #else
 104:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** # error 'SDMMC' base peripheral pointer not defined
 105:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #endif
 106:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 107:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /*
 108:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Check for valid ACMD errors <br>
 109:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 110:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 111:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 112:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #define XMC_SDMMC_CHECK_MODULE_PTR(p) ((p) == XMC_SDMMC)
 113:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 114:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /*
 115:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Check for valid ACMD errors <br>
 116:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 117:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 118:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 119:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #define XMC_SDMMC_CHECK_ACMD_ERR(v)\
 120:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   ((v == XMC_SDMMC_ACMD12_NOT_EXEC_ERR) ||\
 121:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (v == XMC_SDMMC_ACMD_TIMEOUT_ERR)    ||\
 122:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (v == XMC_SDMMC_ACMD_CRC_ERR)        ||\
 123:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (v == XMC_SDMMC_ACMD_END_BIT_ERR)    ||\
 124:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (v == XMC_SDMMC_ACMD_IND_ERR)        ||\
 125:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (v == XMC_SDMMC_CMD_NOT_ISSUED_BY_ACMD12_ERR))
 126:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 127:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /*
 128:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Check for valid SDCLK divider frequency <br>
 129:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 130:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 131:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 132:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #define XMC_SDMMC_CHECK_SDCLK_FREQ(f)\
 133:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   ((f == XMC_SDMMC_CLK_DIV_1)           ||\
 134:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (f == XMC_SDMMC_CLK_DIV_2)           ||\
 135:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (f == XMC_SDMMC_CLK_DIV_4)           ||\
 136:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (f == XMC_SDMMC_CLK_DIV_8)           ||\
 137:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (f == XMC_SDMMC_CLK_DIV_16)          ||\
 138:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (f == XMC_SDMMC_CLK_DIV_32)          ||\
 139:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (f == XMC_SDMMC_CLK_DIV_64)          ||\
 140:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (f == XMC_SDMMC_CLK_DIV_128)         ||\
 141:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (f == XMC_SDMMC_CLK_DIV_256))
 142:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 143:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /*
 144:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Check for valid bus voltage levels <br>
 145:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 146:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 147:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 148:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #define XMC_SDMMC_CHECK_BUS_VOLTAGE(v)\
 149:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   (v == XMC_SDMMC_BUS_VOLTAGE_3_3_VOLTS)
 150:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 151:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /*
 152:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Check for valid data timeout counter values <br>
 153:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 154:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 155:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 156:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #define XMC_SDMMC_CHECK_DAT_TIMEOUT_COUNTER(c)\
 157:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   ((c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_13) ||\
 158:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_14) ||\
 159:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_15) ||\
 160:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_16) ||\
 161:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_17) ||\
 162:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_18) ||\
 163:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_19) ||\
 164:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_20) ||\
 165:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_21) ||\
 166:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_22) ||\
 167:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_23) ||\
 168:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_24) ||\
 169:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_25) ||\
 170:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_26) ||\
 171:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_27))
 172:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 173:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /*
 174:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Valid number of data lines <br>
 175:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 176:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 177:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 178:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #define XMC_SDMMC_CHECK_DATA_LINES(l)\
 179:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   ((l == XMC_SDMMC_DATA_LINES_1)        ||\
 180:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (l == XMC_SDMMC_DATA_LINES_4)        ||\
 181:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (l == XMC_SDMMC_DATA_LINES_8))
 182:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 183:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /*
 184:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Check data transfer dir: Host to card and vice-versa <br>
 185:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 186:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 187:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 188:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #define XMC_SDMMC_CHECK_DATA_TRANSFER_DIR(d)\
 189:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   ((d == XMC_SDMMC_DATA_TRANSFER_HOST_TO_CARD)   ||\
 190:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****    (d == XMC_SDMMC_DATA_TRANSFER_CARD_TO_HOST))
 191:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 192:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /*
 193:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Min and max number of delay elements <br>
 194:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 195:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 196:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 197:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #define XMC_SDMMC_MIN_DELAY_ELEMENTS (0U)
 198:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #define XMC_SDMMC_MAX_DELAY_ELEMENTS (15U)
 199:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 200:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /*******************************************************************************
 201:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * ENUMS
 202:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *******************************************************************************/
 203:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 204:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 205:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Number of data lines for SDMMC data transfer
 206:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 207:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** typedef enum
 208:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 209:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DATA_LINES_1 = 0x00U, /**< Single data line mode */
 210:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DATA_LINES_4 = 0x02U, /**< 4-bit mode */
 211:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DATA_LINES_8 = 0x20U  /**< SD 8-bit mode */
 212:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** } XMC_SDMMC_DATA_LINES_t;
 213:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 214:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 215:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Valid SD clock frequency divider selection
 216:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 217:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** typedef enum
 218:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 219:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_CLK_DIV_1   = 0x00U, /**< Base clock (10 Mhz -> 63 Mhz) */
 220:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_CLK_DIV_2   = 0x01U, /**< Base clock divided by 2 */
 221:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_CLK_DIV_4   = 0x02U, /**< Base clock divided by 4 */
 222:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_CLK_DIV_8   = 0x04U, /**< Base clock divided by 8 */
 223:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_CLK_DIV_16  = 0x08U, /**< Base clock divided by 16 */
 224:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_CLK_DIV_32  = 0x10U, /**< Base clock divided by 32 */
 225:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_CLK_DIV_64  = 0x20U, /**< Base clock divided by 64 */
 226:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_CLK_DIV_128 = 0x40U, /**< Base clock divided by 128 */
 227:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_CLK_DIV_256 = 0x80U  /**< Base clock divided by 256 */
 228:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** } XMC_SDMMC_SDCLK_FREQ_SEL_t;
 229:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 230:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 231:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Status return values for the SDMMC low level driver
 232:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 233:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** typedef enum
 234:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 235:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_STATUS_SUCCESS       = 0U, /**< Operation successful */
 236:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_STATUS_CMD_LINE_BUSY,      /**< Command line busy */
 237:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_STATUS_DAT_LINE_BUSY       /**< Data line busy */
 238:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** } XMC_SDMMC_STATUS_t;
 239:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 240:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 241:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * SDMMC events (Normal and error events)
 242:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 243:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** typedef enum
 244:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 245:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_CMD_COMPLETE       = 0x01U, /**< Command complete event */
 246:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_TX_COMPLETE        = 0x02U, /**< Transmit complete event */
 247:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_BLOCK_GAP_EVENT    = 0x04U, /**< Block gap event */
 248:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_BUFFER_WRITE_READY = 0x10U, /**< Buffer write ready event */
 249:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_BUFFER_READ_READY  = 0x20U, /**< Buffer read ready event */
 250:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_CARD_INS           = 0x40U, /**< Card insert event */
 251:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_CARD_REMOVAL       = 0x80U, /**< Card removal event */
 252:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_CARD_INT           = 0x100U, /**< Card INT event */
 253:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_CARD_ERR           = 0x8000U, /**< Card error interrupt */
 254:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_CMD_TIMEOUT_ERR    = ((uint32_t)0x01 << 16U),   /**< Command time-out error */
 255:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_CMD_CRC_ERR        = ((uint32_t)0x02U << 16U),  /**< Command CRC error */
 256:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_CMD_END_BIT_ERR    = ((uint32_t)0x04U << 16U),  /**< Command end bit error */
 257:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_CMD_IND_ERR        = ((uint32_t)0x08U << 16U),  /**< Command index error */
 258:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DATA_TIMEOUT_ERR   = ((uint32_t)0x10U << 16U),  /**< Data time-out error */
 259:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DATA_CRC_ERR       = ((uint32_t)0x20U << 16U),  /**< Data CRC error */
 260:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DATA_END_BIT_ERR   = ((uint32_t)0x40U << 16U),  /**< Data end bit error */
 261:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_CURRENT_LIMIT_ERR  = ((uint32_t)0x80U << 16U),  /**< Current limit error */
 262:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_ACMD_ERR           = ((uint32_t)0x100U << 16U), /**< ACMD error */
 263:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_TARGET_RESP_ERR    = ((uint32_t)0x1000U << 16U) /**< Target response error */
 264:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** } XMC_SDMMC_EVENT_t;
 265:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 266:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 267:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * SDMMC wakeup events
 268:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 269:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** typedef enum
 270:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 271:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_WAKEUP_EN_CARD_INT = SDMMC_WAKEUP_CTRL_WAKEUP_EVENT_EN_INT_Msk, /**< Wakeup on card int
 272:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_WAKEUP_EN_CARD_INS = SDMMC_WAKEUP_CTRL_WAKEUP_EVENT_EN_INS_Msk, /**< Wakeup on SD card 
 273:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_WAKEUP_EN_CARD_REM = SDMMC_WAKEUP_CTRL_WAKEUP_EVENT_EN_REM_Msk  /**< Wakeup SD card rem
 274:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** } XMC_SDMMC_WAKEUP_EVENT_t;
 275:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 276:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 277:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * SDMMC software reset modes
 278:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 279:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** typedef enum
 280:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 281:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_SW_RESET_ALL    = SDMMC_SW_RESET_SW_RST_ALL_Msk,      /**< Software reset all */
 282:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_SW_RST_CMD_LINE = SDMMC_SW_RESET_SW_RST_CMD_LINE_Msk, /**< Software reset command line 
 283:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_SW_RST_DAT_LINE = SDMMC_SW_RESET_SW_RST_DAT_LINE_Msk  /**< Software reset data line */
 284:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** } XMC_SDMMC_SW_RESET_t;
 285:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 286:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 287:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * CMD12 response errors of Auto CMD12
 288:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 289:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** typedef enum
 290:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 291:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_ACMD12_NOT_EXEC_ERR = SDMMC_ACMD_ERR_STATUS_ACMD12_NOT_EXEC_ERR_Msk, /**< ACMD12 not ex
 292:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_ACMD_TIMEOUT_ERR    = SDMMC_ACMD_ERR_STATUS_ACMD_TIMEOUT_ERR_Msk,    /**< ACMD timeout 
 293:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_ACMD_CRC_ERR        = SDMMC_ACMD_ERR_STATUS_ACMD_CRC_ERR_Msk,        /**< ACMD CRC erro
 294:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_ACMD_END_BIT_ERR    = SDMMC_ACMD_ERR_STATUS_ACMD_END_BIT_ERR_Msk,    /**< ACMD end bit 
 295:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_ACMD_IND_ERR        = SDMMC_ACMD_ERR_STATUS_ACMD_IND_ERR_Msk,        /**< ACMD IND erro
 296:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_CMD_NOT_ISSUED_BY_ACMD12_ERR = SDMMC_ACMD_ERR_STATUS_CMD_NOT_ISSUED_BY_ACMD12_ERR_Msk /
 297:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** } XMC_SDMMC_ACMD_ERR_t;
 298:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 299:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 300:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * SDMMC response types
 301:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 302:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** typedef enum
 303:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 304:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_RESPONSE_TYPE_NO_RESPONSE = 0U, /**< No response */
 305:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_RESPONSE_TYPE_R1,               /**< Response type: R1 */
 306:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_RESPONSE_TYPE_R1b,              /**< Response type: R1b */
 307:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_RESPONSE_TYPE_R2,               /**< Response type: R2 */
 308:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_RESPONSE_TYPE_R3,               /**< Response type: R3 */
 309:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_RESPONSE_TYPE_R6,               /**< Response type: R6 */
 310:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_RESPONSE_TYPE_R7                /**< Response type: R7 */
 311:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** } XMC_SDMMC_RESPONSE_TYPE_t;
 312:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 313:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 314:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** * Command response selection
 315:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** */
 316:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** typedef enum XMC_SDMMC_COMMAND_RESPONSE
 317:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 318:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_COMMAND_RESPONSE_NONE = 0, /**< No Response */
 319:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_COMMAND_RESPONSE_LONG = 1, /**< Response length 136 */
 320:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_COMMAND_RESPONSE_SHORT = 2, /**< Response length 48 */
 321:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_COMMAND_RESPONSE_SHORT_BUSY = 3, /**< Response length 48 check Busy after response */
 322:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** } XMC_SDMMC_COMMAND_RESPONSE_t;
 323:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 324:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 325:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Types of SDMMC commands
 326:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 327:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** typedef enum
 328:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 329:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_COMMAND_TYPE_NORMAL  = 0U, /**< Command normal */
 330:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_COMMAND_TYPE_SUSPEND,      /**< Command suspend */
 331:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_COMMAND_TYPE_RESUME,       /**< Command resume */
 332:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_COMMAND_TYPE_ABORT         /**< Command abort */
 333:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** } XMC_SDMMC_COMMAND_TYPE_t;
 334:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 335:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 336:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * SDMMC transfer modes
 337:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 338:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** typedef enum
 339:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 340:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_TRANSFER_MODE_TYPE_SINGLE        = 0x00U, /**< Transfer mode type: single */
 341:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_TRANSFER_MODE_TYPE_INFINITE      = 0x20U, /**< Transfer mode type: infinite */
 342:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_TRANSFER_MODE_TYPE_MULTIPLE      = 0x22U, /**< Transfer mode type: multiple */
 343:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_TRANSFER_MODE_TYPE_STOP_MULTIPLE = 0x22U  /**< Transfer mode type: multiple stop */
 344:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** } XMC_SDMMC_TRANSFER_MODE_TYPE_t;
 345:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 346:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 347:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Auto command transfer modes
 348:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 349:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** typedef enum
 350:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 351:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_TRANSFER_MODE_AUTO_CMD_DISABLED = 0x00U, /**< ACMD mode disabled */
 352:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_TRANSFER_MODE_AUTO_CMD_12                /**< ACMD12 mode */
 353:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** } XMC_SDMMC_TRANSFER_MODE_AUTO_CMD_t;
 354:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 355:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 356:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * SDMMC bus voltage level
 357:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 358:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** typedef enum
 359:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 360:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_BUS_VOLTAGE_3_3_VOLTS = 0x07U
 361:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** } XMC_SDMMC_BUS_VOLTAGE_t;
 362:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 363:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 364:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Data line timeout counter values
 365:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 366:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** typedef enum
 367:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 368:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_13 = 0U, /** SDCLK * (2 ^ 13) */
 369:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_14 = 1U, /** SDCLK * (2 ^ 14) */
 370:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_15 = 2U, /** SDCLK * (2 ^ 15) */
 371:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_16 = 3U, /** SDCLK * (2 ^ 16) */
 372:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_17 = 4U, /** SDCLK * (2 ^ 17) */
 373:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_18 = 5U, /** SDCLK * (2 ^ 18) */
 374:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_19 = 6U, /** SDCLK * (2 ^ 19) */
 375:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_20 = 7U, /** SDCLK * (2 ^ 20) */
 376:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_21 = 8U, /** SDCLK * (2 ^ 21) */
 377:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_22 = 9U, /** SDCLK * (2 ^ 22) */
 378:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_23 = 10U, /** SDCLK * (2 ^ 23) */
 379:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_24 = 11U, /** SDCLK * (2 ^ 24) */
 380:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_25 = 12U, /** SDCLK * (2 ^ 25) */
 381:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_26 = 13U, /** SDCLK * (2 ^ 26) */
 382:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_27 = 14U, /** SDCLK * (2 ^ 27) */
 383:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** } XMC_SDMMC_DAT_TIMEOUT_COUNTER_t;
 384:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 385:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 386:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * SDMMC data transfer direction
 387:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 388:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** typedef enum
 389:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 390:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DATA_TRANSFER_HOST_TO_CARD = 0U, /** Host to card */
 391:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DATA_TRANSFER_CARD_TO_HOST       /** Card to host */
 392:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** } XMC_SDMMC_DATA_TRANSFER_DIR_t;
 393:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 394:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /*******************************************************************************
 395:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * DATA STRUCTURES
 396:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *******************************************************************************/
 397:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 398:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 399:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * SDMMC device structure <br>
 400:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 401:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The structure represents a collection of all hardware registers used
 402:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * to configure the SDMMC peripheral on the XMC4500 microcontroller. The
 403:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * registers can be accessed with ::XMC_SDMMC.
 404:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 405:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** typedef struct
 406:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 407:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __I  uint32_t  RESERVED0;
 408:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __IO uint16_t  BLOCK_SIZE;
 409:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __IO uint16_t  BLOCK_COUNT;
 410:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __IO uint32_t  ARGUMENT1;
 411:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __IO uint16_t  TRANSFER_MODE;
 412:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __IO uint16_t  COMMAND;
 413:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __I  uint32_t  RESPONSE[4];
 414:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __IO uint32_t  DATA_BUFFER;
 415:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __I  uint32_t  PRESENT_STATE;
 416:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __IO uint8_t   HOST_CTRL;
 417:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __IO uint8_t   POWER_CTRL;
 418:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __IO uint8_t   BLOCK_GAP_CTRL;
 419:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __IO uint8_t   WAKEUP_CTRL;
 420:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __IO uint16_t  CLOCK_CTRL;
 421:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __IO uint8_t   TIMEOUT_CTRL;
 422:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __IO uint8_t   SW_RESET;
 423:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __IO uint16_t  INT_STATUS_NORM;
 424:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __IO uint16_t  INT_STATUS_ERR;
 425:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __IO uint16_t  EN_INT_STATUS_NORM;
 426:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __IO uint16_t  EN_INT_STATUS_ERR;
 427:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __IO uint16_t  EN_INT_SIGNAL_NORM;
 428:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __IO uint16_t  EN_INT_SIGNAL_ERR;
 429:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __I  uint16_t  ACMD_ERR_STATUS;
 430:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __I  uint16_t  RESERVED1[9];
 431:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __O  uint16_t  FORCE_EVENT_ACMD_ERR_STATUS;
 432:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __O  uint16_t  FORCE_EVENT_ERR_STATUS;
 433:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __I  uint32_t  RESERVED2[8];
 434:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __O  uint32_t  DEBUG_SEL;
 435:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __I  uint32_t  RESERVED3[30];
 436:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __IO uint32_t  SPI;
 437:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __I  uint32_t  RESERVED4[2];
 438:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   __I  uint16_t  SLOT_INT_STATUS;
 439:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** } XMC_SDMMC_t;
 440:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 441:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /* Anonymous structure/union guard start */
 442:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #if defined (__CC_ARM)
 443:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   #pragma push
 444:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   #pragma anon_unions
 445:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #elif defined (__TASKING__)
 446:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   #pragma warning 586
 447:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #endif
 448:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 449:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 450:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Present state of the SDMMC host controller <br>
 451:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 452:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The structure presents a convenient way to obtain the SDMMC peripheral's
 453:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * present state information (for example, the write protect pin level). The
 454:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * XMC_SDMMC_GetPresentState() API can be used to populate the structure
 455:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * with the state of the SD host controller.
 456:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 457:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** typedef union
 458:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 459:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   struct
 460:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   {
 461:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****     uint32_t command_inihibit_cmd 	 : 1; /**< Command: Inhibit command */
 462:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 	uint32_t command_inihibit_dat 	 : 1; /**< Command: Inhibit data */
 463:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 	uint32_t dat_line_active 		 : 1; /**< Data line active */
 464:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 	uint32_t 						 : 5;
 465:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 	uint32_t write_transfer_active 	 : 1; /**< Write transfer active */
 466:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 	uint32_t read_transfer_active 	 : 1; /**< Read transfer active */
 467:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 	uint32_t buffer_write_enable 	 : 1; /**< Buffer write enable */
 468:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 	uint32_t buffer_read_enable 	 : 1; /**< Buffer read enable */
 469:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 	uint32_t 						 : 4;
 470:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 	uint32_t card_inserted 			 : 1; /**< Card inserted */
 471:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 	uint32_t card_state_stable 		 : 1; /**< Card state stable */
 472:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 	uint32_t card_detect_pin_level 	 : 1; /**< Card detect pin level */
 473:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 	uint32_t write_protect_pin_level : 1; /**< Write protect pin level */
 474:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 	uint32_t dat_3_0_pin_level 		 : 4; /**< Data 3_0 pin level */
 475:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 	uint32_t cmd_line_level          : 1; /**< Command line level */
 476:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 	uint32_t dat7_4_pin_level        : 4; /**< Data 7_4 pin level */
 477:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 	uint32_t                         : 3;
 478:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   };
 479:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   uint32_t b32;
 480:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** } XMC_SDMMC_PRESENT_STATE_t;
 481:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 482:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 483:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * SDMMC transfer mode configuration
 484:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 485:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** typedef struct
 486:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 487:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   uint32_t block_size;
 488:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   uint32_t num_blocks;
 489:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_TRANSFER_MODE_TYPE_t type;
 490:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_TRANSFER_MODE_AUTO_CMD_t auto_cmd;
 491:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_DATA_TRANSFER_DIR_t direction;
 492:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** } XMC_SDMMC_TRANSFER_MODE_t;
 493:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 494:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 495:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Represent an SDMMC command <br>
 496:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 497:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The structure holds the configuration for an SDMMC command. The SDMMC
 498:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * COMMAND register is a 16-bit register which is responsible for enabling
 499:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * configuration parameters like command type, response type, index check
 500:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * enable (and a few more). Once SDMMC.COMMAND is configured, the
 501:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * XMC_SDMMC_SendCommand() function can be used to send the command.
 502:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 503:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** typedef union
 504:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 505:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   struct
 506:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   {
 507:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****     uint16_t response_type_sel : 2; /**< Response type select ::XMC_SDMMC_COMMAND_RESPONSE_t */
 508:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****     uint16_t                   : 1;
 509:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****     uint16_t crc_check_en      : 1; /**< Command CRC check enable */
 510:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****     uint16_t index_check_en    : 1; /**< Command index check enable */
 511:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****     uint16_t dat_present_sel   : 1; /**< Data present select */
 512:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****     uint16_t cmd_type          : 2; /**< Command type ::XMC_SDMMC_COMMAND_TYPE_t */
 513:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****     uint16_t cmd_index         : 6; /**< Command index */
 514:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****     uint16_t                   : 2;
 515:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   };
 516:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   uint16_t cmd;
 517:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** } XMC_SDMMC_COMMAND_t;
 518:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 519:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /* Anonymous structure/union guard end */
 520:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #if defined (__CC_ARM)
 521:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   #pragma pop
 522:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #elif defined (__TASKING__)
 523:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   #pragma warning restore
 524:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #endif
 525:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 526:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 527:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Card response structure
 528:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 529:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** typedef struct
 530:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 531:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   uint32_t response_0;
 532:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   uint32_t response_2;
 533:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   uint32_t response_4;
 534:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   uint32_t response_6;
 535:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** } XMC_SDMMC_RESPONSE_t;
 536:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 537:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 538:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * SDMMC configuration data structure <br>
 539:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 540:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The structure is used to configure the bus width and the clock divider.
 541:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 542:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** typedef struct
 543:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 544:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   uint8_t bus_width; /**< SDMMC bus width */
 545:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_SDCLK_FREQ_SEL_t clock_divider; /**< SDMMC clock divider */
 546:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** } XMC_SDMMC_CONFIG_t;
 547:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 548:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /*******************************************************************************
 549:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * API PROTOTYPES
 550:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *******************************************************************************/
 551:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 552:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #ifdef __cplusplus
 553:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** extern "C" {
 554:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** #endif
 555:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 556:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 557:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 558:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return bool
 559:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 560:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 561:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Get power status of the SDMMC peripheral <br>
 562:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 563:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 564:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function checks the SD_BUS_POWER bit-field of the POWER_CTRL register and returns
 565:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * a boolean value - "on" or "off".
 566:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 567:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** bool XMC_SDMMC_GetPowerStatus(XMC_SDMMC_t *const sdmmc);
 568:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 569:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 570:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 571:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
 572:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 573:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 574:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Enable SDMMC peripheral <br>
 575:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 576:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 577:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function de-asserts the peripheral reset. The peripheral needs to be initialized.
 578:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 579:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** void XMC_SDMMC_Enable(XMC_SDMMC_t *const sdmmc);
 580:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 581:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 582:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 583:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
 584:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 585:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 586:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Disable SDMMC peripheral <br>
 587:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 588:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 589:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function asserts the peripheral reset.
 590:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 591:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** void XMC_SDMMC_Disable(XMC_SDMMC_t *const sdmmc);
 592:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 593:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 594:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 595:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param config A pointer to a constant XMC_SDMMC_CONFIG_t structure containing the
 596:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *               bus width and clock divider configuration
 597:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return ::XMC_SDMMC_STATUS_SUCCESS
 598:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 599:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 600:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Initialize the SDMMC peripheral <br>
 601:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 602:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 603:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function enables the SDMMC peripheral, sets the internal clock divider register
 604:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * and sets the bus width.
 605:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 606:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** XMC_SDMMC_STATUS_t XMC_SDMMC_Init(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_CONFIG_t *config);
 607:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 608:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 609:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 610:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param event A valid SDMMC event (XMC_SDMMC_EVENT_t) or a valid combination of
 611:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *              logically OR'd events
 612:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
 613:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 614:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 615:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Enable SDMMC normal and error event(s) <br>
 616:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 617:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 618:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function first sets the bit-fields of EN_INT_STATUS_NORM and EN_INT_STATUS_ERR
 619:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * registers to enable interrupt status for requested normal/error SDMMC events. It then
 620:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * sets the bit-fields of EN_INT_SIGNAL_NORM and EN_INT_SIGNAL_ERR to enable the
 621:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * interrupt generation for the requested events.
 622:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 623:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** void XMC_SDMMC_EnableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event);
 624:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 625:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 626:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 627:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param event A valid SDMMC event (XMC_SDMMC_EVENT_t) or a valid combination of
 628:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *              logically OR'd events
 629:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
 630:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 631:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 632:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Disable normal and error SDMMC event(s) <br>
 633:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 634:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 635:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function disables the interrupt generation for the requested events by clearing
 636:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * the bit-fields of EN_INT_SIGNAL_NORM and EN_INT_SIGNAL_ERR registers.
 637:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 638:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Note:</b><br>
 639:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The XMC_SDMMC_DisableEvent() function doesn't reset the the interrupt status. One
 640:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * may still use XMC_SDMMC_GetEvent() to check the status of requested events even if
 641:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * the interrupt generation is already disabled.
 642:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 643:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** void XMC_SDMMC_DisableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event);
 644:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 645:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 646:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 647:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param event A valid SDMMC event (XMC_SDMMC_EVENT_t) or a valid combination of
 648:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *              logically OR'd events
 649:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
 650:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 651:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 652:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Clear SDMMC event(s) <br>
 653:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 654:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 655:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function clears requested normal/error events by settings the bit-fields of
 656:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * the INT_STATUS register. Please check SDMMC_INT_STATUS_NORM in the XMC45000
 657:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * manual for more details.
 658:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 659:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** void XMC_SDMMC_ClearEvent(XMC_SDMMC_t *const sdmmc, uint32_t event);
 660:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 661:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 662:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 663:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param event A valid SDMMC event (XMC_SDMMC_EVENT_t)
 664:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return bool
 665:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 666:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 667:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Get SDMMC event status <br>
 668:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 669:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 670:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function returns the status of a single requested (normal/error) event by
 671:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * reading the appropriate bit-fields of the INT_STATUS register.
 672:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 673:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** bool XMC_SDMMC_GetEvent(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_EVENT_t event);
 674:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 675:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 676:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 677:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param event A valid SDMMC event (XMC_SDMMC_EVENT_t) or a valid combination of
 678:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *              logically OR'd events
 679:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
 680:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 681:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 682:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Enable event status <br>
 683:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 684:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 685:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function sets the bit-fields of EN_INT_STATUS_NORM and EN_INT_STATUS_ERR
 686:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * registers to enable interrupt status for requested normal/error SDMMC events.
 687:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 688:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** void XMC_SDMMC_EnableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event);
 689:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 690:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 691:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 692:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param event A valid SDMMC event (XMC_SDMMC_EVENT_t) or a valid combination of
 693:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *              logically OR'd events
 694:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
 695:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 696:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 697:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Disable event status <br>
 698:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 699:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 700:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function resets the bit-fields of EN_INT_STATUS_NORM and EN_INT_STATUS_ERR
 701:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * registers to disable interrupt status for requested normal/error SDMMC events.
 702:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 703:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** void XMC_SDMMC_DisableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event);
 704:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 705:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 706:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 707:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param event A valid SDMMC event (::XMC_SDMMC_EVENT_t) or a valid combination of
 708:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *              logically OR'd events
 709:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
 710:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 711:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 712:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Trigger SDMMC error events <br>
 713:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 714:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 715:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The SDMMC peripheral supports triggering of following error events: <br>
 716:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 717:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * ::XMC_SDMMC_CMD_TIMEOUT_ERR, ::XMC_SDMMC_CMD_CRC_ERR, ::XMC_SDMMC_CMD_END_BIT_ERR,
 718:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * ::XMC_SDMMC_CMD_IND_ERR, ::XMC_SDMMC_DATA_TIMEOUT_ERR, ::XMC_SDMMC_DATA_CRC_ERR,
 719:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * ::XMC_SDMMC_DATA_END_BIT_ERR, ::XMC_SDMMC_CURRENT_LIMIT_ERR, ::XMC_SDMMC_ACMD_ERR,
 720:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * ::XMC_SDMMC_TARGET_RESP_ERR
 721:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 722:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * For triggering Auto CMD12 error, see XMC_SDMMC_TriggerACMDErr()
 723:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 724:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_TriggerEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 725:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 726:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_TriggerEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 727:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   
 728:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   sdmmc->FORCE_EVENT_ERR_STATUS |= (uint16_t)(event >> 16U);
 729:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
 730:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 731:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 732:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 733:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return bool
 734:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 735:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 736:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Check if any error event has occured <br>
 737:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 738:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 739:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function can typically be used for writing an error interrupt recovery routine.
 740:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Should any error be indicated (If XMC_SDMMC_IsAnyErrorEvent() returns true), the
 741:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * routine may then clear the event after indicating the error event and reset the
 742:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * SDMMC command and data lines.
 743:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 744:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE bool XMC_SDMMC_IsAnyErrorEvent(XMC_SDMMC_t *const sdmmc)
 745:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 746:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_IsAnyErrorEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc)
 747:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 748:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   return (bool)(sdmmc->INT_STATUS_ERR);
 749:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
 750:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 751:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 752:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 753:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param event A valid SDMMC wakeup event (::XMC_SDMMC_WAKEUP_EVENT_t) or a valid combination
 754:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *              of logically OR'd wakeup events
 755:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
 756:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 757:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 758:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Enable wakeup event(s) <br>
 759:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 760:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 761:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function enables SDMMC wakeup events by setting appropriate bit-fields of the WAKEUP_CTRL
 762:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * register. <br>
 763:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 764:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * List of supported wakeup events -> Wakeup on: <br>
 765:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 1) Card interrupt <br>
 766:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 2) SD card insertion <br>
 767:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 3) SD card removal <br>
 768:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 769:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_EnableWakeupEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 770:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 771:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_EnableWakeupEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmm
 772:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   
 773:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   sdmmc->WAKEUP_CTRL |= (uint8_t)event;
 774:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
 775:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 776:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 777:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 778:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param event A valid SDMMC wakeup event (::XMC_SDMMC_WAKEUP_EVENT_t) or a valid combination
 779:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *              of logically OR'd wakeup events
 780:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
 781:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 782:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 783:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Disable wakeup event(s) <br>
 784:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 785:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 786:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function disables SDMMC wakeup events by clearing appropriate bit-fields of the WAKEUP_CTRL
 787:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * register. <br>
 788:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 789:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * List of supported wakeup events -> Wakeup on: <br>
 790:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 1) Card interrupt <br>
 791:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 2) SD card insertion <br>
 792:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 3) SD card removal <br>
 793:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 794:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_DisableWakeupEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 795:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 796:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_DisableWakeupEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
 797:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   
 798:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   sdmmc->WAKEUP_CTRL &= (uint8_t)~event;
 799:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
 800:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 801:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 802:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 803:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param error A valid SDMMC ACMD error (::XMC_SDMMC_ACMD_ERR_t)
 804:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return bool
 805:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 806:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 807:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Get status of Auto CMD12 errors <br>
 808:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 809:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 810:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function detects the presence of an Auto CMD12 error. A boolean is returned to
 811:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * indicate if an error is detected.
 812:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 813:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE bool XMC_SDMMC_GetACMDErrStatus(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_ACMD_ERR_t erro
 814:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 815:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_GetACMDErrStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc
 816:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_GetACMDErrStatus: Invalid ACMD response error", XMC_SDMMC_CHECK_ACMD_ERR(er
 817:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   
 818:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   return (bool)(sdmmc->ACMD_ERR_STATUS & (uint16_t)error);
 819:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
 820:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 821:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 822:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 823:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param error A valid SDMMC ACMD error (::XMC_SDMMC_ACMD_ERR_t) or a valid combination
 824:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *              of logically OR'd ACMD error events
 825:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
 826:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 827:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 828:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Triggers Auto CMD12 error(s) <br>
 829:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 830:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 831:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * This function triggers Auto CMD12 error(s) by setting appropriate bit-fields of the
 832:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * FORCE_EVENT_ACMD_ERR_STATUS register.
 833:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 834:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Related APIs: </b><br>
 835:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * XMC_SDMMC_TriggerEvent()
 836:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 837:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_TriggerACMDErr(XMC_SDMMC_t *const sdmmc, uint32_t error)
 838:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 839:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_TriggerACMDErr: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc))
 840:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   
 841:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   sdmmc->FORCE_EVENT_ACMD_ERR_STATUS |= (uint16_t)error;
 842:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
 843:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 844:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 845:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 846:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return uint32_t The value held in the SDMMC FIFO
 847:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 848:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 849:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Use this function to read a single word (32 bits) from the SDMMC FIFO. <br>
 850:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 851:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE uint32_t XMC_SDMMC_ReadFIFO(XMC_SDMMC_t *const sdmmc)
 852:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 853:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_ReadFIFO: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 854:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 855:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   return (sdmmc->DATA_BUFFER);
 856:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
 857:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 858:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 859:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 860:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param data Pointer to a data word (32 bits) that needs to be written to the FIFO
 861:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
 862:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 863:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 864:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Use this function to write a single word (32 bits) to the SDMMC FIFO. <br>
 865:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 866:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_WriteFIFO(XMC_SDMMC_t *const sdmmc, uint32_t *data)
 867:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 868:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_WriteFIFO: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 869:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 870:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   sdmmc->DATA_BUFFER = *data;
 871:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
 872:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 873:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 874:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 875:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
 876:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 877:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 878:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Enable SDMMC bus power <br>
 879:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 880:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 881:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function sets the SD_BUS_POWER bit-field in the POWER_CTRL register, enabling the
 882:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * bus power. It may be invoked after enabling the SD clock (XMC_SDMMC_SDClockEnable()).
 883:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 884:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_BusPowerOn(XMC_SDMMC_t *const sdmmc)
 885:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 886:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_BusPowerOn: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 887:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 888:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   sdmmc->POWER_CTRL |= (uint8_t)(SDMMC_POWER_CTRL_SD_BUS_POWER_Msk);
 889:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
 890:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 891:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 892:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 893:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
 894:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 895:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 896:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Disable SDMMC bus power <br>
 897:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 898:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 899:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function resets the SD_BUS_POWER bit-field in the POWER_CTRL register, disabling the
 900:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * bus power.
 901:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 902:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_BusPowerOff(XMC_SDMMC_t *const sdmmc)
 903:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 904:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_BusPowerOff: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 905:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 906:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   sdmmc->POWER_CTRL &= (uint8_t)~SDMMC_POWER_CTRL_SD_BUS_POWER_Msk;
 907:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
 908:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 909:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 910:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 911:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
 912:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 913:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 914:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Enable the internal SDMMC clock <br>
 915:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 916:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 917:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function enables the internal clock of the SDMMC peripheral. To check if the
 918:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * clock is stable, use XMC_SDMMC_GetClockStability().
 919:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 920:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Note: </b><br>
 921:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Invoke XMC_SDMMC_Init() before using this function.
 922:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 923:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_Start(XMC_SDMMC_t *const sdmmc)
 924:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 925:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_Start: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 926:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   
 927:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   /* Enable internal clock */
 928:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   sdmmc->CLOCK_CTRL |= (uint16_t)SDMMC_CLOCK_CTRL_INTERNAL_CLOCK_EN_Msk;
 929:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
 930:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 931:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 932:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 933:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return bool
 934:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 935:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 936:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Check internal clock stability <br>
 937:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 938:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 939:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Use this function to check the internal SDMMC clock stability. The function returns a
 940:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * boolean value indicating internal clock stability (true = stable)
 941:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 942:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE bool XMC_SDMMC_GetClockStability(XMC_SDMMC_t *const sdmmc)
 943:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 944:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_GetClockStability: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmm
 945:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   
 946:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   /* Return clock stability */
 947:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   return (bool)(sdmmc->CLOCK_CTRL & SDMMC_CLOCK_CTRL_INTERNAL_CLOCK_STABLE_Msk);
 948:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
 949:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 950:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 951:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 952:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
 953:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 954:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 955:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Disable internal SDMMC clock <br>
 956:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 957:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 958:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function disables the internal clock of the SDMMC peripheral. The SDMMC registers
 959:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * can still be read and written even if the internal clock is disabled.
 960:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 961:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_Stop(XMC_SDMMC_t *const sdmmc)
 962:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 963:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_Stop: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 964:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 965:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   sdmmc->CLOCK_CTRL &= (uint16_t)~SDMMC_CLOCK_CTRL_INTERNAL_CLOCK_EN_Msk;
 966:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
 967:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 968:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 969:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 970:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
 971:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 972:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 973:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Enable the SD clock <br>
 974:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 975:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 976:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function sets the SDCLOCK_EN bit-field of the CLOCK_CTRL register, enabling the
 977:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * SD clock. It can be invoked after the internal clock has achieved stability. SD card
 978:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * initialization process may then follow.
 979:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 980:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_SDClockEnable(XMC_SDMMC_t *const sdmmc)
 981:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
 982:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SDClockEnable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 983:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 984:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   sdmmc->CLOCK_CTRL |= (uint16_t)SDMMC_CLOCK_CTRL_SDCLOCK_EN_Msk;
 985:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
 986:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
 987:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
 988:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 989:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
 990:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 991:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 992:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Disable the SD clock <br>
 993:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
 994:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
 995:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function resets the SDCLOCK_EN bit-field of the CLOCK_CTRL register, disabling the
 996:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * SD clock. It can be used alongside a SD card information reset routine (if required).
 997:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
 998:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_SDClockDisable(XMC_SDMMC_t *const sdmmc)
 999:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
1000:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SDClockDisable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc))
1001:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1002:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   sdmmc->CLOCK_CTRL &= (uint16_t)~SDMMC_CLOCK_CTRL_SDCLOCK_EN_Msk;
1003:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
1004:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1005:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
1006:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1007:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param reset_mode Reset mode or a bitwise combination of modes
1008:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
1009:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1010:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1011:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Set SDMMC software reset request <br>
1012:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1013:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
1014:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function sets in the SDMMC SW_RESET register: <br>
1015:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 1) bit 0 to reset all <br>
1016:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 2) bit 1 to reset CMD line <br>
1017:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 3) bit 2 reset DAT line <br>
1018:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1019:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * It is typically used to reset the SD HOST controller's registers.
1020:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
1021:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_SetSWReset(XMC_SDMMC_t *const sdmmc, uint32_t reset_mode)
1022:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
1023:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SetSWReset: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
1024:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1025:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   sdmmc->SW_RESET |= (uint8_t)reset_mode;
1026:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
1027:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1028:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
1029:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1030:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return Software reset status
1031:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1032:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1033:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Get SDMMC software reset status <br>
1034:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1035:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
1036:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The SD host takes some time to reset its registers after invoking XMC_SDMMC_SetSWReset().
1037:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Since XMC_SDMMC_SetSWReset() is a non-blocking function, XMC_SDMMC_GetSWResetStatus() has
1038:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * been provided to check the software reset status. The return value needs to be masked
1039:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * with the reset mode (XMC_SDMMC_SW_RESET_t) to get a specific software reset status value.
1040:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
1041:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE uint32_t XMC_SDMMC_GetSWResetStatus(XMC_SDMMC_t *const sdmmc)
1042:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
1043:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_GetSWResetStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc
1044:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   
1045:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   return (uint32_t)(sdmmc->SW_RESET);
1046:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
1047:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1048:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
1049:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1050:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return XMC_SDMMC_PRESENT_STATE_t A structure storing the present state of the host controller
1051:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1052:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1053:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Get the present state of the SDMMC host controller <br>
1054:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1055:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
1056:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Get the values of each bit-field in SDMMC_PRESENT_STATE register
1057:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function call populates an instance of the XMC_SDMMC_PRESENT_STATE_t structure with
1058:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * the state of the SD host controller and returns it to the caller.
1059:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
1060:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE XMC_SDMMC_PRESENT_STATE_t XMC_SDMMC_GetPresentState(const XMC_SDMMC_t *const sdmmc)
1061:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
1062:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_SDMMC_PRESENT_STATE_t result;
1063:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1064:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_GetPresentState: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc)
1065:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1066:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   result.b32 = (uint32_t)sdmmc->PRESENT_STATE;
1067:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1068:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   return result;
1069:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
1070:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1071:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
1072:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1073:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return bool SDMMC command line status
1074:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1075:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1076:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Check if the command line is busy <br>
1077:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1078:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
1079:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function reads the SDMMC PRESENT_STATE register and returns "true" if the command
1080:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * line is busy ("false" otherwise). The command line must be free before sending an SDMMC
1081:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * command with XMC_SDMMC_SendCommand().
1082:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
1083:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE bool XMC_SDMMC_IsCommandLineBusy(XMC_SDMMC_t *const sdmmc)
1084:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
1085:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_IsCommandLineBusy: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmm
1086:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1087:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   return (bool)(sdmmc->PRESENT_STATE & SDMMC_PRESENT_STATE_COMMAND_INHIBIT_CMD_Msk);
1088:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
1089:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1090:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
1091:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1092:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return bool SDMMC data line status
1093:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1094:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1095:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Check if the data line is busy <br>
1096:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1097:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
1098:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function reads the SDMMC PRESENT_STATE register and returns "true" if the data
1099:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * line is busy ("false" otherwise). The data line must be free before sending an SDMMC
1100:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * command with XMC_SDMMC_SendCommand().
1101:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
1102:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE bool XMC_SDMMC_IsDataLineBusy(XMC_SDMMC_t *const sdmmc)
1103:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
1104:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_IsDataLineBusy: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc))
1105:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1106:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   return (bool)(sdmmc->PRESENT_STATE & SDMMC_PRESENT_STATE_COMMAND_INHIBIT_DAT_Msk);
1107:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
1108:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1109:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
1110:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1111:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return bool Status of all data lines
1112:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1113:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1114:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Check if all data line are high <br>
1115:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1116:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
1117:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function reads the SDMMC PRESENT_STATE register and returns "true" if all data
1118:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * lines are high. It can be used to handle SDMMC error conditions. For example, if an
1119:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * error event (XMC_SDMMC_IsAnyErrorEvent()) is detected and all data lines are high,
1120:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * the user code can conclude that the error is of a "recoverable" type.
1121:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
1122:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE bool XMC_SDMMC_IsAllDataLinesHigh(XMC_SDMMC_t *const sdmmc)
1123:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
1124:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_IsAllDataLinesHigh: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
1125:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1126:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   return ((((sdmmc->PRESENT_STATE & SDMMC_PRESENT_STATE_DAT_3_0_PIN_LEVEL_Msk) >>
1127:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 		    SDMMC_PRESENT_STATE_DAT_3_0_PIN_LEVEL_Pos) == 0x0FU) ? true : false);
1128:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
1129:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1130:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
1131:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1132:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param command A pointer to a constant of type XMC_SDMMC_COMMAND_t, pointing to the command conf
1133:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param arg Command argument
1134:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return ::XMC_SDMMC_STATUS_SUCCESS
1135:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1136:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1137:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Send normal SDMMC command <br>
1138:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1139:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
1140:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Use this function to send a normal SDMMC command. This non-blocking function sets the
1141:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * ARGUMENT1 and COMMAND registers. It is the user's responsibility to check if the command
1142:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * and data lines are busy (XMC_SDMMC_IsDataLineBusy(), XMC_SDMMC_IsCommandLineBusy()).
1143:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
1144:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** XMC_SDMMC_STATUS_t XMC_SDMMC_SendCommand(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_COMMAND_t *comma
1145:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1146:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
1147:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1148:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return uint32_t SDMMC command response
1149:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1150:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1151:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Get card response (no Auto command) <br>
1152:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1153:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
1154:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * This function returns [39:8] bits of the card response. The others are checked automatically
1155:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * by the peripheral. This function can be used with response type R1, R1b, R3, R4, R5, R5b, R6
1156:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * but it doesn't support the retrieving of R1 of Auto CMD 23 and R1b of Auto CMD 12. To get
1157:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * these responses, use XMC_SDMMC_GetAutoCommandResponse().
1158:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
1159:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE uint32_t XMC_SDMMC_GetCommandResponse(XMC_SDMMC_t *const sdmmc)
1160:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
1161:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_GetCommandResponse: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
1162:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   
1163:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   return (sdmmc->RESPONSE[0]);
1164:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
1165:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1166:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
1167:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1168:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return uint32_t Auto command response value
1169:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1170:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1171:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Get card response of Auto commands <br>
1172:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1173:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
1174:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * This function returns card response [39:8] bits of auto commands: R1 of Auto CMD 23 and
1175:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * R1b of Auto CMD 12.
1176:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
1177:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE uint32_t XMC_SDMMC_GetAutoCommandResponse(const XMC_SDMMC_t *const sdmmc)
1178:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
1179:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_GetAutoCommandResponse: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR
1180:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1181:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   return (sdmmc->RESPONSE[3]);
1182:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
1183:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1184:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
1185:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1186:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param response Pointer to structure type XMC_SDMMC_RESPONSE_t to store the full response
1187:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
1188:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1189:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1190:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Get card R2 response <br>
1191:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1192:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
1193:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The R2 response is 120 bits wide. The function reads all peripheral registers and store in
1194:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * the response data structure.
1195:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
1196:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** void XMC_SDMMC_GetR2Response(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_RESPONSE_t *const response);
1197:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1198:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
1199:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1200:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param transfer_mode Transfer mode configuration
1201:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
1202:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1203:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1204:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Configure data transfer mode <br>
1205:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1206:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
1207:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function configures block size, block count, type of data transfer, response type
1208:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * and sets the auto command configuration. Use this function to configure a multi-block
1209:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * SDMMC transfer.
1210:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
1211:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** void XMC_SDMMC_SetDataTransferMode(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_TRANSFER_MODE_t *const trans
1212:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1213:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
1214:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1215:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return uint32_t Number of blocks that need to be transferred
1216:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1217:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1218:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Get the number of blocks that need to be transferred <br>
1219:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1220:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
1221:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * This function is valid only for multiple block transfers. The host controller
1222:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * decrements the block count after each block transfer and stops when the count reaches
1223:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * zero. It can only be accessed when no transaction is happening (i.e after a transaction
1224:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * has stopped). This function returns an invalid value during the transfer. <br>
1225:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1226:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * When saving transfer context as a result of the suspend command, the number of blocks
1227:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * yet to be transferred can be determined by using this function.
1228:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
1229:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE uint32_t XMC_SDMMC_GetTransferBlocksNum(XMC_SDMMC_t *const sdmmc)
1230:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
1231:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_GetTransferBlocksNum: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(s
1232:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1233:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   return (uint32_t)(sdmmc->BLOCK_COUNT);
1234:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
1235:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1236:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
1237:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1238:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param enabled "true" to enable read wait control, "false" to disable read wait control.
1239:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
1240:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1241:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1242:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Configure read wait control <br>
1243:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1244:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
1245:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The read wait function is optional for SDIO cards. If the card supports read wait and
1246:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * XMC_SDMMC_GetTransferBlocksNum() is executed, the SDMMC peripheral will stop read data
1247:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * using DAT[2] line. If this feature is not enabled the peripheral has to stop the SD
1248:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * clock to hold read data, restricting commands generation. <br>
1249:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1250:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * When the host driver detects an SD card insertion, it sets this bit according to the
1251:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * CCCR of the SDIO card. If the card does not support read wait, this feature shall
1252:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * never be enabled otherwise a DAT line conflict may occur. If this feature is disabled,
1253:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Suspend/Resume cannot be supported.
1254:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
1255:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_SetReadWaitControl(XMC_SDMMC_t *const sdmmc, bool enabled)
1256:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
1257:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SetReadWaitControl: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
1258:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1259:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   sdmmc->BLOCK_GAP_CTRL = (uint8_t)((sdmmc->BLOCK_GAP_CTRL & (uint8_t)~SDMMC_BLOCK_GAP_CTRL_READ_WA
1260:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****                                     (uint8_t)((uint8_t)enabled << SDMMC_BLOCK_GAP_CTRL_READ_WAIT_CT
1261:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
1262:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1263:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
1264:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1265:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param enabled "true" to set stop at block gap, "false" for transfer
1266:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
1267:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1268:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1269:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Stop at block gap request <br>
1270:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1271:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
1272:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function is used to terminate a transaction execution at the next block gap for
1273:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * non-DMA transfers.
1274:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
1275:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_SetStopAtBlockGap(XMC_SDMMC_t *const sdmmc, bool enabled)
1276:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
1277:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SetStopAtBlockGap: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmm
1278:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1279:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   sdmmc->BLOCK_GAP_CTRL = (uint8_t)((sdmmc->BLOCK_GAP_CTRL & (uint8_t)~SDMMC_BLOCK_GAP_CTRL_STOP_AT
1280:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****                                     (uint8_t)((uint8_t)enabled << SDMMC_BLOCK_GAP_CTRL_STOP_AT_BLOC
1281:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
1282:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1283:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
1284:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1285:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param enabled "true" to restart transaction, "false" is ignored
1286:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
1287:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1288:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1289:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Issue a continue request <br>
1290:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1291:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
1292:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function is used to restart a transaction which was stopped using the "Stop at
1293:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * block gap" request. (XMC_SDMMC_SetStopAtBlockGap())
1294:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
1295:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_SetContinueRequest(XMC_SDMMC_t *const sdmmc, bool enabled)
1296:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
1297:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SetContinueRequest: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
1298:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1299:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   sdmmc->BLOCK_GAP_CTRL = ((sdmmc->BLOCK_GAP_CTRL & (uint8_t)~SDMMC_BLOCK_GAP_CTRL_CONTINUE_REQ_Msk
1300:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****                            (uint8_t)((uint8_t)enabled << SDMMC_BLOCK_GAP_CTRL_CONTINUE_REQ_Pos));
1301:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
1302:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1303:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
1304:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1305:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return bool
1306:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1307:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1308:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Get continue request <br>
1309:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1310:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
1311:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function returns the status of the BLOCK_GAP_CTRL.CONTINUE_REQ bit-field. It
1312:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * returns "true" if the transaction is restarted after a "stop at block gap" request.
1313:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
1314:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE bool XMC_SDMMC_GetContinueRequest(XMC_SDMMC_t *const sdmmc)
1315:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
1316:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_GetContinueRequest: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
1317:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1318:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   return (bool)(sdmmc->BLOCK_GAP_CTRL & (uint8_t)(1U << SDMMC_BLOCK_GAP_CTRL_CONTINUE_REQ_Pos));
1319:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
1320:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1321:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
1322:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1323:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param config A pointer to the SDMMC configuration structure (::XMC_SDMMC_CONFIG_t)
1324:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
1325:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1326:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1327:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Enable interrupt at block gap <br>
1328:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1329:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
1330:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function sets the BLOCK_GAP_CTRL.INT_AT_BLOCK_GAP bit-field to enable interrupt
1331:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * at block gap for a multi-block transfer. This bit is only valid in a 4-bit mode of
1332:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * the SDIO card.
1333:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
1334:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_EnableInterruptAtBlockGap(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_
1335:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
1336:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_EnableInterruptAtBlockGap: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_
1337:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_EnableInterruptAtBlockGap: This operation is only valid in 4-bit mode",
1338:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****              (config->bus_width == XMC_SDMMC_DATA_LINES_1));
1339:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1340:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   sdmmc->BLOCK_GAP_CTRL |= (uint8_t)SDMMC_BLOCK_GAP_CTRL_INT_AT_BLOCK_GAP_Msk;
1341:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
1342:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1343:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
1344:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1345:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param config A pointer to the SDMMC configuration structure (::XMC_SDMMC_CONFIG_t)
1346:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
1347:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1348:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1349:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Disable interrupt at block gap <br>
1350:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1351:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
1352:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function resets the BLOCK_GAP_CTRL.INT_AT_BLOCK_GAP bit-field to disable interrupt
1353:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * at block gap. This bit is only valid in a 4-bit mode of the SDIO card.
1354:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
1355:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_DisableInterruptAtBlockGap(XMC_SDMMC_t *const sdmmc,
1356:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****                                                           const XMC_SDMMC_CONFIG_t *config)
1357:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1358:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
1359:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_EnableInterruptAtBlockGap: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_
1360:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_EnableInterruptAtBlockGap: This operation is only valid in 4-bit mode",
1361:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****              (config->bus_width == XMC_SDMMC_DATA_LINES_1));
1362:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1363:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   sdmmc->BLOCK_GAP_CTRL &= (uint8_t)~SDMMC_BLOCK_GAP_CTRL_INT_AT_BLOCK_GAP_Msk;
1364:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
1365:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1366:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
1367:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1368:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param clk Desired clock frequency (::XMC_SDMMC_SDCLK_FREQ_SEL_t)
1369:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
1370:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1371:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1372:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Set SD clock frequency <br>
1373:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1374:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
1375:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function sets the CLOCK_CTRL register to configure the frequency of the SD clock
1376:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * pin. The register is programmed with the divisor of the base clock frequency (clk).
1377:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1378:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The following settings are permitted (8-bit divided clock mode): <br>
1379:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 00H: base clock (10MHz->63MHz) <br>
1380:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 01H: base clock divided by 2   <br>
1381:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 10H: base clock divided by 32  <br>
1382:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 02H: base clock divided by 4   <br>
1383:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 04H: base clock divided by 8   <br>
1384:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 08H: base clock divided by 16  <br>
1385:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 20H: base clock divided by 64  <br>
1386:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 40H: base clock divided by 128 <br>
1387:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 80H: base clock divided by 256 <br>
1388:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1389:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Note: </b><br>
1390:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The internal clock should be disabled before updating frequency clock select. Please
1391:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * see section 2.2.14 -> "Clock Control Register" in the SD HOST specification for more
1392:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * information.
1393:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
1394:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_SDClockFreqSelect(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_SDCLK_FREQ_SEL
1395:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
1396:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SDClockFreqSelect: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmm
1397:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SDClockFreqSelect: Invalid clock frequency selection", XMC_SDMMC_CHECK_SDCL
1398:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1399:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   sdmmc->CLOCK_CTRL |= (uint16_t)((uint32_t)SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL_Msk &
1400:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****                                   (uint32_t)((uint32_t)clk << SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL_Pos))
1401:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
1402:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1403:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
1404:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1405:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param bus_voltage Desired bus voltage (::XMC_SDMMC_BUS_VOLTAGE_t)
1406:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
1407:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1408:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1409:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Set SDMMC bus voltage <br>
1410:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1411:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
1412:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * The function sets the CLOCK_CTRL register to configure the bus voltage. Currently,
1413:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * 3.3 volts is the supported voltage level. This function is relevant within the host
1414:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * controller initialization routine.
1415:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
1416:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_SetBusVoltage(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_BUS_VOLTAGE_t bus_
1417:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
1418:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SetBusVoltage: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
1419:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SetBusVoltage: Invalid bus voltage", XMC_SDMMC_CHECK_BUS_VOLTAGE(bus_voltag
1420:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1421:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   sdmmc->POWER_CTRL |= (uint8_t)((uint32_t)bus_voltage << SDMMC_POWER_CTRL_SD_BUS_VOLTAGE_SEL_Pos);
1422:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
1423:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1424:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** /**
1425:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1426:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @param timeout Data line timeout value
1427:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * @return None
1428:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1429:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1430:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Set data line timeout <br>
1431:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  *
1432:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * \par
1433:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * Use the function to set the interval by which the data line timeouts are detected. The
1434:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * timeout clock frequency is generated by dividing the SD clock (TMCLK) by the timeout argument.
1435:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  * This function must be called before setting the bus voltage (XMC_SDMMC_SetBusVoltage()).
1436:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****  */
1437:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_SetDataLineTimeout(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_DAT_TIMEOUT_C
1438:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** {
  27              	 .loc 1 1438 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
1439:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SetDataLineTimeout: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
1440:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SetDataLineTimeout: Invalid timeout", XMC_SDMMC_CHECK_DAT_TIMEOUT_COUNTER(t
1441:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** 
1442:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****   sdmmc->TIMEOUT_CTRL |= (uint8_t)(((uint32_t)timeout << SDMMC_TIMEOUT_CTRL_DAT_TIMEOUT_CNT_VAL_Pos
  45              	 .loc 1 1442 0
  46 000c 7B68     	 ldr r3,[r7,#4]
  47 000e 93F82E30 	 ldrb r3,[r3,#46]
  48 0012 DBB2     	 uxtb r3,r3
  49 0014 DAB2     	 uxtb r2,r3
  50 0016 FB78     	 ldrb r3,[r7,#3]
  51 0018 03F00F03 	 and r3,r3,#15
  52 001c DBB2     	 uxtb r3,r3
  53 001e 1343     	 orrs r3,r3,r2
  54 0020 DBB2     	 uxtb r3,r3
  55 0022 DAB2     	 uxtb r2,r3
  56 0024 7B68     	 ldr r3,[r7,#4]
  57 0026 83F82E20 	 strb r2,[r3,#46]
1443:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h ****                                    (uint32_t)SDMMC_TIMEOUT_CTRL_DAT_TIMEOUT_CNT_VAL_Msk);
1444:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_sdmmc.h **** }
  58              	 .loc 1 1444 0
  59 002a 0C37     	 adds r7,r7,#12
  60              	.LCFI3:
  61              	 .cfi_def_cfa_offset 4
  62 002c BD46     	 mov sp,r7
  63              	.LCFI4:
  64              	 .cfi_def_cfa_register 13
  65              	 
  66 002e 5DF8047B 	 ldr r7,[sp],#4
  67              	.LCFI5:
  68              	 .cfi_restore 7
  69              	 .cfi_def_cfa_offset 0
  70 0032 7047     	 bx lr
  71              	 .cfi_endproc
  72              	.LFE160:
  74              	 .section .text.XMC_SDMMC_GetPowerStatus,"ax",%progbits
  75              	 .align 2
  76              	 .global XMC_SDMMC_GetPowerStatus
  77              	 .thumb
  78              	 .thumb_func
  80              	XMC_SDMMC_GetPowerStatus:
  81              	.LFB200:
  82              	 .file 2 "../Libraries/XMCLib/src/xmc_sdmmc.c"
   1:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
   2:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
   3:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @file xmc_sdmmc.c
   4:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @date 2016-03-14
   5:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
   6:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_sdmmc.c ****  **************************************************************************************************
   8:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   9:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  10:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * All rights reserved.                        
  12:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *                                             
  13:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * following conditions are met:   
  15:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *                                                                              
  16:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * disclaimer.                        
  18:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 
  19:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 
  22:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * products derived from this software without specific prior written permission.                  
  24:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *                                                                              
  25:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *                                                                              
  33:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:../Libraries/XMCLib/src/xmc_sdmmc.c ****  **************************************************************************************************
  36:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  37:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Change History
  38:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * --------------
  39:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  40:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2015-02-20:
  41:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Initial <br>
  42:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Removed GetDriverVersion API <br>
  43:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  44:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2015-06-20:
  45:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Removed definition of GetDriverVersion API <br>
  46:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  47:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2016-03-14:
  48:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Values are directly assigned to the int status registers <br>
  49:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  50:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @endcond
  51:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  52:../Libraries/XMCLib/src/xmc_sdmmc.c ****  
  53:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
  54:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @addtogroup XMClib
  55:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @{
  56:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  57:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  58:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
  59:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @addtogroup SDMMC
  60:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @brief SDMMC driver
  61:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @{
  62:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  63:../Libraries/XMCLib/src/xmc_sdmmc.c ****  
  64:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
  65:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * HEADER FILES
  66:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
  67:../Libraries/XMCLib/src/xmc_sdmmc.c ****  
  68:../Libraries/XMCLib/src/xmc_sdmmc.c **** #include "xmc_sdmmc.h"
  69:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  70:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
  71:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * The SDMMC peripheral is only available on the
  72:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * XMC4500. The SDMMC definition can be found in
  73:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * the XMC4500.h (device header file).
  74:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  75:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined (SDMMC)
  76:../Libraries/XMCLib/src/xmc_sdmmc.c **** #include "xmc_scu.h"
  77:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  78:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
  79:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * MACROS
  80:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
  81:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  82:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
  83:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC error events <br>
  84:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  85:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
  86:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  87:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_ERROR_EVENT(e)\
  88:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((e == XMC_SDMMC_CMD_TIMEOUT_ERR)     ||\
  89:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_CRC_ERR)         ||\
  90:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_END_BIT_ERR)     ||\
  91:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_IND_ERR)         ||\
  92:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_TIMEOUT_ERR)    ||\
  93:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_CRC_ERR)        ||\
  94:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_END_BIT_ERR)    ||\
  95:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CURRENT_LIMIT_ERR)   ||\
  96:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_ACMD_ERR)            ||\
  97:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_TARGET_RESP_ERR))
  98:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  99:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 100:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC normal events <br>
 101:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 102:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 103:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 104:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_NORMAL_EVENT(e)\
 105:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((e == XMC_SDMMC_CMD_COMPLETE)        ||\
 106:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_TX_COMPLETE)         ||\
 107:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BLOCK_GAP_EVENT)     ||\
 108:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BUFFER_WRITE_READY)  ||\
 109:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BUFFER_READ_READY)   ||\
 110:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_INS)            ||\
 111:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_REMOVAL)        ||\
 112:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_INT))
 113:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 114:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 115:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for both normal and error events <br>
 116:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 117:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 118:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 119:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_EVENT(e)\
 120:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((XMC_SDMMC_CHECK_NORMAL_EVENT(e))    ||\
 121:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (XMC_SDMMC_CHECK_ERROR_EVENT(e)))
 122:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 123:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 124:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC wakeup events <br>
 125:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 126:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 127:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 128:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_WAKEUP_EVENT(w)\
 129:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((w == XMC_SDMMC_WAKEUP_EN_CARD_INT)  ||\
 130:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (w == XMC_SDMMC_WAKEUP_EN_CARD_INS)  ||\
 131:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (w == XMC_SDMMC_WAKEUP_EN_CARD_REM))
 132:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 133:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 134:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC software reset modes <br>
 135:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 136:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 137:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 138:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_SW_RESET_MODE(m)\
 139:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((m == XMC_SDMMC_SW_RESET_ALL)        ||\
 140:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_SW_RST_CMD_LINE)     ||\
 141:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_SW_RST_DAT_LINE))
 142:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 143:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 144:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC transfer modes <br>
 145:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 146:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 147:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 148:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_TRANSFER_MODE(m)\
 149:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((m == XMC_SDMMC_TRANSFER_MODE_TYPE_SINGLE)    ||\
 150:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_INFINITE)  ||\
 151:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_MULTIPLE)  ||\
 152:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_STOP_MULTIPLE))
 153:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 154:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 155:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
 156:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * API IMPLEMENTATION
 157:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
 158:../Libraries/XMCLib/src/xmc_sdmmc.c ****  
 159:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Get power status of the SDMMC peripheral */
 160:../Libraries/XMCLib/src/xmc_sdmmc.c **** bool XMC_SDMMC_GetPowerStatus(XMC_SDMMC_t *const sdmmc)
 161:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
  83              	 .loc 2 161 0
  84              	 .cfi_startproc
  85              	 
  86              	 
  87              	 
  88 0000 80B4     	 push {r7}
  89              	.LCFI6:
  90              	 .cfi_def_cfa_offset 4
  91              	 .cfi_offset 7,-4
  92 0002 83B0     	 sub sp,sp,#12
  93              	.LCFI7:
  94              	 .cfi_def_cfa_offset 16
  95 0004 00AF     	 add r7,sp,#0
  96              	.LCFI8:
  97              	 .cfi_def_cfa_register 7
  98 0006 7860     	 str r0,[r7,#4]
 162:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetPowerStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc))
 163:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 164:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return (bool)(sdmmc->POWER_CTRL & SDMMC_POWER_CTRL_SD_BUS_POWER_Msk);
  99              	 .loc 2 164 0
 100 0008 7B68     	 ldr r3,[r7,#4]
 101 000a 93F82930 	 ldrb r3,[r3,#41]
 102 000e DBB2     	 uxtb r3,r3
 103 0010 03F00103 	 and r3,r3,#1
 104 0014 002B     	 cmp r3,#0
 105 0016 14BF     	 ite ne
 106 0018 0123     	 movne r3,#1
 107 001a 0023     	 moveq r3,#0
 108 001c DBB2     	 uxtb r3,r3
 165:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 109              	 .loc 2 165 0
 110 001e 1846     	 mov r0,r3
 111 0020 0C37     	 adds r7,r7,#12
 112              	.LCFI9:
 113              	 .cfi_def_cfa_offset 4
 114 0022 BD46     	 mov sp,r7
 115              	.LCFI10:
 116              	 .cfi_def_cfa_register 13
 117              	 
 118 0024 5DF8047B 	 ldr r7,[sp],#4
 119              	.LCFI11:
 120              	 .cfi_restore 7
 121              	 .cfi_def_cfa_offset 0
 122 0028 7047     	 bx lr
 123              	 .cfi_endproc
 124              	.LFE200:
 126 002a 00BF     	 .section .text.XMC_SDMMC_Enable,"ax",%progbits
 127              	 .align 2
 128              	 .global XMC_SDMMC_Enable
 129              	 .thumb
 130              	 .thumb_func
 132              	XMC_SDMMC_Enable:
 133              	.LFB201:
 166:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 167:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 168:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * De-assert the peripheral reset. The SDMMC peripheral
 169:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * needs to be initialized
 170:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 171:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_Enable(XMC_SDMMC_t *const sdmmc)
 172:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 134              	 .loc 2 172 0
 135              	 .cfi_startproc
 136              	 
 137              	 
 138 0000 80B5     	 push {r7,lr}
 139              	.LCFI12:
 140              	 .cfi_def_cfa_offset 8
 141              	 .cfi_offset 7,-8
 142              	 .cfi_offset 14,-4
 143 0002 82B0     	 sub sp,sp,#8
 144              	.LCFI13:
 145              	 .cfi_def_cfa_offset 16
 146 0004 00AF     	 add r7,sp,#0
 147              	.LCFI14:
 148              	 .cfi_def_cfa_register 7
 149 0006 7860     	 str r0,[r7,#4]
 173:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Enable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 174:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 175:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 176:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_SDMMC);
 150              	 .loc 2 176 0
 151 0008 0448     	 ldr r0,.L5
 152 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 177:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 178:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 179:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_SDMMC);
 153              	 .loc 2 179 0
 154 000e 0348     	 ldr r0,.L5
 155 0010 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 180:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif  
 181:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 156              	 .loc 2 181 0
 157 0014 0837     	 adds r7,r7,#8
 158              	.LCFI15:
 159              	 .cfi_def_cfa_offset 8
 160 0016 BD46     	 mov sp,r7
 161              	.LCFI16:
 162              	 .cfi_def_cfa_register 13
 163              	 
 164 0018 80BD     	 pop {r7,pc}
 165              	.L6:
 166 001a 00BF     	 .align 2
 167              	.L5:
 168 001c 40000010 	 .word 268435520
 169              	 .cfi_endproc
 170              	.LFE201:
 172              	 .section .text.XMC_SDMMC_Disable,"ax",%progbits
 173              	 .align 2
 174              	 .global XMC_SDMMC_Disable
 175              	 .thumb
 176              	 .thumb_func
 178              	XMC_SDMMC_Disable:
 179              	.LFB202:
 182:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 183:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Assert the peripheral reset */
 184:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_Disable(XMC_SDMMC_t *const sdmmc)
 185:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 180              	 .loc 2 185 0
 181              	 .cfi_startproc
 182              	 
 183              	 
 184 0000 80B5     	 push {r7,lr}
 185              	.LCFI17:
 186              	 .cfi_def_cfa_offset 8
 187              	 .cfi_offset 7,-8
 188              	 .cfi_offset 14,-4
 189 0002 82B0     	 sub sp,sp,#8
 190              	.LCFI18:
 191              	 .cfi_def_cfa_offset 16
 192 0004 00AF     	 add r7,sp,#0
 193              	.LCFI19:
 194              	 .cfi_def_cfa_register 7
 195 0006 7860     	 str r0,[r7,#4]
 186:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Disable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 187:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 188:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 189:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_SDMMC);
 196              	 .loc 2 189 0
 197 0008 0448     	 ldr r0,.L8
 198 000a FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 190:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif  
 191:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 192:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_SDMMC);
 199              	 .loc 2 192 0
 200 000e 0348     	 ldr r0,.L8
 201 0010 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 193:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 194:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 202              	 .loc 2 194 0
 203 0014 0837     	 adds r7,r7,#8
 204              	.LCFI20:
 205              	 .cfi_def_cfa_offset 8
 206 0016 BD46     	 mov sp,r7
 207              	.LCFI21:
 208              	 .cfi_def_cfa_register 13
 209              	 
 210 0018 80BD     	 pop {r7,pc}
 211              	.L9:
 212 001a 00BF     	 .align 2
 213              	.L8:
 214 001c 40000010 	 .word 268435520
 215              	 .cfi_endproc
 216              	.LFE202:
 218              	 .section .text.XMC_SDMMC_Init,"ax",%progbits
 219              	 .align 2
 220              	 .global XMC_SDMMC_Init
 221              	 .thumb
 222              	 .thumb_func
 224              	XMC_SDMMC_Init:
 225              	.LFB203:
 195:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 196:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Initialize SDMMC peripheral */
 197:../Libraries/XMCLib/src/xmc_sdmmc.c **** XMC_SDMMC_STATUS_t XMC_SDMMC_Init(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_CONFIG_t *config)
 198:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 226              	 .loc 2 198 0
 227              	 .cfi_startproc
 228              	 
 229              	 
 230 0000 80B5     	 push {r7,lr}
 231              	.LCFI22:
 232              	 .cfi_def_cfa_offset 8
 233              	 .cfi_offset 7,-8
 234              	 .cfi_offset 14,-4
 235 0002 82B0     	 sub sp,sp,#8
 236              	.LCFI23:
 237              	 .cfi_def_cfa_offset 16
 238 0004 00AF     	 add r7,sp,#0
 239              	.LCFI24:
 240              	 .cfi_def_cfa_register 7
 241 0006 7860     	 str r0,[r7,#4]
 242 0008 3960     	 str r1,[r7]
 199:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 200:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid clock divider value", XMC_SDMMC_CHECK_SDCLK_FREQ(config->cloc
 201:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid bus width", XMC_SDMMC_CHECK_DATA_LINES(config->bus_width));
 202:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 203:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Enable SDMMC peripheral */
 204:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SDMMC_Enable(sdmmc);
 243              	 .loc 2 204 0
 244 000a 7868     	 ldr r0,[r7,#4]
 245 000c FFF7FEFF 	 bl XMC_SDMMC_Enable
 205:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 206:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Write internal clock divider register */
 207:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->CLOCK_CTRL |= (uint16_t)((uint32_t)config->clock_divider << SDMMC_CLOCK_CTRL_SDCLK_FREQ_SE
 246              	 .loc 2 207 0
 247 0010 7B68     	 ldr r3,[r7,#4]
 248 0012 9B8D     	 ldrh r3,[r3,#44]
 249 0014 9AB2     	 uxth r2,r3
 250 0016 3B68     	 ldr r3,[r7]
 251 0018 5B78     	 ldrb r3,[r3,#1]
 252 001a 9BB2     	 uxth r3,r3
 253 001c 1B02     	 lsls r3,r3,#8
 254 001e 9BB2     	 uxth r3,r3
 255 0020 1343     	 orrs r3,r3,r2
 256 0022 9AB2     	 uxth r2,r3
 257 0024 7B68     	 ldr r3,[r7,#4]
 258 0026 9A85     	 strh r2,[r3,#44]
 208:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 209:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Set bus width */
 210:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->HOST_CTRL = (uint8_t)((sdmmc->HOST_CTRL & (uint8_t)~SDMMC_HOST_CTRL_DATA_TX_WIDTH_Msk) |
 259              	 .loc 2 210 0
 260 0028 7B68     	 ldr r3,[r7,#4]
 261 002a 93F82830 	 ldrb r3,[r3,#40]
 262 002e DBB2     	 uxtb r3,r3
 263 0030 DBB2     	 uxtb r3,r3
 264 0032 23F00203 	 bic r3,r3,#2
 265 0036 DAB2     	 uxtb r2,r3
 211:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));
 266              	 .loc 2 211 0
 267 0038 3B68     	 ldr r3,[r7]
 268 003a 1B78     	 ldrb r3,[r3]
 269 003c 5B00     	 lsls r3,r3,#1
 210:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));
 270              	 .loc 2 210 0
 271 003e DBB2     	 uxtb r3,r3
 272 0040 1343     	 orrs r3,r3,r2
 273 0042 DBB2     	 uxtb r3,r3
 274 0044 DAB2     	 uxtb r2,r3
 275 0046 7B68     	 ldr r3,[r7,#4]
 276 0048 83F82820 	 strb r2,[r3,#40]
 212:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 213:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return XMC_SDMMC_STATUS_SUCCESS;
 277              	 .loc 2 213 0
 278 004c 0023     	 movs r3,#0
 214:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 279              	 .loc 2 214 0
 280 004e 1846     	 mov r0,r3
 281 0050 0837     	 adds r7,r7,#8
 282              	.LCFI25:
 283              	 .cfi_def_cfa_offset 8
 284 0052 BD46     	 mov sp,r7
 285              	.LCFI26:
 286              	 .cfi_def_cfa_register 13
 287              	 
 288 0054 80BD     	 pop {r7,pc}
 289              	 .cfi_endproc
 290              	.LFE203:
 292 0056 00BF     	 .section .text.XMC_SDMMC_EnableEventStatus,"ax",%progbits
 293              	 .align 2
 294              	 .global XMC_SDMMC_EnableEventStatus
 295              	 .thumb
 296              	 .thumb_func
 298              	XMC_SDMMC_EnableEventStatus:
 299              	.LFB204:
 215:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 216:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Enable event status */
 217:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_EnableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event)
 218:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 300              	 .loc 2 218 0
 301              	 .cfi_startproc
 302              	 
 303              	 
 304              	 
 305 0000 80B4     	 push {r7}
 306              	.LCFI27:
 307              	 .cfi_def_cfa_offset 4
 308              	 .cfi_offset 7,-4
 309 0002 83B0     	 sub sp,sp,#12
 310              	.LCFI28:
 311              	 .cfi_def_cfa_offset 16
 312 0004 00AF     	 add r7,sp,#0
 313              	.LCFI29:
 314              	 .cfi_def_cfa_register 7
 315 0006 7860     	 str r0,[r7,#4]
 316 0008 3960     	 str r1,[r7]
 219:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_EnableEventStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmm
 220:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 221:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Set INT status enable register */
 222:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_NORM |= (uint16_t)event;
 317              	 .loc 2 222 0
 318 000a 7B68     	 ldr r3,[r7,#4]
 319 000c 9B8E     	 ldrh r3,[r3,#52]
 320 000e 9AB2     	 uxth r2,r3
 321 0010 3B68     	 ldr r3,[r7]
 322 0012 9BB2     	 uxth r3,r3
 323 0014 1343     	 orrs r3,r3,r2
 324 0016 9AB2     	 uxth r2,r3
 325 0018 7B68     	 ldr r3,[r7,#4]
 326 001a 9A86     	 strh r2,[r3,#52]
 223:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_ERR |= (uint16_t)(event >> 16U);
 327              	 .loc 2 223 0
 328 001c 7B68     	 ldr r3,[r7,#4]
 329 001e DB8E     	 ldrh r3,[r3,#54]
 330 0020 9AB2     	 uxth r2,r3
 331 0022 3B68     	 ldr r3,[r7]
 332 0024 1B0C     	 lsrs r3,r3,#16
 333 0026 9BB2     	 uxth r3,r3
 334 0028 1343     	 orrs r3,r3,r2
 335 002a 9AB2     	 uxth r2,r3
 336 002c 7B68     	 ldr r3,[r7,#4]
 337 002e DA86     	 strh r2,[r3,#54]
 224:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 338              	 .loc 2 224 0
 339 0030 0C37     	 adds r7,r7,#12
 340              	.LCFI30:
 341              	 .cfi_def_cfa_offset 4
 342 0032 BD46     	 mov sp,r7
 343              	.LCFI31:
 344              	 .cfi_def_cfa_register 13
 345              	 
 346 0034 5DF8047B 	 ldr r7,[sp],#4
 347              	.LCFI32:
 348              	 .cfi_restore 7
 349              	 .cfi_def_cfa_offset 0
 350 0038 7047     	 bx lr
 351              	 .cfi_endproc
 352              	.LFE204:
 354 003a 00BF     	 .section .text.XMC_SDMMC_DisableEventStatus,"ax",%progbits
 355              	 .align 2
 356              	 .global XMC_SDMMC_DisableEventStatus
 357              	 .thumb
 358              	 .thumb_func
 360              	XMC_SDMMC_DisableEventStatus:
 361              	.LFB205:
 225:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 226:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Disable event status */
 227:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_DisableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event)
 228:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 362              	 .loc 2 228 0
 363              	 .cfi_startproc
 364              	 
 365              	 
 366              	 
 367 0000 80B4     	 push {r7}
 368              	.LCFI33:
 369              	 .cfi_def_cfa_offset 4
 370              	 .cfi_offset 7,-4
 371 0002 83B0     	 sub sp,sp,#12
 372              	.LCFI34:
 373              	 .cfi_def_cfa_offset 16
 374 0004 00AF     	 add r7,sp,#0
 375              	.LCFI35:
 376              	 .cfi_def_cfa_register 7
 377 0006 7860     	 str r0,[r7,#4]
 378 0008 3960     	 str r1,[r7]
 229:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_DisableEventStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
 230:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 231:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Clear INT status enable register */
 232:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_NORM &= (uint16_t)~event;
 379              	 .loc 2 232 0
 380 000a 7B68     	 ldr r3,[r7,#4]
 381 000c 9B8E     	 ldrh r3,[r3,#52]
 382 000e 9AB2     	 uxth r2,r3
 383 0010 3B68     	 ldr r3,[r7]
 384 0012 9BB2     	 uxth r3,r3
 385 0014 DB43     	 mvns r3,r3
 386 0016 9BB2     	 uxth r3,r3
 387 0018 1340     	 ands r3,r3,r2
 388 001a 9AB2     	 uxth r2,r3
 389 001c 7B68     	 ldr r3,[r7,#4]
 390 001e 9A86     	 strh r2,[r3,#52]
 233:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_ERR &= (uint16_t)~(event >> 16U);
 391              	 .loc 2 233 0
 392 0020 7B68     	 ldr r3,[r7,#4]
 393 0022 DB8E     	 ldrh r3,[r3,#54]
 394 0024 9AB2     	 uxth r2,r3
 395 0026 3B68     	 ldr r3,[r7]
 396 0028 1B0C     	 lsrs r3,r3,#16
 397 002a 9BB2     	 uxth r3,r3
 398 002c DB43     	 mvns r3,r3
 399 002e 9BB2     	 uxth r3,r3
 400 0030 1340     	 ands r3,r3,r2
 401 0032 9AB2     	 uxth r2,r3
 402 0034 7B68     	 ldr r3,[r7,#4]
 403 0036 DA86     	 strh r2,[r3,#54]
 234:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 404              	 .loc 2 234 0
 405 0038 0C37     	 adds r7,r7,#12
 406              	.LCFI36:
 407              	 .cfi_def_cfa_offset 4
 408 003a BD46     	 mov sp,r7
 409              	.LCFI37:
 410              	 .cfi_def_cfa_register 13
 411              	 
 412 003c 5DF8047B 	 ldr r7,[sp],#4
 413              	.LCFI38:
 414              	 .cfi_restore 7
 415              	 .cfi_def_cfa_offset 0
 416 0040 7047     	 bx lr
 417              	 .cfi_endproc
 418              	.LFE205:
 420 0042 00BF     	 .section .text.XMC_SDMMC_EnableEvent,"ax",%progbits
 421              	 .align 2
 422              	 .global XMC_SDMMC_EnableEvent
 423              	 .thumb
 424              	 .thumb_func
 426              	XMC_SDMMC_EnableEvent:
 427              	.LFB206:
 235:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 236:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Enable SDMMC event */
 237:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_EnableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 238:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 428              	 .loc 2 238 0
 429              	 .cfi_startproc
 430              	 
 431              	 
 432 0000 80B5     	 push {r7,lr}
 433              	.LCFI39:
 434              	 .cfi_def_cfa_offset 8
 435              	 .cfi_offset 7,-8
 436              	 .cfi_offset 14,-4
 437 0002 82B0     	 sub sp,sp,#8
 438              	.LCFI40:
 439              	 .cfi_def_cfa_offset 16
 440 0004 00AF     	 add r7,sp,#0
 441              	.LCFI41:
 442              	 .cfi_def_cfa_register 7
 443 0006 7860     	 str r0,[r7,#4]
 444 0008 3960     	 str r1,[r7]
 239:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_EnableEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 240:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 241:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SDMMC_EnableEventStatus(sdmmc, event);
 445              	 .loc 2 241 0
 446 000a 7868     	 ldr r0,[r7,#4]
 447 000c 3968     	 ldr r1,[r7]
 448 000e FFF7FEFF 	 bl XMC_SDMMC_EnableEventStatus
 242:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 243:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_NORM |= (uint16_t)event;
 449              	 .loc 2 243 0
 450 0012 7B68     	 ldr r3,[r7,#4]
 451 0014 1B8F     	 ldrh r3,[r3,#56]
 452 0016 9AB2     	 uxth r2,r3
 453 0018 3B68     	 ldr r3,[r7]
 454 001a 9BB2     	 uxth r3,r3
 455 001c 1343     	 orrs r3,r3,r2
 456 001e 9AB2     	 uxth r2,r3
 457 0020 7B68     	 ldr r3,[r7,#4]
 458 0022 1A87     	 strh r2,[r3,#56]
 244:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_ERR |= (uint16_t)(event >> 16U);
 459              	 .loc 2 244 0
 460 0024 7B68     	 ldr r3,[r7,#4]
 461 0026 5B8F     	 ldrh r3,[r3,#58]
 462 0028 9AB2     	 uxth r2,r3
 463 002a 3B68     	 ldr r3,[r7]
 464 002c 1B0C     	 lsrs r3,r3,#16
 465 002e 9BB2     	 uxth r3,r3
 466 0030 1343     	 orrs r3,r3,r2
 467 0032 9AB2     	 uxth r2,r3
 468 0034 7B68     	 ldr r3,[r7,#4]
 469 0036 5A87     	 strh r2,[r3,#58]
 245:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 470              	 .loc 2 245 0
 471 0038 0837     	 adds r7,r7,#8
 472              	.LCFI42:
 473              	 .cfi_def_cfa_offset 8
 474 003a BD46     	 mov sp,r7
 475              	.LCFI43:
 476              	 .cfi_def_cfa_register 13
 477              	 
 478 003c 80BD     	 pop {r7,pc}
 479              	 .cfi_endproc
 480              	.LFE206:
 482 003e 00BF     	 .section .text.XMC_SDMMC_DisableEvent,"ax",%progbits
 483              	 .align 2
 484              	 .global XMC_SDMMC_DisableEvent
 485              	 .thumb
 486              	 .thumb_func
 488              	XMC_SDMMC_DisableEvent:
 489              	.LFB207:
 246:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 247:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Disable SDMMC event without disabling event status */
 248:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_DisableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 249:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 490              	 .loc 2 249 0
 491              	 .cfi_startproc
 492              	 
 493              	 
 494              	 
 495 0000 80B4     	 push {r7}
 496              	.LCFI44:
 497              	 .cfi_def_cfa_offset 4
 498              	 .cfi_offset 7,-4
 499 0002 83B0     	 sub sp,sp,#12
 500              	.LCFI45:
 501              	 .cfi_def_cfa_offset 16
 502 0004 00AF     	 add r7,sp,#0
 503              	.LCFI46:
 504              	 .cfi_def_cfa_register 7
 505 0006 7860     	 str r0,[r7,#4]
 506 0008 3960     	 str r1,[r7]
 250:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_DisableEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 251:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 252:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Clear INT signal enable register */
 253:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_NORM &= (uint16_t)~event;
 507              	 .loc 2 253 0
 508 000a 7B68     	 ldr r3,[r7,#4]
 509 000c 1B8F     	 ldrh r3,[r3,#56]
 510 000e 9AB2     	 uxth r2,r3
 511 0010 3B68     	 ldr r3,[r7]
 512 0012 9BB2     	 uxth r3,r3
 513 0014 DB43     	 mvns r3,r3
 514 0016 9BB2     	 uxth r3,r3
 515 0018 1340     	 ands r3,r3,r2
 516 001a 9AB2     	 uxth r2,r3
 517 001c 7B68     	 ldr r3,[r7,#4]
 518 001e 1A87     	 strh r2,[r3,#56]
 254:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_ERR &= (uint16_t)~(event >> 16U);
 519              	 .loc 2 254 0
 520 0020 7B68     	 ldr r3,[r7,#4]
 521 0022 5B8F     	 ldrh r3,[r3,#58]
 522 0024 9AB2     	 uxth r2,r3
 523 0026 3B68     	 ldr r3,[r7]
 524 0028 1B0C     	 lsrs r3,r3,#16
 525 002a 9BB2     	 uxth r3,r3
 526 002c DB43     	 mvns r3,r3
 527 002e 9BB2     	 uxth r3,r3
 528 0030 1340     	 ands r3,r3,r2
 529 0032 9AB2     	 uxth r2,r3
 530 0034 7B68     	 ldr r3,[r7,#4]
 531 0036 5A87     	 strh r2,[r3,#58]
 255:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 532              	 .loc 2 255 0
 533 0038 0C37     	 adds r7,r7,#12
 534              	.LCFI47:
 535              	 .cfi_def_cfa_offset 4
 536 003a BD46     	 mov sp,r7
 537              	.LCFI48:
 538              	 .cfi_def_cfa_register 13
 539              	 
 540 003c 5DF8047B 	 ldr r7,[sp],#4
 541              	.LCFI49:
 542              	 .cfi_restore 7
 543              	 .cfi_def_cfa_offset 0
 544 0040 7047     	 bx lr
 545              	 .cfi_endproc
 546              	.LFE207:
 548 0042 00BF     	 .section .text.XMC_SDMMC_ClearEvent,"ax",%progbits
 549              	 .align 2
 550              	 .global XMC_SDMMC_ClearEvent
 551              	 .thumb
 552              	 .thumb_func
 554              	XMC_SDMMC_ClearEvent:
 555              	.LFB208:
 256:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 257:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Clear SDMMC event(s) */
 258:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_ClearEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 259:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 556              	 .loc 2 259 0
 557              	 .cfi_startproc
 558              	 
 559              	 
 560              	 
 561 0000 80B4     	 push {r7}
 562              	.LCFI50:
 563              	 .cfi_def_cfa_offset 4
 564              	 .cfi_offset 7,-4
 565 0002 83B0     	 sub sp,sp,#12
 566              	.LCFI51:
 567              	 .cfi_def_cfa_offset 16
 568 0004 00AF     	 add r7,sp,#0
 569              	.LCFI52:
 570              	 .cfi_def_cfa_register 7
 571 0006 7860     	 str r0,[r7,#4]
 572 0008 3960     	 str r1,[r7]
 260:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_ClearEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 261:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_ClearEvent: Invalid bit-field", !(event & XMC_SDMMC_TARGET_RESP_ERR));
 262:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 263:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->INT_STATUS_NORM = (uint16_t)event;
 573              	 .loc 2 263 0
 574 000a 3B68     	 ldr r3,[r7]
 575 000c 9AB2     	 uxth r2,r3
 576 000e 7B68     	 ldr r3,[r7,#4]
 577 0010 1A86     	 strh r2,[r3,#48]
 264:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->INT_STATUS_ERR = (uint16_t)(event >> 16U);
 578              	 .loc 2 264 0
 579 0012 3B68     	 ldr r3,[r7]
 580 0014 1B0C     	 lsrs r3,r3,#16
 581 0016 9AB2     	 uxth r2,r3
 582 0018 7B68     	 ldr r3,[r7,#4]
 583 001a 5A86     	 strh r2,[r3,#50]
 265:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 584              	 .loc 2 265 0
 585 001c 0C37     	 adds r7,r7,#12
 586              	.LCFI53:
 587              	 .cfi_def_cfa_offset 4
 588 001e BD46     	 mov sp,r7
 589              	.LCFI54:
 590              	 .cfi_def_cfa_register 13
 591              	 
 592 0020 5DF8047B 	 ldr r7,[sp],#4
 593              	.LCFI55:
 594              	 .cfi_restore 7
 595              	 .cfi_def_cfa_offset 0
 596 0024 7047     	 bx lr
 597              	 .cfi_endproc
 598              	.LFE208:
 600 0026 00BF     	 .section .text.XMC_SDMMC_GetEvent,"ax",%progbits
 601              	 .align 2
 602              	 .global XMC_SDMMC_GetEvent
 603              	 .thumb
 604              	 .thumb_func
 606              	XMC_SDMMC_GetEvent:
 607              	.LFB209:
 266:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 267:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Get the status of an SDMMC event */
 268:../Libraries/XMCLib/src/xmc_sdmmc.c **** bool XMC_SDMMC_GetEvent(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_EVENT_t event)
 269:../Libraries/XMCLib/src/xmc_sdmmc.c **** {  
 608              	 .loc 2 269 0
 609              	 .cfi_startproc
 610              	 
 611              	 
 612              	 
 613 0000 80B4     	 push {r7}
 614              	.LCFI56:
 615              	 .cfi_def_cfa_offset 4
 616              	 .cfi_offset 7,-4
 617 0002 85B0     	 sub sp,sp,#20
 618              	.LCFI57:
 619              	 .cfi_def_cfa_offset 24
 620 0004 00AF     	 add r7,sp,#0
 621              	.LCFI58:
 622              	 .cfi_def_cfa_register 7
 623 0006 7860     	 str r0,[r7,#4]
 624 0008 3960     	 str r1,[r7]
 270:../Libraries/XMCLib/src/xmc_sdmmc.c ****   bool status;
 271:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 272:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 273:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetEvent: Invalid SDMMC event", XMC_SDMMC_CHECK_EVENT(event));
 274:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 275:../Libraries/XMCLib/src/xmc_sdmmc.c ****   if (event < XMC_SDMMC_CMD_TIMEOUT_ERR)
 625              	 .loc 2 275 0
 626 000a 3B68     	 ldr r3,[r7]
 627 000c B3F5803F 	 cmp r3,#65536
 628 0010 0CD2     	 bcs .L18
 276:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 277:../Libraries/XMCLib/src/xmc_sdmmc.c ****     status = (bool)(sdmmc->INT_STATUS_NORM & (uint16_t)event);
 629              	 .loc 2 277 0
 630 0012 7B68     	 ldr r3,[r7,#4]
 631 0014 1B8E     	 ldrh r3,[r3,#48]
 632 0016 9AB2     	 uxth r2,r3
 633 0018 3B68     	 ldr r3,[r7]
 634 001a 9BB2     	 uxth r3,r3
 635 001c 1340     	 ands r3,r3,r2
 636 001e 9BB2     	 uxth r3,r3
 637 0020 002B     	 cmp r3,#0
 638 0022 14BF     	 ite ne
 639 0024 0123     	 movne r3,#1
 640 0026 0023     	 moveq r3,#0
 641 0028 FB73     	 strb r3,[r7,#15]
 642 002a 0CE0     	 b .L19
 643              	.L18:
 278:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 279:../Libraries/XMCLib/src/xmc_sdmmc.c ****   else
 280:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 281:../Libraries/XMCLib/src/xmc_sdmmc.c ****     status = (bool)(sdmmc->INT_STATUS_ERR & (uint16_t)((uint32_t)event >> 16U));
 644              	 .loc 2 281 0
 645 002c 7B68     	 ldr r3,[r7,#4]
 646 002e 5B8E     	 ldrh r3,[r3,#50]
 647 0030 9AB2     	 uxth r2,r3
 648 0032 3B68     	 ldr r3,[r7]
 649 0034 1B0C     	 lsrs r3,r3,#16
 650 0036 9BB2     	 uxth r3,r3
 651 0038 1340     	 ands r3,r3,r2
 652 003a 9BB2     	 uxth r3,r3
 653 003c 002B     	 cmp r3,#0
 654 003e 14BF     	 ite ne
 655 0040 0123     	 movne r3,#1
 656 0042 0023     	 moveq r3,#0
 657 0044 FB73     	 strb r3,[r7,#15]
 658              	.L19:
 282:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 283:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 284:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return status;
 659              	 .loc 2 284 0
 660 0046 FB7B     	 ldrb r3,[r7,#15]
 285:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 661              	 .loc 2 285 0
 662 0048 1846     	 mov r0,r3
 663 004a 1437     	 adds r7,r7,#20
 664              	.LCFI59:
 665              	 .cfi_def_cfa_offset 4
 666 004c BD46     	 mov sp,r7
 667              	.LCFI60:
 668              	 .cfi_def_cfa_register 13
 669              	 
 670 004e 5DF8047B 	 ldr r7,[sp],#4
 671              	.LCFI61:
 672              	 .cfi_restore 7
 673              	 .cfi_def_cfa_offset 0
 674 0052 7047     	 bx lr
 675              	 .cfi_endproc
 676              	.LFE209:
 678              	 .section .text.XMC_SDMMC_GetR2Response,"ax",%progbits
 679              	 .align 2
 680              	 .global XMC_SDMMC_GetR2Response
 681              	 .thumb
 682              	 .thumb_func
 684              	XMC_SDMMC_GetR2Response:
 685              	.LFB210:
 286:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 287:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Read R2 response (CID, CSD register) */
 288:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_GetR2Response(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_RESPONSE_t *const response)
 289:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 686              	 .loc 2 289 0
 687              	 .cfi_startproc
 688              	 
 689              	 
 690              	 
 691 0000 80B4     	 push {r7}
 692              	.LCFI62:
 693              	 .cfi_def_cfa_offset 4
 694              	 .cfi_offset 7,-4
 695 0002 83B0     	 sub sp,sp,#12
 696              	.LCFI63:
 697              	 .cfi_def_cfa_offset 16
 698 0004 00AF     	 add r7,sp,#0
 699              	.LCFI64:
 700              	 .cfi_def_cfa_register 7
 701 0006 7860     	 str r0,[r7,#4]
 702 0008 3960     	 str r1,[r7]
 290:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetR2Response: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 291:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 292:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_0 = sdmmc->RESPONSE[0];
 703              	 .loc 2 292 0
 704 000a 7B68     	 ldr r3,[r7,#4]
 705 000c 1A69     	 ldr r2,[r3,#16]
 706 000e 3B68     	 ldr r3,[r7]
 707 0010 1A60     	 str r2,[r3]
 293:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_2 = sdmmc->RESPONSE[1];
 708              	 .loc 2 293 0
 709 0012 7B68     	 ldr r3,[r7,#4]
 710 0014 5A69     	 ldr r2,[r3,#20]
 711 0016 3B68     	 ldr r3,[r7]
 712 0018 5A60     	 str r2,[r3,#4]
 294:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_4 = sdmmc->RESPONSE[2];
 713              	 .loc 2 294 0
 714 001a 7B68     	 ldr r3,[r7,#4]
 715 001c 9A69     	 ldr r2,[r3,#24]
 716 001e 3B68     	 ldr r3,[r7]
 717 0020 9A60     	 str r2,[r3,#8]
 295:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_6 = sdmmc->RESPONSE[3];
 718              	 .loc 2 295 0
 719 0022 7B68     	 ldr r3,[r7,#4]
 720 0024 DA69     	 ldr r2,[r3,#28]
 721 0026 3B68     	 ldr r3,[r7]
 722 0028 DA60     	 str r2,[r3,#12]
 296:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 723              	 .loc 2 296 0
 724 002a 0C37     	 adds r7,r7,#12
 725              	.LCFI65:
 726              	 .cfi_def_cfa_offset 4
 727 002c BD46     	 mov sp,r7
 728              	.LCFI66:
 729              	 .cfi_def_cfa_register 13
 730              	 
 731 002e 5DF8047B 	 ldr r7,[sp],#4
 732              	.LCFI67:
 733              	 .cfi_restore 7
 734              	 .cfi_def_cfa_offset 0
 735 0032 7047     	 bx lr
 736              	 .cfi_endproc
 737              	.LFE210:
 739              	 .section .text.XMC_SDMMC_SendCommand,"ax",%progbits
 740              	 .align 2
 741              	 .global XMC_SDMMC_SendCommand
 742              	 .thumb
 743              	 .thumb_func
 745              	XMC_SDMMC_SendCommand:
 746              	.LFB211:
 297:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 298:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Send SDMMC command */
 299:../Libraries/XMCLib/src/xmc_sdmmc.c **** XMC_SDMMC_STATUS_t XMC_SDMMC_SendCommand(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_COMMAND_t *cmd, 
 300:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 747              	 .loc 2 300 0
 748              	 .cfi_startproc
 749              	 
 750              	 
 751              	 
 752 0000 80B4     	 push {r7}
 753              	.LCFI68:
 754              	 .cfi_def_cfa_offset 4
 755              	 .cfi_offset 7,-4
 756 0002 85B0     	 sub sp,sp,#20
 757              	.LCFI69:
 758              	 .cfi_def_cfa_offset 24
 759 0004 00AF     	 add r7,sp,#0
 760              	.LCFI70:
 761              	 .cfi_def_cfa_register 7
 762 0006 F860     	 str r0,[r7,#12]
 763 0008 B960     	 str r1,[r7,#8]
 764 000a 7A60     	 str r2,[r7,#4]
 301:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SendCommand: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 302:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 303:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->ARGUMENT1 = arg;
 765              	 .loc 2 303 0
 766 000c FB68     	 ldr r3,[r7,#12]
 767 000e 7A68     	 ldr r2,[r7,#4]
 768 0010 9A60     	 str r2,[r3,#8]
 304:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->COMMAND = (uint16_t)(*(uint16_t *)cmd);
 769              	 .loc 2 304 0
 770 0012 BB68     	 ldr r3,[r7,#8]
 771 0014 1A88     	 ldrh r2,[r3]
 772 0016 FB68     	 ldr r3,[r7,#12]
 773 0018 DA81     	 strh r2,[r3,#14]
 305:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 306:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return XMC_SDMMC_STATUS_SUCCESS;
 774              	 .loc 2 306 0
 775 001a 0023     	 movs r3,#0
 307:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 776              	 .loc 2 307 0
 777 001c 1846     	 mov r0,r3
 778 001e 1437     	 adds r7,r7,#20
 779              	.LCFI71:
 780              	 .cfi_def_cfa_offset 4
 781 0020 BD46     	 mov sp,r7
 782              	.LCFI72:
 783              	 .cfi_def_cfa_register 13
 784              	 
 785 0022 5DF8047B 	 ldr r7,[sp],#4
 786              	.LCFI73:
 787              	 .cfi_restore 7
 788              	 .cfi_def_cfa_offset 0
 789 0026 7047     	 bx lr
 790              	 .cfi_endproc
 791              	.LFE211:
 793              	 .section .text.XMC_SDMMC_SetDataTransferMode,"ax",%progbits
 794              	 .align 2
 795              	 .global XMC_SDMMC_SetDataTransferMode
 796              	 .thumb
 797              	 .thumb_func
 799              	XMC_SDMMC_SetDataTransferMode:
 800              	.LFB212:
 308:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 309:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Set data transfer mode */
 310:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_SetDataTransferMode(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_TRANSFER_MODE_t *const respo
 311:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 801              	 .loc 2 311 0
 802              	 .cfi_startproc
 803              	 
 804              	 
 805 0000 80B5     	 push {r7,lr}
 806              	.LCFI74:
 807              	 .cfi_def_cfa_offset 8
 808              	 .cfi_offset 7,-8
 809              	 .cfi_offset 14,-4
 810 0002 82B0     	 sub sp,sp,#8
 811              	.LCFI75:
 812              	 .cfi_def_cfa_offset 16
 813 0004 00AF     	 add r7,sp,#0
 814              	.LCFI76:
 815              	 .cfi_def_cfa_register 7
 816 0006 7860     	 str r0,[r7,#4]
 817 0008 3960     	 str r1,[r7]
 312:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SetDataTransferMode: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sd
 313:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SetDataTransferMode: Invalid transfer type", XMC_SDMMC_CHECK_TRANSFER_MODE(
 314:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 315:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Data line time-out */
 316:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SDMMC_SetDataLineTimeout(sdmmc, XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_27);
 818              	 .loc 2 316 0
 819 000a 7868     	 ldr r0,[r7,#4]
 820 000c 0E21     	 movs r1,#14
 821 000e FFF7FEFF 	 bl XMC_SDMMC_SetDataLineTimeout
 317:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 318:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Block size */
 319:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->BLOCK_SIZE = (uint16_t)(response->block_size);
 822              	 .loc 2 319 0
 823 0012 3B68     	 ldr r3,[r7]
 824 0014 1B68     	 ldr r3,[r3]
 825 0016 9AB2     	 uxth r2,r3
 826 0018 7B68     	 ldr r3,[r7,#4]
 827 001a 9A80     	 strh r2,[r3,#4]
 320:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 321:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Number of blocks */
 322:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->BLOCK_COUNT = (uint16_t)(response->num_blocks);
 828              	 .loc 2 322 0
 829 001c 3B68     	 ldr r3,[r7]
 830 001e 5B68     	 ldr r3,[r3,#4]
 831 0020 9AB2     	 uxth r2,r3
 832 0022 7B68     	 ldr r3,[r7,#4]
 833 0024 DA80     	 strh r2,[r3,#6]
 323:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 324:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Type of data transfer: single, infinite, multiple or stop multiple */
 325:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_MULTI_BL
 834              	 .loc 2 325 0
 835 0026 7B68     	 ldr r3,[r7,#4]
 836 0028 9B89     	 ldrh r3,[r3,#12]
 837 002a 9BB2     	 uxth r3,r3
 838 002c 9BB2     	 uxth r3,r3
 839 002e 23F02003 	 bic r3,r3,#32
 840 0032 9AB2     	 uxth r2,r3
 326:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->type));
 841              	 .loc 2 326 0
 842 0034 3B68     	 ldr r3,[r7]
 843 0036 1B7A     	 ldrb r3,[r3,#8]
 325:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->type));
 844              	 .loc 2 325 0
 845 0038 9BB2     	 uxth r3,r3
 846 003a 1343     	 orrs r3,r3,r2
 847 003c 9BB2     	 uxth r3,r3
 848 003e 9AB2     	 uxth r2,r3
 849 0040 7B68     	 ldr r3,[r7,#4]
 850 0042 9A81     	 strh r2,[r3,#12]
 327:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 328:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /*
 329:../Libraries/XMCLib/src/xmc_sdmmc.c ****    * Clear block count enable bit; that's only valid for
 330:../Libraries/XMCLib/src/xmc_sdmmc.c ****    * a multi-block transfer
 331:../Libraries/XMCLib/src/xmc_sdmmc.c ****    */
 332:../Libraries/XMCLib/src/xmc_sdmmc.c ****   if (response->type == XMC_SDMMC_TRANSFER_MODE_TYPE_SINGLE)
 851              	 .loc 2 332 0
 852 0044 3B68     	 ldr r3,[r7]
 853 0046 1B7A     	 ldrb r3,[r3,#8]
 854 0048 002B     	 cmp r3,#0
 855 004a 07D1     	 bne .L25
 333:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 334:../Libraries/XMCLib/src/xmc_sdmmc.c ****     sdmmc->TRANSFER_MODE &= (uint16_t)~SDMMC_TRANSFER_MODE_BLOCK_COUNT_EN_Msk;
 856              	 .loc 2 334 0
 857 004c 7B68     	 ldr r3,[r7,#4]
 858 004e 9B89     	 ldrh r3,[r3,#12]
 859 0050 9BB2     	 uxth r3,r3
 860 0052 23F00203 	 bic r3,r3,#2
 861 0056 9AB2     	 uxth r2,r3
 862 0058 7B68     	 ldr r3,[r7,#4]
 863 005a 9A81     	 strh r2,[r3,#12]
 864              	.L25:
 335:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 336:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 337:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Auto CMD configuration */
 338:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_ACMD_EN_
 865              	 .loc 2 338 0
 866 005c 7B68     	 ldr r3,[r7,#4]
 867 005e 9B89     	 ldrh r3,[r3,#12]
 868 0060 9BB2     	 uxth r3,r3
 869 0062 9BB2     	 uxth r3,r3
 870 0064 23F00C03 	 bic r3,r3,#12
 871 0068 9AB2     	 uxth r2,r3
 339:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Po
 872              	 .loc 2 339 0
 873 006a 3B68     	 ldr r3,[r7]
 874 006c 5B7A     	 ldrb r3,[r3,#9]
 875 006e 9B00     	 lsls r3,r3,#2
 338:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Po
 876              	 .loc 2 338 0
 877 0070 9BB2     	 uxth r3,r3
 878 0072 1343     	 orrs r3,r3,r2
 879 0074 9BB2     	 uxth r3,r3
 880 0076 9AB2     	 uxth r2,r3
 881 0078 7B68     	 ldr r3,[r7,#4]
 882 007a 9A81     	 strh r2,[r3,#12]
 340:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 883              	 .loc 2 340 0
 884 007c 0837     	 adds r7,r7,#8
 885              	.LCFI77:
 886              	 .cfi_def_cfa_offset 8
 887 007e BD46     	 mov sp,r7
 888              	.LCFI78:
 889              	 .cfi_def_cfa_register 13
 890              	 
 891 0080 80BD     	 pop {r7,pc}
 892              	 .cfi_endproc
 893              	.LFE212:
 895 0082 00BF     	 .text
 896              	.Letext0:
 897              	 .file 3 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 898              	 .file 4 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 899              	 .file 5 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc/xmc4_scu.h"
 900              	 .file 6 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include/core_cm4.h"
 901              	 .file 7 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Infineon/XMC4300_series/Include/system_XMC4300.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_sdmmc.c
    {standard input}:20     .text.XMC_SDMMC_SetDataLineTimeout:00000000 $t
    {standard input}:24     .text.XMC_SDMMC_SetDataLineTimeout:00000000 XMC_SDMMC_SetDataLineTimeout
    {standard input}:75     .text.XMC_SDMMC_GetPowerStatus:00000000 $t
    {standard input}:80     .text.XMC_SDMMC_GetPowerStatus:00000000 XMC_SDMMC_GetPowerStatus
    {standard input}:127    .text.XMC_SDMMC_Enable:00000000 $t
    {standard input}:132    .text.XMC_SDMMC_Enable:00000000 XMC_SDMMC_Enable
    {standard input}:168    .text.XMC_SDMMC_Enable:0000001c $d
    {standard input}:173    .text.XMC_SDMMC_Disable:00000000 $t
    {standard input}:178    .text.XMC_SDMMC_Disable:00000000 XMC_SDMMC_Disable
    {standard input}:214    .text.XMC_SDMMC_Disable:0000001c $d
    {standard input}:219    .text.XMC_SDMMC_Init:00000000 $t
    {standard input}:224    .text.XMC_SDMMC_Init:00000000 XMC_SDMMC_Init
    {standard input}:293    .text.XMC_SDMMC_EnableEventStatus:00000000 $t
    {standard input}:298    .text.XMC_SDMMC_EnableEventStatus:00000000 XMC_SDMMC_EnableEventStatus
    {standard input}:355    .text.XMC_SDMMC_DisableEventStatus:00000000 $t
    {standard input}:360    .text.XMC_SDMMC_DisableEventStatus:00000000 XMC_SDMMC_DisableEventStatus
    {standard input}:421    .text.XMC_SDMMC_EnableEvent:00000000 $t
    {standard input}:426    .text.XMC_SDMMC_EnableEvent:00000000 XMC_SDMMC_EnableEvent
    {standard input}:483    .text.XMC_SDMMC_DisableEvent:00000000 $t
    {standard input}:488    .text.XMC_SDMMC_DisableEvent:00000000 XMC_SDMMC_DisableEvent
    {standard input}:549    .text.XMC_SDMMC_ClearEvent:00000000 $t
    {standard input}:554    .text.XMC_SDMMC_ClearEvent:00000000 XMC_SDMMC_ClearEvent
    {standard input}:601    .text.XMC_SDMMC_GetEvent:00000000 $t
    {standard input}:606    .text.XMC_SDMMC_GetEvent:00000000 XMC_SDMMC_GetEvent
    {standard input}:679    .text.XMC_SDMMC_GetR2Response:00000000 $t
    {standard input}:684    .text.XMC_SDMMC_GetR2Response:00000000 XMC_SDMMC_GetR2Response
    {standard input}:740    .text.XMC_SDMMC_SendCommand:00000000 $t
    {standard input}:745    .text.XMC_SDMMC_SendCommand:00000000 XMC_SDMMC_SendCommand
    {standard input}:794    .text.XMC_SDMMC_SetDataTransferMode:00000000 $t
    {standard input}:799    .text.XMC_SDMMC_SetDataTransferMode:00000000 XMC_SDMMC_SetDataTransferMode
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_CLOCK_GatePeripheralClock
