   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "mailbox.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.HW_EscRead,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	HW_EscRead:
  25              	.LFB162:
  26              	 .file 1 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC/xmc_eschw.h"
   1:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** /**
   2:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @file xmc_eschw.h
   3:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @date 2015-02-05
   4:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
   5:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * NOTE:
   6:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * This file is copied by DAVE. Any manual modification done to this file will be lost when the cod
   7:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
   8:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @cond
   9:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  **************************************************************************************************
  10:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * ECAT_SSC v4.0.6 - ECAT_SSC APP initializes the XMC ESC and sets up the interface for Beckhoff Et
  11:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
  12:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * Copyright (c) 2016, Infineon Technologies AG
  13:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * All rights reserved.
  14:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
  15:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * following conditions are met:
  17:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
  18:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *   disclaimer.
  20:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
  21:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *   disclaimer in the documentation and/or other materials provided with the distribution.
  23:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
  24:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *   products derived from this software without specific prior written permission.
  26:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
  27:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
  35:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * with Infineon Technologies AG (dave@infineon.com).
  37:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  **************************************************************************************************
  38:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
  39:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * Change History
  40:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * --------------
  41:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
  42:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * 2016-02-05:
  43:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *     - Initial version
  44:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
  45:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @endcond
  46:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
  47:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  */
  48:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
  49:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** #ifndef XMC_ESCHW_H
  50:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** #define XMC_ESCHW_H
  51:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
  52:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** /**************************************************************************************************
  53:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * HEADER FILES
  54:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  **************************************************************************************************
  55:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** #include "SSC/Src/esc.h"
  56:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** #include "xmc_ecat.h"
  57:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** #include "../E_EEPROM_XMC4/e_eeprom_xmc4.h"
  58:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
  59:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  /*************************************************************************************************
  60:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****   * MACROS
  61:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****   *************************************************************************************************
  62:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
  63:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** #define ECAT_TIMER_INC_P_MS (1U) /**< Timer increment value */
  64:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
  65:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** #define pEsc ((uint8_t *)ECAT0)  /**< EtherCAT module address */
  66:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
  67:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** extern uint8_t aEepromData[];
  68:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
  69:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** /**************************************************************************************************
  70:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * API Prototypes
  71:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  **************************************************************************************************
  72:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
  73:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** #ifdef __cplusplus
  74:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** extern "C" {
  75:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** #endif
  76:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
  77:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** /**
  78:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @ingroup ECAT_SSC_apidoc
  79:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @{
  80:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  */
  81:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
  82:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** #define HW_EscReadDWord(DWordValue, Address)     ((DWordValue) = (UINT32)(((volatile UINT32 *)pEsc)
  83:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
  84:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** #define HW_EscReadDWordIsr(DWordValue, Address)  HW_EscReadDWord(DWordValue, Address)              
  85:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
  86:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** #define HW_EscReadWord(WordValue, Address)       ((WordValue) = (((volatile UINT16 *)pEsc)[((Addres
  87:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
  88:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** #define HW_EscReadWordIsr(WordValue, Address)    HW_EscReadWord(WordValue, Address)                
  89:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
  90:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** #define HW_EscReadByte(ByteValue, Address)       ((ByteValue) = (((volatile UINT8 *)pEsc)[(Address)
  91:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
  92:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** #define HW_EscReadByteIsr(ByteValue, Address)    HW_EscReadByte(ByteValue, Address)                
  93:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
  94:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** #define HW_EscWriteDWord(DWordValue, Address)    ((((volatile UINT32 *)pEsc)[(Address>>2)]) = (DWor
  95:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
  96:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** #define HW_EscWriteDWordIsr(DWordValue, Address) HW_EscWriteWord(DWordValue, Address)              
  97:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
  98:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** #define HW_EscWriteWord(WordValue, Address)      ((((volatile UINT16 *)pEsc)[((Address)>>1)]) = (Wo
  99:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
 100:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** #define HW_EscWriteWordIsr(WordValue, Address)   HW_EscWriteWord(WordValue, Address)               
 101:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
 102:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** #define HW_EscWriteByte(ByteValue, Address)      ((((volatile UINT8 *)pEsc)[(Address)]) = (ByteValu
 103:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
 104:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** #define HW_EscWriteByteIsr(ByteValue, Address)   HW_EscWriteByte(ByteValue, Address)               
 105:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
 106:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** /**
 107:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @brief 16Bit ESC read access
 108:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 109:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @param pData Pointer to local destination buffer.
 110:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @param Address EtherCAT Slave Controller address. Specifies the offset within the ESC memory are
 111:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @param Len Access size in Bytes
 112:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 113:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @return None
 114:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * <BR>
 115:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 116:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * \par<b>Description:</b><br>
 117:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the 
 118:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 119:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  */
 120:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** __STATIC_INLINE void HW_EscRead(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
 121:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** {
  27              	 .loc 1 121 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31 0000 80B5     	 push {r7,lr}
  32              	.LCFI0:
  33              	 .cfi_def_cfa_offset 8
  34              	 .cfi_offset 7,-8
  35              	 .cfi_offset 14,-4
  36 0002 82B0     	 sub sp,sp,#8
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a 7B80     	 strh r3,[r7,#2]
  45 000c 1346     	 mov r3,r2
  46 000e 3B80     	 strh r3,[r7]
 122:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****   memcpy(pData, &pEsc[Address], Len);
  47              	 .loc 1 122 0
  48 0010 7B88     	 ldrh r3,[r7,#2]
  49 0012 03F1A843 	 add r3,r3,#1409286144
  50 0016 03F58033 	 add r3,r3,#65536
  51 001a 3A88     	 ldrh r2,[r7]
  52 001c 7868     	 ldr r0,[r7,#4]
  53 001e 1946     	 mov r1,r3
  54 0020 FFF7FEFF 	 bl memcpy
 123:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** }
  55              	 .loc 1 123 0
  56 0024 0837     	 adds r7,r7,#8
  57              	.LCFI3:
  58              	 .cfi_def_cfa_offset 8
  59 0026 BD46     	 mov sp,r7
  60              	.LCFI4:
  61              	 .cfi_def_cfa_register 13
  62              	 
  63 0028 80BD     	 pop {r7,pc}
  64              	 .cfi_endproc
  65              	.LFE162:
  67 002a 00BF     	 .section .text.HW_EscReadMbxMem,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	HW_EscReadMbxMem:
  73              	.LFB164:
 124:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
 125:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** /**
 126:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @brief Interrupt specific 16Bit ESC read access
 127:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 128:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @param pData Pointer to local destination buffer.
 129:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @param Address EtherCAT Slave Controller address. Specifies the offset within the ESC memory are
 130:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @param Len Access size in Bytes
 131:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 132:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @return None
 133:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * <BR>
 134:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 135:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * \par<b>Description:</b><br>
 136:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the 
 137:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 138:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  */
 139:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** __STATIC_INLINE void HW_EscReadIsr(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
 140:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** {
 141:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****   HW_EscRead(pData, Address, Len);
 142:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** }
 143:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
 144:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** /**
 145:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @brief Reads data from the ESC and copies to slave mailbox memory.
 146:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 147:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @param pData Pointer to local destination buffer.
 148:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @param Address EtherCAT Slave Controller address. Specifies the offset within the ESC memory are
 149:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @param Len Access size in Bytes
 150:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 151:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @return None
 152:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * <BR>
 153:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 154:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * \par<b>Description:</b><br>
 155:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * Reads data from the ESC and copies to slave mailbox memory. If the local mailbox memory is also 
 156:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * application memory this function is equal to HW_EscRead.
 157:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 158:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  */
 159:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** __STATIC_INLINE void HW_EscReadMbxMem(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
 160:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** {
  74              	 .loc 1 160 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78 0000 80B5     	 push {r7,lr}
  79              	.LCFI5:
  80              	 .cfi_def_cfa_offset 8
  81              	 .cfi_offset 7,-8
  82              	 .cfi_offset 14,-4
  83 0002 82B0     	 sub sp,sp,#8
  84              	.LCFI6:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI7:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
  90 0008 0B46     	 mov r3,r1
  91 000a 7B80     	 strh r3,[r7,#2]
  92 000c 1346     	 mov r3,r2
  93 000e 3B80     	 strh r3,[r7]
 161:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****   HW_EscRead(pData, Address, Len);
  94              	 .loc 1 161 0
  95 0010 7A88     	 ldrh r2,[r7,#2]
  96 0012 3B88     	 ldrh r3,[r7]
  97 0014 7868     	 ldr r0,[r7,#4]
  98 0016 1146     	 mov r1,r2
  99 0018 1A46     	 mov r2,r3
 100 001a FFF7FEFF 	 bl HW_EscRead
 162:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** }
 101              	 .loc 1 162 0
 102 001e 0837     	 adds r7,r7,#8
 103              	.LCFI8:
 104              	 .cfi_def_cfa_offset 8
 105 0020 BD46     	 mov sp,r7
 106              	.LCFI9:
 107              	 .cfi_def_cfa_register 13
 108              	 
 109 0022 80BD     	 pop {r7,pc}
 110              	 .cfi_endproc
 111              	.LFE164:
 113              	 .section .text.HW_EscWrite,"ax",%progbits
 114              	 .align 2
 115              	 .thumb
 116              	 .thumb_func
 118              	HW_EscWrite:
 119              	.LFB165:
 163:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
 164:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** /**
 165:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @brief 16Bit ESC write access
 166:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 167:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @param pData Pointer to local source buffer.
 168:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @param Address EtherCAT Slave Controller address. Specifies the offset within the ESC memory are
 169:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @param Len Access size in Bytes
 170:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 171:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @return None
 172:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * <BR>
 173:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 174:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * \par<b>Description:</b><br>
 175:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * Writes from the EtherCAT Slave Controller. This function is used to access ESC registers and the
 176:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 177:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  */
 178:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** __STATIC_INLINE void HW_EscWrite(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
 179:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** {
 120              	 .loc 1 179 0
 121              	 .cfi_startproc
 122              	 
 123              	 
 124 0000 80B5     	 push {r7,lr}
 125              	.LCFI10:
 126              	 .cfi_def_cfa_offset 8
 127              	 .cfi_offset 7,-8
 128              	 .cfi_offset 14,-4
 129 0002 82B0     	 sub sp,sp,#8
 130              	.LCFI11:
 131              	 .cfi_def_cfa_offset 16
 132 0004 00AF     	 add r7,sp,#0
 133              	.LCFI12:
 134              	 .cfi_def_cfa_register 7
 135 0006 7860     	 str r0,[r7,#4]
 136 0008 0B46     	 mov r3,r1
 137 000a 7B80     	 strh r3,[r7,#2]
 138 000c 1346     	 mov r3,r2
 139 000e 3B80     	 strh r3,[r7]
 180:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****   memcpy(&pEsc[Address], pData, Len);
 140              	 .loc 1 180 0
 141 0010 7B88     	 ldrh r3,[r7,#2]
 142 0012 03F1A843 	 add r3,r3,#1409286144
 143 0016 03F58033 	 add r3,r3,#65536
 144 001a 3A88     	 ldrh r2,[r7]
 145 001c 1846     	 mov r0,r3
 146 001e 7968     	 ldr r1,[r7,#4]
 147 0020 FFF7FEFF 	 bl memcpy
 181:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** }
 148              	 .loc 1 181 0
 149 0024 0837     	 adds r7,r7,#8
 150              	.LCFI13:
 151              	 .cfi_def_cfa_offset 8
 152 0026 BD46     	 mov sp,r7
 153              	.LCFI14:
 154              	 .cfi_def_cfa_register 13
 155              	 
 156 0028 80BD     	 pop {r7,pc}
 157              	 .cfi_endproc
 158              	.LFE165:
 160 002a 00BF     	 .section .text.HW_EscWriteMbxMem,"ax",%progbits
 161              	 .align 2
 162              	 .thumb
 163              	 .thumb_func
 165              	HW_EscWriteMbxMem:
 166              	.LFB167:
 182:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
 183:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** /**
 184:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @brief Interrupt specific 16Bit ESC write access
 185:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 186:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @param pData Pointer to local source buffer.
 187:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @param Address EtherCAT Slave Controller address. Specifies the offset within the ESC memory are
 188:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @param Len Access size in Bytes
 189:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 190:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @return None
 191:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * <BR>
 192:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 193:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * \par<b>Description:</b><br>
 194:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * Writes from the EtherCAT Slave Controller. This function is used to access ESC registers and the
 195:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 196:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  */
 197:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** __STATIC_INLINE void HW_EscWriteIsr(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
 198:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** {
 199:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****   HW_EscWrite(pData, Address, Len);
 200:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** }
 201:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** 
 202:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** /**
 203:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @brief Writes data from the slave mailbox memory to ESC memory.
 204:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 205:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @param pData Pointer to local source mailbox buffer.
 206:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @param Address EtherCAT Slave Controller address. Specifies the offset within the ESC memory are
 207:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @param Len Access size in Bytes
 208:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 209:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * @return None
 210:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * <BR>
 211:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 212:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * \par<b>Description:</b><br>
 213:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * Writes data from the slave mailbox memory to ESC memory. If the local mailbox memory is also loc
 214:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  * application memory this function is equal to HW_EscWrite.
 215:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  *
 216:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****  */
 217:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** __STATIC_INLINE void HW_EscWriteMbxMem(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
 218:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** {
 167              	 .loc 1 218 0
 168              	 .cfi_startproc
 169              	 
 170              	 
 171 0000 80B5     	 push {r7,lr}
 172              	.LCFI15:
 173              	 .cfi_def_cfa_offset 8
 174              	 .cfi_offset 7,-8
 175              	 .cfi_offset 14,-4
 176 0002 82B0     	 sub sp,sp,#8
 177              	.LCFI16:
 178              	 .cfi_def_cfa_offset 16
 179 0004 00AF     	 add r7,sp,#0
 180              	.LCFI17:
 181              	 .cfi_def_cfa_register 7
 182 0006 7860     	 str r0,[r7,#4]
 183 0008 0B46     	 mov r3,r1
 184 000a 7B80     	 strh r3,[r7,#2]
 185 000c 1346     	 mov r3,r2
 186 000e 3B80     	 strh r3,[r7]
 219:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h ****   HW_EscWrite(pData, Address, Len);
 187              	 .loc 1 219 0
 188 0010 7A88     	 ldrh r2,[r7,#2]
 189 0012 3B88     	 ldrh r3,[r7]
 190 0014 7868     	 ldr r0,[r7,#4]
 191 0016 1146     	 mov r1,r2
 192 0018 1A46     	 mov r2,r3
 193 001a FFF7FEFF 	 bl HW_EscWrite
 220:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/ECAT_SSC\xmc_eschw.h **** }
 194              	 .loc 1 220 0
 195 001e 0837     	 adds r7,r7,#8
 196              	.LCFI18:
 197              	 .cfi_def_cfa_offset 8
 198 0020 BD46     	 mov sp,r7
 199              	.LCFI19:
 200              	 .cfi_def_cfa_register 13
 201              	 
 202 0022 80BD     	 pop {r7,pc}
 203              	 .cfi_endproc
 204              	.LFE167:
 206              	 .comm bReceiveMbxIsLocked,1,1
 207              	 .comm bSendMbxIsFull,1,1
 208              	 .comm bMbxRunning,1,1
 209              	 .comm bMbxRepeatToggle,1,1
 210              	 .comm u16SendMbxSize,2,2
 211              	 .comm u16ReceiveMbxSize,2,2
 212              	 .comm u16EscAddrReceiveMbx,2,2
 213              	 .comm u16EscAddrSendMbx,2,2
 214              	 .comm u8MbxWriteCounter,1,1
 215              	 .comm u8MbxReadCounter,1,1
 216              	 .comm asMbx,512,4
 217              	 .comm u8MailboxSendReqStored,1,1
 218              	 .comm psWriteMbx,4,4
 219              	 .comm psReadMbx,4,4
 220              	 .comm psRepeatMbx,4,4
 221              	 .comm psStoreMbx,4,4
 222              	 .comm sMbxSendQueue,52,4
 223              	 .comm sMbxReceiveQueue,52,4
 224              	 .comm bNoMbxMemoryAvailable,1,1
 225              	 .section .text.PutInMbxQueue,"ax",%progbits
 226              	 .align 2
 227              	 .global PutInMbxQueue
 228              	 .thumb
 229              	 .thumb_func
 231              	PutInMbxQueue:
 232              	.LFB172:
 233              	 .file 2 "../SSC/Src/mailbox.c"
   1:../SSC/Src/mailbox.c **** /**
   2:../SSC/Src/mailbox.c **** \addtogroup Mailbox Mailbox Functions
   3:../SSC/Src/mailbox.c **** @{
   4:../SSC/Src/mailbox.c **** */
   5:../SSC/Src/mailbox.c **** 
   6:../SSC/Src/mailbox.c **** /**
   7:../SSC/Src/mailbox.c **** \file    mailbox.c
   8:../SSC/Src/mailbox.c **** \author EthercatSSC@beckhoff.com
   9:../SSC/Src/mailbox.c **** \brief Implementation
  10:../SSC/Src/mailbox.c **** 
  11:../SSC/Src/mailbox.c **** <br>Description of the mailbox buffer handling (MAILBOX_QUEUE = 0):<br>
  12:../SSC/Src/mailbox.c **** There are two mailbox buffer for sending and receiving mailbox services.<br>
  13:../SSC/Src/mailbox.c **** Normal operation:<br>
  14:../SSC/Src/mailbox.c **** When starting the mailbox handler psWriteMbx contains mailbox buffer 1,<br>
  15:../SSC/Src/mailbox.c **** psReadMbx, psRepeatMbx and psStoreMbx are 0.<br>
  16:../SSC/Src/mailbox.c **** In this state a repeat request would be ignored because there was no service sent yet.<br>
  17:../SSC/Src/mailbox.c **** When the first mailbox service is sent (in MBX_CopyToSendMailbox), psWriteMbx gets mailbox buffer 2
  18:../SSC/Src/mailbox.c **** and psReadMbx gets the sent mailbox buffer 1, psRepeatMbx and psStoreMbx are still 0.<br>
  19:../SSC/Src/mailbox.c **** When the first mailbox service was read from the master, the sent mailbox buffer 1 is stored<br>
  20:../SSC/Src/mailbox.c **** in psRepeatMbx (in MBX_MailboxReadInd).<br>
  21:../SSC/Src/mailbox.c **** After that psReadMbx gets always the actual sent mailbox buffer, psWriteMbx is set to 0 (another<br
  22:../SSC/Src/mailbox.c **** received mailbox service from the master will not be handled until the sent mailbox service was rea
  23:../SSC/Src/mailbox.c **** and MBX_MailboxReadInd was called).<br>
  24:../SSC/Src/mailbox.c **** When the mailbox service is read, psWriteMbx gets the Buffer of psRepeatMbx and psRepeatMbx gets th
  25:../SSC/Src/mailbox.c **** buffer of psReadMbx.<br>
  26:../SSC/Src/mailbox.c **** Repeat Request from the master:<br>
  27:../SSC/Src/mailbox.c **** When a Repeat from the master is requested (MBX_MailboxRepeatReq), there are three different possib
  28:../SSC/Src/mailbox.c **** 1. no mailbox service was sent since the mailbox handler was started (psRepeatMbx = 0): nothing to 
  29:../SSC/Src/mailbox.c **** 2. the acknowledge of the last sent mailbox service was received (in MBX_MailboxReadInd) (bSendMbxI
  30:../SSC/Src/mailbox.c **** the last sent mailbox service (psRepeatMbx) will be sent again (in MBX_CopyToSendMailbox) and store
  31:../SSC/Src/mailbox.c **** psRepeatMbx will be set to 0<br>
  32:../SSC/Src/mailbox.c **** 3. the acknowledge of the last sent mailbox service was not received (psReadMbx and psRepeatMbx con
  33:../SSC/Src/mailbox.c **** psReadMbx is still in the mailbox (because MBX_MailboxReadInd is not called yet, bSendMbxIsFull = 1
  34:../SSC/Src/mailbox.c **** psReadMbx will be deleted in the mailbox (call of DisableSyncManChannel and EnableSyncManChannel) a
  35:../SSC/Src/mailbox.c **** stored in psStoreMbx, psRepeatMbx will be sent again (in MBX_CopyToSendMailbox) and stored in psRea
  36:../SSC/Src/mailbox.c **** psRepeatMbx will be set to 0.<br>
  37:../SSC/Src/mailbox.c **** When the repeated mailbox service was sent (call of MBX_MailboxReadInd), psReadMbx will be stored i
  38:../SSC/Src/mailbox.c **** and psStoreMbx will be sent (in MBX_CopyToSendMailbox) and stored in psReadMbx, psStoreMbx will be 
  39:../SSC/Src/mailbox.c **** 
  40:../SSC/Src/mailbox.c **** <br>Description of the mailbox buffer handling (MAILBOX_QUEUE = 1):<br>
  41:../SSC/Src/mailbox.c **** There are two mailbox buffer for sending and receiving mailbox services.<br>
  42:../SSC/Src/mailbox.c **** Normal operation (psWriteMbx is only used for local storage):<br>
  43:../SSC/Src/mailbox.c **** When starting the mailbox handler psReadMbx, psRepeatMbx and psStoreMbx are 0.<br>
  44:../SSC/Src/mailbox.c **** In this state a repeat request would be ignored because there was no service sent yet.<br>
  45:../SSC/Src/mailbox.c **** When a mailbox service is received from the master (in MBX_CheckAndCopyMailbox) a mailbox buffer<br
  46:../SSC/Src/mailbox.c **** will be get with APPL_AllocMailboxBuffer and the corresponding protocol service function will<br>
  47:../SSC/Src/mailbox.c **** be called (in MBX_WriteMailboxInd). This buffer shall be used for the protocol service response.<br
  48:../SSC/Src/mailbox.c **** When the first mailbox service is sent (in MBX_CopyToSendMailbox), psReadMbx gets the sent mailbox 
  49:../SSC/Src/mailbox.c **** psRepeatMbx and psStoreMbx are still 0.<br>
  50:../SSC/Src/mailbox.c **** When the first mailbox service was read from the master, the sent mailbox buffer (psReadMbx) is sto
  51:../SSC/Src/mailbox.c **** in psRepeatMbx (in MBX_MailboxReadInd).<br>
  52:../SSC/Src/mailbox.c **** After that psReadMbx gets always the actual sent mailbox buffer (in MBX_CopyToSendMailbox)<br>
  53:../SSC/Src/mailbox.c **** When the mailbox service is read, psRepeatMbx is returned (with APPL_FreeMailboxBuffer) and psRepea
  54:../SSC/Src/mailbox.c **** buffer of psReadMbx.<br>
  55:../SSC/Src/mailbox.c **** Repeat Request from the master:<br>
  56:../SSC/Src/mailbox.c **** When a Repeat from the master is requested (MBX_MailboxRepeatReq), there are three different possib
  57:../SSC/Src/mailbox.c **** 1. no mailbox service was sent since the mailbox handler was started (psRepeatMbx = 0): nothing to 
  58:../SSC/Src/mailbox.c **** 2. the acknowledge of the last sent mailbox service was received (in MBX_MailboxReadInd) (bSendMbxI
  59:../SSC/Src/mailbox.c **** the last sent mailbox service (psRepeatMbx) will be sent again (in MBX_CopyToSendMailbox) and store
  60:../SSC/Src/mailbox.c **** psRepeatMbx will be set to 0<br>
  61:../SSC/Src/mailbox.c **** 3. the acknowledge of the last sent mailbox service was not received (psReadMbx and psRepeatMbx con
  62:../SSC/Src/mailbox.c **** psReadMbx is still in the mailbox (because MBX_MailboxReadInd is not called yet, bSendMbxIsFull = 1
  63:../SSC/Src/mailbox.c **** psReadMbx will be deleted in the mailbox (call of DisableSyncManChannel and EnableSyncManChannel) a
  64:../SSC/Src/mailbox.c **** stored in psStoreMbx, psRepeatMbx will be sent again (in MBX_CopyToSendMailbox) and stored in psRea
  65:../SSC/Src/mailbox.c **** psRepeatMbx will be set to 0.<br>
  66:../SSC/Src/mailbox.c **** When the repeated mailbox service was sent (call of MBX_MailboxReadInd), psReadMbx will be stored i
  67:../SSC/Src/mailbox.c **** and psStoreMbx will be sent (in MBX_CopyToSendMailbox) and stored in psReadMbx, psStoreMbx will be 
  68:../SSC/Src/mailbox.c **** 
  69:../SSC/Src/mailbox.c **** \version 5.11
  70:../SSC/Src/mailbox.c **** 
  71:../SSC/Src/mailbox.c **** <br>Changes to version V5.10:<br>
  72:../SSC/Src/mailbox.c **** V5.11 ECAT10: change PROTO handling to prevent compiler errors<br>
  73:../SSC/Src/mailbox.c **** V5.11 ECAT7: add missing big endian swapping<br>
  74:../SSC/Src/mailbox.c **** V5.11 HW1: "move hardware independent functions ""HW_DisableSyncManChannel()"", ""HW_EnableSyncManC
  75:../SSC/Src/mailbox.c **** V5.11 MBX2: "check in IP if enough dynamic memory is available to handle mailbox communication, if 
  76:../SSC/Src/mailbox.c **** V5.11 MBX3: set application triggered emergency and EoE data to pending if no mailbox queue is supp
  77:../SSC/Src/mailbox.c **** V5.11 TEST4: add new mailbox test behaviour (the master mailbox cnt shall be incremented by 1 and t
  78:../SSC/Src/mailbox.c **** <br>Changes to version V5.01:<br>
  79:../SSC/Src/mailbox.c **** V5.10 EOE3: Change local send frame pending indication variable to a global variable (it need to be
  80:../SSC/Src/mailbox.c **** V5.10 ESC6: Update SyncManager register size (only for 8Bit ESC access)<br>
  81:../SSC/Src/mailbox.c **** V5.10 MBX2: Allocate only memory for current configured mailbox size (max supported size was alloca
  82:../SSC/Src/mailbox.c **** <br>Changes to version V5.0:<br>
  83:../SSC/Src/mailbox.c **** V5.01 ESC2: Add missed value swapping<br>
  84:../SSC/Src/mailbox.c **** V5.01 MBX2: Return an error if length specified in mailbnox header is too large.<br>
  85:../SSC/Src/mailbox.c **** <br>Changes to version V4.40:<br>
  86:../SSC/Src/mailbox.c **** V5.0 ECAT3: Global dummy variables used for dummy ESC operations.<br>
  87:../SSC/Src/mailbox.c **** V5.0 ESC1: ESC 32Bit Access added.<br>
  88:../SSC/Src/mailbox.c **** V5.0 MBX2: Prevent double swapping (MBX repeat service) of MBX length field.<br>
  89:../SSC/Src/mailbox.c **** V5.0 MBX4: Unlock SM buffer based on SM state.<br>
  90:../SSC/Src/mailbox.c **** <br>Changes to version V4.11:<br>
  91:../SSC/Src/mailbox.c **** V4.40 MBX8: Handle pending mailbox data even if mailbox queue is enabled<br>
  92:../SSC/Src/mailbox.c **** V4.40 MBX7: Reset SyncManger 1 Repeat Acknowledge bit if local variable is reset<br>
  93:../SSC/Src/mailbox.c **** V4.40 EMCY2: Send queued emergency messages<br>
  94:../SSC/Src/mailbox.c **** V4.40 BOOT2: Support only FoE in Bootstrap state<br>
  95:../SSC/Src/mailbox.c **** V4.40 MBX5: Prevent multiple free buffer<br>
  96:../SSC/Src/mailbox.c **** V4.40 MBX6: change return value if no mailbox buffer is available<br>
  97:../SSC/Src/mailbox.c **** <br>Changes to version V4.08:<br>
  98:../SSC/Src/mailbox.c **** V4.11 MBX 1: free some dynamic memory to avoid memory leaks in the mailbox queue<br>
  99:../SSC/Src/mailbox.c **** <br>Changes to version V4.07:<br>
 100:../SSC/Src/mailbox.c **** V4.10 MBX 1: check Mailbox message buffer and print emergency messages<br>
 101:../SSC/Src/mailbox.c ****                during state change Init -> PreOP<br>
 102:../SSC/Src/mailbox.c **** <br>Changes to version V4.07:<br>
 103:../SSC/Src/mailbox.c **** V4.08 MBX 1: The mailbox queue was added (switch MAILBOX_QUEUE), if the<br>
 104:../SSC/Src/mailbox.c ****              mailbox should be handled in the ESC-Interrupt Service Routine<br>
 105:../SSC/Src/mailbox.c ****              the defines ENTER_MBX_CRITICAL and LEAVE_MBX_CRITICAL could be used<br>
 106:../SSC/Src/mailbox.c ****              to disable the interrupts or change the priority<br>
 107:../SSC/Src/mailbox.c **** V4.08 AOE 1:    AoE was added<br>
 108:../SSC/Src/mailbox.c **** <br>Changes to version V4.06:<br>
 109:../SSC/Src/mailbox.c **** V4.07 ECAT 1: The sources for SPI and MCI were merged (in ecat_def.h<br>
 110:../SSC/Src/mailbox.c ****                    set the switch MCI_HW to 1 when using the MCI,<br>
 111:../SSC/Src/mailbox.c ****                    set the switch SPI_HW to 1 when using the SPI
 112:../SSC/Src/mailbox.c **** */
 113:../SSC/Src/mailbox.c **** 
 114:../SSC/Src/mailbox.c **** 
 115:../SSC/Src/mailbox.c **** /*---------------------------------------------------------------------------------------
 116:../SSC/Src/mailbox.c **** ------
 117:../SSC/Src/mailbox.c **** ------    Includes
 118:../SSC/Src/mailbox.c **** ------
 119:../SSC/Src/mailbox.c **** ---------------------------------------------------------------------------------------*/
 120:../SSC/Src/mailbox.c **** 
 121:../SSC/Src/mailbox.c **** #include "ecat_def.h"
 122:../SSC/Src/mailbox.c **** 
 123:../SSC/Src/mailbox.c **** 
 124:../SSC/Src/mailbox.c **** #include "ecatslv.h"
 125:../SSC/Src/mailbox.c **** 
 126:../SSC/Src/mailbox.c **** 
 127:../SSC/Src/mailbox.c **** #define    _MAILBOX_    1
 128:../SSC/Src/mailbox.c **** #include "mailbox.h"
 129:../SSC/Src/mailbox.c **** #undef _MAILBOX_
 130:../SSC/Src/mailbox.c **** /* ECATCHANGE_START(V5.11) ECAT10*/
 131:../SSC/Src/mailbox.c **** /*remove definition of _MAILBOX_ (#ifdef is used in mailbox.h)*/
 132:../SSC/Src/mailbox.c **** /* ECATCHANGE_END(V5.11) ECAT10*/
 133:../SSC/Src/mailbox.c **** 
 134:../SSC/Src/mailbox.c **** #include "ecatcoe.h"
 135:../SSC/Src/mailbox.c **** 
 136:../SSC/Src/mailbox.c **** /*--------------------------------------------------------------------------------------
 137:../SSC/Src/mailbox.c **** ------
 138:../SSC/Src/mailbox.c **** ------    internal Types and Defines
 139:../SSC/Src/mailbox.c **** ------
 140:../SSC/Src/mailbox.c **** --------------------------------------------------------------------------------------*/
 141:../SSC/Src/mailbox.c **** 
 142:../SSC/Src/mailbox.c **** /*--------------------------------------------------------------------------------------
 143:../SSC/Src/mailbox.c **** ------
 144:../SSC/Src/mailbox.c **** ------    internal Variables
 145:../SSC/Src/mailbox.c **** ------
 146:../SSC/Src/mailbox.c **** --------------------------------------------------------------------------------------*/
 147:../SSC/Src/mailbox.c **** /*variables are declared in ecatslv.c*/
 148:../SSC/Src/mailbox.c ****     extern VARVOLATILE UINT8 u8dummy;
 149:../SSC/Src/mailbox.c **** 
 150:../SSC/Src/mailbox.c **** /* ECATCHANGE_START(V5.11) MBX2*/
 151:../SSC/Src/mailbox.c ****     BOOL bNoMbxMemoryAvailable; /**< \brief Indicates if enough dynamic memory is available to hand
 152:../SSC/Src/mailbox.c **** /* ECATCHANGE_END(V5.11) MBX2*/
 153:../SSC/Src/mailbox.c **** /*--------------------------------------------------------------------------------------
 154:../SSC/Src/mailbox.c **** ------
 155:../SSC/Src/mailbox.c **** ------    internal functions
 156:../SSC/Src/mailbox.c **** ------
 157:../SSC/Src/mailbox.c **** --------------------------------------------------------------------------------------*/
 158:../SSC/Src/mailbox.c **** 
 159:../SSC/Src/mailbox.c **** /*---------------------------------------------------------------------------------------
 160:../SSC/Src/mailbox.c **** ------
 161:../SSC/Src/mailbox.c **** ------    functions
 162:../SSC/Src/mailbox.c **** ------
 163:../SSC/Src/mailbox.c **** ---------------------------------------------------------------------------------------*/
 164:../SSC/Src/mailbox.c **** 
 165:../SSC/Src/mailbox.c **** 
 166:../SSC/Src/mailbox.c **** ///////////////////////////////////////////////////////////////////////////////////////////
 167:../SSC/Src/mailbox.c **** //
 168:../SSC/Src/mailbox.c **** //    PutInMbxQueue
 169:../SSC/Src/mailbox.c **** //
 170:../SSC/Src/mailbox.c **** 
 171:../SSC/Src/mailbox.c **** UINT8 PutInMbxQueue(TMBX MBXMEM * pMbx, TMBXQUEUE MBXMEM * pQueue)
 172:../SSC/Src/mailbox.c **** {
 234              	 .loc 2 172 0
 235              	 .cfi_startproc
 236              	 
 237              	 
 238              	 
 239 0000 80B4     	 push {r7}
 240              	.LCFI20:
 241              	 .cfi_def_cfa_offset 4
 242              	 .cfi_offset 7,-4
 243 0002 85B0     	 sub sp,sp,#20
 244              	.LCFI21:
 245              	 .cfi_def_cfa_offset 24
 246 0004 00AF     	 add r7,sp,#0
 247              	.LCFI22:
 248              	 .cfi_def_cfa_register 7
 249 0006 7860     	 str r0,[r7,#4]
 250 0008 3960     	 str r1,[r7]
 173:../SSC/Src/mailbox.c ****     UINT16 lastInQueue;
 174:../SSC/Src/mailbox.c ****     ENTER_MBX_CRITICAL;
 175:../SSC/Src/mailbox.c **** 
 176:../SSC/Src/mailbox.c **** 
 177:../SSC/Src/mailbox.c ****     lastInQueue = pQueue->lastInQueue+1;
 251              	 .loc 2 177 0
 252 000a 3B68     	 ldr r3,[r7]
 253 000c 5B88     	 ldrh r3,[r3,#2]
 254 000e 0133     	 adds r3,r3,#1
 255 0010 FB81     	 strh r3,[r7,#14]
 178:../SSC/Src/mailbox.c ****     if (lastInQueue == pQueue->maxQueueSize)
 256              	 .loc 2 178 0
 257 0012 3B68     	 ldr r3,[r7]
 258 0014 9B88     	 ldrh r3,[r3,#4]
 259 0016 FA89     	 ldrh r2,[r7,#14]
 260 0018 9A42     	 cmp r2,r3
 261 001a 01D1     	 bne .L6
 179:../SSC/Src/mailbox.c ****     {
 180:../SSC/Src/mailbox.c ****         // Umbruch der Queue
 181:../SSC/Src/mailbox.c ****         lastInQueue = 0;
 262              	 .loc 2 181 0
 263 001c 0023     	 movs r3,#0
 264 001e FB81     	 strh r3,[r7,#14]
 265              	.L6:
 182:../SSC/Src/mailbox.c ****     }
 183:../SSC/Src/mailbox.c **** 
 184:../SSC/Src/mailbox.c ****     if (pQueue->firstInQueue == lastInQueue)
 266              	 .loc 2 184 0
 267 0020 3B68     	 ldr r3,[r7]
 268 0022 1B88     	 ldrh r3,[r3]
 269 0024 FA89     	 ldrh r2,[r7,#14]
 270 0026 9A42     	 cmp r2,r3
 271 0028 01D1     	 bne .L7
 185:../SSC/Src/mailbox.c ****     {
 186:../SSC/Src/mailbox.c ****         // Ueberlauf der Queue -> letztes Element wieder herausnehmen
 187:../SSC/Src/mailbox.c ****         LEAVE_MBX_CRITICAL;
 188:../SSC/Src/mailbox.c ****         return MBXERR_NOMOREMEMORY;
 272              	 .loc 2 188 0
 273 002a 0723     	 movs r3,#7
 274 002c 0BE0     	 b .L8
 275              	.L7:
 189:../SSC/Src/mailbox.c ****     }
 190:../SSC/Src/mailbox.c **** 
 191:../SSC/Src/mailbox.c ****     pQueue->queue[pQueue->lastInQueue] = pMbx;
 276              	 .loc 2 191 0
 277 002e 3B68     	 ldr r3,[r7]
 278 0030 5B88     	 ldrh r3,[r3,#2]
 279 0032 1A46     	 mov r2,r3
 280 0034 3B68     	 ldr r3,[r7]
 281 0036 0232     	 adds r2,r2,#2
 282 0038 7968     	 ldr r1,[r7,#4]
 283 003a 43F82210 	 str r1,[r3,r2,lsl#2]
 192:../SSC/Src/mailbox.c ****     pQueue->lastInQueue = lastInQueue;
 284              	 .loc 2 192 0
 285 003e 3B68     	 ldr r3,[r7]
 286 0040 FA89     	 ldrh r2,[r7,#14]
 287 0042 5A80     	 strh r2,[r3,#2]
 193:../SSC/Src/mailbox.c **** 
 194:../SSC/Src/mailbox.c ****     LEAVE_MBX_CRITICAL;
 195:../SSC/Src/mailbox.c **** 
 196:../SSC/Src/mailbox.c ****     return 0;
 288              	 .loc 2 196 0
 289 0044 0023     	 movs r3,#0
 290              	.L8:
 197:../SSC/Src/mailbox.c **** }
 291              	 .loc 2 197 0
 292 0046 1846     	 mov r0,r3
 293 0048 1437     	 adds r7,r7,#20
 294              	.LCFI23:
 295              	 .cfi_def_cfa_offset 4
 296 004a BD46     	 mov sp,r7
 297              	.LCFI24:
 298              	 .cfi_def_cfa_register 13
 299              	 
 300 004c 5DF8047B 	 ldr r7,[sp],#4
 301              	.LCFI25:
 302              	 .cfi_restore 7
 303              	 .cfi_def_cfa_offset 0
 304 0050 7047     	 bx lr
 305              	 .cfi_endproc
 306              	.LFE172:
 308 0052 00BF     	 .section .text.GetOutOfMbxQueue,"ax",%progbits
 309              	 .align 2
 310              	 .global GetOutOfMbxQueue
 311              	 .thumb
 312              	 .thumb_func
 314              	GetOutOfMbxQueue:
 315              	.LFB173:
 198:../SSC/Src/mailbox.c **** 
 199:../SSC/Src/mailbox.c **** ///////////////////////////////////////////////////////////////////////////////////////////
 200:../SSC/Src/mailbox.c **** //
 201:../SSC/Src/mailbox.c **** //    GetOutOfMbxQueue
 202:../SSC/Src/mailbox.c **** //
 203:../SSC/Src/mailbox.c **** 
 204:../SSC/Src/mailbox.c **** TMBX MBXMEM * GetOutOfMbxQueue(TMBXQUEUE MBXMEM * pQueue)
 205:../SSC/Src/mailbox.c **** {
 316              	 .loc 2 205 0
 317              	 .cfi_startproc
 318              	 
 319              	 
 320              	 
 321 0000 80B4     	 push {r7}
 322              	.LCFI26:
 323              	 .cfi_def_cfa_offset 4
 324              	 .cfi_offset 7,-4
 325 0002 85B0     	 sub sp,sp,#20
 326              	.LCFI27:
 327              	 .cfi_def_cfa_offset 24
 328 0004 00AF     	 add r7,sp,#0
 329              	.LCFI28:
 330              	 .cfi_def_cfa_register 7
 331 0006 7860     	 str r0,[r7,#4]
 206:../SSC/Src/mailbox.c ****     TMBX MBXMEM * pMbx;
 207:../SSC/Src/mailbox.c ****     ENTER_MBX_CRITICAL;
 208:../SSC/Src/mailbox.c **** 
 209:../SSC/Src/mailbox.c ****     if (pQueue->firstInQueue != pQueue->lastInQueue)
 332              	 .loc 2 209 0
 333 0008 7B68     	 ldr r3,[r7,#4]
 334 000a 1A88     	 ldrh r2,[r3]
 335 000c 7B68     	 ldr r3,[r7,#4]
 336 000e 5B88     	 ldrh r3,[r3,#2]
 337 0010 9A42     	 cmp r2,r3
 338 0012 19D0     	 beq .L10
 339              	.LBB2:
 210:../SSC/Src/mailbox.c ****     {
 211:../SSC/Src/mailbox.c ****         // Queue ist nicht leer
 212:../SSC/Src/mailbox.c ****         UINT16 firstInQueue = pQueue->firstInQueue;
 340              	 .loc 2 212 0
 341 0014 7B68     	 ldr r3,[r7,#4]
 342 0016 1B88     	 ldrh r3,[r3]
 343 0018 7B81     	 strh r3,[r7,#10]
 213:../SSC/Src/mailbox.c ****         pMbx = pQueue->queue[firstInQueue];
 344              	 .loc 2 213 0
 345 001a 7A89     	 ldrh r2,[r7,#10]
 346 001c 7B68     	 ldr r3,[r7,#4]
 347 001e 0232     	 adds r2,r2,#2
 348 0020 53F82230 	 ldr r3,[r3,r2,lsl#2]
 349 0024 FB60     	 str r3,[r7,#12]
 214:../SSC/Src/mailbox.c ****         firstInQueue++;
 350              	 .loc 2 214 0
 351 0026 7B89     	 ldrh r3,[r7,#10]
 352 0028 0133     	 adds r3,r3,#1
 353 002a 7B81     	 strh r3,[r7,#10]
 215:../SSC/Src/mailbox.c ****         pQueue->firstInQueue = firstInQueue;
 354              	 .loc 2 215 0
 355 002c 7B68     	 ldr r3,[r7,#4]
 356 002e 7A89     	 ldrh r2,[r7,#10]
 357 0030 1A80     	 strh r2,[r3]
 216:../SSC/Src/mailbox.c ****         if (pQueue->firstInQueue == pQueue->maxQueueSize)
 358              	 .loc 2 216 0
 359 0032 7B68     	 ldr r3,[r7,#4]
 360 0034 1A88     	 ldrh r2,[r3]
 361 0036 7B68     	 ldr r3,[r7,#4]
 362 0038 9B88     	 ldrh r3,[r3,#4]
 363 003a 9A42     	 cmp r2,r3
 364 003c 03D1     	 bne .L11
 217:../SSC/Src/mailbox.c ****         {
 218:../SSC/Src/mailbox.c ****             // Umbruch der Queue
 219:../SSC/Src/mailbox.c ****             pQueue->firstInQueue = 0;
 365              	 .loc 2 219 0
 366 003e 7B68     	 ldr r3,[r7,#4]
 367 0040 0022     	 movs r2,#0
 368 0042 1A80     	 strh r2,[r3]
 369              	.LBE2:
 370 0044 02E0     	 b .L12
 371              	.L11:
 372 0046 01E0     	 b .L12
 373              	.L10:
 220:../SSC/Src/mailbox.c ****         }
 221:../SSC/Src/mailbox.c ****     }
 222:../SSC/Src/mailbox.c ****     else
 223:../SSC/Src/mailbox.c ****         pMbx = 0;
 374              	 .loc 2 223 0
 375 0048 0023     	 movs r3,#0
 376 004a FB60     	 str r3,[r7,#12]
 377              	.L12:
 224:../SSC/Src/mailbox.c **** 
 225:../SSC/Src/mailbox.c **** 
 226:../SSC/Src/mailbox.c ****     LEAVE_MBX_CRITICAL;
 227:../SSC/Src/mailbox.c **** 
 228:../SSC/Src/mailbox.c ****     return pMbx;
 378              	 .loc 2 228 0
 379 004c FB68     	 ldr r3,[r7,#12]
 229:../SSC/Src/mailbox.c **** }
 380              	 .loc 2 229 0
 381 004e 1846     	 mov r0,r3
 382 0050 1437     	 adds r7,r7,#20
 383              	.LCFI29:
 384              	 .cfi_def_cfa_offset 4
 385 0052 BD46     	 mov sp,r7
 386              	.LCFI30:
 387              	 .cfi_def_cfa_register 13
 388              	 
 389 0054 5DF8047B 	 ldr r7,[sp],#4
 390              	.LCFI31:
 391              	 .cfi_restore 7
 392              	 .cfi_def_cfa_offset 0
 393 0058 7047     	 bx lr
 394              	 .cfi_endproc
 395              	.LFE173:
 397 005a 00BF     	 .section .text.MBX_Init,"ax",%progbits
 398              	 .align 2
 399              	 .global MBX_Init
 400              	 .thumb
 401              	 .thumb_func
 403              	MBX_Init:
 404              	.LFB174:
 230:../SSC/Src/mailbox.c **** 
 231:../SSC/Src/mailbox.c **** /////////////////////////////////////////////////////////////////////////////////////////
 232:../SSC/Src/mailbox.c **** /**
 233:../SSC/Src/mailbox.c ****  \brief    This function intialize the Mailbox Interface.
 234:../SSC/Src/mailbox.c **** *////////////////////////////////////////////////////////////////////////////////////////
 235:../SSC/Src/mailbox.c **** 
 236:../SSC/Src/mailbox.c **** void MBX_Init(void)
 237:../SSC/Src/mailbox.c **** {
 405              	 .loc 2 237 0
 406              	 .cfi_startproc
 407              	 
 408              	 
 409              	 
 410 0000 80B4     	 push {r7}
 411              	.LCFI32:
 412              	 .cfi_def_cfa_offset 4
 413              	 .cfi_offset 7,-4
 414 0002 83B0     	 sub sp,sp,#12
 415              	.LCFI33:
 416              	 .cfi_def_cfa_offset 16
 417 0004 00AF     	 add r7,sp,#0
 418              	.LCFI34:
 419              	 .cfi_def_cfa_register 7
 238:../SSC/Src/mailbox.c ****     u16ReceiveMbxSize = MIN_MBX_SIZE;
 420              	 .loc 2 238 0
 421 0006 294B     	 ldr r3,.L15
 422 0008 2222     	 movs r2,#34
 423 000a 1A80     	 strh r2,[r3]
 239:../SSC/Src/mailbox.c ****     u16SendMbxSize = MAX_MBX_SIZE;
 424              	 .loc 2 239 0
 425 000c 284B     	 ldr r3,.L15+4
 426 000e 4FF48072 	 mov r2,#256
 427 0012 1A80     	 strh r2,[r3]
 240:../SSC/Src/mailbox.c ****     u16EscAddrReceiveMbx = MIN_MBX_WRITE_ADDRESS;
 428              	 .loc 2 240 0
 429 0014 274B     	 ldr r3,.L15+8
 430 0016 4FF48052 	 mov r2,#4096
 431 001a 1A80     	 strh r2,[r3]
 241:../SSC/Src/mailbox.c ****     u16EscAddrSendMbx = MIN_MBX_READ_ADDRESS;
 432              	 .loc 2 241 0
 433 001c 264B     	 ldr r3,.L15+12
 434 001e 4FF48052 	 mov r2,#4096
 435 0022 1A80     	 strh r2,[r3]
 242:../SSC/Src/mailbox.c **** 
 243:../SSC/Src/mailbox.c ****     sMbxReceiveQueue.firstInQueue    = 0;
 436              	 .loc 2 243 0
 437 0024 254B     	 ldr r3,.L15+16
 438 0026 0022     	 movs r2,#0
 439 0028 1A80     	 strh r2,[r3]
 244:../SSC/Src/mailbox.c ****     sMbxReceiveQueue.lastInQueue     = 0;
 440              	 .loc 2 244 0
 441 002a 244B     	 ldr r3,.L15+16
 442 002c 0022     	 movs r2,#0
 443 002e 5A80     	 strh r2,[r3,#2]
 245:../SSC/Src/mailbox.c ****     sMbxReceiveQueue.maxQueueSize = MAX_MBX_QUEUE_SIZE;
 444              	 .loc 2 245 0
 445 0030 224B     	 ldr r3,.L15+16
 446 0032 0A22     	 movs r2,#10
 447 0034 9A80     	 strh r2,[r3,#4]
 246:../SSC/Src/mailbox.c ****     sMbxSendQueue.firstInQueue        = 0;
 448              	 .loc 2 246 0
 449 0036 224B     	 ldr r3,.L15+20
 450 0038 0022     	 movs r2,#0
 451 003a 1A80     	 strh r2,[r3]
 247:../SSC/Src/mailbox.c ****     sMbxSendQueue.lastInQueue         = 0;
 452              	 .loc 2 247 0
 453 003c 204B     	 ldr r3,.L15+20
 454 003e 0022     	 movs r2,#0
 455 0040 5A80     	 strh r2,[r3,#2]
 248:../SSC/Src/mailbox.c ****     sMbxSendQueue.maxQueueSize     = MAX_MBX_QUEUE_SIZE;
 456              	 .loc 2 248 0
 457 0042 1F4B     	 ldr r3,.L15+20
 458 0044 0A22     	 movs r2,#10
 459 0046 9A80     	 strh r2,[r3,#4]
 249:../SSC/Src/mailbox.c ****     psWriteMbx  = NULL;
 460              	 .loc 2 249 0
 461 0048 1E4B     	 ldr r3,.L15+24
 462 004a 0022     	 movs r2,#0
 463 004c 1A60     	 str r2,[r3]
 250:../SSC/Src/mailbox.c **** 
 251:../SSC/Src/mailbox.c **** 
 252:../SSC/Src/mailbox.c ****     psRepeatMbx = NULL;
 464              	 .loc 2 252 0
 465 004e 1E4B     	 ldr r3,.L15+28
 466 0050 0022     	 movs r2,#0
 467 0052 1A60     	 str r2,[r3]
 253:../SSC/Src/mailbox.c ****     psReadMbx    = NULL;
 468              	 .loc 2 253 0
 469 0054 1D4B     	 ldr r3,.L15+32
 470 0056 0022     	 movs r2,#0
 471 0058 1A60     	 str r2,[r3]
 254:../SSC/Src/mailbox.c ****     psStoreMbx    = NULL;
 472              	 .loc 2 254 0
 473 005a 1D4B     	 ldr r3,.L15+36
 474 005c 0022     	 movs r2,#0
 475 005e 1A60     	 str r2,[r3]
 255:../SSC/Src/mailbox.c **** 
 256:../SSC/Src/mailbox.c ****     bMbxRepeatToggle    = FALSE;
 476              	 .loc 2 256 0
 477 0060 1C4B     	 ldr r3,.L15+40
 478 0062 0022     	 movs r2,#0
 479 0064 1A70     	 strb r2,[r3]
 480              	.LBB3:
 257:../SSC/Src/mailbox.c ****     /*Reset Repeat acknowledge bit of SyncManager1 (0x80F bit 2)*/
 258:../SSC/Src/mailbox.c ****     {
 259:../SSC/Src/mailbox.c ****         UINT8 sm1Activate = 0;
 481              	 .loc 2 259 0
 482 0066 0023     	 movs r3,#0
 483 0068 FB71     	 strb r3,[r7,#7]
 260:../SSC/Src/mailbox.c ****         HW_EscReadByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 484              	 .loc 2 260 0
 485 006a 1B4B     	 ldr r3,.L15+44
 486 006c 1B78     	 ldrb r3,[r3]
 487 006e FB71     	 strb r3,[r7,#7]
 261:../SSC/Src/mailbox.c ****         sm1Activate &= ~0x02;
 488              	 .loc 2 261 0
 489 0070 FB79     	 ldrb r3,[r7,#7]
 490 0072 23F00203 	 bic r3,r3,#2
 491 0076 FB71     	 strb r3,[r7,#7]
 262:../SSC/Src/mailbox.c ****         HW_EscWriteByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 492              	 .loc 2 262 0
 493 0078 174A     	 ldr r2,.L15+44
 494 007a FB79     	 ldrb r3,[r7,#7]
 495 007c 1370     	 strb r3,[r2]
 496              	.LBE3:
 263:../SSC/Src/mailbox.c ****     }
 264:../SSC/Src/mailbox.c ****     bMbxRunning = FALSE;
 497              	 .loc 2 264 0
 498 007e 174B     	 ldr r3,.L15+48
 499 0080 0022     	 movs r2,#0
 500 0082 1A70     	 strb r2,[r3]
 265:../SSC/Src/mailbox.c ****     bSendMbxIsFull = FALSE;
 501              	 .loc 2 265 0
 502 0084 164B     	 ldr r3,.L15+52
 503 0086 0022     	 movs r2,#0
 504 0088 1A70     	 strb r2,[r3]
 266:../SSC/Src/mailbox.c ****     bReceiveMbxIsLocked = FALSE;
 505              	 .loc 2 266 0
 506 008a 164B     	 ldr r3,.L15+56
 507 008c 0022     	 movs r2,#0
 508 008e 1A70     	 strb r2,[r3]
 267:../SSC/Src/mailbox.c ****     u8MailboxSendReqStored    = 0;
 509              	 .loc 2 267 0
 510 0090 154B     	 ldr r3,.L15+60
 511 0092 0022     	 movs r2,#0
 512 0094 1A70     	 strb r2,[r3]
 268:../SSC/Src/mailbox.c ****     u8MbxWriteCounter = 0;
 513              	 .loc 2 268 0
 514 0096 154B     	 ldr r3,.L15+64
 515 0098 0022     	 movs r2,#0
 516 009a 1A70     	 strb r2,[r3]
 269:../SSC/Src/mailbox.c ****     u8MbxReadCounter    = 0;
 517              	 .loc 2 269 0
 518 009c 144B     	 ldr r3,.L15+68
 519 009e 0022     	 movs r2,#0
 520 00a0 1A70     	 strb r2,[r3]
 270:../SSC/Src/mailbox.c **** }
 521              	 .loc 2 270 0
 522 00a2 0C37     	 adds r7,r7,#12
 523              	.LCFI35:
 524              	 .cfi_def_cfa_offset 4
 525 00a4 BD46     	 mov sp,r7
 526              	.LCFI36:
 527              	 .cfi_def_cfa_register 13
 528              	 
 529 00a6 5DF8047B 	 ldr r7,[sp],#4
 530              	.LCFI37:
 531              	 .cfi_restore 7
 532              	 .cfi_def_cfa_offset 0
 533 00aa 7047     	 bx lr
 534              	.L16:
 535              	 .align 2
 536              	.L15:
 537 00ac 00000000 	 .word u16ReceiveMbxSize
 538 00b0 00000000 	 .word u16SendMbxSize
 539 00b4 00000000 	 .word u16EscAddrReceiveMbx
 540 00b8 00000000 	 .word u16EscAddrSendMbx
 541 00bc 00000000 	 .word sMbxReceiveQueue
 542 00c0 00000000 	 .word sMbxSendQueue
 543 00c4 00000000 	 .word psWriteMbx
 544 00c8 00000000 	 .word psRepeatMbx
 545 00cc 00000000 	 .word psReadMbx
 546 00d0 00000000 	 .word psStoreMbx
 547 00d4 00000000 	 .word bMbxRepeatToggle
 548 00d8 0F080154 	 .word 1409353743
 549 00dc 00000000 	 .word bMbxRunning
 550 00e0 00000000 	 .word bSendMbxIsFull
 551 00e4 00000000 	 .word bReceiveMbxIsLocked
 552 00e8 00000000 	 .word u8MailboxSendReqStored
 553 00ec 00000000 	 .word u8MbxWriteCounter
 554 00f0 00000000 	 .word u8MbxReadCounter
 555              	 .cfi_endproc
 556              	.LFE174:
 558              	 .section .text.MBX_StartMailboxHandler,"ax",%progbits
 559              	 .align 2
 560              	 .global MBX_StartMailboxHandler
 561              	 .thumb
 562              	 .thumb_func
 564              	MBX_StartMailboxHandler:
 565              	.LFB175:
 271:../SSC/Src/mailbox.c **** 
 272:../SSC/Src/mailbox.c **** /////////////////////////////////////////////////////////////////////////////////////////
 273:../SSC/Src/mailbox.c **** /**
 274:../SSC/Src/mailbox.c **** 
 275:../SSC/Src/mailbox.c ****  \brief     This function includes the state transition from INIT to
 276:../SSC/Src/mailbox.c ****  \brief     PRE-OPERATIONAL in the EtherCAT Slave corresponding to
 277:../SSC/Src/mailbox.c ****  \brief     local management service Start Mailbox Handler
 278:../SSC/Src/mailbox.c ****  \brief     it is checked if the mailbox areas overlaps each other
 279:../SSC/Src/mailbox.c ****  \brief     and the Sync Manager channels 0 and 1 are enabled.
 280:../SSC/Src/mailbox.c ****  \brief     This function shall only be called if mailbox is supported.
 281:../SSC/Src/mailbox.c **** *////////////////////////////////////////////////////////////////////////////////////////
 282:../SSC/Src/mailbox.c **** UINT16 MBX_StartMailboxHandler(void)
 283:../SSC/Src/mailbox.c **** {
 566              	 .loc 2 283 0
 567              	 .cfi_startproc
 568              	 
 569              	 
 570 0000 80B5     	 push {r7,lr}
 571              	.LCFI38:
 572              	 .cfi_def_cfa_offset 8
 573              	 .cfi_offset 7,-8
 574              	 .cfi_offset 14,-4
 575 0002 82B0     	 sub sp,sp,#8
 576              	.LCFI39:
 577              	 .cfi_def_cfa_offset 16
 578 0004 00AF     	 add r7,sp,#0
 579              	.LCFI40:
 580              	 .cfi_def_cfa_register 7
 284:../SSC/Src/mailbox.c ****     UINT16 result = 0;
 581              	 .loc 2 284 0
 582 0006 0023     	 movs r3,#0
 583 0008 FB80     	 strh r3,[r7,#6]
 285:../SSC/Src/mailbox.c ****     /* get address of the receive mailbox sync manager (SM0) */
 286:../SSC/Src/mailbox.c **** /*ECATCHANGE_START(V5.11) HW1*/
 287:../SSC/Src/mailbox.c ****     TSYNCMAN ESCMEM * pSyncMan = (TSYNCMAN ESCMEM *)GetSyncMan(MAILBOX_WRITE);
 584              	 .loc 2 287 0
 585 000a 0020     	 movs r0,#0
 586 000c FFF7FEFF 	 bl GetSyncMan
 587 0010 3860     	 str r0,[r7]
 288:../SSC/Src/mailbox.c **** /*ECATCHANGE_END(V5.11) HW1*/
 289:../SSC/Src/mailbox.c ****     /* store size of the receive mailbox */
 290:../SSC/Src/mailbox.c ****     u16ReceiveMbxSize     = pSyncMan->Length;
 588              	 .loc 2 290 0
 589 0012 3B68     	 ldr r3,[r7]
 590 0014 5B88     	 ldrh r3,[r3,#2]
 591 0016 9AB2     	 uxth r2,r3
 592 0018 304B     	 ldr r3,.L23
 593 001a 1A80     	 strh r2,[r3]
 291:../SSC/Src/mailbox.c ****     /* store the address of the receive mailbox */
 292:../SSC/Src/mailbox.c ****     u16EscAddrReceiveMbx = pSyncMan->PhysicalStartAddress;
 594              	 .loc 2 292 0
 595 001c 3B68     	 ldr r3,[r7]
 596 001e 1B88     	 ldrh r3,[r3]
 597 0020 9AB2     	 uxth r2,r3
 598 0022 2F4B     	 ldr r3,.L23+4
 599 0024 1A80     	 strh r2,[r3]
 293:../SSC/Src/mailbox.c **** 
 294:../SSC/Src/mailbox.c ****     /* get address of the send mailbox sync manager (SM1) */
 295:../SSC/Src/mailbox.c **** /*ECATCHANGE_START(V5.11) HW1*/
 296:../SSC/Src/mailbox.c ****     pSyncMan =(TSYNCMAN ESCMEM *) GetSyncMan(MAILBOX_READ);
 600              	 .loc 2 296 0
 601 0026 0120     	 movs r0,#1
 602 0028 FFF7FEFF 	 bl GetSyncMan
 603 002c 3860     	 str r0,[r7]
 297:../SSC/Src/mailbox.c **** /*ECATCHANGE_END(V5.11) HW1*/
 298:../SSC/Src/mailbox.c **** 
 299:../SSC/Src/mailbox.c ****     /* store the size of the send mailbox */
 300:../SSC/Src/mailbox.c ****     u16SendMbxSize = pSyncMan->Length;
 604              	 .loc 2 300 0
 605 002e 3B68     	 ldr r3,[r7]
 606 0030 5B88     	 ldrh r3,[r3,#2]
 607 0032 9AB2     	 uxth r2,r3
 608 0034 2B4B     	 ldr r3,.L23+8
 609 0036 1A80     	 strh r2,[r3]
 301:../SSC/Src/mailbox.c ****     /* store the address of the send mailbox */
 302:../SSC/Src/mailbox.c ****     u16EscAddrSendMbx = pSyncMan->PhysicalStartAddress;
 610              	 .loc 2 302 0
 611 0038 3B68     	 ldr r3,[r7]
 612 003a 1B88     	 ldrh r3,[r3]
 613 003c 9AB2     	 uxth r2,r3
 614 003e 2A4B     	 ldr r3,.L23+12
 615 0040 1A80     	 strh r2,[r3]
 303:../SSC/Src/mailbox.c **** 
 304:../SSC/Src/mailbox.c ****     // HBu 02.05.06: it should be checked if there are overlaps in the sync manager areas
 305:../SSC/Src/mailbox.c ****     if ((u16EscAddrReceiveMbx + u16ReceiveMbxSize) > u16EscAddrSendMbx && (u16EscAddrReceiveMbx < (
 616              	 .loc 2 305 0
 617 0042 274B     	 ldr r3,.L23+4
 618 0044 1B88     	 ldrh r3,[r3]
 619 0046 1A46     	 mov r2,r3
 620 0048 244B     	 ldr r3,.L23
 621 004a 1B88     	 ldrh r3,[r3]
 622 004c 1344     	 add r3,r3,r2
 623 004e 264A     	 ldr r2,.L23+12
 624 0050 1288     	 ldrh r2,[r2]
 625 0052 9342     	 cmp r3,r2
 626 0054 0CDD     	 ble .L18
 627              	 .loc 2 305 0 is_stmt 0 discriminator 1
 628 0056 224B     	 ldr r3,.L23+4
 629 0058 1B88     	 ldrh r3,[r3]
 630 005a 1A46     	 mov r2,r3
 631 005c 224B     	 ldr r3,.L23+12
 632 005e 1B88     	 ldrh r3,[r3]
 633 0060 1946     	 mov r1,r3
 634 0062 204B     	 ldr r3,.L23+8
 635 0064 1B88     	 ldrh r3,[r3]
 636 0066 0B44     	 add r3,r3,r1
 637 0068 9A42     	 cmp r2,r3
 638 006a 01DA     	 bge .L18
 306:../SSC/Src/mailbox.c ****     {
 307:../SSC/Src/mailbox.c ****         return ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 639              	 .loc 2 307 0 is_stmt 1
 640 006c 1623     	 movs r3,#22
 641 006e 31E0     	 b .L19
 642              	.L18:
 308:../SSC/Src/mailbox.c ****     }
 309:../SSC/Src/mailbox.c **** 
 310:../SSC/Src/mailbox.c ****     /* enable the receive mailbox sync manager channel */
 311:../SSC/Src/mailbox.c **** /*ECATCHANGE_START(V5.11) HW1*/
 312:../SSC/Src/mailbox.c ****     EnableSyncManChannel(MAILBOX_WRITE);
 643              	 .loc 2 312 0
 644 0070 0020     	 movs r0,#0
 645 0072 FFF7FEFF 	 bl EnableSyncManChannel
 313:../SSC/Src/mailbox.c ****     /* enable the send mailbox sync manager channel */
 314:../SSC/Src/mailbox.c ****     EnableSyncManChannel(MAILBOX_READ);
 646              	 .loc 2 314 0
 647 0076 0120     	 movs r0,#1
 648 0078 FFF7FEFF 	 bl EnableSyncManChannel
 315:../SSC/Src/mailbox.c **** /*ECATCHANGE_END(V5.11) HW1*/
 316:../SSC/Src/mailbox.c **** 
 317:../SSC/Src/mailbox.c **** /* ECATCHANGE_START(V5.11) MBX2*/
 318:../SSC/Src/mailbox.c ****         psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(u16ReceiveMbxSize);
 649              	 .loc 2 318 0
 650 007c 174B     	 ldr r3,.L23
 651 007e 1B88     	 ldrh r3,[r3]
 652 0080 1846     	 mov r0,r3
 653 0082 FFF7FEFF 	 bl malloc
 654 0086 0346     	 mov r3,r0
 655 0088 1A46     	 mov r2,r3
 656 008a 184B     	 ldr r3,.L23+16
 657 008c 1A60     	 str r2,[r3]
 319:../SSC/Src/mailbox.c ****         if(psWriteMbx == NULL)
 658              	 .loc 2 319 0
 659 008e 174B     	 ldr r3,.L23+16
 660 0090 1B68     	 ldr r3,[r3]
 661 0092 002B     	 cmp r3,#0
 662 0094 15D1     	 bne .L20
 320:../SSC/Src/mailbox.c ****         {
 321:../SSC/Src/mailbox.c ****             bNoMbxMemoryAvailable = TRUE;
 663              	 .loc 2 321 0
 664 0096 164B     	 ldr r3,.L23+20
 665 0098 0122     	 movs r2,#1
 666 009a 1A70     	 strb r2,[r3]
 322:../SSC/Src/mailbox.c **** 
 323:../SSC/Src/mailbox.c ****             //check if at least enough memory for an mailbox error is available (other wise stop th
 324:../SSC/Src/mailbox.c ****             psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(10); /* a mailbox error datagram l
 667              	 .loc 2 324 0
 668 009c 0A20     	 movs r0,#10
 669 009e FFF7FEFF 	 bl malloc
 670 00a2 0346     	 mov r3,r0
 671 00a4 1A46     	 mov r2,r3
 672 00a6 114B     	 ldr r3,.L23+16
 673 00a8 1A60     	 str r2,[r3]
 325:../SSC/Src/mailbox.c ****             if(psWriteMbx == NULL)
 674              	 .loc 2 325 0
 675 00aa 104B     	 ldr r3,.L23+16
 676 00ac 1B68     	 ldr r3,[r3]
 677 00ae 002B     	 cmp r3,#0
 678 00b0 01D1     	 bne .L21
 326:../SSC/Src/mailbox.c ****             {
 327:../SSC/Src/mailbox.c ****                 result = ALSTATUSCODE_NOMEMORY;
 679              	 .loc 2 327 0
 680 00b2 0223     	 movs r3,#2
 681 00b4 FB80     	 strh r3,[r7,#6]
 682              	.L21:
 328:../SSC/Src/mailbox.c ****             }
 329:../SSC/Src/mailbox.c ****            
 330:../SSC/Src/mailbox.c ****             APPL_FreeMailboxBuffer(psWriteMbx);
 683              	 .loc 2 330 0
 684 00b6 0D4B     	 ldr r3,.L23+16
 685 00b8 1B68     	 ldr r3,[r3]
 686 00ba 1846     	 mov r0,r3
 687 00bc FFF7FEFF 	 bl free
 688 00c0 07E0     	 b .L22
 689              	.L20:
 331:../SSC/Src/mailbox.c ****         }
 332:../SSC/Src/mailbox.c ****         else
 333:../SSC/Src/mailbox.c ****         {
 334:../SSC/Src/mailbox.c ****             bNoMbxMemoryAvailable = FALSE;
 690              	 .loc 2 334 0
 691 00c2 0B4B     	 ldr r3,.L23+20
 692 00c4 0022     	 movs r2,#0
 693 00c6 1A70     	 strb r2,[r3]
 335:../SSC/Src/mailbox.c ****             APPL_FreeMailboxBuffer(psWriteMbx);
 694              	 .loc 2 335 0
 695 00c8 084B     	 ldr r3,.L23+16
 696 00ca 1B68     	 ldr r3,[r3]
 697 00cc 1846     	 mov r0,r3
 698 00ce FFF7FEFF 	 bl free
 699              	.L22:
 336:../SSC/Src/mailbox.c ****         }
 337:../SSC/Src/mailbox.c **** /* ECATCHANGE_END(V5.11) MBX2*/
 338:../SSC/Src/mailbox.c **** 
 339:../SSC/Src/mailbox.c ****     return result;
 700              	 .loc 2 339 0
 701 00d2 FB88     	 ldrh r3,[r7,#6]
 702              	.L19:
 340:../SSC/Src/mailbox.c **** }
 703              	 .loc 2 340 0
 704 00d4 1846     	 mov r0,r3
 705 00d6 0837     	 adds r7,r7,#8
 706              	.LCFI41:
 707              	 .cfi_def_cfa_offset 8
 708 00d8 BD46     	 mov sp,r7
 709              	.LCFI42:
 710              	 .cfi_def_cfa_register 13
 711              	 
 712 00da 80BD     	 pop {r7,pc}
 713              	.L24:
 714              	 .align 2
 715              	.L23:
 716 00dc 00000000 	 .word u16ReceiveMbxSize
 717 00e0 00000000 	 .word u16EscAddrReceiveMbx
 718 00e4 00000000 	 .word u16SendMbxSize
 719 00e8 00000000 	 .word u16EscAddrSendMbx
 720 00ec 00000000 	 .word psWriteMbx
 721 00f0 00000000 	 .word bNoMbxMemoryAvailable
 722              	 .cfi_endproc
 723              	.LFE175:
 725              	 .section .text.MBX_StopMailboxHandler,"ax",%progbits
 726              	 .align 2
 727              	 .global MBX_StopMailboxHandler
 728              	 .thumb
 729              	 .thumb_func
 731              	MBX_StopMailboxHandler:
 732              	.LFB176:
 341:../SSC/Src/mailbox.c **** 
 342:../SSC/Src/mailbox.c **** /////////////////////////////////////////////////////////////////////////////////////////
 343:../SSC/Src/mailbox.c **** /**
 344:../SSC/Src/mailbox.c **** 
 345:../SSC/Src/mailbox.c ****  \brief    This function includes the state transition from
 346:../SSC/Src/mailbox.c ****  \brief    PRE-OPERATIONAL to INIT in the EtherCAT Slave corresponding to
 347:../SSC/Src/mailbox.c ****  \brief  local management service Stop Mailbox Handler
 348:../SSC/Src/mailbox.c ****  \brief  the Sync Manager channels 0 and 1 are disabled
 349:../SSC/Src/mailbox.c **** *////////////////////////////////////////////////////////////////////////////////////////
 350:../SSC/Src/mailbox.c **** 
 351:../SSC/Src/mailbox.c **** void MBX_StopMailboxHandler(void)
 352:../SSC/Src/mailbox.c **** {
 733              	 .loc 2 352 0
 734              	 .cfi_startproc
 735              	 
 736              	 
 737 0000 80B5     	 push {r7,lr}
 738              	.LCFI43:
 739              	 .cfi_def_cfa_offset 8
 740              	 .cfi_offset 7,-8
 741              	 .cfi_offset 14,-4
 742 0002 82B0     	 sub sp,sp,#8
 743              	.LCFI44:
 744              	 .cfi_def_cfa_offset 16
 745 0004 00AF     	 add r7,sp,#0
 746              	.LCFI45:
 747              	 .cfi_def_cfa_register 7
 353:../SSC/Src/mailbox.c ****     TMBX MBXMEM * pMbx;
 354:../SSC/Src/mailbox.c **** 
 355:../SSC/Src/mailbox.c ****     /* mailbox handler is stopped */
 356:../SSC/Src/mailbox.c ****     bMbxRunning = FALSE;
 748              	 .loc 2 356 0
 749 0006 3F4B     	 ldr r3,.L33
 750 0008 0022     	 movs r2,#0
 751 000a 1A70     	 strb r2,[r3]
 357:../SSC/Src/mailbox.c ****     /* disable the receive mailbox sync manager channel */
 358:../SSC/Src/mailbox.c **** /*ECATCHANGE_START(V5.11) HW1*/
 359:../SSC/Src/mailbox.c ****     DisableSyncManChannel(MAILBOX_WRITE);
 752              	 .loc 2 359 0
 753 000c 0020     	 movs r0,#0
 754 000e FFF7FEFF 	 bl DisableSyncManChannel
 360:../SSC/Src/mailbox.c ****     /* disable the send mailbox sync manager channel */
 361:../SSC/Src/mailbox.c ****     DisableSyncManChannel(MAILBOX_READ);
 755              	 .loc 2 361 0
 756 0012 0120     	 movs r0,#1
 757 0014 FFF7FEFF 	 bl DisableSyncManChannel
 362:../SSC/Src/mailbox.c **** /*ECATCHANGE_END(V5.11) HW1*/
 363:../SSC/Src/mailbox.c ****     /* initialize variables again */
 364:../SSC/Src/mailbox.c **** 
 365:../SSC/Src/mailbox.c **** 
 366:../SSC/Src/mailbox.c ****     if (psRepeatMbx != NULL)
 758              	 .loc 2 366 0
 759 0018 3B4B     	 ldr r3,.L33+4
 760 001a 1B68     	 ldr r3,[r3]
 761 001c 002B     	 cmp r3,#0
 762 001e 04D0     	 beq .L26
 367:../SSC/Src/mailbox.c ****         APPL_FreeMailboxBuffer(psRepeatMbx);
 763              	 .loc 2 367 0
 764 0020 394B     	 ldr r3,.L33+4
 765 0022 1B68     	 ldr r3,[r3]
 766 0024 1846     	 mov r0,r3
 767 0026 FFF7FEFF 	 bl free
 768              	.L26:
 368:../SSC/Src/mailbox.c **** 
 369:../SSC/Src/mailbox.c ****     if (psStoreMbx != NULL && psStoreMbx != psRepeatMbx)
 769              	 .loc 2 369 0
 770 002a 384B     	 ldr r3,.L33+8
 771 002c 1B68     	 ldr r3,[r3]
 772 002e 002B     	 cmp r3,#0
 773 0030 0AD0     	 beq .L27
 774              	 .loc 2 369 0 is_stmt 0 discriminator 1
 775 0032 364B     	 ldr r3,.L33+8
 776 0034 1A68     	 ldr r2,[r3]
 777 0036 344B     	 ldr r3,.L33+4
 778 0038 1B68     	 ldr r3,[r3]
 779 003a 9A42     	 cmp r2,r3
 780 003c 04D0     	 beq .L27
 370:../SSC/Src/mailbox.c ****         APPL_FreeMailboxBuffer(psStoreMbx);
 781              	 .loc 2 370 0 is_stmt 1
 782 003e 334B     	 ldr r3,.L33+8
 783 0040 1B68     	 ldr r3,[r3]
 784 0042 1846     	 mov r0,r3
 785 0044 FFF7FEFF 	 bl free
 786              	.L27:
 371:../SSC/Src/mailbox.c **** 
 372:../SSC/Src/mailbox.c ****     if (psReadMbx != NULL && psReadMbx != psRepeatMbx && psReadMbx != psStoreMbx)
 787              	 .loc 2 372 0
 788 0048 314B     	 ldr r3,.L33+12
 789 004a 1B68     	 ldr r3,[r3]
 790 004c 002B     	 cmp r3,#0
 791 004e 10D0     	 beq .L28
 792              	 .loc 2 372 0 is_stmt 0 discriminator 1
 793 0050 2F4B     	 ldr r3,.L33+12
 794 0052 1A68     	 ldr r2,[r3]
 795 0054 2C4B     	 ldr r3,.L33+4
 796 0056 1B68     	 ldr r3,[r3]
 797 0058 9A42     	 cmp r2,r3
 798 005a 0AD0     	 beq .L28
 799              	 .loc 2 372 0 discriminator 2
 800 005c 2C4B     	 ldr r3,.L33+12
 801 005e 1A68     	 ldr r2,[r3]
 802 0060 2A4B     	 ldr r3,.L33+8
 803 0062 1B68     	 ldr r3,[r3]
 804 0064 9A42     	 cmp r2,r3
 805 0066 04D0     	 beq .L28
 373:../SSC/Src/mailbox.c ****         APPL_FreeMailboxBuffer(psReadMbx);
 806              	 .loc 2 373 0 is_stmt 1
 807 0068 294B     	 ldr r3,.L33+12
 808 006a 1B68     	 ldr r3,[r3]
 809 006c 1846     	 mov r0,r3
 810 006e FFF7FEFF 	 bl free
 811              	.L28:
 374:../SSC/Src/mailbox.c **** 
 375:../SSC/Src/mailbox.c **** 
 376:../SSC/Src/mailbox.c ****     psRepeatMbx = NULL;
 812              	 .loc 2 376 0
 813 0072 254B     	 ldr r3,.L33+4
 814 0074 0022     	 movs r2,#0
 815 0076 1A60     	 str r2,[r3]
 377:../SSC/Src/mailbox.c ****     psReadMbx = NULL;
 816              	 .loc 2 377 0
 817 0078 254B     	 ldr r3,.L33+12
 818 007a 0022     	 movs r2,#0
 819 007c 1A60     	 str r2,[r3]
 378:../SSC/Src/mailbox.c ****     psStoreMbx = NULL;
 820              	 .loc 2 378 0
 821 007e 234B     	 ldr r3,.L33+8
 822 0080 0022     	 movs r2,#0
 823 0082 1A60     	 str r2,[r3]
 379:../SSC/Src/mailbox.c **** 
 380:../SSC/Src/mailbox.c ****     bMbxRepeatToggle    = FALSE;
 824              	 .loc 2 380 0
 825 0084 234B     	 ldr r3,.L33+16
 826 0086 0022     	 movs r2,#0
 827 0088 1A70     	 strb r2,[r3]
 828              	.LBB4:
 381:../SSC/Src/mailbox.c ****     /*Reset Repeat acknowledge bit of SyncManager1 (0x080F bit 2)*/
 382:../SSC/Src/mailbox.c ****     {
 383:../SSC/Src/mailbox.c ****         UINT8 sm1Activate = 0;
 829              	 .loc 2 383 0
 830 008a 0023     	 movs r3,#0
 831 008c FB70     	 strb r3,[r7,#3]
 384:../SSC/Src/mailbox.c ****         HW_EscReadByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 832              	 .loc 2 384 0
 833 008e 224B     	 ldr r3,.L33+20
 834 0090 1B78     	 ldrb r3,[r3]
 835 0092 FB70     	 strb r3,[r7,#3]
 385:../SSC/Src/mailbox.c ****         sm1Activate &= ~0x02;
 836              	 .loc 2 385 0
 837 0094 FB78     	 ldrb r3,[r7,#3]
 838 0096 23F00203 	 bic r3,r3,#2
 839 009a FB70     	 strb r3,[r7,#3]
 386:../SSC/Src/mailbox.c ****         HW_EscWriteByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 840              	 .loc 2 386 0
 841 009c 1E4A     	 ldr r2,.L33+20
 842 009e FB78     	 ldrb r3,[r7,#3]
 843 00a0 1370     	 strb r3,[r2]
 844              	.LBE4:
 387:../SSC/Src/mailbox.c ****     }
 388:../SSC/Src/mailbox.c ****     bSendMbxIsFull         = FALSE;
 845              	 .loc 2 388 0
 846 00a2 1E4B     	 ldr r3,.L33+24
 847 00a4 0022     	 movs r2,#0
 848 00a6 1A70     	 strb r2,[r3]
 389:../SSC/Src/mailbox.c ****     bReceiveMbxIsLocked = FALSE;
 849              	 .loc 2 389 0
 850 00a8 1D4B     	 ldr r3,.L33+28
 851 00aa 0022     	 movs r2,#0
 852 00ac 1A70     	 strb r2,[r3]
 390:../SSC/Src/mailbox.c ****     u8MailboxSendReqStored    = 0;
 853              	 .loc 2 390 0
 854 00ae 1D4B     	 ldr r3,.L33+32
 855 00b0 0022     	 movs r2,#0
 856 00b2 1A70     	 strb r2,[r3]
 391:../SSC/Src/mailbox.c ****     u8MbxWriteCounter         = 0;
 857              	 .loc 2 391 0
 858 00b4 1C4B     	 ldr r3,.L33+36
 859 00b6 0022     	 movs r2,#0
 860 00b8 1A70     	 strb r2,[r3]
 392:../SSC/Src/mailbox.c ****     u8MbxReadCounter        = 0;
 861              	 .loc 2 392 0
 862 00ba 1C4B     	 ldr r3,.L33+40
 863 00bc 0022     	 movs r2,#0
 864 00be 1A70     	 strb r2,[r3]
 865              	.L30:
 393:../SSC/Src/mailbox.c **** 
 394:../SSC/Src/mailbox.c ****     do
 395:../SSC/Src/mailbox.c ****     {
 396:../SSC/Src/mailbox.c ****         pMbx = GetOutOfMbxQueue(&sMbxReceiveQueue);
 866              	 .loc 2 396 0
 867 00c0 1B48     	 ldr r0,.L33+44
 868 00c2 FFF7FEFF 	 bl GetOutOfMbxQueue
 869 00c6 7860     	 str r0,[r7,#4]
 397:../SSC/Src/mailbox.c ****         if (pMbx)
 870              	 .loc 2 397 0
 871 00c8 7B68     	 ldr r3,[r7,#4]
 872 00ca 002B     	 cmp r3,#0
 873 00cc 04D0     	 beq .L29
 398:../SSC/Src/mailbox.c ****         {
 399:../SSC/Src/mailbox.c ****             APPL_FreeMailboxBuffer(pMbx);
 874              	 .loc 2 399 0
 875 00ce 7868     	 ldr r0,[r7,#4]
 876 00d0 FFF7FEFF 	 bl free
 400:../SSC/Src/mailbox.c ****             pMbx = NULL;
 877              	 .loc 2 400 0
 878 00d4 0023     	 movs r3,#0
 879 00d6 7B60     	 str r3,[r7,#4]
 880              	.L29:
 401:../SSC/Src/mailbox.c ****         }
 402:../SSC/Src/mailbox.c ****     } while (pMbx != NULL);
 881              	 .loc 2 402 0
 882 00d8 7B68     	 ldr r3,[r7,#4]
 883 00da 002B     	 cmp r3,#0
 884 00dc F0D1     	 bne .L30
 885              	.L32:
 403:../SSC/Src/mailbox.c ****     do
 404:../SSC/Src/mailbox.c ****     {
 405:../SSC/Src/mailbox.c ****         pMbx = GetOutOfMbxQueue(&sMbxSendQueue);
 886              	 .loc 2 405 0
 887 00de 1548     	 ldr r0,.L33+48
 888 00e0 FFF7FEFF 	 bl GetOutOfMbxQueue
 889 00e4 7860     	 str r0,[r7,#4]
 406:../SSC/Src/mailbox.c ****         if (pMbx)
 890              	 .loc 2 406 0
 891 00e6 7B68     	 ldr r3,[r7,#4]
 892 00e8 002B     	 cmp r3,#0
 893 00ea 04D0     	 beq .L31
 407:../SSC/Src/mailbox.c ****         {
 408:../SSC/Src/mailbox.c ****             APPL_FreeMailboxBuffer(pMbx);
 894              	 .loc 2 408 0
 895 00ec 7868     	 ldr r0,[r7,#4]
 896 00ee FFF7FEFF 	 bl free
 409:../SSC/Src/mailbox.c ****             pMbx = NULL;
 897              	 .loc 2 409 0
 898 00f2 0023     	 movs r3,#0
 899 00f4 7B60     	 str r3,[r7,#4]
 900              	.L31:
 410:../SSC/Src/mailbox.c ****         }
 411:../SSC/Src/mailbox.c ****     } while (pMbx != NULL);
 901              	 .loc 2 411 0
 902 00f6 7B68     	 ldr r3,[r7,#4]
 903 00f8 002B     	 cmp r3,#0
 904 00fa F0D1     	 bne .L32
 412:../SSC/Src/mailbox.c **** 
 413:../SSC/Src/mailbox.c **** }
 905              	 .loc 2 413 0
 906 00fc 0837     	 adds r7,r7,#8
 907              	.LCFI46:
 908              	 .cfi_def_cfa_offset 8
 909 00fe BD46     	 mov sp,r7
 910              	.LCFI47:
 911              	 .cfi_def_cfa_register 13
 912              	 
 913 0100 80BD     	 pop {r7,pc}
 914              	.L34:
 915 0102 00BF     	 .align 2
 916              	.L33:
 917 0104 00000000 	 .word bMbxRunning
 918 0108 00000000 	 .word psRepeatMbx
 919 010c 00000000 	 .word psStoreMbx
 920 0110 00000000 	 .word psReadMbx
 921 0114 00000000 	 .word bMbxRepeatToggle
 922 0118 0F080154 	 .word 1409353743
 923 011c 00000000 	 .word bSendMbxIsFull
 924 0120 00000000 	 .word bReceiveMbxIsLocked
 925 0124 00000000 	 .word u8MailboxSendReqStored
 926 0128 00000000 	 .word u8MbxWriteCounter
 927 012c 00000000 	 .word u8MbxReadCounter
 928 0130 00000000 	 .word sMbxReceiveQueue
 929 0134 00000000 	 .word sMbxSendQueue
 930              	 .cfi_endproc
 931              	.LFE176:
 933              	 .section .text.MailboxServiceInd,"ax",%progbits
 934              	 .align 2
 935              	 .global MailboxServiceInd
 936              	 .thumb
 937              	 .thumb_func
 939              	MailboxServiceInd:
 940              	.LFB177:
 414:../SSC/Src/mailbox.c **** 
 415:../SSC/Src/mailbox.c **** /////////////////////////////////////////////////////////////////////////////////////////
 416:../SSC/Src/mailbox.c **** /**
 417:../SSC/Src/mailbox.c ****  \param     pMbx        Pointer to the received Mailbox command from Master.
 418:../SSC/Src/mailbox.c **** 
 419:../SSC/Src/mailbox.c ****  \brief    The function checks the mailbox header for the requested service and calls the
 420:../SSC/Src/mailbox.c ****  \brief    corresponding XXXX_ServiceInd-function
 421:../SSC/Src/mailbox.c **** *////////////////////////////////////////////////////////////////////////////////////////
 422:../SSC/Src/mailbox.c **** 
 423:../SSC/Src/mailbox.c **** UINT8 MailboxServiceInd(TMBX MBXMEM *pMbx)
 424:../SSC/Src/mailbox.c **** {
 941              	 .loc 2 424 0
 942              	 .cfi_startproc
 943              	 
 944              	 
 945 0000 80B5     	 push {r7,lr}
 946              	.LCFI48:
 947              	 .cfi_def_cfa_offset 8
 948              	 .cfi_offset 7,-8
 949              	 .cfi_offset 14,-4
 950 0002 84B0     	 sub sp,sp,#16
 951              	.LCFI49:
 952              	 .cfi_def_cfa_offset 24
 953 0004 00AF     	 add r7,sp,#0
 954              	.LCFI50:
 955              	 .cfi_def_cfa_register 7
 956 0006 7860     	 str r0,[r7,#4]
 425:../SSC/Src/mailbox.c ****     UINT8 result;
 426:../SSC/Src/mailbox.c **** 
 427:../SSC/Src/mailbox.c **** 
 428:../SSC/Src/mailbox.c ****     switch ( (pMbx->MbxHeader.Flags[MBX_OFFS_TYPE] & MBX_MASK_TYPE) >> MBX_SHIFT_TYPE )
 957              	 .loc 2 428 0
 958 0008 7B68     	 ldr r3,[r7,#4]
 959 000a 5B79     	 ldrb r3,[r3,#5]
 960 000c 03F00F03 	 and r3,r3,#15
 961 0010 032B     	 cmp r3,#3
 962 0012 05D1     	 bne .L40
 429:../SSC/Src/mailbox.c ****     {
 430:../SSC/Src/mailbox.c ****     case MBX_TYPE_COE:
 431:../SSC/Src/mailbox.c ****         /* CoE datagram received */
 432:../SSC/Src/mailbox.c ****         result = COE_ServiceInd((TCOEMBX MBXMEM *) pMbx);
 963              	 .loc 2 432 0
 964 0014 7868     	 ldr r0,[r7,#4]
 965 0016 FFF7FEFF 	 bl COE_ServiceInd
 966 001a 0346     	 mov r3,r0
 967 001c FB73     	 strb r3,[r7,#15]
 433:../SSC/Src/mailbox.c ****         break;
 968              	 .loc 2 433 0
 969 001e 02E0     	 b .L38
 970              	.L40:
 434:../SSC/Src/mailbox.c **** 
 435:../SSC/Src/mailbox.c ****     default:
 436:../SSC/Src/mailbox.c **** 
 437:../SSC/Src/mailbox.c ****         result = MBXERR_UNSUPPORTEDPROTOCOL;
 971              	 .loc 2 437 0
 972 0020 0223     	 movs r3,#2
 973 0022 FB73     	 strb r3,[r7,#15]
 438:../SSC/Src/mailbox.c ****         break;
 974              	 .loc 2 438 0
 975 0024 00BF     	 nop
 976              	.L38:
 439:../SSC/Src/mailbox.c ****     }
 440:../SSC/Src/mailbox.c **** 
 441:../SSC/Src/mailbox.c ****     return result;
 977              	 .loc 2 441 0
 978 0026 FB7B     	 ldrb r3,[r7,#15]
 442:../SSC/Src/mailbox.c **** }
 979              	 .loc 2 442 0
 980 0028 1846     	 mov r0,r3
 981 002a 1037     	 adds r7,r7,#16
 982              	.LCFI51:
 983              	 .cfi_def_cfa_offset 8
 984 002c BD46     	 mov sp,r7
 985              	.LCFI52:
 986              	 .cfi_def_cfa_register 13
 987              	 
 988 002e 80BD     	 pop {r7,pc}
 989              	 .cfi_endproc
 990              	.LFE177:
 992              	 .section .text.MBX_MailboxWriteInd,"ax",%progbits
 993              	 .align 2
 994              	 .global MBX_MailboxWriteInd
 995              	 .thumb
 996              	 .thumb_func
 998              	MBX_MailboxWriteInd:
 999              	.LFB178:
 443:../SSC/Src/mailbox.c **** 
 444:../SSC/Src/mailbox.c **** /////////////////////////////////////////////////////////////////////////////////////////
 445:../SSC/Src/mailbox.c **** /**
 446:../SSC/Src/mailbox.c ****  \param     pMbx        Pointer to the received Mailbox command from Master.
 447:../SSC/Src/mailbox.c **** 
 448:../SSC/Src/mailbox.c ****  \brief    This function is called when the Master has written the Receive-Mailbox.
 449:../SSC/Src/mailbox.c ****  \brief    It will only be called if the send mailbox is empty, that a response for the
 450:../SSC/Src/mailbox.c ****  \brief    mailbox service could be stored.
 451:../SSC/Src/mailbox.c ****  \brief    The function checks the mailbox header for the requested service and calls the
 452:../SSC/Src/mailbox.c ****  \brief    corresponding XXXX_ServiceInd-function
 453:../SSC/Src/mailbox.c **** *////////////////////////////////////////////////////////////////////////////////////////
 454:../SSC/Src/mailbox.c **** 
 455:../SSC/Src/mailbox.c **** void MBX_MailboxWriteInd(TMBX MBXMEM *pMbx)
 456:../SSC/Src/mailbox.c **** {
 1000              	 .loc 2 456 0
 1001              	 .cfi_startproc
 1002              	 
 1003              	 
 1004 0000 80B5     	 push {r7,lr}
 1005              	.LCFI53:
 1006              	 .cfi_def_cfa_offset 8
 1007              	 .cfi_offset 7,-8
 1008              	 .cfi_offset 14,-4
 1009 0002 84B0     	 sub sp,sp,#16
 1010              	.LCFI54:
 1011              	 .cfi_def_cfa_offset 24
 1012 0004 00AF     	 add r7,sp,#0
 1013              	.LCFI55:
 1014              	 .cfi_def_cfa_register 7
 1015 0006 7860     	 str r0,[r7,#4]
 457:../SSC/Src/mailbox.c ****     UINT8 result = 0;
 1016              	 .loc 2 457 0
 1017 0008 0023     	 movs r3,#0
 1018 000a FB73     	 strb r3,[r7,#15]
 458:../SSC/Src/mailbox.c ****     UINT8 mbxCounter = pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] >> MBX_SHIFT_COUNTER;
 1019              	 .loc 2 458 0
 1020 000c 7B68     	 ldr r3,[r7,#4]
 1021 000e 5B79     	 ldrb r3,[r3,#5]
 1022 0010 1B09     	 lsrs r3,r3,#4
 1023 0012 BB73     	 strb r3,[r7,#14]
 459:../SSC/Src/mailbox.c ****     UINT16 MbxLen = SWAPWORD(pMbx->MbxHeader.Length);
 1024              	 .loc 2 459 0
 1025 0014 7B68     	 ldr r3,[r7,#4]
 1026 0016 1B88     	 ldrh r3,[r3]
 1027 0018 BB81     	 strh r3,[r7,#12]
 460:../SSC/Src/mailbox.c **** 
 461:../SSC/Src/mailbox.c ****     if(MbxLen > MAX_MBX_SIZE)
 1028              	 .loc 2 461 0
 1029 001a BB89     	 ldrh r3,[r7,#12]
 1030 001c B3F5807F 	 cmp r3,#256
 1031 0020 14D9     	 bls .L42
 462:../SSC/Src/mailbox.c ****     {
 463:../SSC/Src/mailbox.c ****         /* Mailbox error response: size specified in mailbox header too large*/
 464:../SSC/Src/mailbox.c ****         pMbx->MbxHeader.Length     = 4;
 1032              	 .loc 2 464 0
 1033 0022 7B68     	 ldr r3,[r7,#4]
 1034 0024 0422     	 movs r2,#4
 1035 0026 1A80     	 strh r2,[r3]
 465:../SSC/Src/mailbox.c ****         pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~MBX_MASK_TYPE;
 1036              	 .loc 2 465 0
 1037 0028 7B68     	 ldr r3,[r7,#4]
 1038 002a 5B79     	 ldrb r3,[r3,#5]
 1039 002c 23F00F03 	 bic r3,r3,#15
 1040 0030 DAB2     	 uxtb r2,r3
 1041 0032 7B68     	 ldr r3,[r7,#4]
 1042 0034 5A71     	 strb r2,[r3,#5]
 466:../SSC/Src/mailbox.c ****         pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 1043              	 .loc 2 466 0
 1044 0036 7B68     	 ldr r3,[r7,#4]
 1045 0038 0122     	 movs r2,#1
 1046 003a DA80     	 strh r2,[r3,#6]
 467:../SSC/Src/mailbox.c ****         pMbx->Data[1]                        = SWAPWORD(MBXERR_INVALIDSIZE);
 1047              	 .loc 2 467 0
 1048 003c 7B68     	 ldr r3,[r7,#4]
 1049 003e 0822     	 movs r2,#8
 1050 0040 1A81     	 strh r2,[r3,#8]
 468:../SSC/Src/mailbox.c ****         MBX_MailboxSendReq(pMbx, 0);
 1051              	 .loc 2 468 0
 1052 0042 7868     	 ldr r0,[r7,#4]
 1053 0044 0021     	 movs r1,#0
 1054 0046 FFF7FEFF 	 bl MBX_MailboxSendReq
 1055 004a 2FE0     	 b .L41
 1056              	.L42:
 469:../SSC/Src/mailbox.c ****     }
 470:../SSC/Src/mailbox.c ****     else
 471:../SSC/Src/mailbox.c ****     /* if the mailbox datagram counter (Bit 4-6 of Byte 5 of the mailbox header) is unequal zero,
 472:../SSC/Src/mailbox.c ****        the master supports the mailbox data link layer,
 473:../SSC/Src/mailbox.c ****         in that case a repeated mailbox write request will be detected, if the counter is unequal z
 474:../SSC/Src/mailbox.c ****         and unchanged */
 475:../SSC/Src/mailbox.c ****     if ( mbxCounter == 0 || mbxCounter != u8MbxWriteCounter )
 1057              	 .loc 2 475 0
 1058 004c BB7B     	 ldrb r3,[r7,#14]
 1059 004e 002B     	 cmp r3,#0
 1060 0050 04D0     	 beq .L44
 1061              	 .loc 2 475 0 is_stmt 0 discriminator 1
 1062 0052 184B     	 ldr r3,.L47
 1063 0054 1B78     	 ldrb r3,[r3]
 1064 0056 BA7B     	 ldrb r2,[r7,#14]
 1065 0058 9A42     	 cmp r2,r3
 1066 005a 22D0     	 beq .L45
 1067              	.L44:
 476:../SSC/Src/mailbox.c ****     {
 477:../SSC/Src/mailbox.c ****         /* new mailbox service received */
 478:../SSC/Src/mailbox.c ****         /* mbxCounter = 0: old EtherCAT master */
 479:../SSC/Src/mailbox.c ****         /* new MBX service received, store the new mailbox counter */
 480:../SSC/Src/mailbox.c ****         u8MbxWriteCounter = mbxCounter;
 1068              	 .loc 2 480 0 is_stmt 1
 1069 005c 154A     	 ldr r2,.L47
 1070 005e BB7B     	 ldrb r3,[r7,#14]
 1071 0060 1370     	 strb r3,[r2]
 481:../SSC/Src/mailbox.c **** 
 482:../SSC/Src/mailbox.c ****         {
 483:../SSC/Src/mailbox.c ****             /* check the protocol type and call the XXXX_ServiceInd-function */
 484:../SSC/Src/mailbox.c **** 
 485:../SSC/Src/mailbox.c ****             result = PutInMbxQueue(pMbx, &sMbxReceiveQueue);
 1072              	 .loc 2 485 0
 1073 0062 7868     	 ldr r0,[r7,#4]
 1074 0064 1449     	 ldr r1,.L47+4
 1075 0066 FFF7FEFF 	 bl PutInMbxQueue
 1076 006a 0346     	 mov r3,r0
 1077 006c FB73     	 strb r3,[r7,#15]
 486:../SSC/Src/mailbox.c ****         }
 487:../SSC/Src/mailbox.c **** 
 488:../SSC/Src/mailbox.c ****         if ( result != 0 )
 1078              	 .loc 2 488 0
 1079 006e FB7B     	 ldrb r3,[r7,#15]
 1080 0070 002B     	 cmp r3,#0
 1081 0072 15D0     	 beq .L46
 489:../SSC/Src/mailbox.c ****         {
 490:../SSC/Src/mailbox.c ****             /* Mailbox error response: type 0 (mailbox service protocol) */
 491:../SSC/Src/mailbox.c ****             pMbx->MbxHeader.Length     = 4;
 1082              	 .loc 2 491 0
 1083 0074 7B68     	 ldr r3,[r7,#4]
 1084 0076 0422     	 movs r2,#4
 1085 0078 1A80     	 strh r2,[r3]
 492:../SSC/Src/mailbox.c ****             pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~MBX_MASK_TYPE;
 1086              	 .loc 2 492 0
 1087 007a 7B68     	 ldr r3,[r7,#4]
 1088 007c 5B79     	 ldrb r3,[r3,#5]
 1089 007e 23F00F03 	 bic r3,r3,#15
 1090 0082 DAB2     	 uxtb r2,r3
 1091 0084 7B68     	 ldr r3,[r7,#4]
 1092 0086 5A71     	 strb r2,[r3,#5]
 493:../SSC/Src/mailbox.c ****             pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 1093              	 .loc 2 493 0
 1094 0088 7B68     	 ldr r3,[r7,#4]
 1095 008a 0122     	 movs r2,#1
 1096 008c DA80     	 strh r2,[r3,#6]
 494:../SSC/Src/mailbox.c ****             pMbx->Data[1]                        = SWAPWORD(result);
 1097              	 .loc 2 494 0
 1098 008e FB7B     	 ldrb r3,[r7,#15]
 1099 0090 9AB2     	 uxth r2,r3
 1100 0092 7B68     	 ldr r3,[r7,#4]
 1101 0094 1A81     	 strh r2,[r3,#8]
 495:../SSC/Src/mailbox.c ****             MBX_MailboxSendReq(pMbx, 0);
 1102              	 .loc 2 495 0
 1103 0096 7868     	 ldr r0,[r7,#4]
 1104 0098 0021     	 movs r1,#0
 1105 009a FFF7FEFF 	 bl MBX_MailboxSendReq
 488:../SSC/Src/mailbox.c ****         {
 1106              	 .loc 2 488 0
 1107 009e 05E0     	 b .L41
 1108              	.L46:
 1109 00a0 04E0     	 b .L41
 1110              	.L45:
 496:../SSC/Src/mailbox.c ****         }
 497:../SSC/Src/mailbox.c ****     }
 498:../SSC/Src/mailbox.c ****     // the mailbox buffer has to be freed here
 499:../SSC/Src/mailbox.c ****     else
 500:../SSC/Src/mailbox.c ****     {
 501:../SSC/Src/mailbox.c ****         APPL_FreeMailboxBuffer(pMbx);
 1111              	 .loc 2 501 0
 1112 00a2 7868     	 ldr r0,[r7,#4]
 1113 00a4 FFF7FEFF 	 bl free
 502:../SSC/Src/mailbox.c ****         pMbx = NULL;
 1114              	 .loc 2 502 0
 1115 00a8 0023     	 movs r3,#0
 1116 00aa 7B60     	 str r3,[r7,#4]
 1117              	.L41:
 503:../SSC/Src/mailbox.c ****     }
 504:../SSC/Src/mailbox.c **** }
 1118              	 .loc 2 504 0
 1119 00ac 1037     	 adds r7,r7,#16
 1120              	.LCFI56:
 1121              	 .cfi_def_cfa_offset 8
 1122 00ae BD46     	 mov sp,r7
 1123              	.LCFI57:
 1124              	 .cfi_def_cfa_register 13
 1125              	 
 1126 00b0 80BD     	 pop {r7,pc}
 1127              	.L48:
 1128 00b2 00BF     	 .align 2
 1129              	.L47:
 1130 00b4 00000000 	 .word u8MbxWriteCounter
 1131 00b8 00000000 	 .word sMbxReceiveQueue
 1132              	 .cfi_endproc
 1133              	.LFE178:
 1135              	 .section .text.MBX_MailboxReadInd,"ax",%progbits
 1136              	 .align 2
 1137              	 .global MBX_MailboxReadInd
 1138              	 .thumb
 1139              	 .thumb_func
 1141              	MBX_MailboxReadInd:
 1142              	.LFB179:
 505:../SSC/Src/mailbox.c **** 
 506:../SSC/Src/mailbox.c **** /////////////////////////////////////////////////////////////////////////////////////////
 507:../SSC/Src/mailbox.c **** /**
 508:../SSC/Src/mailbox.c ****  \brief This function is called when the Master has read the Send-Mailbox.
 509:../SSC/Src/mailbox.c **** *////////////////////////////////////////////////////////////////////////////////////////
 510:../SSC/Src/mailbox.c **** 
 511:../SSC/Src/mailbox.c **** void MBX_MailboxReadInd(void)
 512:../SSC/Src/mailbox.c **** {
 1143              	 .loc 2 512 0
 1144              	 .cfi_startproc
 1145              	 
 1146              	 
 1147 0000 80B5     	 push {r7,lr}
 1148              	.LCFI58:
 1149              	 .cfi_def_cfa_offset 8
 1150              	 .cfi_offset 7,-8
 1151              	 .cfi_offset 14,-4
 1152 0002 82B0     	 sub sp,sp,#8
 1153              	.LCFI59:
 1154              	 .cfi_def_cfa_offset 16
 1155 0004 00AF     	 add r7,sp,#0
 1156              	.LCFI60:
 1157              	 .cfi_def_cfa_register 7
 513:../SSC/Src/mailbox.c ****     bSendMbxIsFull = FALSE;
 1158              	 .loc 2 513 0
 1159 0006 2B4B     	 ldr r3,.L55
 1160 0008 0022     	 movs r2,#0
 1161 000a 1A70     	 strb r2,[r3]
 514:../SSC/Src/mailbox.c ****     // HBu 02.05.06: the pointer psRepeatMbx is only free if there is no stored
 515:../SSC/Src/mailbox.c ****     //               mailbox service from the last repeat
 516:../SSC/Src/mailbox.c ****     if ( psRepeatMbx && psStoreMbx == NULL )
 1162              	 .loc 2 516 0
 1163 000c 2A4B     	 ldr r3,.L55+4
 1164 000e 1B68     	 ldr r3,[r3]
 1165 0010 002B     	 cmp r3,#0
 1166 0012 0BD0     	 beq .L50
 1167              	 .loc 2 516 0 is_stmt 0 discriminator 1
 1168 0014 294B     	 ldr r3,.L55+8
 1169 0016 1B68     	 ldr r3,[r3]
 1170 0018 002B     	 cmp r3,#0
 1171 001a 07D1     	 bne .L50
 517:../SSC/Src/mailbox.c ****     {
 518:../SSC/Src/mailbox.c ****     /* the last sent service is not stored for repeat any longer */
 519:../SSC/Src/mailbox.c ****         APPL_FreeMailboxBuffer(psRepeatMbx);
 1172              	 .loc 2 519 0 is_stmt 1
 1173 001c 264B     	 ldr r3,.L55+4
 1174 001e 1B68     	 ldr r3,[r3]
 1175 0020 1846     	 mov r0,r3
 1176 0022 FFF7FEFF 	 bl free
 520:../SSC/Src/mailbox.c ****         psRepeatMbx = NULL;
 1177              	 .loc 2 520 0
 1178 0026 244B     	 ldr r3,.L55+4
 1179 0028 0022     	 movs r2,#0
 1180 002a 1A60     	 str r2,[r3]
 1181              	.L50:
 521:../SSC/Src/mailbox.c ****     }
 522:../SSC/Src/mailbox.c **** 
 523:../SSC/Src/mailbox.c ****     /* the actual sent service has to be stored for repeat */
 524:../SSC/Src/mailbox.c ****     psRepeatMbx = psReadMbx;
 1182              	 .loc 2 524 0
 1183 002c 244B     	 ldr r3,.L55+12
 1184 002e 1B68     	 ldr r3,[r3]
 1185 0030 214A     	 ldr r2,.L55+4
 1186 0032 1360     	 str r3,[r2]
 525:../SSC/Src/mailbox.c **** 
 526:../SSC/Src/mailbox.c ****       if ( psStoreMbx )
 1187              	 .loc 2 526 0
 1188 0034 214B     	 ldr r3,.L55+8
 1189 0036 1B68     	 ldr r3,[r3]
 1190 0038 002B     	 cmp r3,#0
 1191 003a 08D0     	 beq .L51
 527:../SSC/Src/mailbox.c ****       {
 528:../SSC/Src/mailbox.c ****         /* there was a buffer stored */
 529:../SSC/Src/mailbox.c ****         MBX_CopyToSendMailbox(psStoreMbx);
 1192              	 .loc 2 529 0
 1193 003c 1F4B     	 ldr r3,.L55+8
 1194 003e 1B68     	 ldr r3,[r3]
 1195 0040 1846     	 mov r0,r3
 1196 0042 FFF7FEFF 	 bl MBX_CopyToSendMailbox
 530:../SSC/Src/mailbox.c ****         /* no more buffer to be stored any more */
 531:../SSC/Src/mailbox.c ****         psStoreMbx = NULL;
 1197              	 .loc 2 531 0
 1198 0046 1D4B     	 ldr r3,.L55+8
 1199 0048 0022     	 movs r2,#0
 1200 004a 1A60     	 str r2,[r3]
 1201 004c 09E0     	 b .L52
 1202              	.L51:
 1203              	.LBB5:
 532:../SSC/Src/mailbox.c ****       }
 533:../SSC/Src/mailbox.c ****       else
 534:../SSC/Src/mailbox.c ****     {
 535:../SSC/Src/mailbox.c ****         TMBX MBXMEM *pMbx = GetOutOfMbxQueue(&sMbxSendQueue);
 1204              	 .loc 2 535 0
 1205 004e 1D48     	 ldr r0,.L55+16
 1206 0050 FFF7FEFF 	 bl GetOutOfMbxQueue
 1207 0054 7860     	 str r0,[r7,#4]
 536:../SSC/Src/mailbox.c ****         if (pMbx)
 1208              	 .loc 2 536 0
 1209 0056 7B68     	 ldr r3,[r7,#4]
 1210 0058 002B     	 cmp r3,#0
 1211 005a 02D0     	 beq .L52
 537:../SSC/Src/mailbox.c ****         {
 538:../SSC/Src/mailbox.c ****             MBX_CopyToSendMailbox(pMbx);
 1212              	 .loc 2 538 0
 1213 005c 7868     	 ldr r0,[r7,#4]
 1214 005e FFF7FEFF 	 bl MBX_CopyToSendMailbox
 1215              	.L52:
 1216              	.LBE5:
 539:../SSC/Src/mailbox.c ****         }
 540:../SSC/Src/mailbox.c ****     }
 541:../SSC/Src/mailbox.c **** 
 542:../SSC/Src/mailbox.c ****       if ( u8MailboxSendReqStored )
 1217              	 .loc 2 542 0
 1218 0062 194B     	 ldr r3,.L55+20
 1219 0064 1B78     	 ldrb r3,[r3]
 1220 0066 002B     	 cmp r3,#0
 1221 0068 20D0     	 beq .L49
 543:../SSC/Src/mailbox.c ****     {
 544:../SSC/Src/mailbox.c ****         /* there are mailbox services stored to be sent */
 545:../SSC/Src/mailbox.c ****         if ( u8MailboxSendReqStored & COE_SERVICE )
 1222              	 .loc 2 545 0
 1223 006a 174B     	 ldr r3,.L55+20
 1224 006c 1B78     	 ldrb r3,[r3]
 1225 006e 03F00203 	 and r3,r3,#2
 1226 0072 002B     	 cmp r3,#0
 1227 0074 1AD0     	 beq .L49
 1228              	.LBB6:
 546:../SSC/Src/mailbox.c ****         {
 547:../SSC/Src/mailbox.c ****            UINT8 result = 0;
 1229              	 .loc 2 547 0
 1230 0076 0023     	 movs r3,#0
 1231 0078 FB70     	 strb r3,[r7,#3]
 548:../SSC/Src/mailbox.c ****             /* reset the flag indicating that CoE service to be sent was stored */
 549:../SSC/Src/mailbox.c ****             u8MailboxSendReqStored &= ~COE_SERVICE;
 1232              	 .loc 2 549 0
 1233 007a 134B     	 ldr r3,.L55+20
 1234 007c 1B78     	 ldrb r3,[r3]
 1235 007e 23F00203 	 bic r3,r3,#2
 1236 0082 DAB2     	 uxtb r2,r3
 1237 0084 104B     	 ldr r3,.L55+20
 1238 0086 1A70     	 strb r2,[r3]
 550:../SSC/Src/mailbox.c **** 
 551:../SSC/Src/mailbox.c ****             /* call CoE function that will send the stored CoE service */
 552:../SSC/Src/mailbox.c ****             result = COE_ContinueInd(psWriteMbx);
 1239              	 .loc 2 552 0
 1240 0088 104B     	 ldr r3,.L55+24
 1241 008a 1B68     	 ldr r3,[r3]
 1242 008c 1846     	 mov r0,r3
 1243 008e FFF7FEFF 	 bl COE_ContinueInd
 1244 0092 0346     	 mov r3,r0
 1245 0094 FB70     	 strb r3,[r7,#3]
 553:../SSC/Src/mailbox.c **** 
 554:../SSC/Src/mailbox.c ****             if (result != 0)
 1246              	 .loc 2 554 0
 1247 0096 FB78     	 ldrb r3,[r7,#3]
 1248 0098 002B     	 cmp r3,#0
 1249 009a 07D0     	 beq .L54
 555:../SSC/Src/mailbox.c ****             {
 556:../SSC/Src/mailbox.c ****                 /*Set the pending CoE indication is an error occurred during the continue indicatio
 557:../SSC/Src/mailbox.c ****                 u8MailboxSendReqStored |= COE_SERVICE;
 1250              	 .loc 2 557 0
 1251 009c 0A4B     	 ldr r3,.L55+20
 1252 009e 1B78     	 ldrb r3,[r3]
 1253 00a0 43F00203 	 orr r3,r3,#2
 1254 00a4 DAB2     	 uxtb r2,r3
 1255 00a6 084B     	 ldr r3,.L55+20
 1256 00a8 1A70     	 strb r2,[r3]
 1257              	.LBE6:
 1258 00aa FFE7     	 b .L49
 1259              	.L54:
 1260              	.L49:
 558:../SSC/Src/mailbox.c ****             }
 559:../SSC/Src/mailbox.c ****         }
 560:../SSC/Src/mailbox.c ****         else
 561:../SSC/Src/mailbox.c ****         {
 562:../SSC/Src/mailbox.c ****         }
 563:../SSC/Src/mailbox.c ****     }
 564:../SSC/Src/mailbox.c **** }
 1261              	 .loc 2 564 0
 1262 00ac 0837     	 adds r7,r7,#8
 1263              	.LCFI61:
 1264              	 .cfi_def_cfa_offset 8
 1265 00ae BD46     	 mov sp,r7
 1266              	.LCFI62:
 1267              	 .cfi_def_cfa_register 13
 1268              	 
 1269 00b0 80BD     	 pop {r7,pc}
 1270              	.L56:
 1271 00b2 00BF     	 .align 2
 1272              	.L55:
 1273 00b4 00000000 	 .word bSendMbxIsFull
 1274 00b8 00000000 	 .word psRepeatMbx
 1275 00bc 00000000 	 .word psStoreMbx
 1276 00c0 00000000 	 .word psReadMbx
 1277 00c4 00000000 	 .word sMbxSendQueue
 1278 00c8 00000000 	 .word u8MailboxSendReqStored
 1279 00cc 00000000 	 .word psWriteMbx
 1280              	 .cfi_endproc
 1281              	.LFE179:
 1283              	 .section .text.MBX_MailboxRepeatReq,"ax",%progbits
 1284              	 .align 2
 1285              	 .global MBX_MailboxRepeatReq
 1286              	 .thumb
 1287              	 .thumb_func
 1289              	MBX_MailboxRepeatReq:
 1290              	.LFB180:
 565:../SSC/Src/mailbox.c **** 
 566:../SSC/Src/mailbox.c **** /////////////////////////////////////////////////////////////////////////////////////////
 567:../SSC/Src/mailbox.c **** /**
 568:../SSC/Src/mailbox.c ****  \brief This function is called if the Master has requested a resending of the last
 569:../SSC/Src/mailbox.c ****  \brief sent mailbox
 570:../SSC/Src/mailbox.c **** *////////////////////////////////////////////////////////////////////////////////////////
 571:../SSC/Src/mailbox.c **** 
 572:../SSC/Src/mailbox.c **** void MBX_MailboxRepeatReq(void)
 573:../SSC/Src/mailbox.c **** {
 1291              	 .loc 2 573 0
 1292              	 .cfi_startproc
 1293              	 
 1294              	 
 1295 0000 80B5     	 push {r7,lr}
 1296              	.LCFI63:
 1297              	 .cfi_def_cfa_offset 8
 1298              	 .cfi_offset 7,-8
 1299              	 .cfi_offset 14,-4
 1300 0002 82B0     	 sub sp,sp,#8
 1301              	.LCFI64:
 1302              	 .cfi_def_cfa_offset 16
 1303 0004 00AF     	 add r7,sp,#0
 1304              	.LCFI65:
 1305              	 .cfi_def_cfa_register 7
 574:../SSC/Src/mailbox.c ****     if (psRepeatMbx)
 1306              	 .loc 2 574 0
 1307 0006 1A4B     	 ldr r3,.L60
 1308 0008 1B68     	 ldr r3,[r3]
 1309 000a 002B     	 cmp r3,#0
 1310 000c 1DD0     	 beq .L58
 1311              	.LBB7:
 575:../SSC/Src/mailbox.c ****     {
 576:../SSC/Src/mailbox.c ****         TMBX MBXMEM *pMbx = psRepeatMbx;
 1312              	 .loc 2 576 0
 1313 000e 184B     	 ldr r3,.L60
 1314 0010 1B68     	 ldr r3,[r3]
 1315 0012 7B60     	 str r3,[r7,#4]
 577:../SSC/Src/mailbox.c ****         /* send mailbox service stored for repeat */
 578:../SSC/Src/mailbox.c ****         /* HBu 13.10.06: if a repeat request is received (again) before the previously repeated mai
 579:../SSC/Src/mailbox.c ****            was read from the master (psStoreMbx != NULL) the next mailbox telegram to be sent is st
 580:../SSC/Src/mailbox.c ****             read mailbox so it has not to updated exchanged */
 581:../SSC/Src/mailbox.c ****         ENTER_MBX_CRITICAL;
 582:../SSC/Src/mailbox.c **** 
 583:../SSC/Src/mailbox.c ****        if (bSendMbxIsFull && psStoreMbx == NULL)
 1316              	 .loc 2 583 0
 1317 0014 174B     	 ldr r3,.L60+4
 1318 0016 1B78     	 ldrb r3,[r3]
 1319 0018 002B     	 cmp r3,#0
 1320 001a 10D0     	 beq .L59
 1321              	 .loc 2 583 0 is_stmt 0 discriminator 1
 1322 001c 164B     	 ldr r3,.L60+8
 1323 001e 1B68     	 ldr r3,[r3]
 1324 0020 002B     	 cmp r3,#0
 1325 0022 0CD1     	 bne .L59
 584:../SSC/Src/mailbox.c ****         {
 585:../SSC/Src/mailbox.c ****             /* mailbox is full, take the buffer off */
 586:../SSC/Src/mailbox.c **** /*ECATCHANGE_START(V5.11) HW1*/
 587:../SSC/Src/mailbox.c ****             DisableSyncManChannel(MAILBOX_READ);
 1326              	 .loc 2 587 0 is_stmt 1
 1327 0024 0120     	 movs r0,#1
 1328 0026 FFF7FEFF 	 bl DisableSyncManChannel
 588:../SSC/Src/mailbox.c **** 
 589:../SSC/Src/mailbox.c ****             /* store the buffer to be sent next */
 590:../SSC/Src/mailbox.c ****             psStoreMbx = psReadMbx;
 1329              	 .loc 2 590 0
 1330 002a 144B     	 ldr r3,.L60+12
 1331 002c 1B68     	 ldr r3,[r3]
 1332 002e 124A     	 ldr r2,.L60+8
 1333 0030 1360     	 str r3,[r2]
 591:../SSC/Src/mailbox.c ****             /* enable the mailbox again */
 592:../SSC/Src/mailbox.c ****             EnableSyncManChannel(MAILBOX_READ);
 1334              	 .loc 2 592 0
 1335 0032 0120     	 movs r0,#1
 1336 0034 FFF7FEFF 	 bl EnableSyncManChannel
 593:../SSC/Src/mailbox.c **** /*ECATCHANGE_END(V5.11) HW1*/
 594:../SSC/Src/mailbox.c **** 
 595:../SSC/Src/mailbox.c ****             /* HBu 15.02.06: flag has to be reset otherwise the mailbox service
 596:../SSC/Src/mailbox.c ****                              will not be copied by MBX_CopyToSendMailbox */
 597:../SSC/Src/mailbox.c ****             bSendMbxIsFull = FALSE;
 1337              	 .loc 2 597 0
 1338 0038 0E4B     	 ldr r3,.L60+4
 1339 003a 0022     	 movs r2,#0
 1340 003c 1A70     	 strb r2,[r3]
 1341              	.L59:
 598:../SSC/Src/mailbox.c ****         }
 599:../SSC/Src/mailbox.c **** 
 600:../SSC/Src/mailbox.c **** 
 601:../SSC/Src/mailbox.c ****         MBX_CopyToSendMailbox(pMbx);
 1342              	 .loc 2 601 0
 1343 003e 7868     	 ldr r0,[r7,#4]
 1344 0040 FFF7FEFF 	 bl MBX_CopyToSendMailbox
 602:../SSC/Src/mailbox.c ****         // HBu 17.06.06: psRepeatMbx has to be set to 0, when it was repeated, otherwise it would b
 603:../SSC/Src/mailbox.c ****         // to the empty queue (MAILBOX_QUEUE=1) or a buffer get lost, if the the next repeat reques
 604:../SSC/Src/mailbox.c ****         // the repeated buffer was read
 605:../SSC/Src/mailbox.c ****         psRepeatMbx = NULL;
 1345              	 .loc 2 605 0
 1346 0044 0A4B     	 ldr r3,.L60
 1347 0046 0022     	 movs r2,#0
 1348 0048 1A60     	 str r2,[r3]
 1349              	.L58:
 1350              	.LBE7:
 606:../SSC/Src/mailbox.c ****         LEAVE_MBX_CRITICAL;
 607:../SSC/Src/mailbox.c ****     }
 608:../SSC/Src/mailbox.c **** 
 609:../SSC/Src/mailbox.c ****     // Repeat was finished, toggle the acknowledge bit
 610:../SSC/Src/mailbox.c ****     bMbxRepeatToggle = !bMbxRepeatToggle;
 1351              	 .loc 2 610 0
 1352 004a 0D4B     	 ldr r3,.L60+16
 1353 004c 1B78     	 ldrb r3,[r3]
 1354 004e 002B     	 cmp r3,#0
 1355 0050 14BF     	 ite ne
 1356 0052 0123     	 movne r3,#1
 1357 0054 0023     	 moveq r3,#0
 1358 0056 DBB2     	 uxtb r3,r3
 1359 0058 83F00103 	 eor r3,r3,#1
 1360 005c DBB2     	 uxtb r3,r3
 1361 005e 03F00103 	 and r3,r3,#1
 1362 0062 DAB2     	 uxtb r2,r3
 1363 0064 064B     	 ldr r3,.L60+16
 1364 0066 1A70     	 strb r2,[r3]
 611:../SSC/Src/mailbox.c **** }
 1365              	 .loc 2 611 0
 1366 0068 0837     	 adds r7,r7,#8
 1367              	.LCFI66:
 1368              	 .cfi_def_cfa_offset 8
 1369 006a BD46     	 mov sp,r7
 1370              	.LCFI67:
 1371              	 .cfi_def_cfa_register 13
 1372              	 
 1373 006c 80BD     	 pop {r7,pc}
 1374              	.L61:
 1375 006e 00BF     	 .align 2
 1376              	.L60:
 1377 0070 00000000 	 .word psRepeatMbx
 1378 0074 00000000 	 .word bSendMbxIsFull
 1379 0078 00000000 	 .word psStoreMbx
 1380 007c 00000000 	 .word psReadMbx
 1381 0080 00000000 	 .word bMbxRepeatToggle
 1382              	 .cfi_endproc
 1383              	.LFE180:
 1385              	 .section .text.MBX_MailboxSendReq,"ax",%progbits
 1386              	 .align 2
 1387              	 .global MBX_MailboxSendReq
 1388              	 .thumb
 1389              	 .thumb_func
 1391              	MBX_MailboxSendReq:
 1392              	.LFB181:
 612:../SSC/Src/mailbox.c **** 
 613:../SSC/Src/mailbox.c **** /////////////////////////////////////////////////////////////////////////////////////////
 614:../SSC/Src/mailbox.c **** /**
 615:../SSC/Src/mailbox.c ****  \param pMbx            Pointer to a Mailbox command to be sent (read by the Master)
 616:../SSC/Src/mailbox.c ****  \param flags            Bit 0-6:    mailbox protocol type:
 617:../SSC/Src/mailbox.c ****                                         0x01 - emergency service
 618:../SSC/Src/mailbox.c ****                                         0x02 - CoE service
 619:../SSC/Src/mailbox.c ****                                         0x04 - SoE service
 620:../SSC/Src/mailbox.c ****                                         0x80 - EoE service
 621:../SSC/Src/mailbox.c ****                                         0x10 - AoE service
 622:../SSC/Src/mailbox.c ****                                         0x20 - VoE service
 623:../SSC/Src/mailbox.c ****                              Bit 7:   0 - no more fragments to be sent for the requested mailbox se
 624:../SSC/Src/mailbox.c ****                                        1 - additional fragments to be sent for the mailbox service,
 625:../SSC/Src/mailbox.c ****                                             corresponding XXXX_ContinueInd-function will be called 
 626:../SSC/Src/mailbox.c ****                                             the next fragment
 627:../SSC/Src/mailbox.c **** 
 628:../SSC/Src/mailbox.c ****  \return    0: Success - mailbox command could be stored in the send mailbox
 629:../SSC/Src/mailbox.c ****             1: Failed - mailbox command could not be stored in the send mailbox, the
 630:../SSC/Src/mailbox.c ****                             XXXX_ContinueInd service will be called when the mailbox was
 631:../SSC/Src/mailbox.c ****                             read from the master to
 632:../SSC/Src/mailbox.c **** 
 633:../SSC/Src/mailbox.c ****  \brief        This function puts a new Mailbox service in the Send Mailbox
 634:../SSC/Src/mailbox.c **** *////////////////////////////////////////////////////////////////////////////////////////
 635:../SSC/Src/mailbox.c **** 
 636:../SSC/Src/mailbox.c **** UINT8 MBX_MailboxSendReq( TMBX MBXMEM * pMbx, UINT8 flags )
 637:../SSC/Src/mailbox.c **** {
 1393              	 .loc 2 637 0
 1394              	 .cfi_startproc
 1395              	 
 1396              	 
 1397 0000 80B5     	 push {r7,lr}
 1398              	.LCFI68:
 1399              	 .cfi_def_cfa_offset 8
 1400              	 .cfi_offset 7,-8
 1401              	 .cfi_offset 14,-4
 1402 0002 84B0     	 sub sp,sp,#16
 1403              	.LCFI69:
 1404              	 .cfi_def_cfa_offset 24
 1405 0004 00AF     	 add r7,sp,#0
 1406              	.LCFI70:
 1407              	 .cfi_def_cfa_register 7
 1408 0006 7860     	 str r0,[r7,#4]
 1409 0008 0B46     	 mov r3,r1
 1410 000a FB70     	 strb r3,[r7,#3]
 638:../SSC/Src/mailbox.c ****     UINT8 result = 0;
 1411              	 .loc 2 638 0
 1412 000c 0023     	 movs r3,#0
 1413 000e FB73     	 strb r3,[r7,#15]
 639:../SSC/Src/mailbox.c **** 
 640:../SSC/Src/mailbox.c ****     /* HBu 06.02.06: in INIT-state a mailbox send request shall be refused */
 641:../SSC/Src/mailbox.c ****     if ( (nAlStatus & STATE_MASK) == STATE_INIT )
 1414              	 .loc 2 641 0
 1415 0010 2C4B     	 ldr r3,.L71
 1416 0012 1B78     	 ldrb r3,[r3]
 1417 0014 03F00F03 	 and r3,r3,#15
 1418 0018 012B     	 cmp r3,#1
 1419 001a 01D1     	 bne .L63
 642:../SSC/Src/mailbox.c ****         return ERROR_INVALIDSTATE;
 1420              	 .loc 2 642 0
 1421 001c F023     	 movs r3,#240
 1422 001e 4DE0     	 b .L64
 1423              	.L63:
 643:../SSC/Src/mailbox.c **** 
 644:../SSC/Src/mailbox.c **** 
 645:../SSC/Src/mailbox.c ****     ENTER_MBX_CRITICAL;
 646:../SSC/Src/mailbox.c ****     DISABLE_MBX_INT;
 647:../SSC/Src/mailbox.c **** 
 648:../SSC/Src/mailbox.c ****     /* the counter in the mailbox header has to be incremented with every new mailbox service to be
 649:../SSC/Src/mailbox.c ****        if the mailbox data link layer is supported (software switch MAILBOX_REPEAT_SUPPORTED set)*/
 650:../SSC/Src/mailbox.c ****     pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] &= ~MBX_MASK_COUNTER;
 1424              	 .loc 2 650 0
 1425 0020 7B68     	 ldr r3,[r7,#4]
 1426 0022 5B79     	 ldrb r3,[r3,#5]
 1427 0024 03F00F03 	 and r3,r3,#15
 1428 0028 DAB2     	 uxtb r2,r3
 1429 002a 7B68     	 ldr r3,[r7,#4]
 1430 002c 5A71     	 strb r2,[r3,#5]
 651:../SSC/Src/mailbox.c ****     /* HBu 13.02.06: Repeat-Counter was incremented too much if the mailbox service could not be se
 652:../SSC/Src/mailbox.c ****     /* u8MbxCounter holds the actual counter for the mailbox header, only the values
 653:../SSC/Src/mailbox.c ****        1-7 are allowed if the mailbox data link layer is supported  */
 654:../SSC/Src/mailbox.c ****     if ( (u8MbxReadCounter & 0x07) == 0 )
 1431              	 .loc 2 654 0
 1432 002e 264B     	 ldr r3,.L71+4
 1433 0030 1B78     	 ldrb r3,[r3]
 1434 0032 03F00703 	 and r3,r3,#7
 1435 0036 002B     	 cmp r3,#0
 1436 0038 02D1     	 bne .L65
 655:../SSC/Src/mailbox.c ****         u8MbxReadCounter = 1;
 1437              	 .loc 2 655 0
 1438 003a 234B     	 ldr r3,.L71+4
 1439 003c 0122     	 movs r2,#1
 1440 003e 1A70     	 strb r2,[r3]
 1441              	.L65:
 656:../SSC/Src/mailbox.c **** 
 657:../SSC/Src/mailbox.c ****     pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] |= u8MbxReadCounter << MBX_SHIFT_COUNTER;
 1442              	 .loc 2 657 0
 1443 0040 7B68     	 ldr r3,[r7,#4]
 1444 0042 5B79     	 ldrb r3,[r3,#5]
 1445 0044 DAB2     	 uxtb r2,r3
 1446 0046 204B     	 ldr r3,.L71+4
 1447 0048 1B78     	 ldrb r3,[r3]
 1448 004a 1B01     	 lsls r3,r3,#4
 1449 004c DBB2     	 uxtb r3,r3
 1450 004e 1343     	 orrs r3,r3,r2
 1451 0050 DBB2     	 uxtb r3,r3
 1452 0052 DAB2     	 uxtb r2,r3
 1453 0054 7B68     	 ldr r3,[r7,#4]
 1454 0056 5A71     	 strb r2,[r3,#5]
 658:../SSC/Src/mailbox.c **** 
 659:../SSC/Src/mailbox.c ****     /* try to copy the mailbox command in the ESC */
 660:../SSC/Src/mailbox.c ****     if ( MBX_CopyToSendMailbox(pMbx) != 0 )
 1455              	 .loc 2 660 0
 1456 0058 7868     	 ldr r0,[r7,#4]
 1457 005a FFF7FEFF 	 bl MBX_CopyToSendMailbox
 1458 005e 0346     	 mov r3,r0
 1459 0060 002B     	 cmp r3,#0
 1460 0062 14D0     	 beq .L66
 661:../SSC/Src/mailbox.c ****     {
 662:../SSC/Src/mailbox.c ****         /* no success, send mailbox was full, set flag  */
 663:../SSC/Src/mailbox.c ****         result = PutInMbxQueue(pMbx, &sMbxSendQueue);
 1461              	 .loc 2 663 0
 1462 0064 7868     	 ldr r0,[r7,#4]
 1463 0066 1949     	 ldr r1,.L71+8
 1464 0068 FFF7FEFF 	 bl PutInMbxQueue
 1465 006c 0346     	 mov r3,r0
 1466 006e FB73     	 strb r3,[r7,#15]
 664:../SSC/Src/mailbox.c ****         if (result != 0)
 1467              	 .loc 2 664 0
 1468 0070 FB7B     	 ldrb r3,[r7,#15]
 1469 0072 002B     	 cmp r3,#0
 1470 0074 04D0     	 beq .L67
 665:../SSC/Src/mailbox.c ****             flags |= FRAGMENTS_FOLLOW;
 1471              	 .loc 2 665 0
 1472 0076 FB78     	 ldrb r3,[r7,#3]
 1473 0078 63F07F03 	 orn r3,r3,#127
 1474 007c FB70     	 strb r3,[r7,#3]
 1475 007e 0CE0     	 b .L69
 1476              	.L67:
 666:../SSC/Src/mailbox.c ****         else
 667:../SSC/Src/mailbox.c ****             u8MbxReadCounter++;
 1477              	 .loc 2 667 0
 1478 0080 114B     	 ldr r3,.L71+4
 1479 0082 1B78     	 ldrb r3,[r3]
 1480 0084 0133     	 adds r3,r3,#1
 1481 0086 DAB2     	 uxtb r2,r3
 1482 0088 0F4B     	 ldr r3,.L71+4
 1483 008a 1A70     	 strb r2,[r3]
 1484 008c 05E0     	 b .L69
 1485              	.L66:
 668:../SSC/Src/mailbox.c ****     }
 669:../SSC/Src/mailbox.c ****     /* HBu 13.02.06: Repeat-Counter was incremented too much if the mailbox service could not be se
 670:../SSC/Src/mailbox.c ****     else
 671:../SSC/Src/mailbox.c ****     {
 672:../SSC/Src/mailbox.c ****         u8MbxReadCounter++;
 1486              	 .loc 2 672 0
 1487 008e 0E4B     	 ldr r3,.L71+4
 1488 0090 1B78     	 ldrb r3,[r3]
 1489 0092 0133     	 adds r3,r3,#1
 1490 0094 DAB2     	 uxtb r2,r3
 1491 0096 0C4B     	 ldr r3,.L71+4
 1492 0098 1A70     	 strb r2,[r3]
 1493              	.L69:
 673:../SSC/Src/mailbox.c ****     }
 674:../SSC/Src/mailbox.c **** 
 675:../SSC/Src/mailbox.c ****     if ( flags & FRAGMENTS_FOLLOW )
 1494              	 .loc 2 675 0
 1495 009a FB78     	 ldrb r3,[r7,#3]
 1496 009c 5BB2     	 sxtb r3,r3
 1497 009e 002B     	 cmp r3,#0
 1498 00a0 0BDA     	 bge .L70
 676:../SSC/Src/mailbox.c ****     {
 677:../SSC/Src/mailbox.c ****         /* store the mailbox service that the corresponding XXX_ContinueInd function will
 678:../SSC/Src/mailbox.c ****            be called when the send mailbox will have been read by the master because there
 679:../SSC/Src/mailbox.c ****            are mailbox commands to be sent for this service */
 680:../SSC/Src/mailbox.c ****         u8MailboxSendReqStored |= (flags & ((UINT8) ~FRAGMENTS_FOLLOW));
 1499              	 .loc 2 680 0
 1500 00a2 FB78     	 ldrb r3,[r7,#3]
 1501 00a4 03F07F03 	 and r3,r3,#127
 1502 00a8 DAB2     	 uxtb r2,r3
 1503 00aa 094B     	 ldr r3,.L71+12
 1504 00ac 1B78     	 ldrb r3,[r3]
 1505 00ae DBB2     	 uxtb r3,r3
 1506 00b0 1343     	 orrs r3,r3,r2
 1507 00b2 DBB2     	 uxtb r3,r3
 1508 00b4 DAB2     	 uxtb r2,r3
 1509 00b6 064B     	 ldr r3,.L71+12
 1510 00b8 1A70     	 strb r2,[r3]
 1511              	.L70:
 681:../SSC/Src/mailbox.c ****     }
 682:../SSC/Src/mailbox.c **** 
 683:../SSC/Src/mailbox.c ****     ENABLE_MBX_INT;
 684:../SSC/Src/mailbox.c ****     LEAVE_MBX_CRITICAL;
 685:../SSC/Src/mailbox.c **** 
 686:../SSC/Src/mailbox.c ****     return result;
 1512              	 .loc 2 686 0
 1513 00ba FB7B     	 ldrb r3,[r7,#15]
 1514              	.L64:
 687:../SSC/Src/mailbox.c **** }
 1515              	 .loc 2 687 0
 1516 00bc 1846     	 mov r0,r3
 1517 00be 1037     	 adds r7,r7,#16
 1518              	.LCFI71:
 1519              	 .cfi_def_cfa_offset 8
 1520 00c0 BD46     	 mov sp,r7
 1521              	.LCFI72:
 1522              	 .cfi_def_cfa_register 13
 1523              	 
 1524 00c2 80BD     	 pop {r7,pc}
 1525              	.L72:
 1526              	 .align 2
 1527              	.L71:
 1528 00c4 00000000 	 .word nAlStatus
 1529 00c8 00000000 	 .word u8MbxReadCounter
 1530 00cc 00000000 	 .word sMbxSendQueue
 1531 00d0 00000000 	 .word u8MailboxSendReqStored
 1532              	 .cfi_endproc
 1533              	.LFE181:
 1535              	 .section .text.MBX_CheckAndCopyMailbox,"ax",%progbits
 1536              	 .align 2
 1537              	 .global MBX_CheckAndCopyMailbox
 1538              	 .thumb
 1539              	 .thumb_func
 1541              	MBX_CheckAndCopyMailbox:
 1542              	.LFB182:
 688:../SSC/Src/mailbox.c **** 
 689:../SSC/Src/mailbox.c **** /////////////////////////////////////////////////////////////////////////////////////////
 690:../SSC/Src/mailbox.c **** /**
 691:../SSC/Src/mailbox.c ****  \brief    This function is used to check if the received mailbox command can be processed.
 692:../SSC/Src/mailbox.c **** 
 693:../SSC/Src/mailbox.c ****         Also the contents of the Receive Mailbox will be copied in the variable sMbx.
 694:../SSC/Src/mailbox.c **** *////////////////////////////////////////////////////////////////////////////////////////
 695:../SSC/Src/mailbox.c **** 
 696:../SSC/Src/mailbox.c **** void MBX_CheckAndCopyMailbox( void )
 697:../SSC/Src/mailbox.c **** {
 1543              	 .loc 2 697 0
 1544              	 .cfi_startproc
 1545              	 
 1546              	 
 1547 0000 80B5     	 push {r7,lr}
 1548              	.LCFI73:
 1549              	 .cfi_def_cfa_offset 8
 1550              	 .cfi_offset 7,-8
 1551              	 .cfi_offset 14,-4
 1552 0002 84B0     	 sub sp,sp,#16
 1553              	.LCFI74:
 1554              	 .cfi_def_cfa_offset 24
 1555 0004 00AF     	 add r7,sp,#0
 1556              	.LCFI75:
 1557              	 .cfi_def_cfa_register 7
 698:../SSC/Src/mailbox.c ****     UINT16 mbxLen;
 699:../SSC/Src/mailbox.c **** 
 700:../SSC/Src/mailbox.c ****     /* get the size of the received mailbox command and acknowledge the event*/
 701:../SSC/Src/mailbox.c ****     HW_EscReadWord(mbxLen,u16EscAddrReceiveMbx);
 1558              	 .loc 2 701 0
 1559 0006 464B     	 ldr r3,.L81
 1560 0008 1B88     	 ldrh r3,[r3]
 1561 000a 5B08     	 lsrs r3,r3,#1
 1562 000c 9BB2     	 uxth r3,r3
 1563 000e 5B00     	 lsls r3,r3,#1
 1564 0010 03F1A843 	 add r3,r3,#1409286144
 1565 0014 03F58033 	 add r3,r3,#65536
 1566 0018 1B88     	 ldrh r3,[r3]
 1567 001a FB81     	 strh r3,[r7,#14]
 702:../SSC/Src/mailbox.c ****     
 703:../SSC/Src/mailbox.c ****     /* the size has to be swapped here, all other bytes of the mailbox service will be swapped late
 704:../SSC/Src/mailbox.c ****     mbxLen = SWAPWORD(mbxLen);
 705:../SSC/Src/mailbox.c **** 
 706:../SSC/Src/mailbox.c **** /* ECATCHANGE_START(V5.11) MBX2*/
 707:../SSC/Src/mailbox.c ****     if(bNoMbxMemoryAvailable == TRUE)
 1568              	 .loc 2 707 0
 1569 001c 414B     	 ldr r3,.L81+4
 1570 001e 1B78     	 ldrb r3,[r3]
 1571 0020 002B     	 cmp r3,#0
 1572 0022 23D0     	 beq .L74
 1573              	.LBB8:
 708:../SSC/Src/mailbox.c ****     {
 709:../SSC/Src/mailbox.c ****         /* Return a no memory error in case of any mailbox request*/
 710:../SSC/Src/mailbox.c ****         TMBX MBXMEM *pMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(10); /* a mailbox error datagra
 1574              	 .loc 2 710 0
 1575 0024 0A20     	 movs r0,#10
 1576 0026 FFF7FEFF 	 bl malloc
 1577 002a 0346     	 mov r3,r0
 1578 002c BB60     	 str r3,[r7,#8]
 711:../SSC/Src/mailbox.c **** 
 712:../SSC/Src/mailbox.c ****         if(pMbx != NULL)
 1579              	 .loc 2 712 0
 1580 002e BB68     	 ldr r3,[r7,#8]
 1581 0030 002B     	 cmp r3,#0
 1582 0032 1BD0     	 beq .L74
 713:../SSC/Src/mailbox.c ****         {
 714:../SSC/Src/mailbox.c ****             HMEMSET(pMbx,0x00,10);
 1583              	 .loc 2 714 0
 1584 0034 B868     	 ldr r0,[r7,#8]
 1585 0036 0021     	 movs r1,#0
 1586 0038 0A22     	 movs r2,#10
 1587 003a FFF7FEFF 	 bl memset
 715:../SSC/Src/mailbox.c **** 
 716:../SSC/Src/mailbox.c ****             /* Mailbox error response: type 0 (mailbox service protocol) */
 717:../SSC/Src/mailbox.c ****             pMbx->MbxHeader.Length     = 4;
 1588              	 .loc 2 717 0
 1589 003e BB68     	 ldr r3,[r7,#8]
 1590 0040 0422     	 movs r2,#4
 1591 0042 1A80     	 strh r2,[r3]
 718:../SSC/Src/mailbox.c ****             pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~(MBX_MASK_TYPE);
 1592              	 .loc 2 718 0
 1593 0044 BB68     	 ldr r3,[r7,#8]
 1594 0046 5B79     	 ldrb r3,[r3,#5]
 1595 0048 23F00F03 	 bic r3,r3,#15
 1596 004c DAB2     	 uxtb r2,r3
 1597 004e BB68     	 ldr r3,[r7,#8]
 1598 0050 5A71     	 strb r2,[r3,#5]
 719:../SSC/Src/mailbox.c ****             pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 1599              	 .loc 2 719 0
 1600 0052 BB68     	 ldr r3,[r7,#8]
 1601 0054 0122     	 movs r2,#1
 1602 0056 DA80     	 strh r2,[r3,#6]
 720:../SSC/Src/mailbox.c ****             pMbx->Data[1]                        = SWAPWORD(MBXERR_NOMOREMEMORY);
 1603              	 .loc 2 720 0
 1604 0058 BB68     	 ldr r3,[r7,#8]
 1605 005a 0722     	 movs r2,#7
 1606 005c 1A81     	 strh r2,[r3,#8]
 721:../SSC/Src/mailbox.c ****             MBX_MailboxSendReq(pMbx, 0);
 1607              	 .loc 2 721 0
 1608 005e B868     	 ldr r0,[r7,#8]
 1609 0060 0021     	 movs r1,#0
 1610 0062 FFF7FEFF 	 bl MBX_MailboxSendReq
 722:../SSC/Src/mailbox.c **** 
 723:../SSC/Src/mailbox.c ****             APPL_FreeMailboxBuffer(pMbx);
 1611              	 .loc 2 723 0
 1612 0066 B868     	 ldr r0,[r7,#8]
 1613 0068 FFF7FEFF 	 bl free
 1614              	.L74:
 1615              	.LBE8:
 724:../SSC/Src/mailbox.c ****         }
 725:../SSC/Src/mailbox.c ****     }
 726:../SSC/Src/mailbox.c **** /* ECATCHANGE_END(V5.11) MBX2*/
 727:../SSC/Src/mailbox.c ****     /* the length of the mailbox data is in the first two bytes of the mailbox,
 728:../SSC/Src/mailbox.c ****        so the length of the mailbox header has to be added */
 729:../SSC/Src/mailbox.c ****     mbxLen += MBX_HEADER_SIZE;
 1616              	 .loc 2 729 0
 1617 006c FB89     	 ldrh r3,[r7,#14]
 1618 006e 0633     	 adds r3,r3,#6
 1619 0070 FB81     	 strh r3,[r7,#14]
 730:../SSC/Src/mailbox.c **** 
 731:../SSC/Src/mailbox.c ****     /* in this example there are only two mailbox buffers available in the firmware (one for proces
 732:../SSC/Src/mailbox.c ****        one to stored the last sent response for a possible repeat request), so a
 733:../SSC/Src/mailbox.c ****        received mailbox service can only be processed if a free buffer is available */
 734:../SSC/Src/mailbox.c ****     if ( ( bSendMbxIsFull )                /* a received mailbox service will not be processed
 1620              	 .loc 2 734 0
 1621 0072 2D4B     	 ldr r3,.L81+8
 1622 0074 1B78     	 ldrb r3,[r3]
 1623 0076 002B     	 cmp r3,#0
 1624 0078 03D1     	 bne .L75
 735:../SSC/Src/mailbox.c ****                                                     as long as the send mailbox is still full
 736:../SSC/Src/mailbox.c ****                                                     (waits to be read from the master) */
 737:../SSC/Src/mailbox.c ****         ||( u8MailboxSendReqStored )    /* a mailbox service to be sent is still stored
 1625              	 .loc 2 737 0
 1626 007a 2C4B     	 ldr r3,.L81+12
 1627 007c 1B78     	 ldrb r3,[r3]
 1628 007e 002B     	 cmp r3,#0
 1629 0080 03D0     	 beq .L76
 1630              	.L75:
 738:../SSC/Src/mailbox.c ****                                                     so the received mailbox service will not be pro
 739:../SSC/Src/mailbox.c ****                                                     until all stored mailbox services are sent */
 740:../SSC/Src/mailbox.c ****         )
 741:../SSC/Src/mailbox.c ****     {
 742:../SSC/Src/mailbox.c ****         /* set flag that the processing of the mailbox service will be checked in the
 743:../SSC/Src/mailbox.c ****             function MBX_Main (called from ECAT_Main) */
 744:../SSC/Src/mailbox.c ****         bReceiveMbxIsLocked = TRUE;
 1631              	 .loc 2 744 0
 1632 0082 2B4B     	 ldr r3,.L81+16
 1633 0084 0122     	 movs r2,#1
 1634 0086 1A70     	 strb r2,[r3]
 1635 0088 46E0     	 b .L73
 1636              	.L76:
 745:../SSC/Src/mailbox.c ****     }
 746:../SSC/Src/mailbox.c ****     else
 747:../SSC/Src/mailbox.c ****     {
 748:../SSC/Src/mailbox.c ****         /* received mailbox command can be processed, reset flag */
 749:../SSC/Src/mailbox.c ****         bReceiveMbxIsLocked = FALSE;
 1637              	 .loc 2 749 0
 1638 008a 294B     	 ldr r3,.L81+16
 1639 008c 0022     	 movs r2,#0
 1640 008e 1A70     	 strb r2,[r3]
 750:../SSC/Src/mailbox.c **** 
 751:../SSC/Src/mailbox.c ****         /* if the read mailbox size is too big for the buffer, set the copy size to the maximum buf
 752:../SSC/Src/mailbox.c ****            memory could be overwritten,
 753:../SSC/Src/mailbox.c ****            the evaluation of the mailbox size will be done in the mailbox protocols called from MBX
 754:../SSC/Src/mailbox.c **** 
 755:../SSC/Src/mailbox.c ****         if (mbxLen > u16ReceiveMbxSize)
 1641              	 .loc 2 755 0
 1642 0090 284B     	 ldr r3,.L81+20
 1643 0092 1B88     	 ldrh r3,[r3]
 1644 0094 FA89     	 ldrh r2,[r7,#14]
 1645 0096 9A42     	 cmp r2,r3
 1646 0098 02D9     	 bls .L78
 756:../SSC/Src/mailbox.c ****             mbxLen = u16ReceiveMbxSize;
 1647              	 .loc 2 756 0
 1648 009a 264B     	 ldr r3,.L81+20
 1649 009c 1B88     	 ldrh r3,[r3]
 1650 009e FB81     	 strh r3,[r7,#14]
 1651              	.L78:
 757:../SSC/Src/mailbox.c **** 
 758:../SSC/Src/mailbox.c ****         psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(u16ReceiveMbxSize);
 1652              	 .loc 2 758 0
 1653 00a0 244B     	 ldr r3,.L81+20
 1654 00a2 1B88     	 ldrh r3,[r3]
 1655 00a4 1846     	 mov r0,r3
 1656 00a6 FFF7FEFF 	 bl malloc
 1657 00aa 0346     	 mov r3,r0
 1658 00ac 1A46     	 mov r2,r3
 1659 00ae 224B     	 ldr r3,.L81+24
 1660 00b0 1A60     	 str r2,[r3]
 759:../SSC/Src/mailbox.c **** 
 760:../SSC/Src/mailbox.c ****         /* if there is no more memory for mailbox buffer, the mailbox should not be read */
 761:../SSC/Src/mailbox.c ****         if (psWriteMbx == NULL)
 1661              	 .loc 2 761 0
 1662 00b2 214B     	 ldr r3,.L81+24
 1663 00b4 1B68     	 ldr r3,[r3]
 1664 00b6 002B     	 cmp r3,#0
 1665 00b8 03D1     	 bne .L79
 762:../SSC/Src/mailbox.c ****         {
 763:../SSC/Src/mailbox.c ****             /* set flag that the processing of the mailbox service will be checked in the
 764:../SSC/Src/mailbox.c ****                 function MBX_Main (called from ECAT_Main) */
 765:../SSC/Src/mailbox.c ****             bReceiveMbxIsLocked = TRUE;
 1666              	 .loc 2 765 0
 1667 00ba 1D4B     	 ldr r3,.L81+16
 1668 00bc 0122     	 movs r2,#1
 1669 00be 1A70     	 strb r2,[r3]
 766:../SSC/Src/mailbox.c ****             return;
 1670              	 .loc 2 766 0
 1671 00c0 2AE0     	 b .L73
 1672              	.L79:
 767:../SSC/Src/mailbox.c ****         }
 768:../SSC/Src/mailbox.c ****         /* copy the mailbox header and data*/
 769:../SSC/Src/mailbox.c ****         HW_EscReadMbxMem((MEM_ADDR MBXMEM *) psWriteMbx,u16EscAddrReceiveMbx,mbxLen);
 1673              	 .loc 2 769 0
 1674 00c2 1D4B     	 ldr r3,.L81+24
 1675 00c4 1968     	 ldr r1,[r3]
 1676 00c6 164B     	 ldr r3,.L81
 1677 00c8 1A88     	 ldrh r2,[r3]
 1678 00ca FB89     	 ldrh r3,[r7,#14]
 1679 00cc 0846     	 mov r0,r1
 1680 00ce 1146     	 mov r1,r2
 1681 00d0 1A46     	 mov r2,r3
 1682 00d2 FFF7FEFF 	 bl HW_EscReadMbxMem
 1683              	.LBB9:
 770:../SSC/Src/mailbox.c **** 
 771:../SSC/Src/mailbox.c **** 
 772:../SSC/Src/mailbox.c ****         {
 773:../SSC/Src/mailbox.c ****         /*Read Control and Status of SyncManager 0 to check if the buffer is unlocked*/
 774:../SSC/Src/mailbox.c ****         VARVOLATILE UINT8 smstate = 0x00;
 1684              	 .loc 2 774 0
 1685 00d6 0023     	 movs r3,#0
 1686 00d8 FB71     	 strb r3,[r7,#7]
 775:../SSC/Src/mailbox.c ****         HW_EscReadByte(smstate,ESC_SYNCMAN_STATUS_OFFSET);
 1687              	 .loc 2 775 0
 1688 00da 184B     	 ldr r3,.L81+28
 1689 00dc 1B78     	 ldrb r3,[r3]
 1690 00de DBB2     	 uxtb r3,r3
 1691 00e0 FB71     	 strb r3,[r7,#7]
 776:../SSC/Src/mailbox.c **** 
 777:../SSC/Src/mailbox.c ****         if(smstate & SM_STATUS_MBX_BUFFER_FULL)
 1692              	 .loc 2 777 0
 1693 00e2 FB79     	 ldrb r3,[r7,#7]
 1694 00e4 DBB2     	 uxtb r3,r3
 1695 00e6 03F00803 	 and r3,r3,#8
 1696 00ea 002B     	 cmp r3,#0
 1697 00ec 0FD0     	 beq .L80
 778:../SSC/Src/mailbox.c ****         {
 779:../SSC/Src/mailbox.c ****             /*Unlock the mailbox SyncManger buffer*/
 780:../SSC/Src/mailbox.c ****             u8dummy = 0;
 1698              	 .loc 2 780 0
 1699 00ee 144B     	 ldr r3,.L81+32
 1700 00f0 0022     	 movs r2,#0
 1701 00f2 1A70     	 strb r2,[r3]
 781:../SSC/Src/mailbox.c ****             HW_EscReadByte(u8dummy,(u16EscAddrReceiveMbx + u16ReceiveMbxSize - 1));
 1702              	 .loc 2 781 0
 1703 00f4 0A4B     	 ldr r3,.L81
 1704 00f6 1B88     	 ldrh r3,[r3]
 1705 00f8 1A46     	 mov r2,r3
 1706 00fa 0E4B     	 ldr r3,.L81+20
 1707 00fc 1B88     	 ldrh r3,[r3]
 1708 00fe 1344     	 add r3,r3,r2
 1709 0100 1A46     	 mov r2,r3
 1710 0102 104B     	 ldr r3,.L81+36
 1711 0104 1344     	 add r3,r3,r2
 1712 0106 1B78     	 ldrb r3,[r3]
 1713 0108 DAB2     	 uxtb r2,r3
 1714 010a 0D4B     	 ldr r3,.L81+32
 1715 010c 1A70     	 strb r2,[r3]
 1716              	.L80:
 1717              	.LBE9:
 782:../SSC/Src/mailbox.c **** 
 783:../SSC/Src/mailbox.c ****         }
 784:../SSC/Src/mailbox.c **** 
 785:../SSC/Src/mailbox.c ****         }
 786:../SSC/Src/mailbox.c **** 
 787:../SSC/Src/mailbox.c ****         /* in MBX_MailboxWriteInd the mailbox protocol will be processed */
 788:../SSC/Src/mailbox.c ****         MBX_MailboxWriteInd( psWriteMbx );
 1718              	 .loc 2 788 0
 1719 010e 0A4B     	 ldr r3,.L81+24
 1720 0110 1B68     	 ldr r3,[r3]
 1721 0112 1846     	 mov r0,r3
 1722 0114 FFF7FEFF 	 bl MBX_MailboxWriteInd
 1723              	.L73:
 789:../SSC/Src/mailbox.c **** 
 790:../SSC/Src/mailbox.c ****     }
 791:../SSC/Src/mailbox.c **** }
 1724              	 .loc 2 791 0
 1725 0118 1037     	 adds r7,r7,#16
 1726              	.LCFI76:
 1727              	 .cfi_def_cfa_offset 8
 1728 011a BD46     	 mov sp,r7
 1729              	.LCFI77:
 1730              	 .cfi_def_cfa_register 13
 1731              	 
 1732 011c 80BD     	 pop {r7,pc}
 1733              	.L82:
 1734 011e 00BF     	 .align 2
 1735              	.L81:
 1736 0120 00000000 	 .word u16EscAddrReceiveMbx
 1737 0124 00000000 	 .word bNoMbxMemoryAvailable
 1738 0128 00000000 	 .word bSendMbxIsFull
 1739 012c 00000000 	 .word u8MailboxSendReqStored
 1740 0130 00000000 	 .word bReceiveMbxIsLocked
 1741 0134 00000000 	 .word u16ReceiveMbxSize
 1742 0138 00000000 	 .word psWriteMbx
 1743 013c 05080154 	 .word 1409353733
 1744 0140 00000000 	 .word u8dummy
 1745 0144 FFFF0054 	 .word 1409351679
 1746              	 .cfi_endproc
 1747              	.LFE182:
 1749              	 .section .text.MBX_CopyToSendMailbox,"ax",%progbits
 1750              	 .align 2
 1751              	 .global MBX_CopyToSendMailbox
 1752              	 .thumb
 1753              	 .thumb_func
 1755              	MBX_CopyToSendMailbox:
 1756              	.LFB183:
 792:../SSC/Src/mailbox.c **** 
 793:../SSC/Src/mailbox.c **** 
 794:../SSC/Src/mailbox.c **** /////////////////////////////////////////////////////////////////////////////////////////
 795:../SSC/Src/mailbox.c **** /**
 796:../SSC/Src/mailbox.c ****  \param     pMbx        Pointer to the Mailbox command to be send to the master.
 797:../SSC/Src/mailbox.c **** 
 798:../SSC/Src/mailbox.c ****  \brief    This function copies data to the Send Mailbox.
 799:../SSC/Src/mailbox.c **** *////////////////////////////////////////////////////////////////////////////////////////
 800:../SSC/Src/mailbox.c **** 
 801:../SSC/Src/mailbox.c **** UINT8 MBX_CopyToSendMailbox( TMBX MBXMEM *pMbx )
 802:../SSC/Src/mailbox.c **** {
 1757              	 .loc 2 802 0
 1758              	 .cfi_startproc
 1759              	 
 1760              	 
 1761 0000 80B5     	 push {r7,lr}
 1762              	.LCFI78:
 1763              	 .cfi_def_cfa_offset 8
 1764              	 .cfi_offset 7,-8
 1765              	 .cfi_offset 14,-4
 1766 0002 84B0     	 sub sp,sp,#16
 1767              	.LCFI79:
 1768              	 .cfi_def_cfa_offset 24
 1769 0004 00AF     	 add r7,sp,#0
 1770              	.LCFI80:
 1771              	 .cfi_def_cfa_register 7
 1772 0006 7860     	 str r0,[r7,#4]
 803:../SSC/Src/mailbox.c ****     if ( (nAlStatus & STATE_MASK) == STATE_INIT)
 1773              	 .loc 2 803 0
 1774 0008 2A4B     	 ldr r3,.L91
 1775 000a 1B78     	 ldrb r3,[r3]
 1776 000c 03F00F03 	 and r3,r3,#15
 1777 0010 012B     	 cmp r3,#1
 1778 0012 01D1     	 bne .L84
 804:../SSC/Src/mailbox.c ****     {
 805:../SSC/Src/mailbox.c ****         /* the mailbox is disabled if the slave is in the INIT state */
 806:../SSC/Src/mailbox.c ****         return( ERROR_INVALIDSTATE );
 1779              	 .loc 2 806 0
 1780 0014 F023     	 movs r3,#240
 1781 0016 49E0     	 b .L85
 1782              	.L84:
 807:../SSC/Src/mailbox.c ****     }
 808:../SSC/Src/mailbox.c **** 
 809:../SSC/Src/mailbox.c **** 
 810:../SSC/Src/mailbox.c ****     if ( !bMbxRunning )
 1783              	 .loc 2 810 0
 1784 0018 274B     	 ldr r3,.L91+4
 1785 001a 1B78     	 ldrb r3,[r3]
 1786 001c 83F00103 	 eor r3,r3,#1
 1787 0020 DBB2     	 uxtb r3,r3
 1788 0022 002B     	 cmp r3,#0
 1789 0024 01D0     	 beq .L86
 811:../SSC/Src/mailbox.c ****     {
 812:../SSC/Src/mailbox.c ****         /* the mailbox is disabled if the slave is in the INIT state */
 813:../SSC/Src/mailbox.c ****         return( ERROR_INVALIDSTATE );
 1790              	 .loc 2 813 0
 1791 0026 F023     	 movs r3,#240
 1792 0028 40E0     	 b .L85
 1793              	.L86:
 814:../SSC/Src/mailbox.c ****     }
 815:../SSC/Src/mailbox.c **** 
 816:../SSC/Src/mailbox.c ****     if ( bSendMbxIsFull )
 1794              	 .loc 2 816 0
 1795 002a 244B     	 ldr r3,.L91+8
 1796 002c 1B78     	 ldrb r3,[r3]
 1797 002e 002B     	 cmp r3,#0
 1798 0030 01D0     	 beq .L87
 817:../SSC/Src/mailbox.c ****     {
 818:../SSC/Src/mailbox.c ****         /* mailbox service cannot be sent because the send mailbox is still full */
 819:../SSC/Src/mailbox.c ****         return MBXERR_NOMOREMEMORY;
 1799              	 .loc 2 819 0
 1800 0032 0723     	 movs r3,#7
 1801 0034 3AE0     	 b .L85
 1802              	.L87:
 1803              	.LBB10:
 820:../SSC/Src/mailbox.c ****     }
 821:../SSC/Src/mailbox.c ****     else
 822:../SSC/Src/mailbox.c ****     {
 823:../SSC/Src/mailbox.c ****         /* the variable mbxSize contains the size of the mailbox data to be sent */
 824:../SSC/Src/mailbox.c ****         UINT16 mbxSize = pMbx->MbxHeader.Length;
 1804              	 .loc 2 824 0
 1805 0036 7B68     	 ldr r3,[r7,#4]
 1806 0038 1B88     	 ldrh r3,[r3]
 1807 003a FB81     	 strh r3,[r7,#14]
 825:../SSC/Src/mailbox.c ****         HW_EscWriteMbxMem((MEM_ADDR *)pMbx, u16EscAddrSendMbx, (mbxSize + MBX_HEADER_SIZE));
 1808              	 .loc 2 825 0
 1809 003c 204B     	 ldr r3,.L91+12
 1810 003e 1A88     	 ldrh r2,[r3]
 1811 0040 FB89     	 ldrh r3,[r7,#14]
 1812 0042 0633     	 adds r3,r3,#6
 1813 0044 9BB2     	 uxth r3,r3
 1814 0046 7868     	 ldr r0,[r7,#4]
 1815 0048 1146     	 mov r1,r2
 1816 004a 1A46     	 mov r2,r3
 1817 004c FFF7FEFF 	 bl HW_EscWriteMbxMem
 1818              	.LBB11:
 826:../SSC/Src/mailbox.c **** /* ECATCHANGE_HW(V5.10) HW1*/
 827:../SSC/Src/mailbox.c **** 
 828:../SSC/Src/mailbox.c ****         {
 829:../SSC/Src/mailbox.c ****         /*Read Control and Status of SyncManager 1 to check if the buffer is still marked as empty*
 830:../SSC/Src/mailbox.c ****         VARVOLATILE UINT8 smstate = 0x00;
 1819              	 .loc 2 830 0
 1820 0050 0023     	 movs r3,#0
 1821 0052 7B73     	 strb r3,[r7,#13]
 831:../SSC/Src/mailbox.c ****         HW_EscReadByte(smstate,(ESC_SYNCMAN_STATUS_OFFSET + SIZEOF_SM_REGISTER));
 1822              	 .loc 2 831 0
 1823 0054 1B4B     	 ldr r3,.L91+16
 1824 0056 1B78     	 ldrb r3,[r3]
 1825 0058 DBB2     	 uxtb r3,r3
 1826 005a 7B73     	 strb r3,[r7,#13]
 832:../SSC/Src/mailbox.c **** 
 833:../SSC/Src/mailbox.c ****         if(!(smstate & SM_STATUS_MBX_BUFFER_FULL))
 1827              	 .loc 2 833 0
 1828 005c 7B7B     	 ldrb r3,[r7,#13]
 1829 005e DBB2     	 uxtb r3,r3
 1830 0060 03F00803 	 and r3,r3,#8
 1831 0064 002B     	 cmp r3,#0
 1832 0066 0FD1     	 bne .L88
 834:../SSC/Src/mailbox.c ****         {
 835:../SSC/Src/mailbox.c **** 
 836:../SSC/Src/mailbox.c ****             /*Write last Byte to trigger mailbox full flag*/
 837:../SSC/Src/mailbox.c ****             u8dummy = 0;
 1833              	 .loc 2 837 0
 1834 0068 174B     	 ldr r3,.L91+20
 1835 006a 0022     	 movs r2,#0
 1836 006c 1A70     	 strb r2,[r3]
 838:../SSC/Src/mailbox.c ****             HW_EscWriteByte(u8dummy,(u16EscAddrSendMbx + u16SendMbxSize - 1));
 1837              	 .loc 2 838 0
 1838 006e 144B     	 ldr r3,.L91+12
 1839 0070 1B88     	 ldrh r3,[r3]
 1840 0072 1A46     	 mov r2,r3
 1841 0074 154B     	 ldr r3,.L91+24
 1842 0076 1B88     	 ldrh r3,[r3]
 1843 0078 1344     	 add r3,r3,r2
 1844 007a 1A46     	 mov r2,r3
 1845 007c 144B     	 ldr r3,.L91+28
 1846 007e 1344     	 add r3,r3,r2
 1847 0080 114A     	 ldr r2,.L91+20
 1848 0082 1278     	 ldrb r2,[r2]
 1849 0084 D2B2     	 uxtb r2,r2
 1850 0086 1A70     	 strb r2,[r3]
 1851              	.L88:
 1852              	.LBE11:
 839:../SSC/Src/mailbox.c ****         }
 840:../SSC/Src/mailbox.c ****         }
 841:../SSC/Src/mailbox.c **** 
 842:../SSC/Src/mailbox.c ****         /* store last send mailbox service for a possible repeat
 843:../SSC/Src/mailbox.c ****             one buffer includes the last send service (psRepeatMbx),
 844:../SSC/Src/mailbox.c ****             the other one the actual service to be sent (psReadMbx),
 845:../SSC/Src/mailbox.c ****             there is no buffer available for a mailbox receive service
 846:../SSC/Src/mailbox.c ****             until the last sent buffer was read from the master
 847:../SSC/Src/mailbox.c ****             the exception is after the INIT2PREOP transition, in that
 848:../SSC/Src/mailbox.c ****             case there is no last sent service (psReadMbx = 0) */
 849:../SSC/Src/mailbox.c ****         if ( psReadMbx )
 1853              	 .loc 2 849 0
 1854 0088 124B     	 ldr r3,.L91+32
 1855 008a 1B68     	 ldr r3,[r3]
 1856 008c 002B     	 cmp r3,#0
 1857 008e 03D0     	 beq .L89
 850:../SSC/Src/mailbox.c ****             psWriteMbx = NULL;
 1858              	 .loc 2 850 0
 1859 0090 114B     	 ldr r3,.L91+36
 1860 0092 0022     	 movs r2,#0
 1861 0094 1A60     	 str r2,[r3]
 1862 0096 02E0     	 b .L90
 1863              	.L89:
 851:../SSC/Src/mailbox.c ****         else
 852:../SSC/Src/mailbox.c ****         {
 853:../SSC/Src/mailbox.c ****             /* only the first time after the INIT2PREOP-transition */
 854:../SSC/Src/mailbox.c ****             psWriteMbx = &asMbx[1];
 1864              	 .loc 2 854 0
 1865 0098 0F4B     	 ldr r3,.L91+36
 1866 009a 104A     	 ldr r2,.L91+40
 1867 009c 1A60     	 str r2,[r3]
 1868              	.L90:
 855:../SSC/Src/mailbox.c ****         }
 856:../SSC/Src/mailbox.c ****         // HBu 17.06.06: psRepeatMbx was already updated in MBX_MailboxReadInd
 857:../SSC/Src/mailbox.c ****         // psRepeatMbx = psReadMbx;
 858:../SSC/Src/mailbox.c ****         psReadMbx = pMbx;
 1869              	 .loc 2 858 0
 1870 009e 0D4A     	 ldr r2,.L91+32
 1871 00a0 7B68     	 ldr r3,[r7,#4]
 1872 00a2 1360     	 str r3,[r2]
 859:../SSC/Src/mailbox.c **** 
 860:../SSC/Src/mailbox.c ****         /* set flag that send mailbox is full now */
 861:../SSC/Src/mailbox.c ****         bSendMbxIsFull = TRUE;
 1873              	 .loc 2 861 0
 1874 00a4 054B     	 ldr r3,.L91+8
 1875 00a6 0122     	 movs r2,#1
 1876 00a8 1A70     	 strb r2,[r3]
 862:../SSC/Src/mailbox.c **** 
 863:../SSC/Src/mailbox.c **** 
 864:../SSC/Src/mailbox.c ****         return 0;
 1877              	 .loc 2 864 0
 1878 00aa 0023     	 movs r3,#0
 1879              	.L85:
 1880              	.LBE10:
 865:../SSC/Src/mailbox.c ****     }
 866:../SSC/Src/mailbox.c **** }
 1881              	 .loc 2 866 0
 1882 00ac 1846     	 mov r0,r3
 1883 00ae 1037     	 adds r7,r7,#16
 1884              	.LCFI81:
 1885              	 .cfi_def_cfa_offset 8
 1886 00b0 BD46     	 mov sp,r7
 1887              	.LCFI82:
 1888              	 .cfi_def_cfa_register 13
 1889              	 
 1890 00b2 80BD     	 pop {r7,pc}
 1891              	.L92:
 1892              	 .align 2
 1893              	.L91:
 1894 00b4 00000000 	 .word nAlStatus
 1895 00b8 00000000 	 .word bMbxRunning
 1896 00bc 00000000 	 .word bSendMbxIsFull
 1897 00c0 00000000 	 .word u16EscAddrSendMbx
 1898 00c4 0D080154 	 .word 1409353741
 1899 00c8 00000000 	 .word u8dummy
 1900 00cc 00000000 	 .word u16SendMbxSize
 1901 00d0 FFFF0054 	 .word 1409351679
 1902 00d4 00000000 	 .word psReadMbx
 1903 00d8 00000000 	 .word psWriteMbx
 1904 00dc 00010000 	 .word asMbx+256
 1905              	 .cfi_endproc
 1906              	.LFE183:
 1908              	 .section .text.MBX_Main,"ax",%progbits
 1909              	 .align 2
 1910              	 .global MBX_Main
 1911              	 .thumb
 1912              	 .thumb_func
 1914              	MBX_Main:
 1915              	.LFB184:
 867:../SSC/Src/mailbox.c **** 
 868:../SSC/Src/mailbox.c **** /////////////////////////////////////////////////////////////////////////////////////////
 869:../SSC/Src/mailbox.c **** /**
 870:../SSC/Src/mailbox.c ****  \brief    This function is called cyclically to check if a received Mailbox service was
 871:../SSC/Src/mailbox.c ****              stored.
 872:../SSC/Src/mailbox.c **** *////////////////////////////////////////////////////////////////////////////////////////
 873:../SSC/Src/mailbox.c **** 
 874:../SSC/Src/mailbox.c **** void MBX_Main(void)
 875:../SSC/Src/mailbox.c **** {
 1916              	 .loc 2 875 0
 1917              	 .cfi_startproc
 1918              	 
 1919              	 
 1920 0000 80B5     	 push {r7,lr}
 1921              	.LCFI83:
 1922              	 .cfi_def_cfa_offset 8
 1923              	 .cfi_offset 7,-8
 1924              	 .cfi_offset 14,-4
 1925 0002 82B0     	 sub sp,sp,#8
 1926              	.LCFI84:
 1927              	 .cfi_def_cfa_offset 16
 1928 0004 00AF     	 add r7,sp,#0
 1929              	.LCFI85:
 1930              	 .cfi_def_cfa_register 7
 876:../SSC/Src/mailbox.c ****     TMBX MBXMEM *pMbx = NULL;
 1931              	 .loc 2 876 0
 1932 0006 0023     	 movs r3,#0
 1933 0008 3B60     	 str r3,[r7]
 1934              	.L96:
 1935              	.LBB12:
 877:../SSC/Src/mailbox.c **** 
 878:../SSC/Src/mailbox.c ****     do
 879:../SSC/Src/mailbox.c ****     {
 880:../SSC/Src/mailbox.c ****         UINT8 result = 0;
 1936              	 .loc 2 880 0
 1937 000a 0023     	 movs r3,#0
 1938 000c FB71     	 strb r3,[r7,#7]
 881:../SSC/Src/mailbox.c **** 
 882:../SSC/Src/mailbox.c ****         pMbx = GetOutOfMbxQueue(&sMbxReceiveQueue);
 1939              	 .loc 2 882 0
 1940 000e 1848     	 ldr r0,.L98
 1941 0010 FFF7FEFF 	 bl GetOutOfMbxQueue
 1942 0014 3860     	 str r0,[r7]
 883:../SSC/Src/mailbox.c ****         if ( pMbx )
 1943              	 .loc 2 883 0
 1944 0016 3B68     	 ldr r3,[r7]
 1945 0018 002B     	 cmp r3,#0
 1946 001a 04D0     	 beq .L94
 884:../SSC/Src/mailbox.c ****             result = MailboxServiceInd(pMbx);
 1947              	 .loc 2 884 0
 1948 001c 3868     	 ldr r0,[r7]
 1949 001e FFF7FEFF 	 bl MailboxServiceInd
 1950 0022 0346     	 mov r3,r0
 1951 0024 FB71     	 strb r3,[r7,#7]
 1952              	.L94:
 885:../SSC/Src/mailbox.c **** 
 886:../SSC/Src/mailbox.c ****         if ( result != 0 )
 1953              	 .loc 2 886 0
 1954 0026 FB79     	 ldrb r3,[r7,#7]
 1955 0028 002B     	 cmp r3,#0
 1956 002a 14D0     	 beq .L95
 887:../SSC/Src/mailbox.c ****         {
 888:../SSC/Src/mailbox.c ****             /* Mailbox error response: type 0 (mailbox service protocol) */
 889:../SSC/Src/mailbox.c ****             pMbx->MbxHeader.Length     = 4;
 1957              	 .loc 2 889 0
 1958 002c 3B68     	 ldr r3,[r7]
 1959 002e 0422     	 movs r2,#4
 1960 0030 1A80     	 strh r2,[r3]
 890:../SSC/Src/mailbox.c ****             pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~(MBX_MASK_TYPE);
 1961              	 .loc 2 890 0
 1962 0032 3B68     	 ldr r3,[r7]
 1963 0034 5B79     	 ldrb r3,[r3,#5]
 1964 0036 23F00F03 	 bic r3,r3,#15
 1965 003a DAB2     	 uxtb r2,r3
 1966 003c 3B68     	 ldr r3,[r7]
 1967 003e 5A71     	 strb r2,[r3,#5]
 891:../SSC/Src/mailbox.c ****             pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 1968              	 .loc 2 891 0
 1969 0040 3B68     	 ldr r3,[r7]
 1970 0042 0122     	 movs r2,#1
 1971 0044 DA80     	 strh r2,[r3,#6]
 892:../SSC/Src/mailbox.c ****             pMbx->Data[1]                        = SWAPWORD(result);
 1972              	 .loc 2 892 0
 1973 0046 FB79     	 ldrb r3,[r7,#7]
 1974 0048 9AB2     	 uxth r2,r3
 1975 004a 3B68     	 ldr r3,[r7]
 1976 004c 1A81     	 strh r2,[r3,#8]
 893:../SSC/Src/mailbox.c ****             MBX_MailboxSendReq(pMbx, 0);
 1977              	 .loc 2 893 0
 1978 004e 3868     	 ldr r0,[r7]
 1979 0050 0021     	 movs r1,#0
 1980 0052 FFF7FEFF 	 bl MBX_MailboxSendReq
 1981              	.L95:
 1982              	.LBE12:
 894:../SSC/Src/mailbox.c ****         }
 895:../SSC/Src/mailbox.c ****     }
 896:../SSC/Src/mailbox.c ****     while ( pMbx != NULL );
 1983              	 .loc 2 896 0
 1984 0056 3B68     	 ldr r3,[r7]
 1985 0058 002B     	 cmp r3,#0
 1986 005a D6D1     	 bne .L96
 897:../SSC/Src/mailbox.c **** 
 898:../SSC/Src/mailbox.c **** 
 899:../SSC/Src/mailbox.c **** 
 900:../SSC/Src/mailbox.c ****       if ( bReceiveMbxIsLocked )
 1987              	 .loc 2 900 0
 1988 005c 054B     	 ldr r3,.L98+4
 1989 005e 1B78     	 ldrb r3,[r3]
 1990 0060 002B     	 cmp r3,#0
 1991 0062 01D0     	 beq .L93
 901:../SSC/Src/mailbox.c ****       {
 902:../SSC/Src/mailbox.c ****           /* the work on the receive mailbox is locked, check if it can be unlocked (if all
 903:../SSC/Src/mailbox.c ****              mailbox commands has been sent */
 904:../SSC/Src/mailbox.c ****           MBX_CheckAndCopyMailbox();
 1992              	 .loc 2 904 0
 1993 0064 FFF7FEFF 	 bl MBX_CheckAndCopyMailbox
 1994              	.L93:
 905:../SSC/Src/mailbox.c ****       }
 906:../SSC/Src/mailbox.c **** }
 1995              	 .loc 2 906 0
 1996 0068 0837     	 adds r7,r7,#8
 1997              	.LCFI86:
 1998              	 .cfi_def_cfa_offset 8
 1999 006a BD46     	 mov sp,r7
 2000              	.LCFI87:
 2001              	 .cfi_def_cfa_register 13
 2002              	 
 2003 006c 80BD     	 pop {r7,pc}
 2004              	.L99:
 2005 006e 00BF     	 .align 2
 2006              	.L98:
 2007 0070 00000000 	 .word sMbxReceiveQueue
 2008 0074 00000000 	 .word bReceiveMbxIsLocked
 2009              	 .cfi_endproc
 2010              	.LFE184:
 2012              	 .text
 2013              	.Letext0:
 2014              	 .file 3 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2015              	 .file 4 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2016              	 .file 5 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Infineon/XMC4300_series/Include/XMC4300.h"
 2017              	 .file 6 "../SSC/Src/esc.h"
 2018              	 .file 7 "../SSC/Src/mailbox.h"
 2019              	 .file 8 "../SSC/Src/ecatcoe.h"
 2020              	 .file 9 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include/core_cm4.h"
 2021              	 .file 10 "../SSC/Src/ecatslv.h"
DEFINED SYMBOLS
                            *ABS*:00000000 mailbox.c
    {standard input}:20     .text.HW_EscRead:00000000 $t
    {standard input}:24     .text.HW_EscRead:00000000 HW_EscRead
    {standard input}:68     .text.HW_EscReadMbxMem:00000000 $t
    {standard input}:72     .text.HW_EscReadMbxMem:00000000 HW_EscReadMbxMem
    {standard input}:114    .text.HW_EscWrite:00000000 $t
    {standard input}:118    .text.HW_EscWrite:00000000 HW_EscWrite
    {standard input}:161    .text.HW_EscWriteMbxMem:00000000 $t
    {standard input}:165    .text.HW_EscWriteMbxMem:00000000 HW_EscWriteMbxMem
                            *COM*:00000001 bReceiveMbxIsLocked
                            *COM*:00000001 bSendMbxIsFull
                            *COM*:00000001 bMbxRunning
                            *COM*:00000001 bMbxRepeatToggle
                            *COM*:00000002 u16SendMbxSize
                            *COM*:00000002 u16ReceiveMbxSize
                            *COM*:00000002 u16EscAddrReceiveMbx
                            *COM*:00000002 u16EscAddrSendMbx
                            *COM*:00000001 u8MbxWriteCounter
                            *COM*:00000001 u8MbxReadCounter
                            *COM*:00000200 asMbx
                            *COM*:00000001 u8MailboxSendReqStored
                            *COM*:00000004 psWriteMbx
                            *COM*:00000004 psReadMbx
                            *COM*:00000004 psRepeatMbx
                            *COM*:00000004 psStoreMbx
                            *COM*:00000034 sMbxSendQueue
                            *COM*:00000034 sMbxReceiveQueue
                            *COM*:00000001 bNoMbxMemoryAvailable
    {standard input}:226    .text.PutInMbxQueue:00000000 $t
    {standard input}:231    .text.PutInMbxQueue:00000000 PutInMbxQueue
    {standard input}:309    .text.GetOutOfMbxQueue:00000000 $t
    {standard input}:314    .text.GetOutOfMbxQueue:00000000 GetOutOfMbxQueue
    {standard input}:398    .text.MBX_Init:00000000 $t
    {standard input}:403    .text.MBX_Init:00000000 MBX_Init
    {standard input}:537    .text.MBX_Init:000000ac $d
    {standard input}:559    .text.MBX_StartMailboxHandler:00000000 $t
    {standard input}:564    .text.MBX_StartMailboxHandler:00000000 MBX_StartMailboxHandler
    {standard input}:716    .text.MBX_StartMailboxHandler:000000dc $d
    {standard input}:726    .text.MBX_StopMailboxHandler:00000000 $t
    {standard input}:731    .text.MBX_StopMailboxHandler:00000000 MBX_StopMailboxHandler
    {standard input}:917    .text.MBX_StopMailboxHandler:00000104 $d
    {standard input}:934    .text.MailboxServiceInd:00000000 $t
    {standard input}:939    .text.MailboxServiceInd:00000000 MailboxServiceInd
    {standard input}:993    .text.MBX_MailboxWriteInd:00000000 $t
    {standard input}:998    .text.MBX_MailboxWriteInd:00000000 MBX_MailboxWriteInd
    {standard input}:1391   .text.MBX_MailboxSendReq:00000000 MBX_MailboxSendReq
    {standard input}:1130   .text.MBX_MailboxWriteInd:000000b4 $d
    {standard input}:1136   .text.MBX_MailboxReadInd:00000000 $t
    {standard input}:1141   .text.MBX_MailboxReadInd:00000000 MBX_MailboxReadInd
    {standard input}:1755   .text.MBX_CopyToSendMailbox:00000000 MBX_CopyToSendMailbox
    {standard input}:1273   .text.MBX_MailboxReadInd:000000b4 $d
    {standard input}:1284   .text.MBX_MailboxRepeatReq:00000000 $t
    {standard input}:1289   .text.MBX_MailboxRepeatReq:00000000 MBX_MailboxRepeatReq
    {standard input}:1377   .text.MBX_MailboxRepeatReq:00000070 $d
    {standard input}:1386   .text.MBX_MailboxSendReq:00000000 $t
    {standard input}:1528   .text.MBX_MailboxSendReq:000000c4 $d
    {standard input}:1536   .text.MBX_CheckAndCopyMailbox:00000000 $t
    {standard input}:1541   .text.MBX_CheckAndCopyMailbox:00000000 MBX_CheckAndCopyMailbox
    {standard input}:1736   .text.MBX_CheckAndCopyMailbox:00000120 $d
    {standard input}:1750   .text.MBX_CopyToSendMailbox:00000000 $t
    {standard input}:1894   .text.MBX_CopyToSendMailbox:000000b4 $d
    {standard input}:1909   .text.MBX_Main:00000000 $t
    {standard input}:1914   .text.MBX_Main:00000000 MBX_Main
    {standard input}:2007   .text.MBX_Main:00000070 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memcpy
GetSyncMan
EnableSyncManChannel
malloc
free
DisableSyncManChannel
COE_ServiceInd
COE_ContinueInd
nAlStatus
memset
u8dummy
