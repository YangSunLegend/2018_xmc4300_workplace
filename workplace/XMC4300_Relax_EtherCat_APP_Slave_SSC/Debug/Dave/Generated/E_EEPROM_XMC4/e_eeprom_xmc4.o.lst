   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "e_eeprom_xmc4.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_FLASH_SetMargin,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_FLASH_SetMargin:
  25              	.LFB134:
  26              	 .file 1 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc/xmc4_flash.h"
   1:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** /**
   2:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @file xmc4_flash.h
   3:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @date 2016-03-22
   4:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
   5:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @cond
   6:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  **************************************************************************************************
   7:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
   9:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * All rights reserved.                        
  11:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *                                             
  12:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * following conditions are met:   
  14:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *                                                                              
  15:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * disclaimer.                        
  17:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * 
  18:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * 
  21:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * products derived from this software without specific prior written permission.                  
  23:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *                                                                              
  24:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *                                                                              
  32:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  **************************************************************************************************
  35:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
  36:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * Change History
  37:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * --------------
  38:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
  39:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * 2014-12-10:
  40:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *     - Initial <br>
  41:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * 2015-02-20:
  42:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *     - Updated for Documentation related changes<br>
  43:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * 2015-06-20: 
  44:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *     - Removed version macros and declaration of GetDriverVersion API 
  45:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * 2015-08-17: 
  46:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *     - Added the below API's to the public interface.
  47:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *       1. XMC_FLASH_Reset
  48:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *       2. XMC_FLASH_ErasePhysicalSector
  49:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *       3. XMC_FLASH_EraseUCB
  50:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *       4. XMC_FLASH_ResumeProtection
  51:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *       5. XMC_FLASH_RepairPhysicalSector 
  52:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *     - Added support for XMC4800/4700 devices
  53:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * 2015-12-07:
  54:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *     - Fix XMC_FLASH_READ_ACCESS_TIME for XMC43, 47 and 48 devices
  55:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * 2016-03-18:
  56:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *     - Fix implementation of XMC_PREFETCH_EnableInstructionBuffer and XMC_PREFETCH_DisableInstruc
  57:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * 2016-03-22:
  58:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *     - Fix implementation of XMC_PREFETCH_InvalidateInstructionBuffer
  59:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @endcond 
  60:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
  61:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  */
  62:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
  63:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #ifndef XMC4_FLASH_H
  64:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC4_FLASH_H
  65:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
  66:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** /**************************************************************************************************
  67:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * HEADER FILES
  68:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  **************************************************************************************************
  69:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
  70:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #include "xmc_common.h"
  71:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
  72:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #if UC_FAMILY == XMC4
  73:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
  74:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** /**
  75:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @addtogroup XMClib XMC Peripheral Library
  76:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @{
  77:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  */
  78:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
  79:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** /**
  80:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @addtogroup FLASH
  81:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @{
  82:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  */
  83:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
  84:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** /**************************************************************************************************
  85:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * MACROS
  86:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  **************************************************************************************************
  87:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_UNCACHED_BASE    (0x0C000000U) /**< Non cached flash starting address of for
  88:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                       XMC4 family of microcontrollers */
  89:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_WORDS_PER_PAGE   (64UL)        /**< Number of words in a page (256 bytes / 4 byte
  90:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_BYTES_PER_PAGE   (256UL)       /**< Number of bytes in a  page*/
  91:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
  92:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_UCB0             (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x0000UL) /**< Starting a
  93:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          Configurab
  94:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_UCB1             (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x0400UL) /**< Starting a
  95:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          Configurab
  96:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_UCB2             (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x0800UL) /**< Starting a
  97:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          Configurab
  98:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_BYTES_PER_UCB    (1024UL) /**< Number of bytes in a user configurable block*/
  99:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
 100:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** /**< Note : Total number of Sectors depends on the flash size of the controller. So while using the
 101:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *          operations ensure that sector is available, other may lead to flash error.
 102:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 103:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_0         (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x00000UL) /**<Starting a
 104:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_1         (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x04000UL) /**<Starting a
 105:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_2         (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x08000UL) /**<Starting a
 106:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_3         (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x0C000UL) /**<Starting a
 107:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_4         (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x10000UL) /**<Starting a
 108:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_5         (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x14000UL) /**<Starting a
 109:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_6         (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x18000UL) /**<Starting a
 110:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_7         (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x1C000UL) /**<Starting a
 111:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_8         (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x20000UL) /**<Starting a
 112:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_9         (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x40000UL) /**<Starting a
 113:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_10        (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x80000UL) /**<Starting a
 114:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_11        (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xC0000UL) /**<Starting a
 115:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
 116:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_12        (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x100000UL) /**<Starting 
 117:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_13        (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x140000UL) /**<Starting 
 118:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_14        (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x180000UL) /**<Starting 
 119:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_15        (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x1C0000UL) /**<Starting 
 120:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
 121:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_PHY_SECTOR_0     (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x00000UL) /**<Starting a
 122:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          physical s
 123:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_PHY_SECTOR_4     (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x10000UL) /**<Starting a
 124:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          physical s
 125:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_PHY_SECTOR_8     (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x20000UL) /**<Starting a
 126:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          physical s
 127:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_PHY_SECTOR_9     (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x40000UL) /**<Starting a
 128:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          physical s
 129:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_PHY_SECTOR_10    (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x80000UL) /**<Starting a
 130:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          physical s
 131:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_PHY_SECTOR_11    (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xC0000UL) /**<Starting a
 132:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          physical s
 133:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_PHY_SECTOR_12    (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x100000UL) /**<Starting 
 134:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          physical s
 135:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_PHY_SECTOR_13    (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x140000UL) /**<Starting 
 136:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          physical s
 137:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_PHY_SECTOR_14    (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x180000UL) /**<Starting 
 138:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          physical s
 139:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_PHY_SECTOR_15    (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x1C0000UL) /**<Starting 
 140:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          physical s
 141:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
 142:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #if UC_SERIES == XMC45 || UC_SERIES == XMC43 || UC_SERIES == XMC47 || UC_SERIES == XMC48
 143:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_READ_ACCESS_TIME (22E-9F) /* Flash read access time  */
 144:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #else
 145:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_READ_ACCESS_TIME (20E-9F)
 146:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #endif
 147:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
 148:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** /**************************************************************************************************
 149:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * ENUMS
 150:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  **************************************************************************************************
 151:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 152:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *  Defines the return status of the API.
 153:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 154:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** typedef enum XMC_FLASH_STATUS
 155:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** {
 156:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_OK                               = 0U,                 /**< Operation completed 
 157:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_BUSY                             = FLASH_FSR_PBUSY_Msk, /**< API cannot proceed 
 158:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_PROGRAMMING_STATE                = FLASH_FSR_PROG_Msk, /**< Write page is in pro
 159:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_ERASE_STATE                      = FLASH_FSR_ERASE_Msk, /**< Erase page is in pr
 160:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_PAGE_MODE                        = FLASH_FSR_PFPAGE_Msk, /**< Flash is in page m
 161:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                  of PFLASH is in us
 162:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_OPERATION_ERROR                  = FLASH_FSR_PFOPER_Msk, /**< Flash Operation ab
 163:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_COMMAND_SEQUENCE_ERROR           = FLASH_FSR_SQER_Msk, /**< Improper address or 
 164:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                operation */ 
 165:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_PROTECTION_ERROR                 = FLASH_FSR_PROER_Msk, /**< Flash operation add
 166:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                 sector */
 167:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_SINGLE_BIT_ERROR_AND_CORRECTION  = FLASH_FSR_PFSBER_Msk, /**< Single bit error d
 168:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                  corrected */
 169:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_DOUBLE_BIT_ERROR                 = FLASH_FSR_PFDBER_Msk, /**< Multiple bit error
 170:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_PROTECTION_INSTALLED             = FLASH_FSR_PROIN_Msk, /**< Confirmation of the
 171:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                 protection is succe
 172:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_READ_PROTECTION_INSTALLED        = FLASH_FSR_RPROIN_Msk, /**< Confirmation of re
 173:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                  protection is succ
 174:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_READ_PROTECTION_DISABLED_STATE   = FLASH_FSR_RPRODIS_Msk, /**< Read or/and write
 175:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                   temporarily disab
 176:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_WRITE_PROTECTION_INSTALLED_UCB0  = FLASH_FSR_WPROIN0_Msk, /**< Sector write prot
 177:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                   for user-0 */
 178:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_WRITE_PROTECTION_INSTALLED_UCB1  = FLASH_FSR_WPROIN1_Msk, /**< Sector write prot
 179:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                   for user-1 */
 180:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_WRITE_PROTECTION_INSTALLED_UCB2  = FLASH_FSR_WPROIN2_Msk, /**< Sector OTP protec
 181:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                   for user-2 */
 182:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_WRITE_PROTECTION_DISABLED_UCB0   = FLASH_FSR_WPRODIS0_Msk, /**< Sector write pro
 183:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                   for user-0 */
 184:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_WRITE_PROTECTION_DISABLED_UCB1   = FLASH_FSR_WPRODIS1_Msk, /**< Sector write pro
 185:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                   for user-1 */
 186:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_SLEEP_MODE                       = FLASH_FSR_SLM_Msk, /**< Indicates flash in sl
 187:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_VERIFY_ERROR                     = (int32_t)FLASH_FSR_VER_Msk, /**< Write verifi
 188:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                        verification
 189:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** } XMC_FLASH_STATUS_t;
 190:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
 191:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 192:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *  Provides the options to select flash margin read settings of the for quality assurance.
 193:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 194:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** typedef enum XMC_FLASH_MARGIN
 195:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** {
 196:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_MARGIN_DEFAULT = 0x0U << FLASH_MARP_MARGIN_Pos, /**< Default margin */ 
 197:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_MARGIN_TIGHT0  = 0x1U << FLASH_MARP_MARGIN_Pos, /**< Sub-optimal 0-bits are read as 1s 
 198:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_MARGIN_TIGHT1  = 0x4U << FLASH_MARP_MARGIN_Pos  /**< Sub-optimal 1-bits are read as 0s 
 199:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** } XMC_FLASH_MARGIN_t;
 200:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
 201:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 202:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *  Provides the options to select flash operational events
 203:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 204:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** typedef enum XMC_FLASH_EVENT
 205:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** {
 206:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_EVENT_VERIFY_AND_OPERATION_ERROR = 0x01U << FLASH_FCON_VOPERM_Pos, /**< Flash verify an
 207:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                     event */
 208:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_EVENT_COMMAND_SEQUENCE_ERROR     = 0x02U << FLASH_FCON_VOPERM_Pos, /**< Flash command s
 209:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_EVENT_PROTECTION_ERROR           = 0x04U << FLASH_FCON_VOPERM_Pos, /**< Flash protectio
 210:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_EVENT_SINGLE_BIT_ERROR           = 0x08U << FLASH_FCON_VOPERM_Pos, /**< Flash single bi
 211:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_EVENT_DOUBLE_BIT_ERROR           = 0x20U << FLASH_FCON_VOPERM_Pos, /**< Flash double bi
 212:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_EVENT_END_OF_BUSY                = (int32_t)(0x80U << FLASH_FCON_VOPERM_Pos) /**< Flash
 213:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** } XMC_FLASH_EVENT_t;
 214:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
 215:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 216:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * Provides the options to select sectors for write protection and select global read protection.
 217:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * The members can be combined using 'OR' operator for multiple selection.<br>
 218:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 219:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 220:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** typedef enum XMC_FLASH_PROTECTION
 221:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** {
 222:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTOR_0      = 0x0001UL,  /**< Sector 0 write protection */
 223:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTOR_1      = 0x0002UL,  /**< Sector 1 write protection */
 224:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTOR_2      = 0x0004UL,  /**< Sector 3 write protection */
 225:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTOR_3      = 0x0008UL,  /**< Sector 3 write protection */
 226:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTOR_4      = 0x0010UL,  /**< Sector 4 write protection */
 227:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTOR_5      = 0x0020UL,  /**< Sector 5 write protection */
 228:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTOR_6      = 0x0040UL,  /**< Sector 6 write protection */
 229:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTOR_7      = 0x0080UL,  /**< Sector 7 write protection */
 230:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTOR_8      = 0x0100UL,  /**< Sector 8 write protection */
 231:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTOR_9      = 0x0200UL,  /**< Sector 9 write protection */
 232:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTORS_10_11 = 0x0400UL,  /**< Sector 10 and 11 write protection */
 233:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTORS_12_13 = 0x0800UL,  /**< Sector 12 and 13 write protection */
 234:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTORS_14_15 = 0x1000UL,  /**< Sector 14 and 15 write protection */
 235:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_READ_GLOBAL         = 0x8000UL   /**< Global read protection (Applicable for
 236:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** } XMC_FLASH_PROTECTION_t;
 237:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
 238:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** /**************************************************************************************************
 239:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * API PROTOTYPES
 240:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  **************************************************************************************************
 241:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
 242:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #ifdef __cplusplus
 243:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** extern "C" {
 244:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** #endif
 245:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
 246:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 247:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 248:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @param None
 249:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 250:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @return None
 251:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 252:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Description:</b><br>
 253:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * Enables the wait state for error correction.process, It enables one additional wait state for EC
 254:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * bit of FCON register.\n
 255:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 256:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Related APIs:</b><BR>
 257:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * XMC_FLASH_DisableWaitStateForECC()\n\n\n
 258:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 259:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 260:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** __STATIC_INLINE void XMC_FLASH_EnableWaitStateForECC(void)
 261:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** {
 262:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   FLASH0->FCON |= FLASH_FCON_WSECPF_Msk;
 263:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** }
 264:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
 265:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 266:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 267:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @param None
 268:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 269:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @return None
 270:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 271:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Description:</b><br>
 272:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * Disables the wait state for error correction.\n\n Removes additional wait state for ECC by reset
 273:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * FCON register.\n
 274:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 275:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Related APIs:</b><BR>
 276:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * XMC_FLASH_EnableWaitStateForECC()\n\n\n
 277:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 278:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 279:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** __STATIC_INLINE void XMC_FLASH_DisableWaitStateForECC(void)
 280:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** {
 281:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   FLASH0->FCON &= (uint32_t)~FLASH_FCON_WSECPF_Msk;
 282:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** }
 283:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
 284:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 285:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 286:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @param None
 287:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 288:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @return None
 289:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 290:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Description:</b><br>
 291:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * Enables dynamic idle mode feature to save power.\n\n It switches off the PFLASH read path when n
 292:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * pending. Hence power is saved marginally. This slightly reduces the flash read performance becau
 293:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * pre-fetching is disabled.It sets the FCON register IDLE bit to enable this feature.
 294:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 295:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Related APIs:</b><BR>
 296:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * XMC_FLASH_DisableDynamicIdle()\n\n\n
 297:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 298:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 299:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** __STATIC_INLINE void XMC_FLASH_EnableDynamicIdle(void)
 300:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** {
 301:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   FLASH0->FCON |= FLASH_FCON_IDLE_Msk;
 302:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** }
 303:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
 304:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 305:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 306:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @param None
 307:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 308:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @return None
 309:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 310:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Description:</b><br>
 311:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * Disables dynamic idle mode feature.\n\n It resets the FCON register IDLE bit to disable this fea
 312:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * flash read operation is selected.
 313:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 314:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Related APIs:</b><BR>
 315:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * XMC_FLASH_EnableDynamicIdle()\n\n\n
 316:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 317:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 318:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** __STATIC_INLINE void XMC_FLASH_DisableDynamicIdle(void)
 319:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** {
 320:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   FLASH0->FCON &= (uint32_t)~FLASH_FCON_IDLE_Msk;
 321:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** }
 322:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
 323:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 324:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 325:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @param None
 326:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 327:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @return None
 328:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 329:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Description:</b><br>
 330:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * Enables sleep mode of the PFLASH.\n\n Sleep mode is enabled by setting the bit FCON.SLEEP.
 331:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 332:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Note:</b><br>
 333:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * fCPU must be equal or above 1 MHz when wake-up request is triggered.
 334:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 335:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Related APIs:</b><BR>
 336:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * XMC_FLASH_DisableSleepRequest()\n\n\n
 337:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 338:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 339:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** __STATIC_INLINE void XMC_FLASH_EnableSleepRequest(void)
 340:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** {
 341:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   FLASH0->FCON |= (uint32_t)FLASH_FCON_SLEEP_Msk;
 342:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** }
 343:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
 344:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 345:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 346:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @param None
 347:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 348:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @return None
 349:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 350:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Description:</b><br>
 351:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * Wake-up the PFLASH from sleep.\n\n Wakes-up from sleep is done by clearing the bit FCON.SLEEP, i
 352:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * bit, or wake-up is initiated by releasing the external sleep signal from SCU.
 353:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 354:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Note:</b><br>
 355:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * fCPU must be equal or above 1 MHz when wake-up request is triggered.
 356:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 357:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Related APIs:</b><BR>
 358:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * XMC_FLASH_EnableSleepRequest()\n\n\n
 359:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 360:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 361:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** __STATIC_INLINE void XMC_FLASH_DisableSleepRequest(void)
 362:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** {
 363:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   FLASH0->FCON &= (uint32_t)~FLASH_FCON_SLEEP_Msk;
 364:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** }
 365:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
 366:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 367:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 368:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @param margin PFLASH margin selection. Use type @ref XMC_FLASH_MARGIN_t.
 369:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 370:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @return None
 371:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 372:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Description:</b><br>
 373:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * Sets the read margin levels for checking the healthiness of flash data.\n\n Configures the margi
 374:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * MARP register with the specified \a margin level. It changes the margin levels for read operatio
 375:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * problematic array bits.
 376:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 377:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Related APIs:</b><BR>
 378:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * None
 379:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 380:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** __STATIC_INLINE void XMC_FLASH_SetMargin(const XMC_FLASH_MARGIN_t margin)
 381:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** {
  27              	 .loc 1 381 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 0346     	 mov r3,r0
  43 0008 FB71     	 strb r3,[r7,#7]
 382:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   FLASH0->MARP = (FLASH0->MARP & (uint32_t)~FLASH_MARP_MARGIN_Msk) | margin;
  44              	 .loc 1 382 0
  45 000a 0949     	 ldr r1,.L2
  46 000c 084B     	 ldr r3,.L2
  47 000e 03F58053 	 add r3,r3,#4096
  48 0012 1833     	 adds r3,r3,#24
  49 0014 1B68     	 ldr r3,[r3]
  50 0016 23F00F02 	 bic r2,r3,#15
  51 001a FB79     	 ldrb r3,[r7,#7]
  52 001c 1A43     	 orrs r2,r2,r3
  53 001e 01F58053 	 add r3,r1,#4096
  54 0022 1833     	 adds r3,r3,#24
  55 0024 1A60     	 str r2,[r3]
 383:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** }
  56              	 .loc 1 383 0
  57 0026 0C37     	 adds r7,r7,#12
  58              	.LCFI3:
  59              	 .cfi_def_cfa_offset 4
  60 0028 BD46     	 mov sp,r7
  61              	.LCFI4:
  62              	 .cfi_def_cfa_register 13
  63              	 
  64 002a 5DF8047B 	 ldr r7,[sp],#4
  65              	.LCFI5:
  66              	 .cfi_restore 7
  67              	 .cfi_def_cfa_offset 0
  68 002e 7047     	 bx lr
  69              	.L3:
  70              	 .align 2
  71              	.L2:
  72 0030 00100058 	 .word 1476399104
  73              	 .cfi_endproc
  74              	.LFE134:
  76              	 .section .text.XMC_FLASH_EnableDoubleBitErrorTrap,"ax",%progbits
  77              	 .align 2
  78              	 .thumb
  79              	 .thumb_func
  81              	XMC_FLASH_EnableDoubleBitErrorTrap:
  82              	.LFB135:
 384:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
 385:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 386:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 387:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @param None
 388:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 389:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @return None
 390:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 391:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Description:</b><br>
 392:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * Enables double bit error trap.\n\n. It enables by setting MARP register bit TRAPDIS.
 393:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 394:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Related APIs:</b><BR>
 395:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * None
 396:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 397:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** __STATIC_INLINE void XMC_FLASH_EnableDoubleBitErrorTrap(void)
 398:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** {
  83              	 .loc 1 398 0
  84              	 .cfi_startproc
  85              	 
  86              	 
  87              	 
  88 0000 80B4     	 push {r7}
  89              	.LCFI6:
  90              	 .cfi_def_cfa_offset 4
  91              	 .cfi_offset 7,-4
  92 0002 00AF     	 add r7,sp,#0
  93              	.LCFI7:
  94              	 .cfi_def_cfa_register 7
 399:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   FLASH0->MARP &= (uint32_t)~FLASH_MARP_TRAPDIS_Msk;
  95              	 .loc 1 399 0
  96 0004 0749     	 ldr r1,.L5
  97 0006 074B     	 ldr r3,.L5
  98 0008 03F58053 	 add r3,r3,#4096
  99 000c 1833     	 adds r3,r3,#24
 100 000e 1B68     	 ldr r3,[r3]
 101 0010 23F40042 	 bic r2,r3,#32768
 102 0014 01F58053 	 add r3,r1,#4096
 103 0018 1833     	 adds r3,r3,#24
 104 001a 1A60     	 str r2,[r3]
 400:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** }
 105              	 .loc 1 400 0
 106 001c BD46     	 mov sp,r7
 107              	.LCFI8:
 108              	 .cfi_def_cfa_register 13
 109              	 
 110 001e 5DF8047B 	 ldr r7,[sp],#4
 111              	.LCFI9:
 112              	 .cfi_restore 7
 113              	 .cfi_def_cfa_offset 0
 114 0022 7047     	 bx lr
 115              	.L6:
 116              	 .align 2
 117              	.L5:
 118 0024 00100058 	 .word 1476399104
 119              	 .cfi_endproc
 120              	.LFE135:
 122              	 .section .text.XMC_FLASH_DisableDoubleBitErrorTrap,"ax",%progbits
 123              	 .align 2
 124              	 .thumb
 125              	 .thumb_func
 127              	XMC_FLASH_DisableDoubleBitErrorTrap:
 128              	.LFB136:
 401:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** 
 402:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 403:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 404:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @param None
 405:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 406:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * @return None
 407:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 408:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Description:</b><br>
 409:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * Disables the trap generation for double bit error by clearing MARP register bit TRAPDIS.\n\n The
 410:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * trap can be disabled for margin checks and also redirected to an error interrupt. Any time durin
 411:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * double bit error trap can be enabled back by calling XMC_FLASH_EnableDoubleBitErrorTrap() API.
 412:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 413:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Related APIs:</b><BR>
 414:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  * None
 415:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 416:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** __STATIC_INLINE void XMC_FLASH_DisableDoubleBitErrorTrap(void)
 417:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** {
 129              	 .loc 1 417 0
 130              	 .cfi_startproc
 131              	 
 132              	 
 133              	 
 134 0000 80B4     	 push {r7}
 135              	.LCFI10:
 136              	 .cfi_def_cfa_offset 4
 137              	 .cfi_offset 7,-4
 138 0002 00AF     	 add r7,sp,#0
 139              	.LCFI11:
 140              	 .cfi_def_cfa_register 7
 418:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h ****   FLASH0->MARP |= FLASH_MARP_TRAPDIS_Msk;
 141              	 .loc 1 418 0
 142 0004 0749     	 ldr r1,.L8
 143 0006 074B     	 ldr r3,.L8
 144 0008 03F58053 	 add r3,r3,#4096
 145 000c 1833     	 adds r3,r3,#24
 146 000e 1B68     	 ldr r3,[r3]
 147 0010 43F40042 	 orr r2,r3,#32768
 148 0014 01F58053 	 add r3,r1,#4096
 149 0018 1833     	 adds r3,r3,#24
 150 001a 1A60     	 str r2,[r3]
 419:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_flash.h **** }
 151              	 .loc 1 419 0
 152 001c BD46     	 mov sp,r7
 153              	.LCFI12:
 154              	 .cfi_def_cfa_register 13
 155              	 
 156 001e 5DF8047B 	 ldr r7,[sp],#4
 157              	.LCFI13:
 158              	 .cfi_restore 7
 159              	 .cfi_def_cfa_offset 0
 160 0022 7047     	 bx lr
 161              	.L9:
 162              	 .align 2
 163              	.L8:
 164 0024 00100058 	 .word 1476399104
 165              	 .cfi_endproc
 166              	.LFE136:
 168              	 .section .text.XMC_FCE_InitializeSeedValue,"ax",%progbits
 169              	 .align 2
 170              	 .thumb
 171              	 .thumb_func
 173              	XMC_FCE_InitializeSeedValue:
 174              	.LFB146:
 175              	 .file 2 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc/xmc_fce.h"
   1:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**
   2:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @file xmc_fce.h
   3:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @date 2015-06-20
   4:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *
   5:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @cond
   6:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** ***************************************************************************************************
   7:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *
   9:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * All rights reserved.                        
  11:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *                                             
  12:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * following conditions are met:   
  14:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *                                                                              
  15:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * disclaimer.                        
  17:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * 
  18:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * 
  21:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * products derived from this software without specific prior written permission.                  
  23:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *                                                                              
  24:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *                                                                              
  32:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  **************************************************************************************************
  35:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *
  36:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * Change History
  37:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * --------------
  38:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *
  39:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * 2015-02-20:
  40:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *     - Initial
  41:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *      
  42:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * 2015-05-20:
  43:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *     - Description updated <br>
  44:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *   
  45:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * 2015-06-20:
  46:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  47:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @endcond 
  48:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *
  49:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  */
  50:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
  51:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #ifndef XMC_FCE_H
  52:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_H
  53:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
  54:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**************************************************************************************************
  55:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * HEADER FILES
  56:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  **************************************************************************************************
  57:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  
  58:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #include <xmc_common.h>
  59:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
  60:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #if defined (FCE)
  61:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
  62:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**
  63:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @addtogroup XMClib
  64:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @{
  65:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  */
  66:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
  67:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**
  68:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @addtogroup FCE
  69:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @brief Flexible CRC Engine(FCE) driver for the XMC microcontroller family.
  70:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *
  71:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * The FCE provides a parallel implementation of Cyclic Redundancy Code (CRC)
  72:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * algorithms. The current FCE version for the XMC4000 microcontroller family implements the
  73:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * IEEE 802.3 ethernet CRC32, the CCITT CRC16 and the SAE J1850 CRC8 polynomials.
  74:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * The primary target of FCE is to be used as an hardware acceleration engine for software
  75:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * applications or operating systems services using CRC signatures.
  76:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *
  77:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @image html fce_overview.png	 
  78:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @image latex ../images/fce_overview.png	 
  79:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * FCE Features: <br>
  80:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @image html fce_polynomials.png
  81:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @image latex ../images/fce_polynomials.png
  82:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *    * CRC kernel 0 and 1: IEEE 802.3 CRC32 ethernet polynomial: 0x04C11DB71 <br>
  83:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *    * CRC kernel 2: CCITT CRC16 polynomial: 0x1021 <br>
  84:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *    * CRC kernel 3: SAE J1850 CRC8 polynomial: 0x1D <br>
  85:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *    * Configuration Registers enable to control the CRC operation and perform automatic checksum 
  86:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *      the end of a message. <br>
  87:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *    * Extended register interface to control reliability of FCE execution in safety applications.
  88:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *    * Error notification scheme via dedicated interrupt node for: <br>
  89:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****         a)Transient error detection: Error interrupt generation (maskable) with local status regist
  90:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 		  (cleared by software) <br>
  91:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****         b)Checksum failure: Error interrupt generation (maskable) with local status register (clear
  92:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 		
  93:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****      FCE provides one interrupt line to the interrupt system. Each CRC engine has its own set of fl
  94:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
  95:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @{
  96:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  */
  97:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  
  98:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**************************************************************************************************
  99:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * MACROS
 100:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  **************************************************************************************************
 101:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  
 102:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_CRC32_0        FCE_KE0 /**< Kernel 0 <br> */
 103:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_CRC32_1        FCE_KE1 /**< Kernel 1 <br> */
 104:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_CRC16          FCE_KE2 /**< Kernel 2 <br> */
 105:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_CRC8           FCE_KE3 /**< Kernel 3 <br> */
 106:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
 107:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_REFIN_SET      (1U) /**< Enables input reflection */
 108:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_REFIN_RESET    (0U) /**< Disables input reflection */
 109:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_REFOUT_SET     (1U) /**< Enables output reflection */
 110:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_REFOUT_RESET   (0U) /**< Disables output reflection */
 111:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_INVSEL_SET     (1U) /**< Enables output inversion */
 112:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_INVSEL_RESET   (0U) /**< Disables output inversion */
 113:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
 114:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**************************************************************************************************
 115:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * ENUMS
 116:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  **************************************************************************************************
 117:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  
 118:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**
 119:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * FCE interrupt configuration
 120:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  */
 121:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** typedef enum XMC_FCE_CONFIG_INTERRUPT
 122:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** {
 123:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CFG_CONFIG_CMI = FCE_KE_CFG_CMI_Msk, /**< Enables CRC Mismatch interrupt \n*/
 124:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CFG_CONFIG_CEI = FCE_KE_CFG_CEI_Msk, /**< Enables Configuration error interrupt \n*/
 125:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CFG_CONFIG_LEI = FCE_KE_CFG_LEI_Msk, /**< Enables Length error interrupt \n*/
 126:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CFG_CONFIG_BEI = FCE_KE_CFG_BEI_Msk  /**< Enables Bus error interrupt \n*/
 127:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** } XMC_FCE_CONFIG_INTERRUPT_t;
 128:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
 129:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**
 130:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * FCE operation configuration
 131:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  */
 132:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** typedef enum XMC_FCE_CONFIG_OPERATION
 133:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** {
 134:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CFG_CONFIG_CCE = FCE_KE_CFG_CCE_Msk, /**< Enables CRC check */
 135:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CFG_CONFIG_ALR = FCE_KE_CFG_ALR_Msk  /**< Enables Automatic length reload */
 136:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** } XMC_FCE_CONFIG_OPERATION_t;
 137:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
 138:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**
 139:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * FCE algorithm configuration
 140:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  */
 141:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** typedef enum XMC_FCE_CONFIG_ALGO
 142:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** {
 143:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CFG_CONFIG_REFIN  = FCE_KE_CFG_REFIN_Msk,  /**< Enables input byte reflection */
 144:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CFG_CONFIG_REFOUT = FCE_KE_CFG_REFOUT_Msk, /**< Enables Final CRC reflection */
 145:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CFG_CONFIG_XSEL   = FCE_KE_CFG_XSEL_Msk    /**< Enables output inversion */
 146:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** } XMC_FCE_CONFIG_ALGO_t;
 147:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
 148:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**
 149:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * FCE status flag configuration
 150:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  */
 151:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** typedef enum XMC_FCE_STS_FLAG
 152:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** {
 153:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_STS_MISMATCH_CRC = FCE_KE_STS_CMF_Msk, /**< CRC Mismatch flag */
 154:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_STS_CONFIG_ERROR = FCE_KE_STS_CEF_Msk, /**< Configuration Error flag */
 155:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_STS_LENGTH_ERROR = FCE_KE_STS_LEF_Msk, /**< Length Error flag */
 156:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_STS_BUS_ERROR    = FCE_KE_STS_BEF_Msk	 /**< Bus Error flag */
 157:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** } XMC_FCE_STS_FLAG_t;
 158:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
 159:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**
 160:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * FCE control configuration
 161:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  */
 162:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** typedef enum XMC_FCE_CTR_TEST
 163:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** {
 164:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CTR_MISMATCH_CRC   = FCE_KE_CTR_FCM_Msk,      /**< Forces CRC mismatch */
 165:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CTR_MISMATCH_CFG   = FCE_KE_CTR_FRM_CFG_Msk,	/**< Forces CFG Register mismatch */
 166:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CTR_MISMATCH_CHECK = FCE_KE_CTR_FRM_CHECK_Msk /**< Forces CRC Check Register mismatch */
 167:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** } XMC_FCE_CTR_TEST_t;
 168:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
 169:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**
 170:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * FCE status enumeration
 171:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  */
 172:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** typedef enum XMC_FCE_STATUS
 173:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** {
 174:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_STATUS_OK = 0, /**< Returns OK on success */
 175:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_STATUS_BUSY,   /**< Returns BUSY when API is busy with a previous request */
 176:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_STATUS_ERROR   /**< Returns ERROR when API cannot fulfil request */
 177:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** } XMC_FCE_STATUS_t;
 178:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
 179:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**************************************************************************************************
 180:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * DATA STRUCTURES
 181:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  **************************************************************************************************
 182:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
 183:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**
 184:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * FCE kernel
 185:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  */ 
 186:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** typedef FCE_KE_TypeDef XMC_FCE_Kernel_t;
 187:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
 188:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /* Anonymous structure/union guard start */
 189:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #if defined (__CC_ARM)
 190:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   #pragma push
 191:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   #pragma anon_unions
 192:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #elif defined (__TASKING__)
 193:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   #pragma warning 586
 194:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #endif
 195:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
 196:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**
 197:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @brief XMC_FCE configuration structure
 198:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  */
 199:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** typedef struct XMC_FCE_CONFIG
 200:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** {
 201:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   union
 202:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   {
 203:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****     uint32_t regval;
 204:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****     struct
 205:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****     {
 206:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 	  uint32_t               : 8;
 207:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****       uint32_t config_refin  : 1;  /**< Enables byte-wise reflection */
 208:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****       uint32_t config_refout : 1;  /**< Enables bit-wise reflection */
 209:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****       uint32_t config_xsel   : 1;  /**< Enables output inversion */
 210:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****       uint32_t               : 21; /**< Reserved bits */	  
 211:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****     };
 212:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   };
 213:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** } XMC_FCE_CONFIG_t;
 214:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
 215:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /* Anonymous structure/union guard end */
 216:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #if defined (__CC_ARM)
 217:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   #pragma pop
 218:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #elif defined (__TASKING__)
 219:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   #pragma warning restore
 220:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #endif
 221:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
 222:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**
 223:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * FCE handler
 224:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  */
 225:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** typedef struct XMC_FCE
 226:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** {
 227:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_Kernel_t *kernel_ptr;    /**< FCE Kernel Pointer */
 228:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CONFIG_t fce_cfg_update; /**< FCE CFG register update */
 229:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   uint32_t seedvalue;              /**< CRC seed value to be used */
 230:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** } XMC_FCE_t;
 231:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
 232:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**************************************************************************************************
 233:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * API PROTOTYPES
 234:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  **************************************************************************************************
 235:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  
 236:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #ifdef __cplusplus
 237:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** extern "C" {
 238:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** #endif
 239:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  
 240:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**
 241:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @param None
 242:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @return uint32_t Module revision number
 243:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *
 244:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * \par<b>Description: </b><br>
 245:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * Read FCE module revision number <br>
 246:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * 
 247:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * \par
 248:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * The value of a module revision starts with 0x01 (first revision). The current revision
 249:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * number is 0x01.
 250:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  */
 251:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** __STATIC_INLINE uint32_t XMC_FCE_ReadModuleRev(void)
 252:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** {
 253:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   return (uint32_t)(FCE->ID & FCE_ID_MOD_REV_Msk);
 254:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** }
 255:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
 256:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**
 257:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @param None
 258:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @return uint32_t Module type
 259:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *
 260:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * \par<b>Description: </b><br>
 261:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * Read the FCE module type <br>
 262:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * 
 263:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * \par
 264:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * The return value is currently 0xC0. It defines the module as a 32-bit module.
 265:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  */
 266:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** __STATIC_INLINE uint32_t XMC_FCE_ReadModuleType(void)
 267:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** {
 268:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   return (uint32_t)((FCE->ID & FCE_ID_MOD_TYPE_Msk) >> FCE_ID_MOD_TYPE_Pos);
 269:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** }
 270:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
 271:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**
 272:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @param None
 273:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @return uint32_t Module number
 274:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *
 275:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * \par<b>Description: </b><br>
 276:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * Read FCE module number <br>
 277:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * 
 278:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * \par
 279:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * The return value for FCE module is currently 0x00CA.
 280:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  */
 281:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** __STATIC_INLINE uint32_t XMC_FCE_ReadModuleNumber(void)
 282:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** {
 283:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   return ((uint32_t)((FCE->ID & FCE_ID_MOD_NUMBER_Msk) >> FCE_ID_MOD_NUMBER_Pos));
 284:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** }
 285:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
 286:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**
 287:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @param None
 288:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @return bool Disable status
 289:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *
 290:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *
 291:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * \par<b>Description: </b><br>
 292:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * Return the disable status <br>
 293:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *
 294:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * \par
 295:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * The function reads the FCE module disable status (DISS) bit. It returns "true" if
 296:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * set, "false" otherwise.
 297:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  */
 298:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** __STATIC_INLINE bool XMC_FCE_Get_DisableStatus(void)
 299:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** {
 300:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   return (bool)(FCE->CLC &= (uint32_t)~FCE_CLC_DISS_Msk);
 301:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** }
 302:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
 303:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**
 304:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @param None
 305:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @return None
 306:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *
 307:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * \par<b>Description: </b><br>
 308:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * Disable the FCE module <br>
 309:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * 
 310:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * \par
 311:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * The function asserts the FCE peripheral reset and sets the DISR bit in the CLC
 312:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * register.
 313:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *
 314:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * \par<b>Note: </b><br>
 315:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * All pending transactions running on the bus slave interface must be completed before
 316:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * entering the disabled state.
 317:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  */
 318:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** void XMC_FCE_Disable(void);
 319:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
 320:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**
 321:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @param None
 322:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @return None
 323:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *
 324:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * \par<b>Description: </b><br>
 325:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * Enable the FCE module <br>
 326:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *
 327:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * \par
 328:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * The function de-asserts the peripheral reset and clears the DISR bit CLC register.
 329:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  */
 330:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** void XMC_FCE_Enable(void);
 331:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
 332:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**
 333:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @param engine Constant pointer to ::XMC_FCE_t, pointing to the FCE base address
 334:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @return ::XMC_FCE_STATUS_t
 335:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *
 336:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * \par<b>Description: </b><br>
 337:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * Initialize the FCE engine <br>
 338:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * 
 339:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * \par
 340:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * The function sets to the CFG and CRC registers with the FCE configuration and
 341:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * seeds values. The function always returns XMC_FCE_STATUS_SUCCESS.
 342:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *
 343:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * \par<b>Note: </b><br>
 344:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * The software must first ensure that the CRC kernel is properly configured with the
 345:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * initial CRC value (seed value).
 346:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  */
 347:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** XMC_FCE_STATUS_t XMC_FCE_Init(const XMC_FCE_t *const engine);
 348:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** 
 349:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** /**
 350:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @param engine Constant pointer to ::XMC_FCE_t, pointing to the FCE base address
 351:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @param seedvalue Initial CRC value
 352:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * @return None
 353:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *
 354:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * \par<b>Description: </b><br>
 355:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * Initialize FCE seed value
 356:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  *
 357:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * \par
 358:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  * The function sets the initial CRC (seed) value in the CRC register.
 359:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****  */
 360:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** __STATIC_INLINE void XMC_FCE_InitializeSeedValue(const XMC_FCE_t *const engine, uint32_t seedvalue)
 361:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** {
 176              	 .loc 2 361 0
 177              	 .cfi_startproc
 178              	 
 179              	 
 180              	 
 181 0000 80B4     	 push {r7}
 182              	.LCFI14:
 183              	 .cfi_def_cfa_offset 4
 184              	 .cfi_offset 7,-4
 185 0002 83B0     	 sub sp,sp,#12
 186              	.LCFI15:
 187              	 .cfi_def_cfa_offset 16
 188 0004 00AF     	 add r7,sp,#0
 189              	.LCFI16:
 190              	 .cfi_def_cfa_register 7
 191 0006 7860     	 str r0,[r7,#4]
 192 0008 3960     	 str r1,[r7]
 362:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h ****   engine->kernel_ptr->CRC = seedvalue;
 193              	 .loc 2 362 0
 194 000a 7B68     	 ldr r3,[r7,#4]
 195 000c 1B68     	 ldr r3,[r3]
 196 000e 3A68     	 ldr r2,[r7]
 197 0010 9A61     	 str r2,[r3,#24]
 363:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_fce.h **** }
 198              	 .loc 2 363 0
 199 0012 0C37     	 adds r7,r7,#12
 200              	.LCFI17:
 201              	 .cfi_def_cfa_offset 4
 202 0014 BD46     	 mov sp,r7
 203              	.LCFI18:
 204              	 .cfi_def_cfa_register 13
 205              	 
 206 0016 5DF8047B 	 ldr r7,[sp],#4
 207              	.LCFI19:
 208              	 .cfi_restore 7
 209              	 .cfi_def_cfa_offset 0
 210 001a 7047     	 bx lr
 211              	 .cfi_endproc
 212              	.LFE146:
 214              	 .section .bss.e_eeprom_xmc4_data_buffer,"aw",%nobits
 215              	 .align 2
 218              	e_eeprom_xmc4_data_buffer:
 219 0000 00000000 	 .space 4096
 219      00000000 
 219      00000000 
 219      00000000 
 219      00000000 
 220              	 .section .data.e_eeprom_xmc4_sector_info,"aw",%progbits
 221              	 .align 2
 224              	e_eeprom_xmc4_sector_info:
 225 0000 00000000 	 .word 0
 226 0004 00000000 	 .word 0
 227 0008 FFFFFFFF 	 .word -1
 228 000c 00000000 	 .word 0
 229              	 .section .rodata.e_eeprom_xmc4_fce,"a",%progbits
 230              	 .align 2
 233              	e_eeprom_xmc4_fce:
 234 0000 20000250 	 .word 1342308384
 235 0004 00       	 .space 1
 236 0005 07       	 .byte 7
 237 0006 0000     	 .space 2
 238 0008 00000000 	 .word 0
 239              	 .section .text.E_EEPROM_XMC4_GetAppVersion,"ax",%progbits
 240              	 .align 2
 241              	 .global E_EEPROM_XMC4_GetAppVersion
 242              	 .thumb
 243              	 .thumb_func
 245              	E_EEPROM_XMC4_GetAppVersion:
 246              	.LFB158:
 247              	 .file 3 "../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c"
   1:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /**
   2:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * @file e_eeprom_xmc4.c
   3:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * @date 2016-02-05
   4:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
   5:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * NOTE:
   6:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
   8:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * @cond
   9:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  **************************************************************************************************
  10:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * E_EEPROM_XMC4 v4.0.6 - The E_EEPROM_XMC4 APP is used to Emulates a portion of program flash as E
  11:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *                        data storage.
  12:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  13:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * Copyright (c) 2016, Infineon Technologies AG
  14:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * All rights reserved.
  15:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  16:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * following conditions are met:
  18:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  19:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *   disclaimer.
  21:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  22:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  25:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *   products derived from this software without specific prior written permission.
  27:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  28:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  36:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * with Infineon Technologies AG (dave@infineon.com).
  38:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  **************************************************************************************************
  39:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  40:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * Change History
  41:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * --------------
  42:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  43:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * 2016-01-20
  44:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *     - Initial version
  45:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  46:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  47:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  48:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  */
  49:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
  50:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /**************************************************************************************************
  51:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * HEADER FILES
  52:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  **************************************************************************************************
  53:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #include "e_eeprom_xmc4.h"
  54:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
  55:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /**************************************************************************************************
  56:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * MACROS
  57:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  **************************************************************************************************
  58:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
  59:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* EEPROM SECTOR numbers definitions */
  60:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR_0    ((uint32_t)0U)
  61:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR_1    ((uint32_t)1U)
  62:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR_2    ((uint32_t)2U)
  63:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR_3    ((uint32_t)3U)
  64:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_MAX_SECTORS ((uint32_t)4U)
  65:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
  66:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Offset positions for CRC and user DATA definitions*/
  67:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_BCC_OFFSET  ((uint8_t)1U)
  68:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_DATA_OFFSET ((uint8_t)2U)
  69:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
  70:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* All four logical sector starting addresses defined */
  71:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR0_START_ADDR   (XMC_FLASH_UNCACHED_BASE + 0x10000U)
  72:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR1_START_ADDR   (XMC_FLASH_UNCACHED_BASE + 0x14000U)
  73:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR2_START_ADDR   (XMC_FLASH_UNCACHED_BASE + 0x18000U)
  74:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR3_START_ADDR   (XMC_FLASH_UNCACHED_BASE + 0x1C000U)
  75:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR4_START_ADDR   (XMC_FLASH_UNCACHED_BASE + 0x20000U)
  76:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
  77:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Local definitions for internal usage*/
  78:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_EMPTY                   ((uint32_t)0x0U)
  79:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_ALL_SECTORS_FILLED      ((uint8_t)0x0FU)
  80:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_MIN_WORDS_PER_PAGE      ((uint32_t)64U)
  81:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR_SIZE             ((uint32_t)0x00004000U)
  82:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR_POSITION_MASK    ((uint32_t)0x0000C000U)
  83:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR_POSITION         ((uint32_t)14U)
  84:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_WORKING_BUFFER_SIZE     ((uint32_t)E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE - (u
  85:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_DATA_SIZE_FOR_CRC       ((uint32_t)E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE - (u
  86:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_MAX_PAGES               ((uint32_t)E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE >> (
  87:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_MAX_WORDS               ((uint32_t)E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE >> (
  88:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
  89:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
  90:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /**************************************************************************************************
  91:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * Data structure Configurations
  92:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  **************************************************************************************************
  93:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
  94:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /** Data structure to hold the complete state data information of sector*/
  95:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** typedef struct E_EEPROM_XMC4_SECTOR_INFO
  96:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
  97:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t next_free_start_addr;
  98:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
  99:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t flash_data_addr;
 100:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 101:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t  current_sector;
 102:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 103:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t  erase_state;
 104:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 105:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** } E_EEPROM_XMC4_SECTOR_INFO_t;
 106:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 107:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Data structure to hold the User Data block information (BCC + CRC + DATA)*/
 108:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** typedef struct E_EEPROM_XMC4_RAM_BUFFER
 109:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 110:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t crc;
 111:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 112:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t block_cycle_count;
 113:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 114:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint8_t  eeprom_data[E_EEPROM_XMC4_WORKING_BUFFER_SIZE];
 115:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 116:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** } E_EEPROM_XMC4_RAM_BUFFER_t;
 117:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 118:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* RAM data buffer structure definition */
 119:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static E_EEPROM_XMC4_RAM_BUFFER_t e_eeprom_xmc4_data_buffer;
 120:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 121:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Sector info data structure definition */
 122:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static E_EEPROM_XMC4_SECTOR_INFO_t  e_eeprom_xmc4_sector_info  =
 123:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 124:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   .next_free_start_addr = 0U,
 125:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   .flash_data_addr      = 0U,
 126:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   .current_sector       = 0xFFFFFFFFU,
 127:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   .erase_state          = 0U
 128:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** };
 129:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 130:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* FCE configuration data structure definition */
 131:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static const XMC_FCE_t e_eeprom_xmc4_fce =
 132:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 133:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  .kernel_ptr     = (XMC_FCE_Kernel_t*)(void*)E_EEPROM_XMC4_FCE_KERNEL_BASE,
 134:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  .fce_cfg_update = {{
 135:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                      .config_refin  = 1U,
 136:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                      .config_refout = 1U,
 137:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                      .config_xsel   = 1U
 138:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                    }},
 139:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  .seedvalue      = 0U
 140:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** };
 141:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 142:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /**************************************************************************************************
 143:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * Local Function Prototypes
 144:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  **************************************************************************************************
 145:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_lWriteToFlash(void);
 146:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 147:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static void E_EEPROM_XMC4_lCopyFlashToRam(void);
 148:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 149:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static void E_EEPROM_XMC4_lInitReadSectorInfo(uint32_t sector);
 150:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 151:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_lInitEraseStateMachine(void);
 152:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 153:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static uint32_t E_EEPROM_XMC4_lCalculateCRC(const uint32_t *data_start_addr);
 154:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 155:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /**************************************************************************************************
 156:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * API IMPLEMENTATION
 157:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  **************************************************************************************************
 158:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 159:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** DAVE_APP_VERSION_t E_EEPROM_XMC4_GetAppVersion(void)
 160:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 248              	 .loc 3 160 0
 249              	 .cfi_startproc
 250              	 
 251              	 
 252              	 
 253 0000 80B4     	 push {r7}
 254              	.LCFI20:
 255              	 .cfi_def_cfa_offset 4
 256              	 .cfi_offset 7,-4
 257 0002 83B0     	 sub sp,sp,#12
 258              	.LCFI21:
 259              	 .cfi_def_cfa_offset 16
 260 0004 00AF     	 add r7,sp,#0
 261              	.LCFI22:
 262              	 .cfi_def_cfa_register 7
 161:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   DAVE_APP_VERSION_t version;
 162:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 163:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   version.major = (uint8_t)E_EEPROM_XMC4_MAJOR_VERSION;
 263              	 .loc 3 163 0
 264 0006 0423     	 movs r3,#4
 265 0008 3B70     	 strb r3,[r7]
 164:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   version.minor = (uint8_t)E_EEPROM_XMC4_MINOR_VERSION;
 266              	 .loc 3 164 0
 267 000a 0023     	 movs r3,#0
 268 000c 7B70     	 strb r3,[r7,#1]
 165:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   version.patch = (uint8_t)E_EEPROM_XMC4_PATCH_VERSION;
 269              	 .loc 3 165 0
 270 000e 0623     	 movs r3,#6
 271 0010 BB70     	 strb r3,[r7,#2]
 166:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 167:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   return (version);
 272              	 .loc 3 167 0
 273 0012 3B1D     	 adds r3,r7,#4
 274 0014 3A46     	 mov r2,r7
 275 0016 1268     	 ldr r2,[r2]
 276 0018 1146     	 mov r1,r2
 277 001a 1980     	 strh r1,[r3]
 278 001c 0233     	 adds r3,r3,#2
 279 001e 120C     	 lsrs r2,r2,#16
 280 0020 1A70     	 strb r2,[r3]
 281 0022 0023     	 movs r3,#0
 282 0024 3A79     	 ldrb r2,[r7,#4]
 283 0026 62F30703 	 bfi r3,r2,#0,#8
 284 002a 7A79     	 ldrb r2,[r7,#5]
 285 002c 62F30F23 	 bfi r3,r2,#8,#8
 286 0030 BA79     	 ldrb r2,[r7,#6]
 287 0032 62F31743 	 bfi r3,r2,#16,#8
 168:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 288              	 .loc 3 168 0
 289 0036 1846     	 mov r0,r3
 290 0038 0C37     	 adds r7,r7,#12
 291              	.LCFI23:
 292              	 .cfi_def_cfa_offset 4
 293 003a BD46     	 mov sp,r7
 294              	.LCFI24:
 295              	 .cfi_def_cfa_register 13
 296              	 
 297 003c 5DF8047B 	 ldr r7,[sp],#4
 298              	.LCFI25:
 299              	 .cfi_restore 7
 300              	 .cfi_def_cfa_offset 0
 301 0040 7047     	 bx lr
 302              	 .cfi_endproc
 303              	.LFE158:
 305 0042 00BF     	 .section .text.E_EEPROM_XMC4_Init,"ax",%progbits
 306              	 .align 2
 307              	 .global E_EEPROM_XMC4_Init
 308              	 .thumb
 309              	 .thumb_func
 311              	E_EEPROM_XMC4_Init:
 312              	.LFB159:
 169:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 170:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_Init(E_EEPROM_XMC4_t *const handle)
 171:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 313              	 .loc 3 171 0
 314              	 .cfi_startproc
 315              	 
 316              	 
 317 0000 80B5     	 push {r7,lr}
 318              	.LCFI26:
 319              	 .cfi_def_cfa_offset 8
 320              	 .cfi_offset 7,-8
 321              	 .cfi_offset 14,-4
 322 0002 84B0     	 sub sp,sp,#16
 323              	.LCFI27:
 324              	 .cfi_def_cfa_offset 24
 325 0004 00AF     	 add r7,sp,#0
 326              	.LCFI28:
 327              	 .cfi_def_cfa_register 7
 328 0006 7860     	 str r0,[r7,#4]
 172:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t sector_count;
 173:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   E_EEPROM_XMC4_STATUS_t status ;
 174:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 175:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   XMC_ASSERT("E_EEPROM_XMC4_Init:Invalid handle Pointer", (handle != NULL))
 176:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 177:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   status = E_EEPROM_XMC4_STATUS_OK;
 329              	 .loc 3 177 0
 330 0008 0023     	 movs r3,#0
 331 000a FB72     	 strb r3,[r7,#11]
 178:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 179:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   if (handle->initialized == (bool)false)
 332              	 .loc 3 179 0
 333 000c 7B68     	 ldr r3,[r7,#4]
 334 000e 1B78     	 ldrb r3,[r3]
 335 0010 83F00103 	 eor r3,r3,#1
 336 0014 DBB2     	 uxtb r3,r3
 337 0016 002B     	 cmp r3,#0
 338 0018 4CD0     	 beq .L14
 180:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 181:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     e_eeprom_xmc4_data_buffer.block_cycle_count = 0U;
 339              	 .loc 3 181 0
 340 001a 294B     	 ldr r3,.L21
 341 001c 0022     	 movs r2,#0
 342 001e 5A60     	 str r2,[r3,#4]
 182:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     e_eeprom_xmc4_sector_info.flash_data_addr = E_EEPROM_XMC4_EMPTY;
 343              	 .loc 3 182 0
 344 0020 284B     	 ldr r3,.L21+4
 345 0022 0022     	 movs r2,#0
 346 0024 5A60     	 str r2,[r3,#4]
 183:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 184:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     XMC_FLASH_SetMargin(XMC_FLASH_MARGIN_TIGHT0);
 347              	 .loc 3 184 0
 348 0026 0120     	 movs r0,#1
 349 0028 FFF7FEFF 	 bl XMC_FLASH_SetMargin
 185:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     XMC_FLASH_DisableDoubleBitErrorTrap();
 350              	 .loc 3 185 0
 351 002c FFF7FEFF 	 bl XMC_FLASH_DisableDoubleBitErrorTrap
 186:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 187:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     XMC_FCE_Enable();
 352              	 .loc 3 187 0
 353 0030 FFF7FEFF 	 bl XMC_FCE_Enable
 188:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 189:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Initialize FCE module for Hardware calculations */
 190:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     (void)XMC_FCE_Init(&e_eeprom_xmc4_fce);
 354              	 .loc 3 190 0
 355 0034 2448     	 ldr r0,.L21+8
 356 0036 FFF7FEFF 	 bl XMC_FCE_Init
 191:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 192:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Iterate all 4 sectors to find out which is the active sector having the latest data block*/
 193:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     for (sector_count = 0U; sector_count < E_EEPROM_XMC4_MAX_SECTORS ; sector_count++)
 357              	 .loc 3 193 0
 358 003a 0023     	 movs r3,#0
 359 003c FB60     	 str r3,[r7,#12]
 360 003e 05E0     	 b .L15
 361              	.L16:
 194:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     {
 195:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       E_EEPROM_XMC4_lInitReadSectorInfo(sector_count);
 362              	 .loc 3 195 0 discriminator 3
 363 0040 F868     	 ldr r0,[r7,#12]
 364 0042 FFF7FEFF 	 bl E_EEPROM_XMC4_lInitReadSectorInfo
 193:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     {
 365              	 .loc 3 193 0 discriminator 3
 366 0046 FB68     	 ldr r3,[r7,#12]
 367 0048 0133     	 adds r3,r3,#1
 368 004a FB60     	 str r3,[r7,#12]
 369              	.L15:
 193:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     {
 370              	 .loc 3 193 0 is_stmt 0 discriminator 1
 371 004c FB68     	 ldr r3,[r7,#12]
 372 004e 032B     	 cmp r3,#3
 373 0050 F6D9     	 bls .L16
 196:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     }  
 197:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 198:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     XMC_FLASH_SetMargin(XMC_FLASH_MARGIN_DEFAULT);
 374              	 .loc 3 198 0 is_stmt 1
 375 0052 0020     	 movs r0,#0
 376 0054 FFF7FEFF 	 bl XMC_FLASH_SetMargin
 199:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 200:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Implement the OVER ERASE CHECK code here and return the status*/
 201:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 202:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* If Read was successful*/
 203:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     if (status == E_EEPROM_XMC4_STATUS_OK)
 377              	 .loc 3 203 0
 378 0058 FB7A     	 ldrb r3,[r7,#11]
 379 005a 002B     	 cmp r3,#0
 380 005c 25D1     	 bne .L17
 204:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     {
 205:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       /* Execute erase state machine to free up the unwanted sectors and keep
 206:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****        * only the sector which has latest valid block. If no valid block found then all sectors are
 207:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****        */
 208:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       status = E_EEPROM_XMC4_lInitEraseStateMachine();
 381              	 .loc 3 208 0
 382 005e FFF7FEFF 	 bl E_EEPROM_XMC4_lInitEraseStateMachine
 383 0062 0346     	 mov r3,r0
 384 0064 FB72     	 strb r3,[r7,#11]
 209:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 210:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       /* If erase operations were successful, continue block data updates to RAM buffer */
 211:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       if (status == E_EEPROM_XMC4_STATUS_OK)
 385              	 .loc 3 211 0
 386 0066 FB7A     	 ldrb r3,[r7,#11]
 387 0068 002B     	 cmp r3,#0
 388 006a 1ED1     	 bne .L17
 212:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       {
 213:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 214:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         /* If a valid latest block were not detected, we shall assume that all sectors may be empty
 215:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****          * Then make Sector-0 as current sector and next free address as Sector0 start address
 216:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****          */
 217:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         if (e_eeprom_xmc4_sector_info.flash_data_addr == E_EEPROM_XMC4_EMPTY)
 389              	 .loc 3 217 0
 390 006c 154B     	 ldr r3,.L21+4
 391 006e 5B68     	 ldr r3,[r3,#4]
 392 0070 002B     	 cmp r3,#0
 393 0072 06D1     	 bne .L18
 218:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         {
 219:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           e_eeprom_xmc4_sector_info.current_sector = E_EEPROM_XMC4_SECTOR_0;
 394              	 .loc 3 219 0
 395 0074 134B     	 ldr r3,.L21+4
 396 0076 0022     	 movs r2,#0
 397 0078 9A60     	 str r2,[r3,#8]
 220:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           e_eeprom_xmc4_sector_info.next_free_start_addr =  E_EEPROM_XMC4_SECTOR0_START_ADDR;
 398              	 .loc 3 220 0
 399 007a 124B     	 ldr r3,.L21+4
 400 007c 134A     	 ldr r2,.L21+12
 401 007e 1A60     	 str r2,[r3]
 402 0080 13E0     	 b .L17
 403              	.L18:
 221:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         }
 222:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         else
 223:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         {
 224:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           /* If a valid latest block was detected, copy the valid block from flash to RAM. */
 225:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           E_EEPROM_XMC4_lCopyFlashToRam();
 404              	 .loc 3 225 0
 405 0082 FFF7FEFF 	 bl E_EEPROM_XMC4_lCopyFlashToRam
 226:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 227:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           if ((e_eeprom_xmc4_sector_info.next_free_start_addr - e_eeprom_xmc4_sector_info.flash_dat
 406              	 .loc 3 227 0
 407 0086 0F4B     	 ldr r3,.L21+4
 408 0088 1A68     	 ldr r2,[r3]
 409 008a 0E4B     	 ldr r3,.L21+4
 410 008c 5B68     	 ldr r3,[r3,#4]
 411 008e D31A     	 subs r3,r2,r3
 412 0090 B3F5805F 	 cmp r3,#4096
 413 0094 01D0     	 beq .L19
 228:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****               E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE)
 229:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           {
 230:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****             status = E_EEPROM_XMC4_STATUS_ERROR_OLD_DATA;
 414              	 .loc 3 230 0
 415 0096 0123     	 movs r3,#1
 416 0098 FB72     	 strb r3,[r7,#11]
 417              	.L19:
 231:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           }
 232:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 233:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           if (e_eeprom_xmc4_sector_info.next_free_start_addr >= E_EEPROM_XMC4_SECTOR4_START_ADDR)
 418              	 .loc 3 233 0
 419 009a 0A4B     	 ldr r3,.L21+4
 420 009c 1B68     	 ldr r3,[r3]
 421 009e 0C4A     	 ldr r2,.L21+16
 422 00a0 9342     	 cmp r3,r2
 423 00a2 02D9     	 bls .L17
 234:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           {
 235:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****             e_eeprom_xmc4_sector_info.next_free_start_addr =  E_EEPROM_XMC4_SECTOR0_START_ADDR;
 424              	 .loc 3 235 0
 425 00a4 074B     	 ldr r3,.L21+4
 426 00a6 094A     	 ldr r2,.L21+12
 427 00a8 1A60     	 str r2,[r3]
 428              	.L17:
 236:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           }
 237:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 238:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         }
 239:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       }
 240:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     }
 241:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 242:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     XMC_FLASH_EnableDoubleBitErrorTrap();
 429              	 .loc 3 242 0
 430 00aa FFF7FEFF 	 bl XMC_FLASH_EnableDoubleBitErrorTrap
 243:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 244:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     handle->initialized = (bool)true;
 431              	 .loc 3 244 0
 432 00ae 7B68     	 ldr r3,[r7,#4]
 433 00b0 0122     	 movs r2,#1
 434 00b2 1A70     	 strb r2,[r3]
 435              	.L14:
 245:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   }
 246:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 247:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   return (status);
 436              	 .loc 3 247 0
 437 00b4 FB7A     	 ldrb r3,[r7,#11]
 248:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 438              	 .loc 3 248 0
 439 00b6 1846     	 mov r0,r3
 440 00b8 1037     	 adds r7,r7,#16
 441              	.LCFI29:
 442              	 .cfi_def_cfa_offset 8
 443 00ba BD46     	 mov sp,r7
 444              	.LCFI30:
 445              	 .cfi_def_cfa_register 13
 446              	 
 447 00bc 80BD     	 pop {r7,pc}
 448              	.L22:
 449 00be 00BF     	 .align 2
 450              	.L21:
 451 00c0 00000000 	 .word e_eeprom_xmc4_data_buffer
 452 00c4 00000000 	 .word e_eeprom_xmc4_sector_info
 453 00c8 00000000 	 .word e_eeprom_xmc4_fce
 454 00cc 0000010C 	 .word 201392128
 455 00d0 FFFF010C 	 .word 201457663
 456              	 .cfi_endproc
 457              	.LFE159:
 459              	 .section .text.E_EEPROM_XMC4_WriteByte,"ax",%progbits
 460              	 .align 2
 461              	 .global E_EEPROM_XMC4_WriteByte
 462              	 .thumb
 463              	 .thumb_func
 465              	E_EEPROM_XMC4_WriteByte:
 466              	.LFB160:
 249:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 250:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 251:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 252:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Update a single byte to RAM buffer*/
 253:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** void E_EEPROM_XMC4_WriteByte(const uint16_t offset_address, const uint8_t value)
 254:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 467              	 .loc 3 254 0
 468              	 .cfi_startproc
 469              	 
 470              	 
 471              	 
 472 0000 80B4     	 push {r7}
 473              	.LCFI31:
 474              	 .cfi_def_cfa_offset 4
 475              	 .cfi_offset 7,-4
 476 0002 85B0     	 sub sp,sp,#20
 477              	.LCFI32:
 478              	 .cfi_def_cfa_offset 24
 479 0004 00AF     	 add r7,sp,#0
 480              	.LCFI33:
 481              	 .cfi_def_cfa_register 7
 482 0006 0346     	 mov r3,r0
 483 0008 0A46     	 mov r2,r1
 484 000a FB80     	 strh r3,[r7,#6]
 485 000c 1346     	 mov r3,r2
 486 000e 7B71     	 strb r3,[r7,#5]
 255:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint8_t *address_ptr;
 256:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   XMC_ASSERT("E_EEPROM_XMC4_WriteByte: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA
 257:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_addres
 487              	 .loc 3 257 0
 488 0010 FB88     	 ldrh r3,[r7,#6]
 489 0012 0833     	 adds r3,r3,#8
 490 0014 054A     	 ldr r2,.L24
 491 0016 1344     	 add r3,r3,r2
 492 0018 FB60     	 str r3,[r7,#12]
 258:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   *address_ptr = value;
 493              	 .loc 3 258 0
 494 001a FB68     	 ldr r3,[r7,#12]
 495 001c 7A79     	 ldrb r2,[r7,#5]
 496 001e 1A70     	 strb r2,[r3]
 259:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 497              	 .loc 3 259 0
 498 0020 1437     	 adds r7,r7,#20
 499              	.LCFI34:
 500              	 .cfi_def_cfa_offset 4
 501 0022 BD46     	 mov sp,r7
 502              	.LCFI35:
 503              	 .cfi_def_cfa_register 13
 504              	 
 505 0024 5DF8047B 	 ldr r7,[sp],#4
 506              	.LCFI36:
 507              	 .cfi_restore 7
 508              	 .cfi_def_cfa_offset 0
 509 0028 7047     	 bx lr
 510              	.L25:
 511 002a 00BF     	 .align 2
 512              	.L24:
 513 002c 00000000 	 .word e_eeprom_xmc4_data_buffer
 514              	 .cfi_endproc
 515              	.LFE160:
 517              	 .section .text.E_EEPROM_XMC4_WriteArray,"ax",%progbits
 518              	 .align 2
 519              	 .global E_EEPROM_XMC4_WriteArray
 520              	 .thumb
 521              	 .thumb_func
 523              	E_EEPROM_XMC4_WriteArray:
 524              	.LFB161:
 260:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 261:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 262:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 263:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Update a set of bytes to RAM buffer*/
 264:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** void E_EEPROM_XMC4_WriteArray(const uint16_t offset_address, const uint8_t *const data, const uint1
 265:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 525              	 .loc 3 265 0
 526              	 .cfi_startproc
 527              	 
 528              	 
 529              	 
 530 0000 80B4     	 push {r7}
 531              	.LCFI37:
 532              	 .cfi_def_cfa_offset 4
 533              	 .cfi_offset 7,-4
 534 0002 85B0     	 sub sp,sp,#20
 535              	.LCFI38:
 536              	 .cfi_def_cfa_offset 24
 537 0004 00AF     	 add r7,sp,#0
 538              	.LCFI39:
 539              	 .cfi_def_cfa_register 7
 540 0006 0346     	 mov r3,r0
 541 0008 3960     	 str r1,[r7]
 542 000a FB80     	 strh r3,[r7,#6]
 543 000c 1346     	 mov r3,r2
 544 000e BB80     	 strh r3,[r7,#4]
 266:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint16_t i;
 267:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint8_t  *address_ptr;
 268:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 269:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   XMC_ASSERT("E_EEPROM_XMC4_WriteArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DAT
 270:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   XMC_ASSERT("E_EEPROM_XMC4_WriteArray: Wrong length",
 271:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                                                     ((offset_address + length)  < E_EEPROM_XMC4_DAT
 272:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 273:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_addres
 545              	 .loc 3 273 0
 546 0010 FB88     	 ldrh r3,[r7,#6]
 547 0012 0833     	 adds r3,r3,#8
 548 0014 0C4A     	 ldr r2,.L29
 549 0016 1344     	 add r3,r3,r2
 550 0018 BB60     	 str r3,[r7,#8]
 274:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 275:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   for (i = 0U; i < length; i++)
 551              	 .loc 3 275 0
 552 001a 0023     	 movs r3,#0
 553 001c FB81     	 strh r3,[r7,#14]
 554 001e 0AE0     	 b .L27
 555              	.L28:
 276:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 277:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     *(address_ptr + i) = *(data + i);
 556              	 .loc 3 277 0 discriminator 3
 557 0020 FB89     	 ldrh r3,[r7,#14]
 558 0022 BA68     	 ldr r2,[r7,#8]
 559 0024 1344     	 add r3,r3,r2
 560 0026 FA89     	 ldrh r2,[r7,#14]
 561 0028 3968     	 ldr r1,[r7]
 562 002a 0A44     	 add r2,r2,r1
 563 002c 1278     	 ldrb r2,[r2]
 564 002e 1A70     	 strb r2,[r3]
 275:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 565              	 .loc 3 275 0 discriminator 3
 566 0030 FB89     	 ldrh r3,[r7,#14]
 567 0032 0133     	 adds r3,r3,#1
 568 0034 FB81     	 strh r3,[r7,#14]
 569              	.L27:
 275:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 570              	 .loc 3 275 0 is_stmt 0 discriminator 1
 571 0036 FA89     	 ldrh r2,[r7,#14]
 572 0038 BB88     	 ldrh r3,[r7,#4]
 573 003a 9A42     	 cmp r2,r3
 574 003c F0D3     	 bcc .L28
 278:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   }
 279:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 575              	 .loc 3 279 0 is_stmt 1
 576 003e 1437     	 adds r7,r7,#20
 577              	.LCFI40:
 578              	 .cfi_def_cfa_offset 4
 579 0040 BD46     	 mov sp,r7
 580              	.LCFI41:
 581              	 .cfi_def_cfa_register 13
 582              	 
 583 0042 5DF8047B 	 ldr r7,[sp],#4
 584              	.LCFI42:
 585              	 .cfi_restore 7
 586              	 .cfi_def_cfa_offset 0
 587 0046 7047     	 bx lr
 588              	.L30:
 589              	 .align 2
 590              	.L29:
 591 0048 00000000 	 .word e_eeprom_xmc4_data_buffer
 592              	 .cfi_endproc
 593              	.LFE161:
 595              	 .section .text.E_EEPROM_XMC4_ReadByte,"ax",%progbits
 596              	 .align 2
 597              	 .global E_EEPROM_XMC4_ReadByte
 598              	 .thumb
 599              	 .thumb_func
 601              	E_EEPROM_XMC4_ReadByte:
 602              	.LFB162:
 280:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 281:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 282:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 283:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Read one byte from RAM Buffer */
 284:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** void E_EEPROM_XMC4_ReadByte(const uint16_t offset_address, uint8_t *const value)
 285:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 603              	 .loc 3 285 0
 604              	 .cfi_startproc
 605              	 
 606              	 
 607              	 
 608 0000 80B4     	 push {r7}
 609              	.LCFI43:
 610              	 .cfi_def_cfa_offset 4
 611              	 .cfi_offset 7,-4
 612 0002 85B0     	 sub sp,sp,#20
 613              	.LCFI44:
 614              	 .cfi_def_cfa_offset 24
 615 0004 00AF     	 add r7,sp,#0
 616              	.LCFI45:
 617              	 .cfi_def_cfa_register 7
 618 0006 0346     	 mov r3,r0
 619 0008 3960     	 str r1,[r7]
 620 000a FB80     	 strh r3,[r7,#6]
 286:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint8_t *address_ptr;
 287:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   XMC_ASSERT("E_EEPROM_XMC4_ReadByte: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_
 288:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_addres
 621              	 .loc 3 288 0
 622 000c FB88     	 ldrh r3,[r7,#6]
 623 000e 0833     	 adds r3,r3,#8
 624 0010 054A     	 ldr r2,.L32
 625 0012 1344     	 add r3,r3,r2
 626 0014 FB60     	 str r3,[r7,#12]
 289:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 290:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   *value = *address_ptr;
 627              	 .loc 3 290 0
 628 0016 FB68     	 ldr r3,[r7,#12]
 629 0018 1A78     	 ldrb r2,[r3]
 630 001a 3B68     	 ldr r3,[r7]
 631 001c 1A70     	 strb r2,[r3]
 291:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 632              	 .loc 3 291 0
 633 001e 1437     	 adds r7,r7,#20
 634              	.LCFI46:
 635              	 .cfi_def_cfa_offset 4
 636 0020 BD46     	 mov sp,r7
 637              	.LCFI47:
 638              	 .cfi_def_cfa_register 13
 639              	 
 640 0022 5DF8047B 	 ldr r7,[sp],#4
 641              	.LCFI48:
 642              	 .cfi_restore 7
 643              	 .cfi_def_cfa_offset 0
 644 0026 7047     	 bx lr
 645              	.L33:
 646              	 .align 2
 647              	.L32:
 648 0028 00000000 	 .word e_eeprom_xmc4_data_buffer
 649              	 .cfi_endproc
 650              	.LFE162:
 652              	 .section .text.E_EEPROM_XMC4_ReadArray,"ax",%progbits
 653              	 .align 2
 654              	 .global E_EEPROM_XMC4_ReadArray
 655              	 .thumb
 656              	 .thumb_func
 658              	E_EEPROM_XMC4_ReadArray:
 659              	.LFB163:
 292:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 293:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 294:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 295:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Read a set of bytes from RAM Buffer */
 296:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** void E_EEPROM_XMC4_ReadArray(const uint16_t offset_address, uint8_t *const data, const uint16_t len
 297:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 660              	 .loc 3 297 0
 661              	 .cfi_startproc
 662              	 
 663              	 
 664              	 
 665 0000 80B4     	 push {r7}
 666              	.LCFI49:
 667              	 .cfi_def_cfa_offset 4
 668              	 .cfi_offset 7,-4
 669 0002 85B0     	 sub sp,sp,#20
 670              	.LCFI50:
 671              	 .cfi_def_cfa_offset 24
 672 0004 00AF     	 add r7,sp,#0
 673              	.LCFI51:
 674              	 .cfi_def_cfa_register 7
 675 0006 0346     	 mov r3,r0
 676 0008 3960     	 str r1,[r7]
 677 000a FB80     	 strh r3,[r7,#6]
 678 000c 1346     	 mov r3,r2
 679 000e BB80     	 strh r3,[r7,#4]
 298:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint16_t i;
 299:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint8_t  *address_ptr;
 300:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA
 301:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong length",
 302:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                                                     ((offset_address + length)  < E_EEPROM_XMC4_DAT
 303:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_addres
 680              	 .loc 3 303 0
 681 0010 FB88     	 ldrh r3,[r7,#6]
 682 0012 0833     	 adds r3,r3,#8
 683 0014 0C4A     	 ldr r2,.L37
 684 0016 1344     	 add r3,r3,r2
 685 0018 BB60     	 str r3,[r7,#8]
 304:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 305:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   for (i=0U; i<length; i++)
 686              	 .loc 3 305 0
 687 001a 0023     	 movs r3,#0
 688 001c FB81     	 strh r3,[r7,#14]
 689 001e 0AE0     	 b .L35
 690              	.L36:
 306:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 307:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     *(data + i) = *(address_ptr + i);
 691              	 .loc 3 307 0 discriminator 3
 692 0020 FB89     	 ldrh r3,[r7,#14]
 693 0022 3A68     	 ldr r2,[r7]
 694 0024 1344     	 add r3,r3,r2
 695 0026 FA89     	 ldrh r2,[r7,#14]
 696 0028 B968     	 ldr r1,[r7,#8]
 697 002a 0A44     	 add r2,r2,r1
 698 002c 1278     	 ldrb r2,[r2]
 699 002e 1A70     	 strb r2,[r3]
 305:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 700              	 .loc 3 305 0 discriminator 3
 701 0030 FB89     	 ldrh r3,[r7,#14]
 702 0032 0133     	 adds r3,r3,#1
 703 0034 FB81     	 strh r3,[r7,#14]
 704              	.L35:
 305:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 705              	 .loc 3 305 0 is_stmt 0 discriminator 1
 706 0036 FA89     	 ldrh r2,[r7,#14]
 707 0038 BB88     	 ldrh r3,[r7,#4]
 708 003a 9A42     	 cmp r2,r3
 709 003c F0D3     	 bcc .L36
 308:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   }
 309:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 710              	 .loc 3 309 0 is_stmt 1
 711 003e 1437     	 adds r7,r7,#20
 712              	.LCFI52:
 713              	 .cfi_def_cfa_offset 4
 714 0040 BD46     	 mov sp,r7
 715              	.LCFI53:
 716              	 .cfi_def_cfa_register 13
 717              	 
 718 0042 5DF8047B 	 ldr r7,[sp],#4
 719              	.LCFI54:
 720              	 .cfi_restore 7
 721              	 .cfi_def_cfa_offset 0
 722 0046 7047     	 bx lr
 723              	.L38:
 724              	 .align 2
 725              	.L37:
 726 0048 00000000 	 .word e_eeprom_xmc4_data_buffer
 727              	 .cfi_endproc
 728              	.LFE163:
 730              	 .section .text.E_EEPROM_XMC4_UpdateFlashContents,"ax",%progbits
 731              	 .align 2
 732              	 .global E_EEPROM_XMC4_UpdateFlashContents
 733              	 .thumb
 734              	 .thumb_func
 736              	E_EEPROM_XMC4_UpdateFlashContents:
 737              	.LFB164:
 310:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 311:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 312:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 313:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Copy data blocks from RAM to FLASH */
 314:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_UpdateFlashContents(void)
 315:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 738              	 .loc 3 315 0
 739              	 .cfi_startproc
 740              	 
 741              	 
 742 0000 80B5     	 push {r7,lr}
 743              	.LCFI55:
 744              	 .cfi_def_cfa_offset 8
 745              	 .cfi_offset 7,-8
 746              	 .cfi_offset 14,-4
 747 0002 82B0     	 sub sp,sp,#8
 748              	.LCFI56:
 749              	 .cfi_def_cfa_offset 16
 750 0004 00AF     	 add r7,sp,#0
 751              	.LCFI57:
 752              	 .cfi_def_cfa_register 7
 316:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   E_EEPROM_XMC4_STATUS_t status;
 317:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t sector_start_addr;
 318:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 319:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   status = E_EEPROM_XMC4_STATUS_OK;
 753              	 .loc 3 319 0
 754 0006 0023     	 movs r3,#0
 755 0008 FB71     	 strb r3,[r7,#7]
 320:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 321:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   /* Calculate the starting address of the active sector from where the first write started for the
 322:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR +
 323:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                      (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);
 756              	 .loc 3 323 0
 757 000a 224B     	 ldr r3,.L44
 758 000c 9B68     	 ldr r3,[r3,#8]
 322:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                      (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);
 759              	 .loc 3 322 0
 760 000e 03F54053 	 add r3,r3,#12288
 761 0012 0433     	 adds r3,r3,#4
 762 0014 9B03     	 lsls r3,r3,#14
 763 0016 3B60     	 str r3,[r7]
 324:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 325:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   /* If the next free address crosses current active sector starting address, then all the sectors 
 326:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   if ((e_eeprom_xmc4_sector_info.next_free_start_addr == sector_start_addr) &&
 764              	 .loc 3 326 0
 765 0018 1E4B     	 ldr r3,.L44
 766 001a 1A68     	 ldr r2,[r3]
 767 001c 3B68     	 ldr r3,[r7]
 768 001e 9A42     	 cmp r2,r3
 769 0020 11D1     	 bne .L40
 327:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****      (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
 770              	 .loc 3 327 0 discriminator 1
 771 0022 1D4B     	 ldr r3,.L44+4
 772 0024 5B68     	 ldr r3,[r3,#4]
 326:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****      (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
 773              	 .loc 3 326 0 discriminator 1
 774 0026 002B     	 cmp r3,#0
 775 0028 0DD0     	 beq .L40
 328:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 329:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Update the current sector to the latest sector on which the last write was executed. */
 330:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     e_eeprom_xmc4_sector_info.current_sector =  ((e_eeprom_xmc4_sector_info.flash_data_addr &
 776              	 .loc 3 330 0
 777 002a 1A4B     	 ldr r3,.L44
 778 002c 5B68     	 ldr r3,[r3,#4]
 779 002e 03F44043 	 and r3,r3,#49152
 331:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                                                 E_EEPROM_XMC4_SECTOR_POSITION_MASK) >>
 780              	 .loc 3 331 0
 781 0032 9B0B     	 lsrs r3,r3,#14
 330:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                                                 E_EEPROM_XMC4_SECTOR_POSITION_MASK) >>
 782              	 .loc 3 330 0
 783 0034 174A     	 ldr r2,.L44
 784 0036 9360     	 str r3,[r2,#8]
 332:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                                                 E_EEPROM_XMC4_SECTOR_POSITION);
 333:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 334:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Mark all the sectors as filled with data */
 335:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     e_eeprom_xmc4_sector_info.erase_state = E_EEPROM_XMC4_ALL_SECTORS_FILLED ;
 785              	 .loc 3 335 0
 786 0038 164B     	 ldr r3,.L44
 787 003a 0F22     	 movs r2,#15
 788 003c DA60     	 str r2,[r3,#12]
 336:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 337:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Execute erase state machine to free up the unwanted sectors and keep only the sector which h
 338:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     status = E_EEPROM_XMC4_lInitEraseStateMachine();
 789              	 .loc 3 338 0
 790 003e FFF7FEFF 	 bl E_EEPROM_XMC4_lInitEraseStateMachine
 791 0042 0346     	 mov r3,r0
 792 0044 FB71     	 strb r3,[r7,#7]
 793              	.L40:
 339:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   }
 340:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 341:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   if (status ==  E_EEPROM_XMC4_STATUS_OK)
 794              	 .loc 3 341 0
 795 0046 FB79     	 ldrb r3,[r7,#7]
 796 0048 002B     	 cmp r3,#0
 797 004a 1DD1     	 bne .L41
 342:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 343:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     e_eeprom_xmc4_data_buffer.block_cycle_count++;
 798              	 .loc 3 343 0
 799 004c 124B     	 ldr r3,.L44+4
 800 004e 5B68     	 ldr r3,[r3,#4]
 801 0050 0133     	 adds r3,r3,#1
 802 0052 114A     	 ldr r2,.L44+4
 803 0054 5360     	 str r3,[r2,#4]
 344:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 345:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     status = E_EEPROM_XMC4_lWriteToFlash();
 804              	 .loc 3 345 0
 805 0056 FFF7FEFF 	 bl E_EEPROM_XMC4_lWriteToFlash
 806 005a 0346     	 mov r3,r0
 807 005c FB71     	 strb r3,[r7,#7]
 346:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 347:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* If the flash write succeeds, update the latest flash data location in RAM for reference */
 348:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     if (status == E_EEPROM_XMC4_STATUS_OK)
 808              	 .loc 3 348 0
 809 005e FB79     	 ldrb r3,[r7,#7]
 810 0060 002B     	 cmp r3,#0
 811 0062 03D1     	 bne .L42
 349:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     {
 350:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       e_eeprom_xmc4_sector_info.flash_data_addr = e_eeprom_xmc4_sector_info.next_free_start_addr;
 812              	 .loc 3 350 0
 813 0064 0B4B     	 ldr r3,.L44
 814 0066 1B68     	 ldr r3,[r3]
 815 0068 0A4A     	 ldr r2,.L44
 816 006a 5360     	 str r3,[r2,#4]
 817              	.L42:
 351:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     }
 352:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 353:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Update the next free address to write the new data block*/
 354:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     e_eeprom_xmc4_sector_info.next_free_start_addr += E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 818              	 .loc 3 354 0
 819 006c 094B     	 ldr r3,.L44
 820 006e 1B68     	 ldr r3,[r3]
 821 0070 03F58053 	 add r3,r3,#4096
 822 0074 074A     	 ldr r2,.L44
 823 0076 1360     	 str r3,[r2]
 355:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 356:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* If the next free address crosses 3rd sector end address relocate the address to 0th sector s
 357:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     if (e_eeprom_xmc4_sector_info.next_free_start_addr >= E_EEPROM_XMC4_SECTOR4_START_ADDR)
 824              	 .loc 3 357 0
 825 0078 064B     	 ldr r3,.L44
 826 007a 1B68     	 ldr r3,[r3]
 827 007c 074A     	 ldr r2,.L44+8
 828 007e 9342     	 cmp r3,r2
 829 0080 02D9     	 bls .L41
 358:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     {
 359:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       e_eeprom_xmc4_sector_info.next_free_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR;
 830              	 .loc 3 359 0
 831 0082 044B     	 ldr r3,.L44
 832 0084 064A     	 ldr r2,.L44+12
 833 0086 1A60     	 str r2,[r3]
 834              	.L41:
 360:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     }
 361:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   }
 362:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 363:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   return (status);
 835              	 .loc 3 363 0
 836 0088 FB79     	 ldrb r3,[r7,#7]
 364:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 837              	 .loc 3 364 0
 838 008a 1846     	 mov r0,r3
 839 008c 0837     	 adds r7,r7,#8
 840              	.LCFI58:
 841              	 .cfi_def_cfa_offset 8
 842 008e BD46     	 mov sp,r7
 843              	.LCFI59:
 844              	 .cfi_def_cfa_register 13
 845              	 
 846 0090 80BD     	 pop {r7,pc}
 847              	.L45:
 848 0092 00BF     	 .align 2
 849              	.L44:
 850 0094 00000000 	 .word e_eeprom_xmc4_sector_info
 851 0098 00000000 	 .word e_eeprom_xmc4_data_buffer
 852 009c FFFF010C 	 .word 201457663
 853 00a0 0000010C 	 .word 201392128
 854              	 .cfi_endproc
 855              	.LFE164:
 857              	 .section .text.E_EEPROM_XMC4_IsFlashEmpty,"ax",%progbits
 858              	 .align 2
 859              	 .global E_EEPROM_XMC4_IsFlashEmpty
 860              	 .thumb
 861              	 .thumb_func
 863              	E_EEPROM_XMC4_IsFlashEmpty:
 864              	.LFB165:
 365:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 366:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 367:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Check the availability data in the flash emulated EEPROM area */
 368:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** bool E_EEPROM_XMC4_IsFlashEmpty(void)
 369:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 865              	 .loc 3 369 0
 866              	 .cfi_startproc
 867              	 
 868              	 
 869              	 
 870 0000 80B4     	 push {r7}
 871              	.LCFI60:
 872              	 .cfi_def_cfa_offset 4
 873              	 .cfi_offset 7,-4
 874 0002 83B0     	 sub sp,sp,#12
 875              	.LCFI61:
 876              	 .cfi_def_cfa_offset 16
 877 0004 00AF     	 add r7,sp,#0
 878              	.LCFI62:
 879              	 .cfi_def_cfa_register 7
 370:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   bool status = false;
 880              	 .loc 3 370 0
 881 0006 0023     	 movs r3,#0
 882 0008 FB71     	 strb r3,[r7,#7]
 371:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 372:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   /* If data available flash_data_addr will have a valid address*/
 373:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   if (e_eeprom_xmc4_sector_info.flash_data_addr == 0U)
 883              	 .loc 3 373 0
 884 000a 064B     	 ldr r3,.L49
 885 000c 5B68     	 ldr r3,[r3,#4]
 886 000e 002B     	 cmp r3,#0
 887 0010 01D1     	 bne .L47
 374:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 375:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     status = true;
 888              	 .loc 3 375 0
 889 0012 0123     	 movs r3,#1
 890 0014 FB71     	 strb r3,[r7,#7]
 891              	.L47:
 376:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   }
 377:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   return (status);
 892              	 .loc 3 377 0
 893 0016 FB79     	 ldrb r3,[r7,#7]
 378:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 894              	 .loc 3 378 0
 895 0018 1846     	 mov r0,r3
 896 001a 0C37     	 adds r7,r7,#12
 897              	.LCFI63:
 898              	 .cfi_def_cfa_offset 4
 899 001c BD46     	 mov sp,r7
 900              	.LCFI64:
 901              	 .cfi_def_cfa_register 13
 902              	 
 903 001e 5DF8047B 	 ldr r7,[sp],#4
 904              	.LCFI65:
 905              	 .cfi_restore 7
 906              	 .cfi_def_cfa_offset 0
 907 0022 7047     	 bx lr
 908              	.L50:
 909              	 .align 2
 910              	.L49:
 911 0024 00000000 	 .word e_eeprom_xmc4_sector_info
 912              	 .cfi_endproc
 913              	.LFE165:
 915              	 .section .text.E_EEPROM_XMC4_lWriteToFlash,"ax",%progbits
 916              	 .align 2
 917              	 .thumb
 918              	 .thumb_func
 920              	E_EEPROM_XMC4_lWriteToFlash:
 921              	.LFB166:
 379:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 380:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /**************************************************************************************************
 381:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * LOCAL ROUTINES
 382:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  **************************************************************************************************
 383:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 384:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Local function to program data blocks from RAM into FLASH */
 385:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_lWriteToFlash(void)
 386:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 922              	 .loc 3 386 0
 923              	 .cfi_startproc
 924              	 
 925              	 
 926 0000 80B5     	 push {r7,lr}
 927              	.LCFI66:
 928              	 .cfi_def_cfa_offset 8
 929              	 .cfi_offset 7,-8
 930              	 .cfi_offset 14,-4
 931 0002 84B0     	 sub sp,sp,#16
 932              	.LCFI67:
 933              	 .cfi_def_cfa_offset 24
 934 0004 00AF     	 add r7,sp,#0
 935              	.LCFI68:
 936              	 .cfi_def_cfa_register 7
 387:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t *flash_addr_ptr;
 388:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t *ram_addr_ptr;
 389:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t  page_index;
 390:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   E_EEPROM_XMC4_STATUS_t status;
 391:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 392:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   status = E_EEPROM_XMC4_STATUS_OK;
 937              	 .loc 3 392 0
 938 0006 0023     	 movs r3,#0
 939 0008 FB70     	 strb r3,[r7,#3]
 393:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.next_free_start_addr;
 940              	 .loc 3 393 0
 941 000a 184B     	 ldr r3,.L57
 942 000c 1B68     	 ldr r3,[r3]
 943 000e FB60     	 str r3,[r7,#12]
 394:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   ram_addr_ptr   = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;
 944              	 .loc 3 394 0
 945 0010 174B     	 ldr r3,.L57+4
 946 0012 BB60     	 str r3,[r7,#8]
 395:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 396:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   e_eeprom_xmc4_data_buffer.crc = E_EEPROM_XMC4_lCalculateCRC((uint32_t*)(void*)
 947              	 .loc 3 396 0
 948 0014 1748     	 ldr r0,.L57+8
 949 0016 FFF7FEFF 	 bl E_EEPROM_XMC4_lCalculateCRC
 950 001a 0246     	 mov r2,r0
 951 001c 144B     	 ldr r3,.L57+4
 952 001e 1A60     	 str r2,[r3]
 397:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                                                              (&(e_eeprom_xmc4_data_buffer.block_cyc
 398:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 399:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   for (page_index = 0U ; page_index < E_EEPROM_XMC4_MAX_PAGES; page_index++)
 953              	 .loc 3 399 0
 954 0020 0023     	 movs r3,#0
 955 0022 7B60     	 str r3,[r7,#4]
 956 0024 19E0     	 b .L52
 957              	.L55:
 400:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 401:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     XMC_FLASH_ClearStatus();
 958              	 .loc 3 401 0
 959 0026 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
 402:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 403:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     XMC_FLASH_ProgramPage(flash_addr_ptr,ram_addr_ptr);
 960              	 .loc 3 403 0
 961 002a F868     	 ldr r0,[r7,#12]
 962 002c B968     	 ldr r1,[r7,#8]
 963 002e FFF7FEFF 	 bl XMC_FLASH_ProgramPage
 404:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 405:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     if (XMC_FLASH_GetStatus() == (uint32_t)XMC_FLASH_STATUS_VERIFY_ERROR)
 964              	 .loc 3 405 0
 965 0032 FFF7FEFF 	 bl XMC_FLASH_GetStatus
 966 0036 0346     	 mov r3,r0
 967 0038 B3F1004F 	 cmp r3,#-2147483648
 968 003c 02D1     	 bne .L53
 406:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     {
 407:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       status = E_EEPROM_XMC4_STATUS_WRITE_ERROR;
 969              	 .loc 3 407 0
 970 003e 0323     	 movs r3,#3
 971 0040 FB70     	 strb r3,[r7,#3]
 408:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       break;
 972              	 .loc 3 408 0
 973 0042 0DE0     	 b .L54
 974              	.L53:
 409:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     }
 410:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     ram_addr_ptr   += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
 975              	 .loc 3 410 0 discriminator 2
 976 0044 BB68     	 ldr r3,[r7,#8]
 977 0046 03F58073 	 add r3,r3,#256
 978 004a BB60     	 str r3,[r7,#8]
 411:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     flash_addr_ptr += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
 979              	 .loc 3 411 0 discriminator 2
 980 004c FB68     	 ldr r3,[r7,#12]
 981 004e 03F58073 	 add r3,r3,#256
 982 0052 FB60     	 str r3,[r7,#12]
 399:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 983              	 .loc 3 399 0 discriminator 2
 984 0054 7B68     	 ldr r3,[r7,#4]
 985 0056 0133     	 adds r3,r3,#1
 986 0058 7B60     	 str r3,[r7,#4]
 987              	.L52:
 399:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 988              	 .loc 3 399 0 is_stmt 0 discriminator 1
 989 005a 7B68     	 ldr r3,[r7,#4]
 990 005c 0F2B     	 cmp r3,#15
 991 005e E2D9     	 bls .L55
 992              	.L54:
 412:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   }
 413:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 414:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   return (status);
 993              	 .loc 3 414 0 is_stmt 1
 994 0060 FB78     	 ldrb r3,[r7,#3]
 415:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 995              	 .loc 3 415 0
 996 0062 1846     	 mov r0,r3
 997 0064 1037     	 adds r7,r7,#16
 998              	.LCFI69:
 999              	 .cfi_def_cfa_offset 8
 1000 0066 BD46     	 mov sp,r7
 1001              	.LCFI70:
 1002              	 .cfi_def_cfa_register 13
 1003              	 
 1004 0068 80BD     	 pop {r7,pc}
 1005              	.L58:
 1006 006a 00BF     	 .align 2
 1007              	.L57:
 1008 006c 00000000 	 .word e_eeprom_xmc4_sector_info
 1009 0070 00000000 	 .word e_eeprom_xmc4_data_buffer
 1010 0074 04000000 	 .word e_eeprom_xmc4_data_buffer+4
 1011              	 .cfi_endproc
 1012              	.LFE166:
 1014              	 .section .text.E_EEPROM_XMC4_lInitReadSectorInfo,"ax",%progbits
 1015              	 .align 2
 1016              	 .thumb
 1017              	 .thumb_func
 1019              	E_EEPROM_XMC4_lInitReadSectorInfo:
 1020              	.LFB167:
 416:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 417:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 418:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 419:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static void E_EEPROM_XMC4_lInitReadSectorInfo(const uint32_t sector)
 420:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 1021              	 .loc 3 420 0
 1022              	 .cfi_startproc
 1023              	 
 1024              	 
 1025 0000 80B5     	 push {r7,lr}
 1026              	.LCFI71:
 1027              	 .cfi_def_cfa_offset 8
 1028              	 .cfi_offset 7,-8
 1029              	 .cfi_offset 14,-4
 1030 0002 8AB0     	 sub sp,sp,#40
 1031              	.LCFI72:
 1032              	 .cfi_def_cfa_offset 48
 1033 0004 00AF     	 add r7,sp,#0
 1034              	.LCFI73:
 1035              	 .cfi_def_cfa_register 7
 1036 0006 7860     	 str r0,[r7,#4]
 421:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t block_read_addr;
 422:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t sector_start_addr;
 423:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t free_block_addr;
 424:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t *data_ptr;
 425:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t block_cycle_count;
 426:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t written_crc;
 427:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t calculated_crc;
 428:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 429:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   /* Initialize starting address and last block address of the sector. */
 430:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32_t)sec
 1037              	 .loc 3 430 0
 1038 0008 7B68     	 ldr r3,[r7,#4]
 1039 000a 03F54053 	 add r3,r3,#12288
 1040 000e 0433     	 adds r3,r3,#4
 1041 0010 9B03     	 lsls r3,r3,#14
 1042 0012 FB61     	 str r3,[r7,#28]
 431:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   block_read_addr = (sector_start_addr + E_EEPROM_XMC4_SECTOR_SIZE) - E_EEPROM_XMC4_ACTUAL_FLASH_BL
 1043              	 .loc 3 431 0
 1044 0014 FB69     	 ldr r3,[r7,#28]
 1045 0016 03F54053 	 add r3,r3,#12288
 1046 001a 7B62     	 str r3,[r7,#36]
 432:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   free_block_addr = E_EEPROM_XMC4_EMPTY;
 1047              	 .loc 3 432 0
 1048 001c 0023     	 movs r3,#0
 1049 001e 3B62     	 str r3,[r7,#32]
 1050              	.L63:
 433:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 434:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   do
 435:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 436:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Read first 32 bit data from the block which indicates the block cycle counter. */
 437:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     data_ptr = (uint32_t*)block_read_addr;
 1051              	 .loc 3 437 0
 1052 0020 7B6A     	 ldr r3,[r7,#36]
 1053 0022 BB61     	 str r3,[r7,#24]
 438:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     block_cycle_count = *(data_ptr + E_EEPROM_XMC4_BCC_OFFSET);
 1054              	 .loc 3 438 0
 1055 0024 BB69     	 ldr r3,[r7,#24]
 1056 0026 5B68     	 ldr r3,[r3,#4]
 1057 0028 7B61     	 str r3,[r7,#20]
 439:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 440:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Check if block cycle count is a non zero value*/
 441:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     if (block_cycle_count != E_EEPROM_XMC4_EMPTY)
 1058              	 .loc 3 441 0
 1059 002a 7B69     	 ldr r3,[r7,#20]
 1060 002c 002B     	 cmp r3,#0
 1061 002e 2ED0     	 beq .L60
 442:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     {
 443:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       /* Mark sector as non-empty sector*/
 444:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       e_eeprom_xmc4_sector_info.erase_state |= ((uint32_t)1U << sector);
 1062              	 .loc 3 444 0
 1063 0030 1C4B     	 ldr r3,.L64
 1064 0032 DA68     	 ldr r2,[r3,#12]
 1065 0034 7B68     	 ldr r3,[r7,#4]
 1066 0036 0121     	 movs r1,#1
 1067 0038 01FA03F3 	 lsl r3,r1,r3
 1068 003c 1343     	 orrs r3,r3,r2
 1069 003e 194A     	 ldr r2,.L64
 1070 0040 D360     	 str r3,[r2,#12]
 445:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 446:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       /* If this is the first non empty block identified, then store the address as next free addre
 447:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       if (free_block_addr == E_EEPROM_XMC4_EMPTY)
 1071              	 .loc 3 447 0
 1072 0042 3B6A     	 ldr r3,[r7,#32]
 1073 0044 002B     	 cmp r3,#0
 1074 0046 03D1     	 bne .L61
 448:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       {
 449:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         free_block_addr = block_read_addr + E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 1075              	 .loc 3 449 0
 1076 0048 7B6A     	 ldr r3,[r7,#36]
 1077 004a 03F58053 	 add r3,r3,#4096
 1078 004e 3B62     	 str r3,[r7,#32]
 1079              	.L61:
 450:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       }
 451:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 452:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       /* Read the second 32bit data which indicates the CRC */
 453:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       written_crc = *data_ptr;
 1080              	 .loc 3 453 0
 1081 0050 BB69     	 ldr r3,[r7,#24]
 1082 0052 1B68     	 ldr r3,[r3]
 1083 0054 3B61     	 str r3,[r7,#16]
 454:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       /* Calculate the CRC for the written data in flash (3rd word to the last word)*/
 455:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       calculated_crc = E_EEPROM_XMC4_lCalculateCRC(data_ptr + E_EEPROM_XMC4_BCC_OFFSET);
 1084              	 .loc 3 455 0
 1085 0056 BB69     	 ldr r3,[r7,#24]
 1086 0058 0433     	 adds r3,r3,#4
 1087 005a 1846     	 mov r0,r3
 1088 005c FFF7FEFF 	 bl E_EEPROM_XMC4_lCalculateCRC
 1089 0060 F860     	 str r0,[r7,#12]
 456:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 457:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       if (calculated_crc == written_crc)
 1090              	 .loc 3 457 0
 1091 0062 FA68     	 ldr r2,[r7,#12]
 1092 0064 3B69     	 ldr r3,[r7,#16]
 1093 0066 9A42     	 cmp r2,r3
 1094 0068 11D1     	 bne .L60
 458:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       {
 459:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         /* If both CRC matches and the current block cycle counter is greater than the previous rec
 460:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****          * Update the Data structure with the current block as the "latest" one and the current sec
 461:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****          * Exit from the function.
 462:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****          */
 463:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         if (block_cycle_count > e_eeprom_xmc4_data_buffer.block_cycle_count)
 1095              	 .loc 3 463 0
 1096 006a 0F4B     	 ldr r3,.L64+4
 1097 006c 5A68     	 ldr r2,[r3,#4]
 1098 006e 7B69     	 ldr r3,[r7,#20]
 1099 0070 9A42     	 cmp r2,r3
 1100 0072 0CD2     	 bcs .L60
 464:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         {
 465:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           e_eeprom_xmc4_data_buffer.block_cycle_count = block_cycle_count;
 1101              	 .loc 3 465 0
 1102 0074 0C4A     	 ldr r2,.L64+4
 1103 0076 7B69     	 ldr r3,[r7,#20]
 1104 0078 5360     	 str r3,[r2,#4]
 466:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           e_eeprom_xmc4_sector_info.current_sector = sector;
 1105              	 .loc 3 466 0
 1106 007a 0A4A     	 ldr r2,.L64
 1107 007c 7B68     	 ldr r3,[r7,#4]
 1108 007e 9360     	 str r3,[r2,#8]
 467:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           e_eeprom_xmc4_sector_info.flash_data_addr = block_read_addr;
 1109              	 .loc 3 467 0
 1110 0080 084A     	 ldr r2,.L64
 1111 0082 7B6A     	 ldr r3,[r7,#36]
 1112 0084 5360     	 str r3,[r2,#4]
 468:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           e_eeprom_xmc4_sector_info.next_free_start_addr = free_block_addr;
 1113              	 .loc 3 468 0
 1114 0086 074A     	 ldr r2,.L64
 1115 0088 3B6A     	 ldr r3,[r7,#32]
 1116 008a 1360     	 str r3,[r2]
 469:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           break;
 1117              	 .loc 3 469 0
 1118 008c 07E0     	 b .L59
 1119              	.L60:
 470:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         }
 471:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       }
 472:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     }
 473:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Move the block read address to one block size up starting from the bottom of sector */
 474:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     block_read_addr -= E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 1120              	 .loc 3 474 0
 1121 008e 7B6A     	 ldr r3,[r7,#36]
 1122 0090 A3F58053 	 sub r3,r3,#4096
 1123 0094 7B62     	 str r3,[r7,#36]
 475:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 476:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   /* Iterate the read process until the block read address crosses sector start address or a
 477:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****    * latest valid block is identified.
 478:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****    */
 479:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   } while ( block_read_addr >= sector_start_addr );
 1124              	 .loc 3 479 0
 1125 0096 7A6A     	 ldr r2,[r7,#36]
 1126 0098 FB69     	 ldr r3,[r7,#28]
 1127 009a 9A42     	 cmp r2,r3
 1128 009c C0D2     	 bcs .L63
 1129              	.L59:
 480:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 481:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 1130              	 .loc 3 481 0
 1131 009e 2837     	 adds r7,r7,#40
 1132              	.LCFI74:
 1133              	 .cfi_def_cfa_offset 8
 1134 00a0 BD46     	 mov sp,r7
 1135              	.LCFI75:
 1136              	 .cfi_def_cfa_register 13
 1137              	 
 1138 00a2 80BD     	 pop {r7,pc}
 1139              	.L65:
 1140              	 .align 2
 1141              	.L64:
 1142 00a4 00000000 	 .word e_eeprom_xmc4_sector_info
 1143 00a8 00000000 	 .word e_eeprom_xmc4_data_buffer
 1144              	 .cfi_endproc
 1145              	.LFE167:
 1147              	 .section .text.E_EEPROM_XMC4_lInitEraseStateMachine,"ax",%progbits
 1148              	 .align 2
 1149              	 .thumb
 1150              	 .thumb_func
 1152              	E_EEPROM_XMC4_lInitEraseStateMachine:
 1153              	.LFB168:
 482:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 483:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 484:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 485:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_lInitEraseStateMachine(void)
 486:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 1154              	 .loc 3 486 0
 1155              	 .cfi_startproc
 1156              	 
 1157              	 
 1158 0000 80B5     	 push {r7,lr}
 1159              	.LCFI76:
 1160              	 .cfi_def_cfa_offset 8
 1161              	 .cfi_offset 7,-8
 1162              	 .cfi_offset 14,-4
 1163 0002 84B0     	 sub sp,sp,#16
 1164              	.LCFI77:
 1165              	 .cfi_def_cfa_offset 24
 1166 0004 00AF     	 add r7,sp,#0
 1167              	.LCFI78:
 1168              	 .cfi_def_cfa_register 7
 487:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t sector_count;
 488:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t sector_start_addr;
 489:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   E_EEPROM_XMC4_STATUS_t status ;
 490:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 491:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   status = E_EEPROM_XMC4_STATUS_OK;
 1169              	 .loc 3 491 0
 1170 0006 0023     	 movs r3,#0
 1171 0008 FB72     	 strb r3,[r7,#11]
 492:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   sector_count = 0U;
 1172              	 .loc 3 492 0
 1173 000a 0023     	 movs r3,#0
 1174 000c FB60     	 str r3,[r7,#12]
 1175              	.L70:
 493:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 494:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   do
 495:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 496:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* If the non empty sector is the current active sector, then do not erase it*/
 497:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     if (e_eeprom_xmc4_sector_info.current_sector != sector_count)
 1176              	 .loc 3 497 0
 1177 000e 1B4B     	 ldr r3,.L72
 1178 0010 9A68     	 ldr r2,[r3,#8]
 1179 0012 FB68     	 ldr r3,[r7,#12]
 1180 0014 9A42     	 cmp r2,r3
 1181 0016 26D0     	 beq .L67
 498:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     {
 499:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       /* Check if the sector was previously identified as non-empty. i.e It is having old data or c
 500:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****        * If so erase the sector and mark it as erase attempted.
 501:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****        */
 502:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       if ((e_eeprom_xmc4_sector_info.erase_state >> sector_count) & ((uint32_t)1U))
 1182              	 .loc 3 502 0
 1183 0018 184B     	 ldr r3,.L72
 1184 001a DA68     	 ldr r2,[r3,#12]
 1185 001c FB68     	 ldr r3,[r7,#12]
 1186 001e 22FA03F3 	 lsr r3,r2,r3
 1187 0022 03F00103 	 and r3,r3,#1
 1188 0026 002B     	 cmp r3,#0
 1189 0028 1DD0     	 beq .L67
 503:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       {
 504:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32
 1190              	 .loc 3 504 0
 1191 002a FB68     	 ldr r3,[r7,#12]
 1192 002c 03F54053 	 add r3,r3,#12288
 1193 0030 0433     	 adds r3,r3,#4
 1194 0032 9B03     	 lsls r3,r3,#14
 1195 0034 7B60     	 str r3,[r7,#4]
 505:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 506:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         XMC_FLASH_ClearStatus();
 1196              	 .loc 3 506 0
 1197 0036 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
 507:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         XMC_FLASH_EraseSector((uint32_t*)sector_start_addr);
 1198              	 .loc 3 507 0
 1199 003a 7B68     	 ldr r3,[r7,#4]
 1200 003c 1846     	 mov r0,r3
 1201 003e FFF7FEFF 	 bl XMC_FLASH_EraseSector
 508:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 509:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         if (XMC_FLASH_GetStatus() != (uint32_t)XMC_FLASH_STATUS_ERASE_STATE)
 1202              	 .loc 3 509 0
 1203 0042 FFF7FEFF 	 bl XMC_FLASH_GetStatus
 1204 0046 0346     	 mov r3,r0
 1205 0048 202B     	 cmp r3,#32
 1206 004a 02D0     	 beq .L68
 510:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         {
 511:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           status = E_EEPROM_XMC4_STATUS_ERASE_ERROR;
 1207              	 .loc 3 511 0
 1208 004c 0423     	 movs r3,#4
 1209 004e FB72     	 strb r3,[r7,#11]
 512:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           break;
 1210              	 .loc 3 512 0
 1211 0050 0FE0     	 b .L69
 1212              	.L68:
 513:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         }
 514:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         e_eeprom_xmc4_sector_info.erase_state &= ~(((uint32_t)1U << sector_count));
 1213              	 .loc 3 514 0
 1214 0052 0A4B     	 ldr r3,.L72
 1215 0054 DA68     	 ldr r2,[r3,#12]
 1216 0056 FB68     	 ldr r3,[r7,#12]
 1217 0058 0121     	 movs r1,#1
 1218 005a 01FA03F3 	 lsl r3,r1,r3
 1219 005e DB43     	 mvns r3,r3
 1220 0060 1340     	 ands r3,r3,r2
 1221 0062 064A     	 ldr r2,.L72
 1222 0064 D360     	 str r3,[r2,#12]
 1223              	.L67:
 515:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       }
 516:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     }
 517:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     sector_count++;
 1224              	 .loc 3 517 0
 1225 0066 FB68     	 ldr r3,[r7,#12]
 1226 0068 0133     	 adds r3,r3,#1
 1227 006a FB60     	 str r3,[r7,#12]
 518:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Iterate the erase loop until all 4 sectors are checked. Break and return failure on any sect
 519:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   } while ( sector_count < E_EEPROM_XMC4_MAX_SECTORS );
 1228              	 .loc 3 519 0
 1229 006c FB68     	 ldr r3,[r7,#12]
 1230 006e 032B     	 cmp r3,#3
 1231 0070 CDD9     	 bls .L70
 1232              	.L69:
 520:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 521:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   return (status);
 1233              	 .loc 3 521 0
 1234 0072 FB7A     	 ldrb r3,[r7,#11]
 522:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 1235              	 .loc 3 522 0
 1236 0074 1846     	 mov r0,r3
 1237 0076 1037     	 adds r7,r7,#16
 1238              	.LCFI79:
 1239              	 .cfi_def_cfa_offset 8
 1240 0078 BD46     	 mov sp,r7
 1241              	.LCFI80:
 1242              	 .cfi_def_cfa_register 13
 1243              	 
 1244 007a 80BD     	 pop {r7,pc}
 1245              	.L73:
 1246              	 .align 2
 1247              	.L72:
 1248 007c 00000000 	 .word e_eeprom_xmc4_sector_info
 1249              	 .cfi_endproc
 1250              	.LFE168:
 1252              	 .section .text.E_EEPROM_XMC4_lCalculateCRC,"ax",%progbits
 1253              	 .align 2
 1254              	 .thumb
 1255              	 .thumb_func
 1257              	E_EEPROM_XMC4_lCalculateCRC:
 1258              	.LFB169:
 523:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 524:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Local function to CRC */
 525:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static uint32_t E_EEPROM_XMC4_lCalculateCRC(const uint32_t *data_start_addr)
 526:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 1259              	 .loc 3 526 0
 1260              	 .cfi_startproc
 1261              	 
 1262              	 
 1263 0000 80B5     	 push {r7,lr}
 1264              	.LCFI81:
 1265              	 .cfi_def_cfa_offset 8
 1266              	 .cfi_offset 7,-8
 1267              	 .cfi_offset 14,-4
 1268 0002 84B0     	 sub sp,sp,#16
 1269              	.LCFI82:
 1270              	 .cfi_def_cfa_offset 24
 1271 0004 00AF     	 add r7,sp,#0
 1272              	.LCFI83:
 1273              	 .cfi_def_cfa_register 7
 1274 0006 7860     	 str r0,[r7,#4]
 527:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t result;
 528:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 529:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   /* Reset the CRC result register before new CRC calculation */
 530:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   XMC_FCE_InitializeSeedValue(&e_eeprom_xmc4_fce, 0U);
 1275              	 .loc 3 530 0
 1276 0008 0848     	 ldr r0,.L76
 1277 000a 0021     	 movs r1,#0
 1278 000c FFF7FEFF 	 bl XMC_FCE_InitializeSeedValue
 531:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 532:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   (void)XMC_FCE_CalculateCRC32(&e_eeprom_xmc4_fce, data_start_addr, E_EEPROM_XMC4_DATA_SIZE_FOR_CRC
 1279              	 .loc 3 532 0
 1280 0010 07F10C03 	 add r3,r7,#12
 1281 0014 0548     	 ldr r0,.L76
 1282 0016 7968     	 ldr r1,[r7,#4]
 1283 0018 40F6FC72 	 movw r2,#4092
 1284 001c FFF7FEFF 	 bl XMC_FCE_CalculateCRC32
 533:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 534:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   return (result);
 1285              	 .loc 3 534 0
 1286 0020 FB68     	 ldr r3,[r7,#12]
 535:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 1287              	 .loc 3 535 0
 1288 0022 1846     	 mov r0,r3
 1289 0024 1037     	 adds r7,r7,#16
 1290              	.LCFI84:
 1291              	 .cfi_def_cfa_offset 8
 1292 0026 BD46     	 mov sp,r7
 1293              	.LCFI85:
 1294              	 .cfi_def_cfa_register 13
 1295              	 
 1296 0028 80BD     	 pop {r7,pc}
 1297              	.L77:
 1298 002a 00BF     	 .align 2
 1299              	.L76:
 1300 002c 00000000 	 .word e_eeprom_xmc4_fce
 1301              	 .cfi_endproc
 1302              	.LFE169:
 1304              	 .section .text.E_EEPROM_XMC4_lCopyFlashToRam,"ax",%progbits
 1305              	 .align 2
 1306              	 .thumb
 1307              	 .thumb_func
 1309              	E_EEPROM_XMC4_lCopyFlashToRam:
 1310              	.LFB170:
 536:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 537:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 538:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 539:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Local function to copy data blocks from FLASH to RAM */
 540:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static void E_EEPROM_XMC4_lCopyFlashToRam(void)
 541:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 1311              	 .loc 3 541 0
 1312              	 .cfi_startproc
 1313              	 
 1314              	 
 1315              	 
 1316 0000 80B4     	 push {r7}
 1317              	.LCFI86:
 1318              	 .cfi_def_cfa_offset 4
 1319              	 .cfi_offset 7,-4
 1320 0002 85B0     	 sub sp,sp,#20
 1321              	.LCFI87:
 1322              	 .cfi_def_cfa_offset 24
 1323 0004 00AF     	 add r7,sp,#0
 1324              	.LCFI88:
 1325              	 .cfi_def_cfa_register 7
 542:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t *flash_addr_ptr;
 543:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t *ram_addr_ptr;
 544:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t byte_index;
 545:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 546:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.flash_data_addr;
 1326              	 .loc 3 546 0
 1327 0006 0F4B     	 ldr r3,.L81
 1328 0008 5B68     	 ldr r3,[r3,#4]
 1329 000a BB60     	 str r3,[r7,#8]
 547:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   ram_addr_ptr = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;
 1330              	 .loc 3 547 0
 1331 000c 0E4B     	 ldr r3,.L81+4
 1332 000e 7B60     	 str r3,[r7,#4]
 548:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 549:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   for(byte_index = 0U ; byte_index < E_EEPROM_XMC4_MAX_WORDS; byte_index++)
 1333              	 .loc 3 549 0
 1334 0010 0023     	 movs r3,#0
 1335 0012 FB60     	 str r3,[r7,#12]
 1336 0014 0CE0     	 b .L79
 1337              	.L80:
 550:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 551:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     *(ram_addr_ptr + byte_index) = *(flash_addr_ptr + byte_index);
 1338              	 .loc 3 551 0 discriminator 3
 1339 0016 FB68     	 ldr r3,[r7,#12]
 1340 0018 9B00     	 lsls r3,r3,#2
 1341 001a 7A68     	 ldr r2,[r7,#4]
 1342 001c 1344     	 add r3,r3,r2
 1343 001e FA68     	 ldr r2,[r7,#12]
 1344 0020 9200     	 lsls r2,r2,#2
 1345 0022 B968     	 ldr r1,[r7,#8]
 1346 0024 0A44     	 add r2,r2,r1
 1347 0026 1268     	 ldr r2,[r2]
 1348 0028 1A60     	 str r2,[r3]
 549:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 1349              	 .loc 3 549 0 discriminator 3
 1350 002a FB68     	 ldr r3,[r7,#12]
 1351 002c 0133     	 adds r3,r3,#1
 1352 002e FB60     	 str r3,[r7,#12]
 1353              	.L79:
 549:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 1354              	 .loc 3 549 0 is_stmt 0 discriminator 1
 1355 0030 FB68     	 ldr r3,[r7,#12]
 1356 0032 B3F5806F 	 cmp r3,#1024
 1357 0036 EED3     	 bcc .L80
 552:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   }
 553:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 1358              	 .loc 3 553 0 is_stmt 1
 1359 0038 1437     	 adds r7,r7,#20
 1360              	.LCFI89:
 1361              	 .cfi_def_cfa_offset 4
 1362 003a BD46     	 mov sp,r7
 1363              	.LCFI90:
 1364              	 .cfi_def_cfa_register 13
 1365              	 
 1366 003c 5DF8047B 	 ldr r7,[sp],#4
 1367              	.LCFI91:
 1368              	 .cfi_restore 7
 1369              	 .cfi_def_cfa_offset 0
 1370 0040 7047     	 bx lr
 1371              	.L82:
 1372 0042 00BF     	 .align 2
 1373              	.L81:
 1374 0044 00000000 	 .word e_eeprom_xmc4_sector_info
 1375 0048 00000000 	 .word e_eeprom_xmc4_data_buffer
 1376              	 .cfi_endproc
 1377              	.LFE170:
 1379              	 .text
 1380              	.Letext0:
 1381              	 .file 4 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1382              	 .file 5 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1383              	 .file 6 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Infineon/XMC4300_series/Include/XMC4300.h"
 1384              	 .file 7 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/DAVE_common.h"
 1385              	 .file 8 "../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.h"
 1386              	 .file 9 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 e_eeprom_xmc4.c
    {standard input}:20     .text.XMC_FLASH_SetMargin:00000000 $t
    {standard input}:24     .text.XMC_FLASH_SetMargin:00000000 XMC_FLASH_SetMargin
    {standard input}:72     .text.XMC_FLASH_SetMargin:00000030 $d
    {standard input}:77     .text.XMC_FLASH_EnableDoubleBitErrorTrap:00000000 $t
    {standard input}:81     .text.XMC_FLASH_EnableDoubleBitErrorTrap:00000000 XMC_FLASH_EnableDoubleBitErrorTrap
    {standard input}:118    .text.XMC_FLASH_EnableDoubleBitErrorTrap:00000024 $d
    {standard input}:123    .text.XMC_FLASH_DisableDoubleBitErrorTrap:00000000 $t
    {standard input}:127    .text.XMC_FLASH_DisableDoubleBitErrorTrap:00000000 XMC_FLASH_DisableDoubleBitErrorTrap
    {standard input}:164    .text.XMC_FLASH_DisableDoubleBitErrorTrap:00000024 $d
    {standard input}:169    .text.XMC_FCE_InitializeSeedValue:00000000 $t
    {standard input}:173    .text.XMC_FCE_InitializeSeedValue:00000000 XMC_FCE_InitializeSeedValue
    {standard input}:215    .bss.e_eeprom_xmc4_data_buffer:00000000 $d
    {standard input}:218    .bss.e_eeprom_xmc4_data_buffer:00000000 e_eeprom_xmc4_data_buffer
    {standard input}:221    .data.e_eeprom_xmc4_sector_info:00000000 $d
    {standard input}:224    .data.e_eeprom_xmc4_sector_info:00000000 e_eeprom_xmc4_sector_info
    {standard input}:230    .rodata.e_eeprom_xmc4_fce:00000000 $d
    {standard input}:233    .rodata.e_eeprom_xmc4_fce:00000000 e_eeprom_xmc4_fce
    {standard input}:240    .text.E_EEPROM_XMC4_GetAppVersion:00000000 $t
    {standard input}:245    .text.E_EEPROM_XMC4_GetAppVersion:00000000 E_EEPROM_XMC4_GetAppVersion
    {standard input}:306    .text.E_EEPROM_XMC4_Init:00000000 $t
    {standard input}:311    .text.E_EEPROM_XMC4_Init:00000000 E_EEPROM_XMC4_Init
    {standard input}:1019   .text.E_EEPROM_XMC4_lInitReadSectorInfo:00000000 E_EEPROM_XMC4_lInitReadSectorInfo
    {standard input}:1152   .text.E_EEPROM_XMC4_lInitEraseStateMachine:00000000 E_EEPROM_XMC4_lInitEraseStateMachine
    {standard input}:1309   .text.E_EEPROM_XMC4_lCopyFlashToRam:00000000 E_EEPROM_XMC4_lCopyFlashToRam
    {standard input}:451    .text.E_EEPROM_XMC4_Init:000000c0 $d
    {standard input}:460    .text.E_EEPROM_XMC4_WriteByte:00000000 $t
    {standard input}:465    .text.E_EEPROM_XMC4_WriteByte:00000000 E_EEPROM_XMC4_WriteByte
    {standard input}:513    .text.E_EEPROM_XMC4_WriteByte:0000002c $d
    {standard input}:518    .text.E_EEPROM_XMC4_WriteArray:00000000 $t
    {standard input}:523    .text.E_EEPROM_XMC4_WriteArray:00000000 E_EEPROM_XMC4_WriteArray
    {standard input}:591    .text.E_EEPROM_XMC4_WriteArray:00000048 $d
    {standard input}:596    .text.E_EEPROM_XMC4_ReadByte:00000000 $t
    {standard input}:601    .text.E_EEPROM_XMC4_ReadByte:00000000 E_EEPROM_XMC4_ReadByte
    {standard input}:648    .text.E_EEPROM_XMC4_ReadByte:00000028 $d
    {standard input}:653    .text.E_EEPROM_XMC4_ReadArray:00000000 $t
    {standard input}:658    .text.E_EEPROM_XMC4_ReadArray:00000000 E_EEPROM_XMC4_ReadArray
    {standard input}:726    .text.E_EEPROM_XMC4_ReadArray:00000048 $d
    {standard input}:731    .text.E_EEPROM_XMC4_UpdateFlashContents:00000000 $t
    {standard input}:736    .text.E_EEPROM_XMC4_UpdateFlashContents:00000000 E_EEPROM_XMC4_UpdateFlashContents
    {standard input}:920    .text.E_EEPROM_XMC4_lWriteToFlash:00000000 E_EEPROM_XMC4_lWriteToFlash
    {standard input}:850    .text.E_EEPROM_XMC4_UpdateFlashContents:00000094 $d
    {standard input}:858    .text.E_EEPROM_XMC4_IsFlashEmpty:00000000 $t
    {standard input}:863    .text.E_EEPROM_XMC4_IsFlashEmpty:00000000 E_EEPROM_XMC4_IsFlashEmpty
    {standard input}:911    .text.E_EEPROM_XMC4_IsFlashEmpty:00000024 $d
    {standard input}:916    .text.E_EEPROM_XMC4_lWriteToFlash:00000000 $t
    {standard input}:1257   .text.E_EEPROM_XMC4_lCalculateCRC:00000000 E_EEPROM_XMC4_lCalculateCRC
    {standard input}:1008   .text.E_EEPROM_XMC4_lWriteToFlash:0000006c $d
    {standard input}:1015   .text.E_EEPROM_XMC4_lInitReadSectorInfo:00000000 $t
    {standard input}:1142   .text.E_EEPROM_XMC4_lInitReadSectorInfo:000000a4 $d
    {standard input}:1148   .text.E_EEPROM_XMC4_lInitEraseStateMachine:00000000 $t
    {standard input}:1248   .text.E_EEPROM_XMC4_lInitEraseStateMachine:0000007c $d
    {standard input}:1253   .text.E_EEPROM_XMC4_lCalculateCRC:00000000 $t
    {standard input}:1300   .text.E_EEPROM_XMC4_lCalculateCRC:0000002c $d
    {standard input}:1305   .text.E_EEPROM_XMC4_lCopyFlashToRam:00000000 $t
    {standard input}:1374   .text.E_EEPROM_XMC4_lCopyFlashToRam:00000044 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_FCE_Enable
XMC_FCE_Init
XMC_FLASH_ClearStatus
XMC_FLASH_ProgramPage
XMC_FLASH_GetStatus
XMC_FLASH_EraseSector
XMC_FCE_CalculateCRC32
