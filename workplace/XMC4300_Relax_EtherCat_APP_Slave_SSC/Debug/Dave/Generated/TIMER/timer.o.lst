   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "timer.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_CCU4_EnableClock,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_CCU4_EnableClock:
  25              	.LFB134:
  26              	 .file 1 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc/xmc_ccu4.h"
   1:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
   2:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @file xmc_ccu4.h
   3:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @date 2016-03-09
   4:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
   5:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @cond
   6:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
   7:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
   9:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * All rights reserved.                        
  11:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                             
  12:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * following conditions are met:   
  14:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  15:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * disclaimer.                        
  17:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
  18:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
  21:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * products derived from this software without specific prior written permission.                  
  23:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  24:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  32:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
  35:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  36:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Change History
  37:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * --------------
  38:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  39:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-02-20:
  40:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Initial <br>
  41:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Documentation updates <br>
  42:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  43:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-06-20:
  44:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  45:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  46:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-07-22:
  47:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  48:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  49:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-08-17:
  50:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_PRESCALER_t enum is added to set the prescaler divider. <br>
  51:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t enum item names are updated according to the guideli
  52:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_EnableShadowTransfer() API is made as inline, to improve the speed. <br>
  53:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  54:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-09-29:
  55:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - In XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t, two more enum items are added to support exte
  56:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *       settings.
  57:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  58:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-10-07:
  59:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_GetEvent() is made as inline.
  60:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_MULTI_IRQ_ID_t is added to support the XMC_CCU4_SLICE_EnableMultipleEvents(
  61:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *       XMC_CCU4_SLICE_DisableMultipleEvents() APIs.
  62:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - DOC updates for the newly added APIs.
  63:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  64:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2016-03-09:
  65:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Optimization of write only registers 
  66:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @endcond
  67:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
  68:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  69:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #ifndef XMC_CCU4_H
  70:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #define XMC_CCU4_H
  71:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  
  72:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
  73:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * HEADER FILES
  74:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
  75:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #include "xmc_common.h"
  76:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40)
  77:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  78:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if UC_FAMILY == XMC1
  79:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  #include "xmc1_ccu4_map.h"
  80:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
  81:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  82:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if UC_FAMILY == XMC4
  83:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  #include "xmc4_ccu4_map.h"
  84:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
  85:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  86:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
  87:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @addtogroup XMClib XMC Peripheral Library
  88:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @{
  89:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
  90:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  
  91:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
  92:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @addtogroup CCU4
  93:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @brief Capture Compare Unit 4 (CCU4) low level driver for XMC family of microcontrollers<br>
  94:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  95:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The CCU4 peripheral is a major component for systems that need general purpose timers for signal
  96:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * monitoring/conditioning and Pulse Width Modulation (PWM) signal generation. Power electronic con
  97:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * switched mode power supplies or interruptible power supplies, can easily be implemented with the
  98:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CCU4 peripheral.\n
  99:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Each CCU4 module is comprised of four identical 16 bit Capture/Compare Timer slices, CC4y (where
 100:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * timer slice can work in compare mode or in capture mode.
 101:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 102:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * APIs provided in this file cover the following functional blocks of CCU4:\n
 103:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -- Timer configuration, Capture configuration, Function/Event configuration, Interrupt configura
 104:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Note:
 105:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 1. SLICE (APIs prefixed with e.g. XMC_CCU4_SLICE_)
 106:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2. Module (APIs are not having any prefix e.g. XMC_CCU4_)
 107:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 108:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Timer(Compare mode) configuration:
 109:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_COMPARE_CONFIG_t and
 110:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * function XMC_CCU4_SLICE_CompareInit().
 111:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 112:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 113:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Start and Stop the timer. (XMC_CCU4_SLICE_StartTimer(), XMC_CCU4_SLICE_StopTimer())
 114:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Update the period, compare, Dither, Prescaler  and Passive values. (XMC_CCU4_SLICE_SetTimerPe
 115:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_SetTimerCompareMatch(), XMC_CCU4_SLICE_SetPrescaler(), XMC_CCU4_SLICE_SetDithe
 116:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_SetPassiveLevel())
 117:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Enable the slices to support multichannel mode. (XMC_CCU4_SLICE_EnableMultiChannelMode())
 118:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 119:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Capture configuration:
 120:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_CAPTURE_CONFIG_t and
 121:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * function XMC_CCU4_SLICE_CaptureInit().
 122:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 123:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 124:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Configure the capture functionality. (XMC_CCU4_SLICE_Capture0Config(), XMC_CCU4_SLICE_Capture
 125:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Read the captured values along with the status, which indicate the value is latest or not.
 126:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    (XMC_CCU4_SLICE_GetCaptureRegisterValue())
 127:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 128:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Function/Event configuration:
 129:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_EVENT_CONFIG_t.\n
 130:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 131:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 132:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Enable and Disable the events. (XMC_CCU4_SLICE_EnableEvent(), XMC_CCU4_SLICE_DisableEvent())
 133:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Configure to start and stop the timer on external events.(XMC_CCU4_SLICE_StartConfig(), XMC_C
 134:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Modulation, external load and Gating of the timer output.(XMC_CCU4_SLICE_ModulationConfig(), 
 135:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_LoadConfig(), XMC_CCU4_SLICE_GateConfig())
 136:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Control the count direction of the timer based on the external event. (XMC_CCU4_SLICE_Directi
 137:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Count the external events.(XMC_CCU4_SLICE_CountConfig())
 138:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# External Trap. Which can be used as protective feature.(XMC_CCU4_SLICE_EnableTrap(), XMC_CCU4
 139:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_TrapConfig())
 140:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 141:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Interrupt configuration:
 142:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the function to configure the interrupt node to each event (XMC
 143:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @{
 144:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 145:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  
 146:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 147:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * MACROS
 148:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 149:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /* Macro to check if the interrupt enum passed is valid */
 150:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #define XMC_CCU4_SLICE_CHECK_INTERRUPT(interrupt) \
 151:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****     ((interrupt == XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH)           || \
 152:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH)              || \
 153:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP)  || \
 154:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN)|| \
 155:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT0)                 || \
 156:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT1)                 || \
 157:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT2)                 || \
 158:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_TRAP))
 159:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 160:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 161:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * ENUMS
 162:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 163:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 164:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 165:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Typedef for CCU4 Global data structure
 166:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 167:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef CCU4_GLOBAL_TypeDef XMC_CCU4_MODULE_t;
 168:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 169:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 170:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Typedef for CCU4 Slice data structure
 171:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 172:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef CCU4_CC4_TypeDef XMC_CCU4_SLICE_t;
 173:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 174:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 175:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Return Value of an API
 176:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 177:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_STATUS
 178:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 179:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_OK      = 0U, /**< API fulfils request */
 180:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_ERROR       , /**< API cannot fulfil the request */
 181:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_RUNNING     , /**< The timer slice is currently running */
 182:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_IDLE          /**< The timer slice is currently idle */
 183:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_STATUS_t;
 184:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 185:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 186:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  CCU4 module clock
 187:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 188:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_CLOCK
 189:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 190:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_SCU        = 0U, /**< Select the fCCU as the clock */
 191:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_A     , /**< External clock-A */
 192:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_B     , /**< External clock-B */
 193:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_C       /**< External clock-C */
 194:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_CLOCK_t;
 195:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 196:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 197:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CCU4 set the shadow transfer type for multichannel mode
 198:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 199:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER
 200:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 201:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE0       = (uint32_t)0x4000000, /**< Shadow transfe
 202:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      only for slice
 203:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE0  = (uint32_t)0x4000400, /**< Shadow transfe
 204:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      and hardware f
 205:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE1       = (uint32_t)0x8000000, /**< Shadow transfe
 206:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      only for slice
 207:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE1  = (uint32_t)0x8000800, /**< Shadow transfe
 208:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      and hardware f
 209:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE2       = (uint32_t)0x10000000, /**< Shadow transf
 210:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       only for slic
 211:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE2  = (uint32_t)0x10001000, /**< Shadow transf
 212:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       and hardware 
 213:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE3       = (uint32_t)0x20000000, /**< Shadow transf
 214:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       only for slic
 215:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE3  = (uint32_t)0x20002000  /**< Shadow transf
 216:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       and hardware 
 217:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_t;
 218:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 219:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 220:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Operational modes of CCU4 slice
 221:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 222:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MODE
 223:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 224:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODE_COMPARE  = 0U, /**< slice(CC4y) operates in Compare Mode */
 225:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODE_CAPTURE        /**< slice(CC4y) operates in Capture Mode */
 226:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MODE_t;
 227:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 228:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 229:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer counting modes for the slice
 230:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 231:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_COUNT_MODE
 232:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 233:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA  = 0U, /**< Edge Aligned Mode */
 234:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA        /**< Center Aligned Mode */
 235:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_COUNT_MODE_t;
 236:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 237:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 238:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer repetition mode for the slice
 239:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 240:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_REPEAT_MODE
 241:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 242:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT = 0U,  /**< Repetitive mode: continuous mode of operation
 243:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE        /**< Single shot mode: Once a Period match/One mat
 244:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                       occurs timer goes to idle state */
 245:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t;
 246:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 247:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 248:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer counting direction for the CCU4 slice
 249:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 250:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_COUNT_DIR
 251:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 252:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_DIR_UP   = 0U, /**< Counting up */
 253:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_DIR_DOWN       /**< Counting down */
 254:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_COUNT_DIR_t;
 255:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 256:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 257:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Capture mode register sets
 258:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 259:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_CAP_REG_SET
 260:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 261:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_CAP_REG_SET_LOW  = 0U, /**< Capture register-0, Capture register-1 used */
 262:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_CAP_REG_SET_HIGH       /**< Capture register-2, Capture register-3 used */
 263:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_CAP_REG_SET_t;
 264:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 265:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 266:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Prescaler mode
 267:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 268:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_PRESCALER_MODE
 269:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 270:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_MODE_NORMAL = 0U, /**< Fixed division of module clock */
 271:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_MODE_FLOAT        /**< Floating divider. */
 272:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_PRESCALER_MODE_t;
 273:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 274:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 275:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer output passive level
 276:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 277:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL
 278:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 279:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW  = 0U, /**< Passive level = Low */
 280:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH       /**< Passive level = High */
 281:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t;
 282:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 283:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 284:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer clock Divider
 285:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 286:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_PRESCALER
 287:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 288:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_1  = 0U, /**< Slice Clock = fccu4 */
 289:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_2      , /**< Slice Clock = fccu4/2 */
 290:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_4      , /**< Slice Clock = fccu4/4 */
 291:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_8      , /**< Slice Clock = fccu4/8 */
 292:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_16     , /**< Slice Clock = fccu4/16 */
 293:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_32     , /**< Slice Clock = fccu4/32 */
 294:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_64     , /**< Slice Clock = fccu4/64 */
 295:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_128    , /**< Slice Clock = fccu4/128 */
 296:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_256    , /**< Slice Clock = fccu4/256 */
 297:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_512    , /**< Slice Clock = fccu4/512 */
 298:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_1024   , /**< Slice Clock = fccu4/1024 */
 299:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_2048   , /**< Slice Clock = fccu4/2048 */
 300:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_4096   , /**< Slice Clock = fccu4/4096 */
 301:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_8192   , /**< Slice Clock = fccu4/8192 */
 302:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_16384  , /**< Slice Clock = fccu4/16384 */
 303:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_32768    /**< Slice Clock = fccu4/32768 */
 304:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_PRESCALER_t;
 305:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 306:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 307:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Function list
 308:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 309:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_FUNCTION
 310:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 311:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_START           = 0U, /**< Start function */
 312:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_STOP                , /**< Stop function */
 313:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_CAPTURE_EVENT0      , /**< Capture Event-0 function, CCycapt0 signal is u
 314:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                      generation */
 315:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_CAPTURE_EVENT1      , /**< Capture Event-1 function, CCycapt1 signal is u
 316:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                      generation */
 317:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_GATING              , /**< Gating function */
 318:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_DIRECTION           , /**< Direction function */
 319:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_LOAD                , /**< Load function */
 320:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_COUNT               , /**< Counting function */
 321:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_OVERRIDE            , /**< Override function */
 322:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_MODULATION          , /**< Modulation function */
 323:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_TRAP                  /**< Trap function */
 324:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_FUNCTION_t;
 325:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 326:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 327:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event list
 328:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 329:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT
 330:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 331:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_NONE  = 0U, /**< None */
 332:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_0         , /**< Event-0 */
 333:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_1         , /**< Event-1 */
 334:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_2           /**< Event-2 */
 335:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_t;
 336:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 337:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 338:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event trigger criteria  - Edge sensitivity
 339:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 340:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY
 341:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 342:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_NONE         = 0U, /**< None */
 343:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE      , /**< Rising Edge of the input signal gen
 344:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE     , /**< Falling Edge of the input signal ge
 345:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 trigger */
 346:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE          /**< Both Rising and Falling edges cause
 347:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_t;
 348:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 349:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 350:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event trigger criteria  - Level sensitivity
 351:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 352:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY
 353:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 354:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH = 0U, /**< Level sensitive functions react to 
 355:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW  = 1U, /**< Level sensitive functions react to 
 356:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   /* Below enum items can be utilised specific to the functionality */
 357:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_LOW = 0U, /**< Timer counts up, during Low sta
 358:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_HIGH = 1U /**< Timer counts up, during High st
 359:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t;
 360:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 361:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 362:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Low pass filter Configuration. The External Event input should be stable for a selected number 
 363:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 364:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_FILTER
 365:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 366:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_DISABLED  = 0U, /**< No Low Pass Filter */
 367:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_3_CYCLES      , /**< 3 clock cycles */
 368:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_5_CYCLES      , /**< 5 clock cycles */
 369:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_7_CYCLES        /**< 7 clock cycles */
 370:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_FILTER_t;
 371:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 372:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 373:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event Input list. This list depicts the possible input connections to the CCU4 slice.
 374:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Interconnects are specific to each device.
 375:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 376:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef uint8_t XMC_CCU4_SLICE_INPUT_t;
 377:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 378:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 379:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Actions that can be performed upon detection of an external Timer STOP event
 380:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 381:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_END_MODE
 382:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 383:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_STOP       = 0U, /**< Stops the timer, without clearing TIMER regis
 384:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_CLEAR          , /**< Without stopping timer, clears the TIMER regi
 385:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_STOP_CLEAR       /**< Stops the timer and clears the TIMER register
 386:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_END_MODE_t;
 387:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 388:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 389:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Actions that can be performed upon detection of an external Timer START event
 390:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 391:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_START_MODE
 392:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 393:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_START_MODE_TIMER_START       = 0U, /**< Start the timer from the current count of 
 394:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR       /**< Clears the TIMER register and start the ti
 395:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_START_MODE_t;
 396:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 397:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 398:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Modulation of timer output signals
 399:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 400:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MODULATION_MODE
 401:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 402:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT  = 0U, /**< Clear ST and OUT signals */
 403:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT           /**< Clear only the OUT signal */
 404:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MODULATION_MODE_t;
 405:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 406:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 407:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Trap exit mode
 408:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 409:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TRAP_EXIT_MODE
 410:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 411:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC = 0U, /**< Clear trap state as soon as the trap signal is
 412:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW              /**< Clear only when acknowledged by software */
 413:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TRAP_EXIT_MODE_t;
 414:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 415:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 416:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer clear on capture
 417:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 418:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_CLEAR_MODE
 419:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 420:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_NEVER    = 0U, /**< Never clear the timer on any capture event */
 421:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_CAP_HIGH     , /**< Clear only when timer value has been captured
 422:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_CAP_LOW      , /**< Clear only when timer value has been captured
 423:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_ALWAYS         /**< Always clear the timer upon detection of any 
 424:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_CLEAR_MODE_t;
 425:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 426:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 427:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Multi Channel Shadow transfer request configuration options
 428:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 429:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MCMS_ACTION
 430:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 431:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR          = 0U, /**< Transfer Compare and Period Shadow 
 432:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 the actual registers upon MCS xfer 
 433:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP     = 1U, /**< Transfer Compare, Period and Presca
 434:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 register values to the actual regis
 435:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 request */
 436:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT = 3U  /**< Transfer Compare, Period ,Prescaler
 437:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 Compare register values to the actu
 438:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 MCS xfer request */
 439:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MCMS_ACTION_t;
 440:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 441:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 442:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Available Interrupt Event Ids
 443:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 444:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_IRQ_ID
 445:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 446:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH       = 0U , /**< Period match counting up */
 447:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH          = 1U , /**< Period match -> One match counting down */
 448:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP   = 2U , /**< Compare match counting up */
 449:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN = 3U , /**< Compare match counting down */
 450:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT0             = 8U , /**< Event-0 occurrence */
 451:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT1             = 9U , /**< Event-1 occurrence */
 452:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT2             = 10U, /**< Event-2 occurrence */
 453:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_TRAP               = 11U  /**< Trap occurrence */
 454:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_IRQ_ID_t;
 455:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 456:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 457:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Available Interrupt Event Ids, which is added to support multi event APIs
 458:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 459:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MULTI_IRQ_ID
 460:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 461:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_PERIOD_MATCH       = 0x1U,   /**< Period match counting up */
 462:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_ONE_MATCH          = 0x2U,   /**< Period match -> One match counting 
 463:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP   = 0x4U,   /**< Compare match counting up */
 464:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN = 0x8U,   /**< Compare match counting down */
 465:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT0             = 0x100U, /**< Event-0 occurrence */
 466:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT1             = 0x200U, /**< Event-1 occurrence */
 467:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT2             = 0x400U, /**< Event-2 occurrence */
 468:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MULTI_IRQ_ID_t;
 469:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 470:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 471:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Service Request Lines for CCU4. Event are mapped to these SR lines and these are used to generat
 472:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 473:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_SR_ID
 474:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 475:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_0    = 0U, /**< Service Request Line-0 selected  */
 476:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_1        , /**< Service Request Line-1 selected  */
 477:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_2        , /**< Service Request Line-2 selected  */
 478:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_3          /**< Service Request Line-3 selected  */
 479:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_SR_ID_t;
 480:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 481:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 482:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Slice shadow transfer options.
 483:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 484:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SHADOW_TRANSFER
 485:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 486:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_0            = CCU4_GCSS_S0SE_Msk, /**< Transfer Period, Compare a
 487:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 488:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-0 */
 489:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_0     = CCU4_GCSS_S0DSE_Msk, /**< Transfer Dither compare s
 490:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 491:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_0  = CCU4_GCSS_S0PSE_Msk, /**< Transfer Prescaler shadow
 492:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 493:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_1            = CCU4_GCSS_S1SE_Msk, /**< Transfer Period, Compare a
 494:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 495:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-1 */
 496:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_1     = CCU4_GCSS_S1DSE_Msk, /**< Transfer Dither compare s
 497:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual registers for S
 498:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_1  = CCU4_GCSS_S1PSE_Msk, /**< Transfer Prescaler shadow
 499:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 500:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_2            = CCU4_GCSS_S2SE_Msk, /**< Transfer Period, Compare a
 501:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 502:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-2 */
 503:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_2     = CCU4_GCSS_S2DSE_Msk, /**< Transfer Dither compare s
 504:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 505:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_2  = CCU4_GCSS_S2PSE_Msk, /**< Transfer Prescaler shadow
 506:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 507:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_3            = CCU4_GCSS_S3SE_Msk, /**< Transfer Period, Compare a
 508:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 509:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-3 */
 510:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_3     = CCU4_GCSS_S3DSE_Msk, /**< Transfer Dither compare s
 511:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 512:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_3  = CCU4_GCSS_S3PSE_Msk  /**< Transfer Prescaler shadow
 513:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 514:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SHADOW_TRANSFER_t;
 515:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 516:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU4V3) || defined(DOXYGEN)/* Defined for XMC1400 devices only */
 517:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 518:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Slice shadow transfer mode options.
 519:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @note Only available for XMC1400 series
 520:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 521:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE
 522:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 523:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_IN_PERIOD_MATCH_AND_ONE_MATCH = 0U,  /**< Shadow transfer is 
 524:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                 One match. */
 525:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_PERIOD_MATCH = 1U,  /**< Shadow transfer is done only
 526:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_ONE_MATCH = 2U  /**< Shadow transfer is done only in 
 527:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t; 
 528:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 529:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 530:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 531:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Immediate write into configuration register
 532:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC1400 series
 533:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 534:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_WRITE_INTO
 535:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 536:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_PERIOD_CONFIGURATION = CCU4_CC4_STC_IRPC_Msk,                  /**< Imm
 537:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 538:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Con
 539:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_COMPARE_CONFIGURATION = CCU4_CC4_STC_IRCC_Msk,                 /**< Imm
 540:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 541:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Con
 542:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_PASSIVE_LEVEL_CONFIGURATION = CCU4_CC4_STC_IRLC_Msk,           /**< Imm
 543:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 544:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                            Config
 545:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_DITHER_VALUE_CONFIGURATION = CCU4_CC4_STC_IRDC_Msk,            /**< Imm
 546:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 547:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                            Config
 548:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_FLOATING_PRESCALER_VALUE_CONFIGURATION = CCU4_CC4_STC_IRFC_Msk /**< Imm
 549:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 550:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Val
 551:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_WRITE_INTO_t;
 552:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 553:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 554:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 555:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Automatic Shadow Transfer request when writing into shadow register
 556:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC1400 series
 557:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 558:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO
 559:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 560:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PERIOD_SHADOW = CCU4_CC4_STC_ASPC_Msk,        
 561:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 562:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 563:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 564:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE_SHADOW = CCU4_CC4_STC_ASCC_Msk,       
 565:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 566:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 567:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 568:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PASSIVE_LEVEL = CCU4_CC4_STC_ASLC_Msk,        
 569:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 570:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 571:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_DITHER_SHADOW = CCU4_CC4_STC_ASDC_Msk,        
 572:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 573:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 574:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_FLOATING_PRESCALER_SHADOW = CCU4_CC4_STC_ASFC_
 575:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 576:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 577:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 578:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 579:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_t;
 580:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 581:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 582:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Used to create Mask needed for Multi-channel Shadow transfer enable/disable
 583:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 584:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MASK
 585:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 586:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_0  = 1U , /**< SLICE-0 */
 587:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_1  = 2U , /**< SLICE-1 */
 588:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_2  = 4U , /**< SLICE-2 */
 589:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_3  = 8U   /**< SLICE-3 */
 590:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MASK_t;
 591:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 592:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 593:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 594:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * DATA STRUCTURES
 595:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 596:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 597:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 598:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure of an External Event(Event-0/1/2).
 599:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Needed to configure the various aspects of an External Event.
 600:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This structure will not connect the external event with an external function.
 601:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 602:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_EVENT_CONFIG
 603:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 604:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_INPUT_t                   mapped_input; /**< Required input signal for the Event *
 605:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_t  edge;         /**< Select the event edge of the input si
 606:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                               This is needed for an edge sensitive 
 607:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t level;        /**< Select the event level of the input s
 608:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                               This is needed for an level sensitive
 609:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_t            duration;     /**< Low Pass filter duration in terms of 
 610:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_CONFIG_t;
 611:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 612:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /*Anonymous structure/union guard start*/
 613:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(__CC_ARM)
 614:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma push
 615:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma anon_unions
 616:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #elif defined(__TASKING__)
 617:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma warning 586
 618:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 619:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 620:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 621:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure for CCU4 slice. Specifically configures the CCU4 slice to compare 
 622:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This excludes event and function configuration.
 623:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 624:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_COMPARE_CONFIG
 625:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 626:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   union
 627:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   {
 628:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****     struct
 629:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****     {
 630:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t timer_mode : 1;         /**< Edge aligned or Centre Aligned.
 631:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum ::XMC_CCU4_SLICE_TIMER_COUNT_MODE_t */
 632:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t monoshot : 1;           /**< Single shot or Continuous mode .
 633:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t*/
 634:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t shadow_xfer_clear : 1;  /**< Should PR and CR shadow xfer happen when timer is clear
 635:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 10;
 636:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t dither_timer_period: 1; /**< Can the period of the timer dither? */
 637:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t dither_duty_cycle : 1;  /**< Can the compare match of the timer dither? */
 638:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 1;
 639:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t prescaler_mode: 1;      /**< Normal or floating prescaler mode.
 640:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_PRESCALER_MODE_t*/
 641:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 8;
 642:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t mcm_enable : 1;         /**< Multi-Channel mode enable? */
 643:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 6;
 644:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****     };
 645:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****     uint32_t tc;
 646:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   };
 647:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t prescaler_initval : 4;      /**< Initial prescaler divider value 
 648:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                             Accepts enum :: XMC_CCU4_SLICE_PRESCALER_t */
 649:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t float_limit : 4;            /**< The max value which the prescaler divider can increment
 650:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t dither_limit : 4;           /**< The value that determines the spreading of dithering */
 651:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t passive_level : 1;          /**< Configuration of ST and OUT passive levels.
 652:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t*
 653:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer if true.*/
 654:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_COMPARE_CONFIG_t;
 655:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 656:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 657:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure for CCU4 slice. Specifically configures the CCU4 slice to capture 
 658:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This excludes event and function configuration.
 659:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 660:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_CAPTURE_CONFIG
 661:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 662:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   union
 663:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   {
 664:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****     struct
 665:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****     {
 666:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 4;
 667:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t fifo_enable : 1;      /**< Should the capture registers be setup as a FIFO?(Extended
 668:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t timer_clear_mode : 2; /**< How should the timer register be cleared upon detection o
 669:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                           Accepts enum ::XMC_CCU4_SLICE_TIMER_CLEAR_MODE_t*/
 670:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 4;
 671:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t same_event : 1;       /**< Should the capture event for C1V/C0V and C3V/C2V be same 
 672:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t ignore_full_flag : 1; /**< Should updates to capture registers follow full flag rule
 673:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 3;
 674:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t prescaler_mode: 1;    /**< Normal or floating prescaler Accepts enum :: XMC_CCU4_SLI
 675:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 15;
 676:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****     };
 677:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****     uint32_t tc;
 678:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   };
 679:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t prescaler_initval : 4;    /**< Prescaler divider value */
 680:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t float_limit : 4;          /**< The max value which the prescaler divider can increment t
 681:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t timer_concatenation : 1;  /**< Enables the concatenation of the timer */
 682:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_CAPTURE_CONFIG_t;
 683:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /*Anonymous structure/union guard end*/
 684:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(__CC_ARM)
 685:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma pop
 686:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #elif defined(__TASKING__)
 687:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma warning restore
 688:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 689:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 690:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * API Prototypes
 691:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 692:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 693:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #ifdef __cplusplus
 694:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** extern "C" {
 695:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 696:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 697:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsValidModule(const XMC_CCU4_MODULE_t *const module)
 698:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 699:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   bool tmp = false;
 700:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 701:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = (module == CCU40);
 702:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 703:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41) 
 704:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU41);
 705:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 706:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 707:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42)
 708:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU42);
 709:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 710:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 711:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43)
 712:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU43);
 713:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 714:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 715:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return tmp;  
 716:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } 
 717:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 718:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsValidSlice(const XMC_CCU4_SLICE_t *const slice)
 719:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 720:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   bool tmp = false;
 721:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 722:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = (slice == CCU40_CC40);
 723:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC41)  
 724:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC41);
 725:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 726:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC42)  
 727:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC42);
 728:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 729:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC43)  
 730:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC43);
 731:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 732:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41)  
 733:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC40);
 734:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC41)  
 735:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC41);
 736:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 737:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC42)  
 738:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC42);
 739:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 740:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC43)  
 741:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC43);
 742:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 743:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif 
 744:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42)  
 745:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC40);
 746:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC41)  
 747:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC41);
 748:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 749:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC42)  
 750:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC42);
 751:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 752:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC43)  
 753:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC43);
 754:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 755:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 756:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43)  
 757:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC40);
 758:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC41)  
 759:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC41);
 760:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 761:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC42)  
 762:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC42);
 763:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 764:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC43)  
 765:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC43);
 766:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 767:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif 
 768:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 769:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return tmp;  
 770:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } 
 771:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 772:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 773:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 774:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mcs_action multi-channel shadow transfer request configuration
 775:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 776:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 777:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 778:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 779:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Initialization of global register GCTRL.<br>\n
 780:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  As part of module initialization, behaviour of the module upon detection
 781:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Multi-Channel Mode trigger is configured. Will also invoke the XMC_CCU4_EnableModule().
 782:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  The API call would bring up the required CCU4 module and also initialize the module for
 783:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  the required multi-channel shadow transfer.
 784:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 785:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 786:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_CompareInit()<BR> XMC_CCU4_SLICE_CaptureInit().
 787:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 788:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action);
 789:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 790:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 791:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 792:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param clock Choice of input clock to the module
 793:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 794:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 795:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 796:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 797:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Selects the Module Clock by configuring GCTRL.PCIS bits.<BR>\n
 798:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  There are 3 potential clock sources. This API helps to select the required clock source.
 799:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Call to this API is valid after the XMC_CCU4_Init().
 800:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 801:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 802:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * None.<BR>
 803:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 804:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock);
 805:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 806:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 807:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 808:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 809:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 810:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 811:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 812:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the CCU4 module and brings it to active state.<BR>\n
 813:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Also disables the gating of the clock signal (if applicable depending on the device being select
 814:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Invoke this API before any operations are done on the CCU4 module. Invoked from  XMC_CCU4_Init()
 815:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 816:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 817:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SetModuleClock()<BR> XMC_CCU4_DisableModule()<BR> XMC_CCU4_StartPrescaler().
 818:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 819:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module);
 820:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 821:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 822:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 823:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 824:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 825:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 826:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 827:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Brings the CCU4 module to reset state and enables gating of the clock signal(if applicable depen
 828:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * on the device being selected).<BR>\n
 829:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Invoke this API when a CCU4 module needs to be disabled completely.
 830:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Any operation on the CCU4 module will have no effect after this API is called.
 831:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 832:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 833:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableModule()<BR> XMC_CCU4_DisableModule().
 834:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 835:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module);
 836:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 837:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 838:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 839:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 840:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 841:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 842:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 843:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Starts the prescaler and restores clocks to the timer slices, by setting GIDLC.SPRB bit.<BR>\n
 844:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Once the input to the prescaler has been chosen and the prescaler divider of all slices program
 845:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  the prescaler itself may be started. Invoke this  API after XMC_CCU4_Init()
 846:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  (Mandatory to fully initialize the module).Directly accessed register is GIDLC.
 847:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 848:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 849:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescal
 850:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_StopPrescaler().
 851:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 852:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
 853:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 854:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 855:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 856:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 857:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 858:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 859:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 860:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 861:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 862:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 863:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 864:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops the prescaler and blocks clocks to the timer slices, by setting GIDLS.CPRB bit.<BR>\n
 865:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Opposite of the StartPrescaler routine.
 866:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Clears the run bit of the prescaler. Ensures that the module clock is not supplied to
 867:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the slices of the module.Registers directly accessed is GIDLS.
 868:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 869:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 870:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_St
 871:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 872:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_StopPrescaler(XMC_CCU4_MODULE_t *const module)
 873:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 874:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_StopPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 875:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLS |= (uint32_t) CCU4_GIDLS_CPRB_Msk;
 876:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 877:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 878:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 879:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 880:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 881:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 882:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 883:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 884:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the state of the prescaler, by reading GSTAT.PRB bit.<BR>\n
 885:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This will return true if the prescaler is running. If clock is being supplied to the slices of t
 886:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * module then returns as true.
 887:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 888:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 889:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_D
 890:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 891:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsPrescalerRunning(XMC_CCU4_MODULE_t *const module)
 892:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 893:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_IsPrescalerRunning:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 894:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((bool)((module->GSTAT & (uint32_t) CCU4_GSTAT_PRB_Msk) == (uint32_t)CCU4_GSTAT_PRB_Msk));
 895:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 896:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 897:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 898:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 899:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param clock_mask Slices whose clocks are to be enabled simultaneously.
 900:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Bit location 0/1/2/3 represents slice-0/1/2/3 respectively.
 901:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x1 to 0xF]
 902:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 903:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 904:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 905:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 906:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables clocks of multiple slices at a time, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
 907:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * GIDLC.CS3I bits.\n\n
 908:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Takes an input clock_mask, which determines the slices that would receive the clock. Bring them 
 909:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * of the idle state simultaneously.
 910:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 911:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 912:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock().
 913:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 914:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableMultipleClocks(XMC_CCU4_MODULE_t *const module, const uint8_t c
 915:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 916:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU4_IsValidModule(module)
 917:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Wrong clock mask", (clock_mask < 16U));
 918:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 919:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC |= (uint32_t) clock_mask;
 920:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 921:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 922:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 923:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 924:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number Slice for which the clock should be Enabled.
 925:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x0 to 0x3]
 926:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 927:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 928:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 929:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 930:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Enables the slice timer clock, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
 931:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  GIDLC.CS3I bits according to the selected \a slice_number.\n\n
 932:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  It is possible to enable/disable clock at slice level. This uses the \b slice_number to indicat
 933:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  slice whose clock needs to be enabled.
 934:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 935:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 936:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XM
 937:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 938:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_numb
 939:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
  27              	 .loc 1 939 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
 940:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 941:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));
 942:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 943:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC |= ((uint32_t) 1) << slice_number;
  45              	 .loc 1 943 0
  46 000c 7B68     	 ldr r3,[r7,#4]
  47 000e DA68     	 ldr r2,[r3,#12]
  48 0010 FB78     	 ldrb r3,[r7,#3]
  49 0012 0121     	 movs r1,#1
  50 0014 01FA03F3 	 lsl r3,r1,r3
  51 0018 1A43     	 orrs r2,r2,r3
  52 001a 7B68     	 ldr r3,[r7,#4]
  53 001c DA60     	 str r2,[r3,#12]
 944:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
  54              	 .loc 1 944 0
  55 001e 0C37     	 adds r7,r7,#12
  56              	.LCFI3:
  57              	 .cfi_def_cfa_offset 4
  58 0020 BD46     	 mov sp,r7
  59              	.LCFI4:
  60              	 .cfi_def_cfa_register 13
  61              	 
  62 0022 5DF8047B 	 ldr r7,[sp],#4
  63              	.LCFI5:
  64              	 .cfi_restore 7
  65              	 .cfi_def_cfa_offset 0
  66 0026 7047     	 bx lr
  67              	 .cfi_endproc
  68              	.LFE134:
  70              	 .section .text.XMC_CCU4_SLICE_IsTimerRunning,"ax",%progbits
  71              	 .align 2
  72              	 .thumb
  73              	 .thumb_func
  75              	XMC_CCU4_SLICE_IsTimerRunning:
  76              	.LFB139:
 945:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 946:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 947:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 948:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number Slice for which the clock should be disabled.
 949:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x0 to 0x3]
 950:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 951:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 952:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 953:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 954:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the slice timer clock, by configuring GIDLS.SS0I, GIDLS.SSS1I, GIDLS.SSS2I, 
 955:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * GIDLS.SSS3I bits according to the selected \a slice_number .\n\n
 956:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is possible to disable clock at slice level using the module pointer.
 957:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \b slice_number is used to disable the clock to a given slice of the module.
 958:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is GIDLS.
 959:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 960:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 961:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC
 962:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 963:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_DisableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_num
 964:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 965:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 966:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Slice Number", (slice_number < 4U));
 967:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 968:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLS |= ((uint32_t) 1) << slice_number;
 969:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 970:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 971:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 972:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
 973:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param compare_init Pointer to slice configuration structure
 974:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 975:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 976:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 977:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 978:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Initialization of a CC4 slice to compare mode, by configuring CC4yTC, CC4yCMC, CC4yPSC, CC4yDITH
 979:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yFPCS, CC4yCHC registers.\n\n 
 980:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4 slice is configured with Timer configurations in this routine.
 981:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After initialization user has to explicitly enable the shadow transfer for the required values b
 982:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableShadowTransfer() with appropriate mask.
 983:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 984:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 985:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * None.
 986:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 987:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
 988:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init);
 989:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 990:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 991:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
 992:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param capture_init Pointer to slice configuration structure
 993:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 994:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 995:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 996:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 997:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Initialization of a CC4 slice to capture mode, by configuring CC4yTC, CC4yCMC, CC4yPSC,CC4yFPCS 
 998:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4 slice is configured with Capture configurations in  this routine.After initialization user h
 999:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * enable the shadow transfer for the required  values by calling XMC_CCU4_EnableShadowTransfer()
1000:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * with appropriate mask.
1001:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1002:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1003:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config().
1004:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1005:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
1006:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init);
1007:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1008:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1009:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1010:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1011:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Start Function
1012:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param start_mode Behavior of slice when the start function is activated
1013:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1014:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1015:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1016:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1017:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configures the Start Function of the slice, by configuring CC4yCMC.ENDS and CC4yTC.ENDM bits.\n
1018:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Start function is mapped with one of the 3 events. An external signal can control when a CC4 ti
1019:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Additionally, the behaviour of the slice upon activation of the start function is configured as
1020:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1021:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1022:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1023:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1024:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
1025:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_EVENT_t event,
1026:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_START_MODE_t start_mode);
1027:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1028:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1029:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1030:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Stop Function
1031:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param end_mode Behavior of slice when the stop function is activated
1032:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1033:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1034:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1035:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1036:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Stop function for the slice, by configuring CC4yCMC.STRTS and CC4yTC.STRM bits.\n
1037:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stop function is mapped with one of the 3 events. An external signal can control when a CCU4 tim
1038:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Additionally, the behaviour of the slice upon activation of the stop function is configured as w
1039:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1040:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1041:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1042:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1043:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
1044:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_EVENT_t event,
1045:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_END_MODE_t end_mode);
1046:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1047:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1048:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1049:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External load Function
1050:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1051:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1052:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1053:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1054:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configures the Load Function for the slice, by configuring CC4yCMC.LDS bit.\n\n
1055:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Load function is mapped with one of the 3 events. Up on occurrence of the event,\n
1056:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  if CC4yTCST.CDIR set to 0,CC4yTIMER register is reloaded with the value from compare register\n
1057:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  if CC4yTCST.CDIR set to 1,CC4yTIMER register is reloaded with the value from period register\n
1058:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1059:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1060:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1061:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1062:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1063:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1064:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1065:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1066:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1067:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Modulation Function
1068:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mod_mode Desired Modulation mode
1069:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param synch_with_pwm Option to synchronize modulation with PWM start
1070:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                       Pass \b true if the modulation needs to be synchronized with PWM signal.
1071:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1072:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1073:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1074:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1075:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Output Modulation Function of the slice, by configuring CCeyCMC.MOS, CC4yTC.EMT a
1076:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTC.EMS bits.\n\n
1077:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Modulation function is mapped with one of the 3 events. The output signal of the CCU can
1078:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * be modulated according to a external input.  Additionally, the behaviour of the slice upon activ
1079:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * of the modulation function is configured as well.
1080:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1081:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1082:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1083:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1084:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
1085:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const XMC_CCU4_SLICE_EVENT_t event,
1086:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
1087:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const bool synch_with_pwm);
1088:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1089:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1090:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1091:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Count Function
1092:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1093:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1094:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1095:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1096:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Count Function of the slice, by configuring CC4yCMC.CNTS bit.\n\n
1097:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Count function is mapped with one of the 3 events. CCU4 slice can take an external
1098:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * signal to act as the counting event. The CCU4 slice would count the
1099:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * edges present on the \b event selected.
1100:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1101:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1102:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1103:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1104:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1105:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1106:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1107:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1108:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event  Map an External event to the External Gating Function
1109:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1110:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1111:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1112:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1113:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Gating Function of the slice, by configuring CC4yCMC.GATES bit.\n\n
1114:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Gating function is mapped with one of the 3 events.  A CCU4 slice can use an input signal that w
1115:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * operate as counter gating. If the configured Active level is detected the counter will gate all 
1116:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1117:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1118:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1119:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1120:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1121:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1122:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1123:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1124:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the Capture-0 Function
1125:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1126:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1127:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1128:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1129:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Capture-0 Function of the slice, by configuring CC4yCMC.CAP0S bit.\n\n
1130:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Capture function is mapped with one of the 3 events.  A CCU4 slice can be configured into captur
1131:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * with the selected \b event. In this mode the CCU4 will capture the timer value into CC4yC0V and 
1132:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1133:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1134:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1135:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1136:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
1137:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1138:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1139:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1140:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the Capture-1 Function
1141:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1142:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1143:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1144:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1145:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Capture-1 Function of the slice, by configuring CC4yCMC.CAP1S bit.\n\n
1146:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Capture function is mapped with one of the 3 events. A CCU4 slice can be configured into capture
1147:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode with the selected \b event. In this mode the CCU4 will capture the timer value into CC4yC2V
1148:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1149:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1150:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1151:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1152:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
1153:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1154:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1155:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1156:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1157:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    bool would return true if the extended capture read back mode is enabled<BR>
1158:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1159:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1160:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Checks if Extended capture mode read is enabled for particular slice or not, by reading CC4yTC.E
1161:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * In this mode the there is only one associated read address for all the capture registers.
1162:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Individual capture registers can still be accessed in this mode.
1163:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1164:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1165:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_GetCapturedValueFromFifo().
1166:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1167:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsExtendedCapReadEnabled(const XMC_CCU4_SLICE_t *const slice)
1168:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1169:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_IsExtendedCapReadEnabled:Invalid Module Pointer", XMC_CCU4_IsValidSlic
1170:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((bool)((slice->TC & (uint32_t) CCU4_CC4_TC_ECM_Msk) == (uint32_t)CCU4_CC4_TC_ECM_Msk));
1171:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1172:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1173:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU4V1) /* Defined for XMC4500, XMC4400, XMC4200, XMC4100 devices only */
1174:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1175:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1176:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number to check whether read value belongs to required slice or not
1177:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1178:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   int32_t   Returns -1 if the FIFO value being retrieved is not from the \b slice_number.
1179:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             Returns the value captured in the \b slice_number, if captured value is from the cor
1180:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                     Range: [0x0 to 0xFFFF]
1181:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1182:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1183:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Read captured value from FIFO(ECRD register).\n\n
1184:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1185:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1186:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1187:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * derived/inferred from the captured values.
1188:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1189:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1190:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_IsExtendedCapReadEnabled().
1191:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC4500, XMC4400, XMC4200 and XMC4100 series 
1192:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1193:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** int32_t XMC_CCU4_GetCapturedValueFromFifo(const XMC_CCU4_MODULE_t *const module, const uint8_t slic
1194:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #else
1195:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1196:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1197:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param set The capture register set from which the captured value is to be retrieved
1198:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1199:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    uint32_t Returns the value captured in the \b slice_number
1200:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             Range: [0x0 to 0xFFFF]
1201:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1202:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1203:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Read captured value from FIFO(CC4yECRD0 and CC4yECRD1).\n\n
1204:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1205:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1206:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1207:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * derived/inferred from the captured values.
1208:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1209:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1210:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_IsExtendedCapReadEnabled().
1211:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @note Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices only. For other d
1212:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1213:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** uint32_t XMC_CCU4_SLICE_GetCapturedValueFromFifo(const XMC_CCU4_SLICE_t *const slice,
1214:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 		                                             const XMC_CCU4_SLICE_CAP_REG_SET_t set);
1215:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
1216:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1217:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1218:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1219:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Count Direction Function
1220:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1221:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1222:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1223:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1224:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Count Direction of the slice, by configuring CC4yCMC.UDS bit.\n\n
1225:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Count direction function is mapped with one of the 3 events. A slice can be configured to change
1226:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTIMER count direction depending on an external signal.
1227:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1228:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1229:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1230:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1231:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t eve
1232:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1233:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1234:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1235:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1236:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1237:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1238:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1239:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the status bit override Function of the slice, by configuring CC4yCMC.OFS bit.\n\n
1240:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Status bit override function is mapped with one of the 3 events. A slice can be configured to ch
1241:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * output of the timer's CC4yST signal depending on an external signal. 
1242:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1243:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1244:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent().
1245:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1246:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice);
1247:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1248:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1249:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1250:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param exit_mode How should a previously logged trap state be exited?
1251:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param synch_with_pwm Should exit of trap state be synchronized with PWM cycle start?
1252:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1253:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1254:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1255:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1256:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Trap Function of the slice, by configuring CC4yCMC.TS, CC4yTC.TRPSE, and CC4yTC.T
1257:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Trap function is mapped with Event-2. Criteria for exiting the trap state is configured.
1258:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This trap function allows PWM outputs to react on the state of an input pin.
1259:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Thus PWM output can be forced to inactive state upon detection of a trap.
1260:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is also possible to synchronize the trap function with the PWM signal using the \b synch_with
1261:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1262:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1263:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1264:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1265:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
1266:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
1267:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                bool synch_with_pwm);
1268:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1269:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1270:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1271:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1272:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param ev1_config Pointer to event 1 configuration data
1273:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param ev2_config Pointer to event 2 configuration data
1274:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1275:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1276:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1277:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1278:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1279:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Map Status bit override function with an Event1 & Event 2 of the slice and configure CC4yINS reg
1280:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Details such as the input mapped to the event, event detection criteria and Low Pass filter opti
1281:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * by this routine for the events 1 & 2.  Event-1 input would be the trigger to override the value.
1282:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Event-2 input would be the override value.
1283:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1284:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1285:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig().
1286:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1287:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
1288:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_
1289:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_
1290:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1291:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1292:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1293:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event The External Event which needs to be configured.
1294:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param config Pointer to event configuration data.
1295:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1296:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1297:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1298:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1299:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures an External Event of the slice, by updating CC4yINS register .\n\n
1300:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Details such as the input mapped to the event, event detection criteria and low pass filter
1301:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * options are programmed by this routine. The Event \b config  will configure the input selection,
1302:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the edge selection, the level selection and the Low pass filter for the  event.
1303:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1304:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1305:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_LoadConfig()<BR
1306:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ModulationConfig()<BR> XMC_CCU4_SLICE_CountConfig()<BR> XMC_CCU4_SLICE_GateConfi
1307:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config()<BR> XMC_CCU4_SLICE_Directio
1308:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig()<BR> XMC_CCU4_SLICE_TrapConfig().
1309:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1310:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
1311:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                    const XMC_CCU4_SLICE_EVENT_t event,
1312:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config);
1313:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1314:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1315:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1316:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event The External Event which needs to be configured.
1317:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param input One of the 16 inputs meant to be mapped to the desired event
1318:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1319:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1320:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1321:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1322:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1323:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Selects an input for an external event, by configuring CC4yINS register.\n\n
1324:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is possible to select one of the possible 16 input signals for a given Event.
1325:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This configures the CC4yINS.EVxIS for the selected event.
1326:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1327:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1328:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_LoadConfig()<BR
1329:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ModulationConfig()<BR> XMC_CCU4_SLICE_CountConfig()<BR> XMC_CCU4_SLICE_GateConfi
1330:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config()<BR> XMC_CCU4_SLICE_Directio
1331:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig()<BR> XMC_CCU4_SLICE_TrapConfig().
1332:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1333:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
1334:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                              const XMC_CCU4_SLICE_EVENT_t event,
1335:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                              const XMC_CCU4_SLICE_INPUT_t input);
1336:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1337:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1338:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1339:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1340:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1341:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1342:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1343:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the trap feature, by setting CC4yTC.TRAPE0, CC4yTC.TRAPE1, CC4yTC.TRAPE2 and CC4yTC.TRAP
1344:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \a out_mask.\n\n
1345:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * A particularly useful feature where the PWM output can be forced inactive upon detection of a tr
1346:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * can be the output of a sensing element which has just detected an abnormal electrical condition.
1347:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1348:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1349:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_TrapConfig()<BR> XMC_CCU4_SLICE_DisableTrap()<BR> XMC_CCU4_SLICE_ConfigureEvent(
1350:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInput().
1351:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1352:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableTrap(XMC_CCU4_SLICE_t *const slice)
1353:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1354:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1355:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC |= (uint32_t) CCU4_CC4_TC_TRAPE_Msk;
1356:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1357:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1358:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1359:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1360:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1361:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1362:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1363:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1364:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the trap feature, by clearing CC4yTC.TRAPE0, CC4yTC.TRAPE1, CC4yTC.TRAPE2 and CC4yTC.TR
1365:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \a out_mask.\n\n.\n\n
1366:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will revert the changes done by XMC_CCU4_SLICE_EnableTrap().
1367:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This Ensures that the TRAP function has no effect on the output of the CCU4 slice.
1368:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1369:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1370:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableTrap().
1371:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1372:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableTrap(XMC_CCU4_SLICE_t *const slice)
1373:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1374:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1375:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_TRAPE_Msk);
1376:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1377:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1378:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1379:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1380:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1381:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    bool returns \b true if the Timer is running else it returns \b false.
1382:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1383:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1384:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the state of the timer (Either Running or stopped(idle)), by reading CC4yTCST.TRB bit.
1385:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1386:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1387:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
1388:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1389:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
1390:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
  77              	 .loc 1 1390 0
  78              	 .cfi_startproc
  79              	 
  80              	 
  81              	 
  82 0000 80B4     	 push {r7}
  83              	.LCFI6:
  84              	 .cfi_def_cfa_offset 4
  85              	 .cfi_offset 7,-4
  86 0002 83B0     	 sub sp,sp,#12
  87              	.LCFI7:
  88              	 .cfi_def_cfa_offset 16
  89 0004 00AF     	 add r7,sp,#0
  90              	.LCFI8:
  91              	 .cfi_def_cfa_register 7
  92 0006 7860     	 str r0,[r7,#4]
1391:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1392:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
  93              	 .loc 1 1392 0
  94 0008 7B68     	 ldr r3,[r7,#4]
  95 000a 9B68     	 ldr r3,[r3,#8]
  96 000c 03F00103 	 and r3,r3,#1
  97 0010 002B     	 cmp r3,#0
  98 0012 14BF     	 ite ne
  99 0014 0123     	 movne r3,#1
 100 0016 0023     	 moveq r3,#0
 101 0018 DBB2     	 uxtb r3,r3
1393:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 102              	 .loc 1 1393 0
 103 001a 1846     	 mov r0,r3
 104 001c 0C37     	 adds r7,r7,#12
 105              	.LCFI9:
 106              	 .cfi_def_cfa_offset 4
 107 001e BD46     	 mov sp,r7
 108              	.LCFI10:
 109              	 .cfi_def_cfa_register 13
 110              	 
 111 0020 5DF8047B 	 ldr r7,[sp],#4
 112              	.LCFI11:
 113              	 .cfi_restore 7
 114              	 .cfi_def_cfa_offset 0
 115 0024 7047     	 bx lr
 116              	 .cfi_endproc
 117              	.LFE139:
 119 0026 00BF     	 .section .text.XMC_CCU4_SLICE_StartTimer,"ax",%progbits
 120              	 .align 2
 121              	 .thumb
 122              	 .thumb_func
 124              	XMC_CCU4_SLICE_StartTimer:
 125              	.LFB141:
1394:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1395:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1396:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1397:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1398:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   ::XMC_CCU4_SLICE_TIMER_COUNT_DIR_t returns the direction in which the timer is counting.
1399:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1400:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1401:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the timer counting direction, by reading CC4yTCST.CDIR bit.\n\n
1402:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will return the direction in which the timer is currently
1403:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * incrementing(XMC_CCU4_SLICE_TIMER_COUNT_DIR_UP) or decrementing (XMC_CCU4_SLICE_TIMER_COUNT_DIR_
1404:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1405:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1406:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1407:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1408:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_COUNT_DIR_t XMC_CCU4_SLICE_GetCountingDir(const XMC_CCU4_SLICE
1409:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1410:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCountingDir:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1411:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_COUNT_DIR_t)(((slice->TCST) & CCU4_CC4_TCST_CDIR_Msk) >> CCU4_CC4_TC
1412:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1413:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1414:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1415:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1416:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1417:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1418:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1419:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1420:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Starts the timer counting operation, by setting CC4yTCSET.TRBS bit.\n\n
1421:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is necessary to have configured the CC4 slice before starting its timer.
1422:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Before the Timer is started ensure that the clock is provided to the slice.
1423:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1424:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1425:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StopTimer().
1426:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1427:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
1428:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 126              	 .loc 1 1428 0
 127              	 .cfi_startproc
 128              	 
 129              	 
 130              	 
 131 0000 80B4     	 push {r7}
 132              	.LCFI12:
 133              	 .cfi_def_cfa_offset 4
 134              	 .cfi_offset 7,-4
 135 0002 83B0     	 sub sp,sp,#12
 136              	.LCFI13:
 137              	 .cfi_def_cfa_offset 16
 138 0004 00AF     	 add r7,sp,#0
 139              	.LCFI14:
 140              	 .cfi_def_cfa_register 7
 141 0006 7860     	 str r0,[r7,#4]
1429:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1430:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 142              	 .loc 1 1430 0
 143 0008 7B68     	 ldr r3,[r7,#4]
 144 000a 0122     	 movs r2,#1
 145 000c DA60     	 str r2,[r3,#12]
1431:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 146              	 .loc 1 1431 0
 147 000e 0C37     	 adds r7,r7,#12
 148              	.LCFI15:
 149              	 .cfi_def_cfa_offset 4
 150 0010 BD46     	 mov sp,r7
 151              	.LCFI16:
 152              	 .cfi_def_cfa_register 13
 153              	 
 154 0012 5DF8047B 	 ldr r7,[sp],#4
 155              	.LCFI17:
 156              	 .cfi_restore 7
 157              	 .cfi_def_cfa_offset 0
 158 0016 7047     	 bx lr
 159              	 .cfi_endproc
 160              	.LFE141:
 162              	 .section .text.XMC_CCU4_SLICE_StopTimer,"ax",%progbits
 163              	 .align 2
 164              	 .thumb
 165              	 .thumb_func
 167              	XMC_CCU4_SLICE_StopTimer:
 168              	.LFB142:
1432:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1433:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1434:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1435:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1436:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1437:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1438:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1439:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops the Timer.<BR>\n
1440:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer counting operation can be stopped by invoking this API, by setting CC4yTCCLR.TRBC bit.
1441:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1442:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1443:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1444:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1445:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
1446:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 169              	 .loc 1 1446 0
 170              	 .cfi_startproc
 171              	 
 172              	 
 173              	 
 174 0000 80B4     	 push {r7}
 175              	.LCFI18:
 176              	 .cfi_def_cfa_offset 4
 177              	 .cfi_offset 7,-4
 178 0002 83B0     	 sub sp,sp,#12
 179              	.LCFI19:
 180              	 .cfi_def_cfa_offset 16
 181 0004 00AF     	 add r7,sp,#0
 182              	.LCFI20:
 183              	 .cfi_def_cfa_register 7
 184 0006 7860     	 str r0,[r7,#4]
1447:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1448:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR |= (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 185              	 .loc 1 1448 0
 186 0008 7B68     	 ldr r3,[r7,#4]
 187 000a 1B69     	 ldr r3,[r3,#16]
 188 000c 43F00102 	 orr r2,r3,#1
 189 0010 7B68     	 ldr r3,[r7,#4]
 190 0012 1A61     	 str r2,[r3,#16]
1449:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 191              	 .loc 1 1449 0
 192 0014 0C37     	 adds r7,r7,#12
 193              	.LCFI21:
 194              	 .cfi_def_cfa_offset 4
 195 0016 BD46     	 mov sp,r7
 196              	.LCFI22:
 197              	 .cfi_def_cfa_register 13
 198              	 
 199 0018 5DF8047B 	 ldr r7,[sp],#4
 200              	.LCFI23:
 201              	 .cfi_restore 7
 202              	 .cfi_def_cfa_offset 0
 203 001c 7047     	 bx lr
 204              	 .cfi_endproc
 205              	.LFE142:
 207 001e 00BF     	 .section .text.XMC_CCU4_SLICE_ClearTimer,"ax",%progbits
 208              	 .align 2
 209              	 .thumb
 210              	 .thumb_func
 212              	XMC_CCU4_SLICE_ClearTimer:
 213              	.LFB143:
1450:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1451:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1452:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1453:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1454:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1455:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1456:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1457:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Resets the timer count to zero, by setting CC4yTCCLR.TCC bit.\n\n
1458:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * A timer which has been stopped can still retain the last counted value.
1459:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After invoking this API the timer value will be cleared.
1460:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1461:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1462:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1463:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1464:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
1465:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 214              	 .loc 1 1465 0
 215              	 .cfi_startproc
 216              	 
 217              	 
 218              	 
 219 0000 80B4     	 push {r7}
 220              	.LCFI24:
 221              	 .cfi_def_cfa_offset 4
 222              	 .cfi_offset 7,-4
 223 0002 83B0     	 sub sp,sp,#12
 224              	.LCFI25:
 225              	 .cfi_def_cfa_offset 16
 226 0004 00AF     	 add r7,sp,#0
 227              	.LCFI26:
 228              	 .cfi_def_cfa_register 7
 229 0006 7860     	 str r0,[r7,#4]
1466:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1467:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR |= (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 230              	 .loc 1 1467 0
 231 0008 7B68     	 ldr r3,[r7,#4]
 232 000a 1B69     	 ldr r3,[r3,#16]
 233 000c 43F00202 	 orr r2,r3,#2
 234 0010 7B68     	 ldr r3,[r7,#4]
 235 0012 1A61     	 str r2,[r3,#16]
1468:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 236              	 .loc 1 1468 0
 237 0014 0C37     	 adds r7,r7,#12
 238              	.LCFI27:
 239              	 .cfi_def_cfa_offset 4
 240 0016 BD46     	 mov sp,r7
 241              	.LCFI28:
 242              	 .cfi_def_cfa_register 13
 243              	 
 244 0018 5DF8047B 	 ldr r7,[sp],#4
 245              	.LCFI29:
 246              	 .cfi_restore 7
 247              	 .cfi_def_cfa_offset 0
 248 001c 7047     	 bx lr
 249              	 .cfi_endproc
 250              	.LFE143:
 252 001e 00BF     	 .section .text.XMC_CCU4_SLICE_SetTimerPeriodMatch,"ax",%progbits
 253              	 .align 2
 254              	 .thumb
 255              	 .thumb_func
 257              	XMC_CCU4_SLICE_SetTimerPeriodMatch:
 258              	.LFB147:
1469:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1470:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1471:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1472:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1473:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    ::XMC_CCU4_SLICE_MODE_t returns XMC_CCU4_SLICE_MODE_COMPARE if the slice is operating in comp
1474:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                          returns XMC_CCU4_SLICE_MODE_CAPTURE if the slice is operating in captur
1475:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1476:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1477:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the current mode of operation in the slice (either Capture mode or Compare mode), by r
1478:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTC.CMOD bit.\n\n
1479:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Ensure that before invoking this API the CCU4 slice should be configured otherwise the output of
1480:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * invalid.
1481:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1482:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1483:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1484:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1485:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_MODE_t XMC_CCU4_SLICE_GetSliceMode(const XMC_CCU4_SLICE_t *const sli
1486:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1487:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetSliceMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1488:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_MODE_t)(((slice->TC) & CCU4_CC4_TC_CMOD_Msk) >> CCU4_CC4_TC_CMOD_Pos));
1489:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1490:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1491:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1492:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mode Desired repetition mode (Either single shot or Continuous)
1493:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1494:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1495:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1496:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1497:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Timer to either Single shot mode or continuous mode, by configuring CC4yTC.TSSM b
1498:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1499:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode has been set to single shot. In the continuous mode of operation, the timer starts counting
1500:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * reaching the terminal count.
1501:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1502:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1503:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerRepeatMode().
1504:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1505:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetTimerRepeatMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_RE
1506:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1507:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1508:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1509:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <br>
1510:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  ::XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t returns XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT if continu
1511:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                     returns XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE if single sh
1512:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1513:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1514:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the Timer repeat mode, either Single shot mode or continuous mode, by reading CC4yTC.T
1515:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1516:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode has been set to single shot mode. In the continuous mode of operation, the timer starts cou
1517:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * all over again after reaching the terminal count.
1518:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1519:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1520:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerRepeatMode().
1521:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1522:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t XMC_CCU4_SLICE_GetTimerRepeatMode(
1523:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 		                                                                            const XMC_CCU4_SLICE_
1524:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1525:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice
1526:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t)(((slice->TC) & CCU4_CC4_TC_TSSM_Msk) >> CCU4_CC4_TC_T
1527:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1528:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1529:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1530:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mode Desired counting mode (Either Edge Aligned or Center Aligned)
1531:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1532:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1533:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1534:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1535:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the timer counting mode either Edge Aligned or Center Aligned, by configuring CC4yTC.
1536:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * In the edge aligned mode, the timer counts from 0 to the terminal count. Once the timer count ha
1537:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * compare value, the timer status output asserts itself. It will now deassert only after the timer
1538:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * terminal count.\n In the center aligned mode, the timer first counts from 0 to the terminal coun
1539:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * During this upward and downward counting, the timer status output stays asserted as long as the 
1540:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * greater than the compare value.
1541:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1542:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1543:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerCountingMode().
1544:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1545:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_
1546:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1547:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1548:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1549:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <br>
1550:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  ::XMC_CCU4_SLICE_TIMER_COUNT_MODE_t returns XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA if edge aligned 
1551:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                     returns XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA if center aligned
1552:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1553:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1554:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves timer counting mode either Edge aligned or Center Aligned, by reading CC4yTC.TCM bit.\
1555:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1556:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1557:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerCountingMode().
1558:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1559:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_COUNT_MODE_t XMC_CCU4_SLICE_GetTimerCountingMode(
1560:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 		                                                                           const XMC_CCU4_SLICE_t
1561:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1562:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1563:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_COUNT_MODE_t)(((slice->TC) & CCU4_CC4_TC_TCM_Msk) >> CCU4_CC4_TC_TCM
1564:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1565:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1566:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1567:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param period_val Timer period value
1568:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *        Range: [0x0 to 0xFFFF]
1569:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1570:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1571:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1572:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1573:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the timer period, by writing CC4yPRS register.\n\n
1574:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The frequency of counting/ PWM frequency is determined by this value. The period value is writte
1575:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * register. Explicitly enable the shadow transfer for the the period value by calling
1576:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableShadowTransfer() with appropriate mask. If shadow transfer is enabled and the tim
1577:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * a period match transfers the value from the shadow register to the actual period register.
1578:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1579:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1580:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
1581:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1582:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16
1583:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 259              	 .loc 1 1583 0
 260              	 .cfi_startproc
 261              	 
 262              	 
 263              	 
 264 0000 80B4     	 push {r7}
 265              	.LCFI30:
 266              	 .cfi_def_cfa_offset 4
 267              	 .cfi_offset 7,-4
 268 0002 83B0     	 sub sp,sp,#12
 269              	.LCFI31:
 270              	 .cfi_def_cfa_offset 16
 271 0004 00AF     	 add r7,sp,#0
 272              	.LCFI32:
 273              	 .cfi_def_cfa_register 7
 274 0006 7860     	 str r0,[r7,#4]
 275 0008 0B46     	 mov r3,r1
 276 000a 7B80     	 strh r3,[r7,#2]
1584:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slic
1585:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->PRS = (uint32_t) period_val;
 277              	 .loc 1 1585 0
 278 000c 7A88     	 ldrh r2,[r7,#2]
 279 000e 7B68     	 ldr r3,[r7,#4]
 280 0010 5A63     	 str r2,[r3,#52]
1586:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 281              	 .loc 1 1586 0
 282 0012 0C37     	 adds r7,r7,#12
 283              	.LCFI33:
 284              	 .cfi_def_cfa_offset 4
 285 0014 BD46     	 mov sp,r7
 286              	.LCFI34:
 287              	 .cfi_def_cfa_register 13
 288              	 
 289 0016 5DF8047B 	 ldr r7,[sp],#4
 290              	.LCFI35:
 291              	 .cfi_restore 7
 292              	 .cfi_def_cfa_offset 0
 293 001a 7047     	 bx lr
 294              	 .cfi_endproc
 295              	.LFE147:
 297              	 .section .text.XMC_CCU4_SLICE_SetTimerCompareMatch,"ax",%progbits
 298              	 .align 2
 299              	 .thumb
 300              	 .thumb_func
 302              	XMC_CCU4_SLICE_SetTimerCompareMatch:
 303              	.LFB149:
1587:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1588:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1589:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1590:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1591:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer period value
1592:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1593:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1594:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1595:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the timer period value currently effective, by reading CC4yPR register.\n\n
1596:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * If the timer is active then the value being returned is currently being used for the PWM period.
1597:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1598:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1599:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The XMC_CCU4_SLICE_SetTimerPeriodMatch() would set the new period value to a shadow register.
1600:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would only transfer the new values into the actual period register if the shadow transfer r
1601:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU4_SLICE_GetTimerPeri
1602:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * would not reflect the new values until the shadow transfer completes.
1603:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1604:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1605:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerPeriodMatch().
1606:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1607:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerPeriodMatch(const XMC_CCU4_SLICE_t *const slice)
1608:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1609:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slic
1610:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->PR);
1611:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1612:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1613:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1614:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1615:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param compare_val Timer compare value
1616:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1617:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1618:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1619:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1620:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the timer compare value, by writing CC4yCRS register.<BR>\n
1621:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  The PWM duty cycle is determined by this value.
1622:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
1623:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the the period/compare value by calling XMC_CCU4_EnableShadowTransfer() with
1624:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * appropriate mask.If shadow transfer is enabled and the timer is running,
1625:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * a period match transfers the value from the shadow register to the actual compare register.
1626:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1627:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1628:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
1629:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1630:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint1
1631:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 304              	 .loc 1 1631 0
 305              	 .cfi_startproc
 306              	 
 307              	 
 308              	 
 309 0000 80B4     	 push {r7}
 310              	.LCFI36:
 311              	 .cfi_def_cfa_offset 4
 312              	 .cfi_offset 7,-4
 313 0002 83B0     	 sub sp,sp,#12
 314              	.LCFI37:
 315              	 .cfi_def_cfa_offset 16
 316 0004 00AF     	 add r7,sp,#0
 317              	.LCFI38:
 318              	 .cfi_def_cfa_register 7
 319 0006 7860     	 str r0,[r7,#4]
 320 0008 0B46     	 mov r3,r1
 321 000a 7B80     	 strh r3,[r7,#2]
1632:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1633:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->CRS = (uint32_t) compare_val;
 322              	 .loc 1 1633 0
 323 000c 7A88     	 ldrh r2,[r7,#2]
 324 000e 7B68     	 ldr r3,[r7,#4]
 325 0010 DA63     	 str r2,[r3,#60]
1634:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 326              	 .loc 1 1634 0
 327 0012 0C37     	 adds r7,r7,#12
 328              	.LCFI39:
 329              	 .cfi_def_cfa_offset 4
 330 0014 BD46     	 mov sp,r7
 331              	.LCFI40:
 332              	 .cfi_def_cfa_register 13
 333              	 
 334 0016 5DF8047B 	 ldr r7,[sp],#4
 335              	.LCFI41:
 336              	 .cfi_restore 7
 337              	 .cfi_def_cfa_offset 0
 338 001a 7047     	 bx lr
 339              	 .cfi_endproc
 340              	.LFE149:
 342              	 .section .text.XMC_CCU4_EnableShadowTransfer,"ax",%progbits
 343              	 .align 2
 344              	 .thumb
 345              	 .thumb_func
 347              	XMC_CCU4_EnableShadowTransfer:
 348              	.LFB151:
1635:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1636:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1637:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1638:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1639:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer compare value
1640:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1641:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1642:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1643:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the timer compare value currently effective, by reading CC4yCRS register.\n\n
1644:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * If the timer is active then the value being returned is currently being for the PWM duty cycle( 
1645:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1646:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1647:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The XMC_CCU4_SLICE_SetTimerCompareMatch() would set the new compare value to a shadow register.
1648:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would only transfer the new values into the actual compare register if the shadow transfer 
1649:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU4_SLICE_GetTimerComp
1650:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * would not reflect the new values until the shadow transfer completes.
1651:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is CC4yCR.
1652:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1653:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1654:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerCompareMatch().
1655:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1656:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerCompareMatch(const XMC_CCU4_SLICE_t *const slice)
1657:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1658:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1659:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->CR);
1660:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1661:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1662:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1663:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1664:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param shadow_transfer_msk Shadow transfer request mask for various transfers.
1665:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                             Use ::XMC_CCU4_SHADOW_TRANSFER_t enum items to create a mask of choi
1666:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                              using a bit wise OR operation.
1667:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1668:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1669:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1670:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1671:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Requests of shadow transfer for Period, Compare, Passive level, dither and prescaler, by configu
1672:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the GCSS register.\n\n
1673:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The transfer from the shadow registers to the actual registers is done in the immediate next occ
1674:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * shadow transfer trigger after the API is called.
1675:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1676:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Any call to XMC_CCU4_SLICE_SetTimerPeriodMatch()<BR> XMC_CCU4_SLICE_SetTimerCompareMatch()<BR>
1677:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_SetPrescaler()<BR> XMC_CCU4_SLICE_CompareInit()<BR> XMC_CCU4_SLICE_CaptureInit().
1678:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be succeeded by this API.
1679:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is GCSS.
1680:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1681:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1682:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1683:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1684:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t 
1685:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 349              	 .loc 1 1685 0
 350              	 .cfi_startproc
 351              	 
 352              	 
 353              	 
 354 0000 80B4     	 push {r7}
 355              	.LCFI42:
 356              	 .cfi_def_cfa_offset 4
 357              	 .cfi_offset 7,-4
 358 0002 83B0     	 sub sp,sp,#12
 359              	.LCFI43:
 360              	 .cfi_def_cfa_offset 16
 361 0004 00AF     	 add r7,sp,#0
 362              	.LCFI44:
 363              	 .cfi_def_cfa_register 7
 364 0006 7860     	 str r0,[r7,#4]
 365 0008 3960     	 str r1,[r7]
1686:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module))
1687:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GCSS = (uint32_t)shadow_transfer_msk;  
 366              	 .loc 1 1687 0
 367 000a 7B68     	 ldr r3,[r7,#4]
 368 000c 3A68     	 ldr r2,[r7]
 369 000e 1A61     	 str r2,[r3,#16]
1688:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 370              	 .loc 1 1688 0
 371 0010 0C37     	 adds r7,r7,#12
 372              	.LCFI45:
 373              	 .cfi_def_cfa_offset 4
 374 0012 BD46     	 mov sp,r7
 375              	.LCFI46:
 376              	 .cfi_def_cfa_register 13
 377              	 
 378 0014 5DF8047B 	 ldr r7,[sp],#4
 379              	.LCFI47:
 380              	 .cfi_restore 7
 381              	 .cfi_def_cfa_offset 0
 382 0018 7047     	 bx lr
 383              	 .cfi_endproc
 384              	.LFE151:
 386 001a 00BF     	 .section .text.XMC_CCU4_SLICE_GetTimerValue,"ax",%progbits
 387              	 .align 2
 388              	 .thumb
 389              	 .thumb_func
 391              	XMC_CCU4_SLICE_GetTimerValue:
 392              	.LFB152:
1689:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1690:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1691:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1692:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1693:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer value
1694:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1695:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1696:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1697:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the latest timer value, from CC4yTIMER register.\n\n
1698:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1699:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1700:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerValue().
1701:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1702:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerValue(const XMC_CCU4_SLICE_t *const slice)
1703:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 393              	 .loc 1 1703 0
 394              	 .cfi_startproc
 395              	 
 396              	 
 397              	 
 398 0000 80B4     	 push {r7}
 399              	.LCFI48:
 400              	 .cfi_def_cfa_offset 4
 401              	 .cfi_offset 7,-4
 402 0002 83B0     	 sub sp,sp,#12
 403              	.LCFI49:
 404              	 .cfi_def_cfa_offset 16
 405 0004 00AF     	 add r7,sp,#0
 406              	.LCFI50:
 407              	 .cfi_def_cfa_register 7
 408 0006 7860     	 str r0,[r7,#4]
1704:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1705:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->TIMER);
 409              	 .loc 1 1705 0
 410 0008 7B68     	 ldr r3,[r7,#4]
 411 000a 1B6F     	 ldr r3,[r3,#112]
 412 000c 9BB2     	 uxth r3,r3
1706:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 413              	 .loc 1 1706 0
 414 000e 1846     	 mov r0,r3
 415 0010 0C37     	 adds r7,r7,#12
 416              	.LCFI51:
 417              	 .cfi_def_cfa_offset 4
 418 0012 BD46     	 mov sp,r7
 419              	.LCFI52:
 420              	 .cfi_def_cfa_register 13
 421              	 
 422 0014 5DF8047B 	 ldr r7,[sp],#4
 423              	.LCFI53:
 424              	 .cfi_restore 7
 425              	 .cfi_def_cfa_offset 0
 426 0018 7047     	 bx lr
 427              	 .cfi_endproc
 428              	.LFE152:
 430 001a 00BF     	 .section .text.XMC_CCU4_SLICE_EnableEvent,"ax",%progbits
 431              	 .align 2
 432              	 .thumb
 433              	 .thumb_func
 435              	XMC_CCU4_SLICE_EnableEvent:
 436              	.LFB161:
1707:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1708:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1709:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param timer_val The new timer value that has to be loaded into the TIMER register.
1710:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                  Range: [0x0 to 0xFFFF]
1711:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1712:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1713:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1714:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1715:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Loads a new timer value, by setting CC4yTIMER register.\n\n
1716:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1717:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1718:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Request to load is ignored if the timer is running.
1719:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1720:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1721:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerValue().
1722:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1723:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerValue(XMC_CCU4_SLICE_t *const slice, const uint16_t tim
1724:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1725:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1726:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TIMER = (uint32_t) timer_val;
1727:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1728:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1729:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1730:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param period_dither Boolean instruction on dithering of period match
1731:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param duty_dither Boolean instruction on dithering of compare match
1732:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param spread Dither compare value
1733:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1734:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1735:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1736:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1737:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables dithering of PWM frequency and duty cycle, by configuring CC4yTC.DITHE and CC4yDITS bits
1738:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Some control loops are slow in updating PWM frequency and duty cycle. In such a case, a Bresenha
1739:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * can help reduce long term errors. Dithering can be applied to period and duty individually,
1740:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * this can be selected using the parameter \b period_dither and \b duty_dither.
1741:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The \b spread would provide the dither compare value. If the dither counter value is less than t
1742:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the period/compare values would be dithered according to the dither mode selected. This API woul
1743:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_SetDitherCompareValue().
1744:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1745:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1746:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After this API call, XMC_CCU4_EnableShadowTransfer() has to be called with appropriate mask
1747:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * to transfer the dither value.
1748:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1749:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1750:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableDithering().
1751:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1752:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_EnableDithering(XMC_CCU4_SLICE_t *const slice,
1753:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                     const bool period_dither,
1754:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                     const bool duty_dither,
1755:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                     const uint8_t spread);
1756:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1757:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1758:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1759:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1760:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1761:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1762:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1763:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables dithering of PWM frequency and duty cycle, by clearing CC4yTC.DITHE bits.\n\n
1764:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This disables the Dither mode that was set in XMC_CCU4_SLICE_EnableDithering().
1765:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will not clear the dither compare value.
1766:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1767:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1768:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableDithering().
1769:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1770:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableDithering(XMC_CCU4_SLICE_t *const slice)
1771:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1772:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableDithering:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice))
1773:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_DITHE_Msk);
1774:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1775:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1776:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1777:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1778:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1779:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1780:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1781:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1782:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the floating prescaler, by setting CC4yTC.FPE bit.\n\n
1783:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The prescaler divider starts with an initial value and increments upon every period match. It ke
1784:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * until a ceiling (prescaler compare value) is hit and thereafter rolls back to the original presc
1785:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is necessary to have programmed an initial divider value and a compare value before the featu
1786:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1787:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1788:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetFloatingPrescalerCompareValue()<BR> XMC_CCU4_SLICE_DisableFloatingPrescaler()
1789:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetPrescaler().
1790:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1791:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableFloatingPrescaler(XMC_CCU4_SLICE_t *const slice)
1792:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1793:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(
1794:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC |= (uint32_t) CCU4_CC4_TC_FPE_Msk;
1795:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1796:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1797:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1798:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1799:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1800:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1801:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1802:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1803:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the floating prescaler, by clearing CC4yTC.FPE bit.\n\n
1804:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would return the prescaler to the normal mode.
1805:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The prescaler that would be applied is the value present in CC4yPSC.
1806:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1807:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   * \par<b>Related APIs:</b><br>
1808:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableFloatingPrescaler().
1809:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1810:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableFloatingPrescaler(XMC_CCU4_SLICE_t *const slice)
1811:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1812:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice
1813:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_FPE_Msk);
1814:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1815:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1816:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1817:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1818:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param comp_val Dither compare value
1819:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                 Range: [0x0 to 0xF]
1820:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1821:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1822:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1823:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1824:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Sets the dither spread/compare value, by setting CC4yDITS.DCVS bits.\n\n
1825:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This value is the cornerstone of PWM dithering feature. Dithering is applied/done when the value
1826:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * dithering counter is less than this compare/spread value. For all dithering counter values great
1827:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the spread value, there is no dithering. After setting the value XMC_CCU4_EnableShadowTransfer()
1828:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * called with appropriate mask.
1829:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1830:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   * \par<b>Related APIs:</b><br>
1831:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableDithering().
1832:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1833:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetDitherCompareValue(XMC_CCU4_SLICE_t *const slice, const uint
1834:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1835:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetDitherCompareValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sl
1836:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->DITS = comp_val;
1837:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1838:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1839:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1840:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param div_val Prescaler divider value
1841:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                 Range: [0x0 to 0xF]
1842:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1843:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1844:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1845:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1846:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the slice specific prescaler divider, by configuring the CC4yPSC and CC4yFPC registers.
1847:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The prescaler divider may only be programmed after the prescaler run bit has been cleared
1848:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * by calling XMC_CCU4_StopPrescaler().
1849:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1850:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1851:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetFloatingPrescalerCompareValue().
1852:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1853:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const uint8_t div_val);
1854:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1855:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1856:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1857:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param cmp_val Prescaler divider compare value
1858:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                 Range: [0x0 to 0xF]
1859:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1860:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1861:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1862:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1863:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the slice specific prescaler divider compare value, by configuring CC4yFPCS register.\n
1864:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The compare value is applicable only in floating mode of operation. The prescaler divider starts
1865:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * value and increments to the compare value steadily upon every period match. Once prescaler divid
1866:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * equals the prescaler divider compare value, the value in the former resets back to the PVAL (fro
1867:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the value, XMC_CCU4_EnableShadowTransfer() has to be called with appropriate mask.
1868:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1869:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1870:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetPrescaler().
1871:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1872:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetFloatingPrescalerCompareValue(XMC_CCU4_SLICE_t *const slice,
1873:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                      const uint8_t cmp_val)
1874:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1875:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetFloatingPrescalerCompareValue:Invalid Slice Pointer", XMC_CCU4_IsVa
1876:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   /*  write to the shadow register */
1877:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->FPCS = (uint32_t) cmp_val;
1878:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1879:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1880:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1881:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1882:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1883:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1884:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1885:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the multichannel mode, by setting CC4yTC.MCME bit.<BR>\n
1886:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The output state of the Timer slices can be controlled in parallel by a single input signal.
1887:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * A particularly useful feature in motor control applications where the PWM output of multiple sli
1888:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * be gated and ungated by multi-channel gating inputs connected to the slices. A peripheral like P
1889:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * motor knows exactly which of the power drive switches are to be turned on and off at any instant
1890:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * a gating bus (known as multi-channel inputs) control which of the slices output stays gated/unga
1891:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1892:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1893:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableMultiChannelMode()<BR> XMC_CCU4_SetMultiChannelShadowTransferMode().
1894:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1895:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableMultiChannelMode(XMC_CCU4_SLICE_t *const slice)
1896:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1897:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableMultiChannelMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(s
1898:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC |= (uint32_t) CCU4_CC4_TC_MCME_Msk;
1899:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1900:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1901:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1902:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1903:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1904:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1905:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1906:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1907:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the multichannel mode, by clearing CC4yTC.MCME bit.<BR>\n
1908:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would return the slices to the normal operation mode.
1909:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1910:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1911:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableMultiChannelMode().
1912:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1913:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableMultiChannelMode(XMC_CCU4_SLICE_t *const slice)
1914:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1915:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableMultiChannelMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(
1916:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_MCME_Msk);
1917:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1918:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1919:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1920:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1921:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_mode_msk Slices for which the configuration has to be applied.
1922:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                       Use ::XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_t enum items to create a mask
1923:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                             using a bit wise OR operation.
1924:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1925:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1926:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1927:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1928:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the Multi-channel shadow transfer request trigger signal either by software or hardware 
1929:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * GCTRL.MSE0, GCTRL.MSE1, GCTRL.MSE2, and GCTRL.MSE3 based on the mask.\n\n
1930:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The shadow transfer would take place either if it was requested by software or by the CCU4x.MCSS
1931:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1932:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1933:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1934:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** */
1935:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t sli
1936:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1937:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1938:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1939:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param reg_num The capture register from which the captured value is to be retrieved
1940:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                Range: [0,3]
1941:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1942:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    uint32_t  Returns the Capture register value.
1943:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *              Range: [0 to 0x1FFFFF]
1944:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1945:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1946:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves timer value which has been captured in the Capture registers, by reading CC4yCV[\b reg
1947:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The signal whose timing characteristics are to be measured must be mapped to an event which in t
1948:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * to the capture function. Based on the capture criteria, the timer values are captured into captu
1949:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * characteristics of the input signal may then be derived/inferred from the captured values. The f
1950:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * to find out if there is a new captured value present.
1951:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1952:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1953:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetLastCapturedTimerValue().
1954:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1955:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** uint32_t XMC_CCU4_SLICE_GetCaptureRegisterValue(const XMC_CCU4_SLICE_t *const slice, const uint8_t 
1956:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1957:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1958:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1959:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param set  The capture register set, which must be evaluated
1960:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param val_ptr Out Parameter of the API.Stores the captured timer value into this out parameter.
1961:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1962:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     ::XMC_CCU4_STATUS_t Returns XMC_CCU4_STATUS_OK if there was new value present in the capture
1963:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   returns XMC_CCU4_STATUS_ERROR if there was no new value present in the capture
1964:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1965:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1966:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the latest captured timer value, by reading CC4yCV registers.\n\n
1967:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieve the timer value last stored by the slice. When separate capture events are used,
1968:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * users must specify the capture set to evaluate. If single capture event mode is used, all 4 capt
1969:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * evaluated.\n
1970:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The lowest register is evaluated first followed by the next higher ordered register and this con
1971:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * capture registers have been evaluated.
1972:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1973:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1974:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetCaptureRegisterValue().
1975:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1976:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** XMC_CCU4_STATUS_t XMC_CCU4_SLICE_GetLastCapturedTimerValue(const XMC_CCU4_SLICE_t *const slice,
1977:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                            const XMC_CCU4_SLICE_CAP_REG_SET_t set,
1978:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                            uint32_t *val_ptr);
1979:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1980:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1981:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1982:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Event whose assertion can potentially lead to an interrupt
1983:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1984:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1985:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1986:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1987:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the generation of an interrupt pulse for the event, by configuring CC4yINTE register.\n\
1988:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * For an event to lead to an interrupt, it must first be enabled and bound to a service request li
1989:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * NVIC node must be enabled as well. This API merely enables the event. Binding with SR is perform
1990:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1991:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1992:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_
1993:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableMultipleEvents().
1994:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1995:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
1996:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                 const XMC_CCU4_SLICE_IRQ_ID_t event)
1997:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 437              	 .loc 1 1997 0
 438              	 .cfi_startproc
 439              	 
 440              	 
 441              	 
 442 0000 80B4     	 push {r7}
 443              	.LCFI54:
 444              	 .cfi_def_cfa_offset 4
 445              	 .cfi_offset 7,-4
 446 0002 83B0     	 sub sp,sp,#12
 447              	.LCFI55:
 448              	 .cfi_def_cfa_offset 16
 449 0004 00AF     	 add r7,sp,#0
 450              	.LCFI56:
 451              	 .cfi_def_cfa_register 7
 452 0006 7860     	 str r0,[r7,#4]
 453 0008 0B46     	 mov r3,r1
 454 000a FB70     	 strb r3,[r7,#3]
1998:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1999:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
2000:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 455              	 .loc 1 2000 0
 456 000c 7B68     	 ldr r3,[r7,#4]
 457 000e D3F8A420 	 ldr r2,[r3,#164]
 458 0012 FB78     	 ldrb r3,[r7,#3]
 459 0014 0121     	 movs r1,#1
 460 0016 01FA03F3 	 lsl r3,r1,r3
 461 001a 1A43     	 orrs r2,r2,r3
 462 001c 7B68     	 ldr r3,[r7,#4]
 463 001e C3F8A420 	 str r2,[r3,#164]
2001:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 464              	 .loc 1 2001 0
 465 0022 0C37     	 adds r7,r7,#12
 466              	.LCFI57:
 467              	 .cfi_def_cfa_offset 4
 468 0024 BD46     	 mov sp,r7
 469              	.LCFI58:
 470              	 .cfi_def_cfa_register 13
 471              	 
 472 0026 5DF8047B 	 ldr r7,[sp],#4
 473              	.LCFI59:
 474              	 .cfi_restore 7
 475              	 .cfi_def_cfa_offset 0
 476 002a 7047     	 bx lr
 477              	 .cfi_endproc
 478              	.LFE161:
 480              	 .section .text.XMC_CCU4_SLICE_ClearEvent,"ax",%progbits
 481              	 .align 2
 482              	 .thumb
 483              	 .thumb_func
 485              	XMC_CCU4_SLICE_ClearEvent:
 486              	.LFB166:
2002:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2003:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2004:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
2005:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param intr_mask Event mask such that multiple events can be enabled.
2006:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                  Use ::XMC_CCU4_SLICE_MULTI_IRQ_ID_t enum items to create a mask of choice,
2007:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                  using a bit wise OR operation.
2008:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
2009:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
2010:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2011:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2012:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the generation of an interrupt pulse for the required events, by configuring CC4yINTE re
2013:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * For an event to lead to an interrupt, it must first be enabled and bound to a service request li
2014:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * NVIC node must be enabled as well. This API merely enables the events. Binding with SR is perfor
2015:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2016:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2017:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_DisableEv
2018:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableMultipleEvents().
2019:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2020:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableMultipleEvents(XMC_CCU4_SLICE_t *const slice, const uint1
2021:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
2022:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableMultipleEvents:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
2023:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->INTE |= (uint32_t)intr_mask;
2024:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
2025:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2026:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2027:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
2028:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Event whose assertion can potentially lead to an interrupt
2029:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
2030:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
2031:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2032:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2033:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the generation of an interrupt pulse for the event, by clearing CC4yINTE register.\n\n
2034:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Prevents the event from being asserted
2035:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2036:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2037:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_EnableMul
2038:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableMultipleEvents().
2039:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2040:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableEvent(XMC_CCU4_SLICE_t *const slice,
2041:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                  const XMC_CCU4_SLICE_IRQ_ID_t event)
2042:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
2043:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
2044:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event))
2045:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->INTE &= ~(((uint32_t) 1) << ((uint32_t) event));
2046:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
2047:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2048:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2049:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
2050:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mask Event mask such that multiple events can be enabled.
2051:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             Use ::XMC_CCU4_SLICE_MULTI_IRQ_ID_t enum items to create a mask of choice,
2052:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             using a bit wise OR operation.
2053:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
2054:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
2055:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2056:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2057:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Disables the generation of an interrupt pulse for the required events, by clearing CC4yINTE reg
2058:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Prevents selected events of the slice from being asserted.
2059:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2060:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2061:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_EnableMul
2062:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableEvent().
2063:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2064:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableMultipleEvents(XMC_CCU4_SLICE_t *const slice, const uint
2065:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
2066:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableMultipleEvents:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sl
2067:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->INTE &= ~((uint32_t) mask);
2068:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
2069:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2070:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2071:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
2072:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Event whose assertion can potentially lead to an interrupt
2073:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
2074:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
2075:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2076:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2077:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Manually asserts the requested event, by setting CC4ySWS register.\n\n
2078:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * For an event to lead to an interrupt, it must first be enabled and bound to a service request li
2079:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * NVIC node must be enabled as well. This API manually asserts the requested event.
2080:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2081:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2082:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_EnableMul
2083:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2084:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IR
2085:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
2086:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
2087:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
2088:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->SWS |= ((uint32_t) 1) << ((uint32_t) event);
2089:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
2090:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2091:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2092:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
2093:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Asserted event which must be acknowledged.
2094:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
2095:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
2096:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2097:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2098:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Acknowledges an asserted event, by setting CC4ySWR with respective event flag.\n\n
2099:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2100:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2101:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
2102:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2103:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_
2104:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 487              	 .loc 1 2104 0
 488              	 .cfi_startproc
 489              	 
 490              	 
 491              	 
 492 0000 80B4     	 push {r7}
 493              	.LCFI60:
 494              	 .cfi_def_cfa_offset 4
 495              	 .cfi_offset 7,-4
 496 0002 83B0     	 sub sp,sp,#12
 497              	.LCFI61:
 498              	 .cfi_def_cfa_offset 16
 499 0004 00AF     	 add r7,sp,#0
 500              	.LCFI62:
 501              	 .cfi_def_cfa_register 7
 502 0006 7860     	 str r0,[r7,#4]
 503 0008 0B46     	 mov r3,r1
 504 000a FB70     	 strb r3,[r7,#3]
2105:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
2106:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
2107:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 505              	 .loc 1 2107 0
 506 000c 7B68     	 ldr r3,[r7,#4]
 507 000e D3F8B020 	 ldr r2,[r3,#176]
 508 0012 FB78     	 ldrb r3,[r7,#3]
 509 0014 0121     	 movs r1,#1
 510 0016 01FA03F3 	 lsl r3,r1,r3
 511 001a 1A43     	 orrs r2,r2,r3
 512 001c 7B68     	 ldr r3,[r7,#4]
 513 001e C3F8B020 	 str r2,[r3,#176]
2108:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 514              	 .loc 1 2108 0
 515 0022 0C37     	 adds r7,r7,#12
 516              	.LCFI63:
 517              	 .cfi_def_cfa_offset 4
 518 0024 BD46     	 mov sp,r7
 519              	.LCFI64:
 520              	 .cfi_def_cfa_register 13
 521              	 
 522 0026 5DF8047B 	 ldr r7,[sp],#4
 523              	.LCFI65:
 524              	 .cfi_restore 7
 525              	 .cfi_def_cfa_offset 0
 526 002a 7047     	 bx lr
 527              	 .cfi_endproc
 528              	.LFE166:
 530              	 .section .text.XMC_CCU4_SLICE_GetEvent,"ax",%progbits
 531              	 .align 2
 532              	 .thumb
 533              	 .thumb_func
 535              	XMC_CCU4_SLICE_GetEvent:
 536              	.LFB167:
2109:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2110:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2111:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
2112:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Event to be evaluated for assertion
2113:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <br>
2114:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *         bool  Returns true if event is set else false is returned.
2115:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2116:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2117:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Evaluates if a given event is asserted or not, by reading CC4yINTS register.\n\n
2118:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Return true if the event is asserted. For a event to be asserted it has to be
2119:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * first enabled. Only if that event is enabled the call to this API is valid.
2120:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * If the Event is enabled and has not yet occurred then a false is returned.
2121:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2122:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2123:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent().
2124:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2125:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_GetEvent(const XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SL
2126:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 537              	 .loc 1 2126 0
 538              	 .cfi_startproc
 539              	 
 540              	 
 541              	 
 542 0000 80B4     	 push {r7}
 543              	.LCFI66:
 544              	 .cfi_def_cfa_offset 4
 545              	 .cfi_offset 7,-4
 546 0002 83B0     	 sub sp,sp,#12
 547              	.LCFI67:
 548              	 .cfi_def_cfa_offset 16
 549 0004 00AF     	 add r7,sp,#0
 550              	.LCFI68:
 551              	 .cfi_def_cfa_register 7
 552 0006 7860     	 str r0,[r7,#4]
 553 0008 0B46     	 mov r3,r1
 554 000a FB70     	 strb r3,[r7,#3]
2127:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
2128:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
2129:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2130:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return(((uint32_t)(slice->INTS & ((uint32_t)1 << (uint32_t)event))) != 0U);
 555              	 .loc 1 2130 0
 556 000c 7B68     	 ldr r3,[r7,#4]
 557 000e D3F8A020 	 ldr r2,[r3,#160]
 558 0012 FB78     	 ldrb r3,[r7,#3]
 559 0014 22FA03F3 	 lsr r3,r2,r3
 560 0018 03F00103 	 and r3,r3,#1
 561 001c 002B     	 cmp r3,#0
 562 001e 14BF     	 ite ne
 563 0020 0123     	 movne r3,#1
 564 0022 0023     	 moveq r3,#0
 565 0024 DBB2     	 uxtb r3,r3
2131:E:/备份文件/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 566              	 .loc 1 2131 0
 567 0026 1846     	 mov r0,r3
 568 0028 0C37     	 adds r7,r7,#12
 569              	.LCFI69:
 570              	 .cfi_def_cfa_offset 4
 571 002a BD46     	 mov sp,r7
 572              	.LCFI70:
 573              	 .cfi_def_cfa_register 13
 574              	 
 575 002c 5DF8047B 	 ldr r7,[sp],#4
 576              	.LCFI71:
 577              	 .cfi_restore 7
 578              	 .cfi_def_cfa_offset 0
 579 0030 7047     	 bx lr
 580              	 .cfi_endproc
 581              	.LFE167:
 583 0032 00BF     	 .section .text.TIMER_GetAppVersion,"ax",%progbits
 584              	 .align 2
 585              	 .global TIMER_GetAppVersion
 586              	 .thumb
 587              	 .thumb_func
 589              	TIMER_GetAppVersion:
 590              	.LFB202:
 591              	 .file 2 "../Dave/Generated/TIMER/timer.c"
   1:../Dave/Generated/TIMER/timer.c **** /**
   2:../Dave/Generated/TIMER/timer.c ****  * @file timer.h
   3:../Dave/Generated/TIMER/timer.c ****  * @date 2015-12-18
   4:../Dave/Generated/TIMER/timer.c ****  *
   5:../Dave/Generated/TIMER/timer.c ****  * NOTE:
   6:../Dave/Generated/TIMER/timer.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/TIMER/timer.c ****  *
   8:../Dave/Generated/TIMER/timer.c ****  * @cond
   9:../Dave/Generated/TIMER/timer.c ****  **************************************************************************************************
  10:../Dave/Generated/TIMER/timer.c ****  * TIMER v4.1.8 - Configures the properties of CCU4 or CCU8 peripheral as a timer.
  11:../Dave/Generated/TIMER/timer.c ****  *
  12:../Dave/Generated/TIMER/timer.c ****  * Copyright (c) 2015, Infineon Technologies AG
  13:../Dave/Generated/TIMER/timer.c ****  * All rights reserved.
  14:../Dave/Generated/TIMER/timer.c ****  *
  15:../Dave/Generated/TIMER/timer.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:../Dave/Generated/TIMER/timer.c ****  * following conditions are met:
  17:../Dave/Generated/TIMER/timer.c ****  *
  18:../Dave/Generated/TIMER/timer.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:../Dave/Generated/TIMER/timer.c ****  *   disclaimer.
  20:../Dave/Generated/TIMER/timer.c ****  *
  21:../Dave/Generated/TIMER/timer.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:../Dave/Generated/TIMER/timer.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  23:../Dave/Generated/TIMER/timer.c ****  *
  24:../Dave/Generated/TIMER/timer.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:../Dave/Generated/TIMER/timer.c ****  *   products derived from this software without specific prior written permission.
  26:../Dave/Generated/TIMER/timer.c ****  *
  27:../Dave/Generated/TIMER/timer.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:../Dave/Generated/TIMER/timer.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:../Dave/Generated/TIMER/timer.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:../Dave/Generated/TIMER/timer.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:../Dave/Generated/TIMER/timer.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:../Dave/Generated/TIMER/timer.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:../Dave/Generated/TIMER/timer.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../Dave/Generated/TIMER/timer.c ****  *
  35:../Dave/Generated/TIMER/timer.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:../Dave/Generated/TIMER/timer.c ****  * with Infineon Technologies AG (dave@infineon.com).
  37:../Dave/Generated/TIMER/timer.c ****  **************************************************************************************************
  38:../Dave/Generated/TIMER/timer.c ****  *
  39:../Dave/Generated/TIMER/timer.c ****  * Change History
  40:../Dave/Generated/TIMER/timer.c ****  * --------------
  41:../Dave/Generated/TIMER/timer.c ****  *
  42:../Dave/Generated/TIMER/timer.c ****  * 2015-02-16:
  43:../Dave/Generated/TIMER/timer.c ****  *     - Initial version<br>
  44:../Dave/Generated/TIMER/timer.c ****  *
  45:../Dave/Generated/TIMER/timer.c ****  * 2015-05-08:
  46:../Dave/Generated/TIMER/timer.c ****  *     - "initialized" flag is updated in local init before starting the timer<br>
  47:../Dave/Generated/TIMER/timer.c ****  *     - TIMER_GetTime() and TIMER_Clear() are added.<br>
  48:../Dave/Generated/TIMER/timer.c ****  *     - Timer clear is removed from TIMER_Stop() API<br>
  49:../Dave/Generated/TIMER/timer.c ****  *     - Additional condition check for timer state is added in TIMER_SetTimeInterval() API<br>
  50:../Dave/Generated/TIMER/timer.c ****  *     - TIMER_CCU4_lShadowTransfer(), TIMER_CCU8_lShadowTransfer() are updated to use the mask fro
  51:../Dave/Generated/TIMER/timer.c ****  *
  52:../Dave/Generated/TIMER/timer.c ****  * 2015-05-22:
  53:../Dave/Generated/TIMER/timer.c ****  *     -  API name changed
  54:../Dave/Generated/TIMER/timer.c ****  *          a. TIMER_AcknowledgeInterrupt() --> TIMER_ClearEvent()<br>
  55:../Dave/Generated/TIMER/timer.c ****  *
  56:../Dave/Generated/TIMER/timer.c ****  * @endcond
  57:../Dave/Generated/TIMER/timer.c ****  *
  58:../Dave/Generated/TIMER/timer.c ****  */
  59:../Dave/Generated/TIMER/timer.c **** 
  60:../Dave/Generated/TIMER/timer.c **** /**************************************************************************************************
  61:../Dave/Generated/TIMER/timer.c ****  * HEADER FILES
  62:../Dave/Generated/TIMER/timer.c ****  **************************************************************************************************
  63:../Dave/Generated/TIMER/timer.c **** #include "timer.h"
  64:../Dave/Generated/TIMER/timer.c **** 
  65:../Dave/Generated/TIMER/timer.c **** /**************************************************************************************************
  66:../Dave/Generated/TIMER/timer.c ****  * MACROS
  67:../Dave/Generated/TIMER/timer.c ****  **************************************************************************************************
  68:../Dave/Generated/TIMER/timer.c **** #define TIMER_CMP_100_DUTY             ((uint16_t)0) /* Compare value for 100% duty cycle */
  69:../Dave/Generated/TIMER/timer.c **** #define TIMER_RESOLUTION_SEC_TO_MICRO  (100000000U)  /* Convert the resolution from sec to usec, by
  70:../Dave/Generated/TIMER/timer.c ****                                                       scale factor */
  71:../Dave/Generated/TIMER/timer.c **** #define TIMER_PRESCALER_MAX            (15U)      /* Maximum prescaler values allowed */
  72:../Dave/Generated/TIMER/timer.c **** #define TIMER_PERIOD_16BIT_MAX         (0xFFFFU)  /* Maximum period value */
  73:../Dave/Generated/TIMER/timer.c **** #define TIMER_PERIOD_MIN               (0x1U)     /* Minimum period value */
  74:../Dave/Generated/TIMER/timer.c **** #define TIMER_CLK_SCALE_FACTOR         (32U)      /* Scale factor used during calculation of the "T
  75:../Dave/Generated/TIMER/timer.c **** 
  76:../Dave/Generated/TIMER/timer.c **** /**************************************************************************************************
  77:../Dave/Generated/TIMER/timer.c ****  * LOCAL DATA
  78:../Dave/Generated/TIMER/timer.c ****  **************************************************************************************************
  79:../Dave/Generated/TIMER/timer.c **** 
  80:../Dave/Generated/TIMER/timer.c **** /**************************************************************************************************
  81:../Dave/Generated/TIMER/timer.c ****  * LOCAL ROUTINES
  82:../Dave/Generated/TIMER/timer.c ****  **************************************************************************************************
  83:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
  84:../Dave/Generated/TIMER/timer.c **** TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr);
  85:../Dave/Generated/TIMER/timer.c **** void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr);
  86:../Dave/Generated/TIMER/timer.c **** #endif
  87:../Dave/Generated/TIMER/timer.c **** 
  88:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU8_USED
  89:../Dave/Generated/TIMER/timer.c **** TIMER_STATUS_t TIMER_CCU8_lInit(TIMER_t* const handle_ptr);
  90:../Dave/Generated/TIMER/timer.c **** void TIMER_CCU8_lShadowTransfer(TIMER_t* const handle_ptr);
  91:../Dave/Generated/TIMER/timer.c **** #endif
  92:../Dave/Generated/TIMER/timer.c **** 
  93:../Dave/Generated/TIMER/timer.c ****  /*************************************************************************************************
  94:../Dave/Generated/TIMER/timer.c ****  * API IMPLEMENTATION
  95:../Dave/Generated/TIMER/timer.c ****  **************************************************************************************************
  96:../Dave/Generated/TIMER/timer.c ****  /* Returns the version of the TIMER APP.
  97:../Dave/Generated/TIMER/timer.c ****  */
  98:../Dave/Generated/TIMER/timer.c **** DAVE_APP_VERSION_t TIMER_GetAppVersion(void)
  99:../Dave/Generated/TIMER/timer.c **** {
 592              	 .loc 2 99 0
 593              	 .cfi_startproc
 594              	 
 595              	 
 596              	 
 597 0000 80B4     	 push {r7}
 598              	.LCFI72:
 599              	 .cfi_def_cfa_offset 4
 600              	 .cfi_offset 7,-4
 601 0002 83B0     	 sub sp,sp,#12
 602              	.LCFI73:
 603              	 .cfi_def_cfa_offset 16
 604 0004 00AF     	 add r7,sp,#0
 605              	.LCFI74:
 606              	 .cfi_def_cfa_register 7
 100:../Dave/Generated/TIMER/timer.c ****   DAVE_APP_VERSION_t version;
 101:../Dave/Generated/TIMER/timer.c **** 
 102:../Dave/Generated/TIMER/timer.c ****   version.major = TIMER_MAJOR_VERSION;
 607              	 .loc 2 102 0
 608 0006 0423     	 movs r3,#4
 609 0008 3B70     	 strb r3,[r7]
 103:../Dave/Generated/TIMER/timer.c ****   version.minor = TIMER_MINOR_VERSION;
 610              	 .loc 2 103 0
 611 000a 0123     	 movs r3,#1
 612 000c 7B70     	 strb r3,[r7,#1]
 104:../Dave/Generated/TIMER/timer.c ****   version.patch = TIMER_PATCH_VERSION;
 613              	 .loc 2 104 0
 614 000e 0823     	 movs r3,#8
 615 0010 BB70     	 strb r3,[r7,#2]
 105:../Dave/Generated/TIMER/timer.c **** 
 106:../Dave/Generated/TIMER/timer.c ****   return version;
 616              	 .loc 2 106 0
 617 0012 3B1D     	 adds r3,r7,#4
 618 0014 3A46     	 mov r2,r7
 619 0016 1268     	 ldr r2,[r2]
 620 0018 1146     	 mov r1,r2
 621 001a 1980     	 strh r1,[r3]
 622 001c 0233     	 adds r3,r3,#2
 623 001e 120C     	 lsrs r2,r2,#16
 624 0020 1A70     	 strb r2,[r3]
 625 0022 0023     	 movs r3,#0
 626 0024 3A79     	 ldrb r2,[r7,#4]
 627 0026 62F30703 	 bfi r3,r2,#0,#8
 628 002a 7A79     	 ldrb r2,[r7,#5]
 629 002c 62F30F23 	 bfi r3,r2,#8,#8
 630 0030 BA79     	 ldrb r2,[r7,#6]
 631 0032 62F31743 	 bfi r3,r2,#16,#8
 107:../Dave/Generated/TIMER/timer.c **** }
 632              	 .loc 2 107 0
 633 0036 1846     	 mov r0,r3
 634 0038 0C37     	 adds r7,r7,#12
 635              	.LCFI75:
 636              	 .cfi_def_cfa_offset 4
 637 003a BD46     	 mov sp,r7
 638              	.LCFI76:
 639              	 .cfi_def_cfa_register 13
 640              	 
 641 003c 5DF8047B 	 ldr r7,[sp],#4
 642              	.LCFI77:
 643              	 .cfi_restore 7
 644              	 .cfi_def_cfa_offset 0
 645 0040 7047     	 bx lr
 646              	 .cfi_endproc
 647              	.LFE202:
 649 0042 00BF     	 .section .text.TIMER_Init,"ax",%progbits
 650              	 .align 2
 651              	 .global TIMER_Init
 652              	 .thumb
 653              	 .thumb_func
 655              	TIMER_Init:
 656              	.LFB203:
 108:../Dave/Generated/TIMER/timer.c **** 
 109:../Dave/Generated/TIMER/timer.c **** /*
 110:../Dave/Generated/TIMER/timer.c ****  * This function initializes a TIMER APP based on user configuration.
 111:../Dave/Generated/TIMER/timer.c ****  *
 112:../Dave/Generated/TIMER/timer.c ****  */
 113:../Dave/Generated/TIMER/timer.c **** TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
 114:../Dave/Generated/TIMER/timer.c **** {
 657              	 .loc 2 114 0
 658              	 .cfi_startproc
 659              	 
 660              	 
 661 0000 80B5     	 push {r7,lr}
 662              	.LCFI78:
 663              	 .cfi_def_cfa_offset 8
 664              	 .cfi_offset 7,-8
 665              	 .cfi_offset 14,-4
 666 0002 84B0     	 sub sp,sp,#16
 667              	.LCFI79:
 668              	 .cfi_def_cfa_offset 24
 669 0004 00AF     	 add r7,sp,#0
 670              	.LCFI80:
 671              	 .cfi_def_cfa_register 7
 672 0006 7860     	 str r0,[r7,#4]
 115:../Dave/Generated/TIMER/timer.c ****   TIMER_STATUS_t status;
 116:../Dave/Generated/TIMER/timer.c **** 
 117:../Dave/Generated/TIMER/timer.c ****   XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));
 118:../Dave/Generated/TIMER/timer.c **** 
 119:../Dave/Generated/TIMER/timer.c ****   status = TIMER_STATUS_SUCCESS;
 673              	 .loc 2 119 0
 674 0008 0023     	 movs r3,#0
 675 000a FB73     	 strb r3,[r7,#15]
 120:../Dave/Generated/TIMER/timer.c ****   /* Check for APP instance is initialized or not */
 121:../Dave/Generated/TIMER/timer.c ****   if (false == handle_ptr->initialized)
 676              	 .loc 2 121 0
 677 000c 7B68     	 ldr r3,[r7,#4]
 678 000e 93F82630 	 ldrb r3,[r3,#38]
 679 0012 83F00103 	 eor r3,r3,#1
 680 0016 DBB2     	 uxtb r3,r3
 681 0018 002B     	 cmp r3,#0
 682 001a 09D0     	 beq .L19
 122:../Dave/Generated/TIMER/timer.c ****   {
 123:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
 124:../Dave/Generated/TIMER/timer.c ****     if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 683              	 .loc 2 124 0
 684 001c 7B68     	 ldr r3,[r7,#4]
 685 001e 93F82130 	 ldrb r3,[r3,#33]
 686 0022 002B     	 cmp r3,#0
 687 0024 04D1     	 bne .L19
 125:../Dave/Generated/TIMER/timer.c ****     {
 126:../Dave/Generated/TIMER/timer.c ****       /* Configure CCU4 timer for the required time tick settings */
 127:../Dave/Generated/TIMER/timer.c ****       status = TIMER_CCU4_lInit(handle_ptr);
 688              	 .loc 2 127 0
 689 0026 7868     	 ldr r0,[r7,#4]
 690 0028 FFF7FEFF 	 bl TIMER_CCU4_lInit
 691 002c 0346     	 mov r3,r0
 692 002e FB73     	 strb r3,[r7,#15]
 693              	.L19:
 128:../Dave/Generated/TIMER/timer.c ****     }
 129:../Dave/Generated/TIMER/timer.c **** #endif
 130:../Dave/Generated/TIMER/timer.c **** 
 131:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU8_USED
 132:../Dave/Generated/TIMER/timer.c ****     if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 133:../Dave/Generated/TIMER/timer.c ****     {
 134:../Dave/Generated/TIMER/timer.c ****       /* Configure CCU8 timer for the required time tick settings */
 135:../Dave/Generated/TIMER/timer.c ****       status = TIMER_CCU8_lInit(handle_ptr);
 136:../Dave/Generated/TIMER/timer.c ****     }
 137:../Dave/Generated/TIMER/timer.c **** #endif
 138:../Dave/Generated/TIMER/timer.c ****   }
 139:../Dave/Generated/TIMER/timer.c **** 
 140:../Dave/Generated/TIMER/timer.c ****   return (status);
 694              	 .loc 2 140 0
 695 0030 FB7B     	 ldrb r3,[r7,#15]
 141:../Dave/Generated/TIMER/timer.c **** }
 696              	 .loc 2 141 0
 697 0032 1846     	 mov r0,r3
 698 0034 1037     	 adds r7,r7,#16
 699              	.LCFI81:
 700              	 .cfi_def_cfa_offset 8
 701 0036 BD46     	 mov sp,r7
 702              	.LCFI82:
 703              	 .cfi_def_cfa_register 13
 704              	 
 705 0038 80BD     	 pop {r7,pc}
 706              	 .cfi_endproc
 707              	.LFE203:
 709 003a 00BF     	 .section .text.TIMER_Start,"ax",%progbits
 710              	 .align 2
 711              	 .global TIMER_Start
 712              	 .thumb
 713              	 .thumb_func
 715              	TIMER_Start:
 716              	.LFB204:
 142:../Dave/Generated/TIMER/timer.c **** 
 143:../Dave/Generated/TIMER/timer.c **** /*
 144:../Dave/Generated/TIMER/timer.c ****  * This function starts the timer to generate the events for the specified time_interval value
 145:../Dave/Generated/TIMER/timer.c ****  */
 146:../Dave/Generated/TIMER/timer.c **** TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
 147:../Dave/Generated/TIMER/timer.c **** {
 717              	 .loc 2 147 0
 718              	 .cfi_startproc
 719              	 
 720              	 
 721 0000 80B5     	 push {r7,lr}
 722              	.LCFI83:
 723              	 .cfi_def_cfa_offset 8
 724              	 .cfi_offset 7,-8
 725              	 .cfi_offset 14,-4
 726 0002 84B0     	 sub sp,sp,#16
 727              	.LCFI84:
 728              	 .cfi_def_cfa_offset 24
 729 0004 00AF     	 add r7,sp,#0
 730              	.LCFI85:
 731              	 .cfi_def_cfa_register 7
 732 0006 7860     	 str r0,[r7,#4]
 148:../Dave/Generated/TIMER/timer.c ****   TIMER_STATUS_t status;
 149:../Dave/Generated/TIMER/timer.c **** 
 150:../Dave/Generated/TIMER/timer.c ****   XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));
 151:../Dave/Generated/TIMER/timer.c **** 
 152:../Dave/Generated/TIMER/timer.c ****   /* Check for APP instance is initialized or not */
 153:../Dave/Generated/TIMER/timer.c ****   if (true == handle_ptr->initialized)
 733              	 .loc 2 153 0
 734 0008 7B68     	 ldr r3,[r7,#4]
 735 000a 93F82630 	 ldrb r3,[r3,#38]
 736 000e 002B     	 cmp r3,#0
 737 0010 0CD0     	 beq .L22
 154:../Dave/Generated/TIMER/timer.c ****   {
 155:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
 156:../Dave/Generated/TIMER/timer.c ****     if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 738              	 .loc 2 156 0
 739 0012 7B68     	 ldr r3,[r7,#4]
 740 0014 93F82130 	 ldrb r3,[r3,#33]
 741 0018 002B     	 cmp r3,#0
 742 001a 04D1     	 bne .L23
 157:../Dave/Generated/TIMER/timer.c ****     {
 158:../Dave/Generated/TIMER/timer.c ****       /* Start the timer manually */
 159:../Dave/Generated/TIMER/timer.c ****       XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 743              	 .loc 2 159 0
 744 001c 7B68     	 ldr r3,[r7,#4]
 745 001e 5B69     	 ldr r3,[r3,#20]
 746 0020 1846     	 mov r0,r3
 747 0022 FFF7FEFF 	 bl XMC_CCU4_SLICE_StartTimer
 748              	.L23:
 160:../Dave/Generated/TIMER/timer.c ****     }
 161:../Dave/Generated/TIMER/timer.c **** #endif
 162:../Dave/Generated/TIMER/timer.c **** 
 163:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU8_USED
 164:../Dave/Generated/TIMER/timer.c ****     if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 165:../Dave/Generated/TIMER/timer.c ****        {
 166:../Dave/Generated/TIMER/timer.c ****       /* Start the timer manually */
 167:../Dave/Generated/TIMER/timer.c ****       XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 168:../Dave/Generated/TIMER/timer.c ****        }
 169:../Dave/Generated/TIMER/timer.c **** #endif
 170:../Dave/Generated/TIMER/timer.c ****     status = TIMER_STATUS_SUCCESS;
 749              	 .loc 2 170 0
 750 0026 0023     	 movs r3,#0
 751 0028 FB73     	 strb r3,[r7,#15]
 752 002a 01E0     	 b .L24
 753              	.L22:
 171:../Dave/Generated/TIMER/timer.c ****   }
 172:../Dave/Generated/TIMER/timer.c ****   else
 173:../Dave/Generated/TIMER/timer.c ****   {
 174:../Dave/Generated/TIMER/timer.c ****     status = TIMER_STATUS_FAILURE;
 754              	 .loc 2 174 0
 755 002c 0123     	 movs r3,#1
 756 002e FB73     	 strb r3,[r7,#15]
 757              	.L24:
 175:../Dave/Generated/TIMER/timer.c ****   }
 176:../Dave/Generated/TIMER/timer.c **** 
 177:../Dave/Generated/TIMER/timer.c ****   return (status);
 758              	 .loc 2 177 0
 759 0030 FB7B     	 ldrb r3,[r7,#15]
 178:../Dave/Generated/TIMER/timer.c **** }
 760              	 .loc 2 178 0
 761 0032 1846     	 mov r0,r3
 762 0034 1037     	 adds r7,r7,#16
 763              	.LCFI86:
 764              	 .cfi_def_cfa_offset 8
 765 0036 BD46     	 mov sp,r7
 766              	.LCFI87:
 767              	 .cfi_def_cfa_register 13
 768              	 
 769 0038 80BD     	 pop {r7,pc}
 770              	 .cfi_endproc
 771              	.LFE204:
 773 003a 00BF     	 .section .text.TIMER_Stop,"ax",%progbits
 774              	 .align 2
 775              	 .global TIMER_Stop
 776              	 .thumb
 777              	 .thumb_func
 779              	TIMER_Stop:
 780              	.LFB205:
 179:../Dave/Generated/TIMER/timer.c **** 
 180:../Dave/Generated/TIMER/timer.c **** /*
 181:../Dave/Generated/TIMER/timer.c ****  * This function stops and clears the timer
 182:../Dave/Generated/TIMER/timer.c ****  */
 183:../Dave/Generated/TIMER/timer.c **** TIMER_STATUS_t TIMER_Stop(TIMER_t  *const handle_ptr)
 184:../Dave/Generated/TIMER/timer.c **** {
 781              	 .loc 2 184 0
 782              	 .cfi_startproc
 783              	 
 784              	 
 785 0000 80B5     	 push {r7,lr}
 786              	.LCFI88:
 787              	 .cfi_def_cfa_offset 8
 788              	 .cfi_offset 7,-8
 789              	 .cfi_offset 14,-4
 790 0002 84B0     	 sub sp,sp,#16
 791              	.LCFI89:
 792              	 .cfi_def_cfa_offset 24
 793 0004 00AF     	 add r7,sp,#0
 794              	.LCFI90:
 795              	 .cfi_def_cfa_register 7
 796 0006 7860     	 str r0,[r7,#4]
 185:../Dave/Generated/TIMER/timer.c ****   TIMER_STATUS_t status;
 186:../Dave/Generated/TIMER/timer.c **** 
 187:../Dave/Generated/TIMER/timer.c ****   XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));
 188:../Dave/Generated/TIMER/timer.c **** 
 189:../Dave/Generated/TIMER/timer.c ****   /* Check whether timer is initialized and in running state */
 190:../Dave/Generated/TIMER/timer.c ****   if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
 797              	 .loc 2 190 0
 798 0008 7868     	 ldr r0,[r7,#4]
 799 000a FFF7FEFF 	 bl TIMER_GetTimerStatus
 800 000e 0346     	 mov r3,r0
 801 0010 002B     	 cmp r3,#0
 802 0012 11D0     	 beq .L27
 803              	 .loc 2 190 0 is_stmt 0 discriminator 1
 804 0014 7B68     	 ldr r3,[r7,#4]
 805 0016 93F82630 	 ldrb r3,[r3,#38]
 806 001a 002B     	 cmp r3,#0
 807 001c 0CD0     	 beq .L27
 191:../Dave/Generated/TIMER/timer.c ****   {
 192:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
 193:../Dave/Generated/TIMER/timer.c ****     if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 808              	 .loc 2 193 0 is_stmt 1
 809 001e 7B68     	 ldr r3,[r7,#4]
 810 0020 93F82130 	 ldrb r3,[r3,#33]
 811 0024 002B     	 cmp r3,#0
 812 0026 04D1     	 bne .L28
 194:../Dave/Generated/TIMER/timer.c ****     {
 195:../Dave/Generated/TIMER/timer.c ****       /* Stops the timer */
 196:../Dave/Generated/TIMER/timer.c ****       XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 813              	 .loc 2 196 0
 814 0028 7B68     	 ldr r3,[r7,#4]
 815 002a 5B69     	 ldr r3,[r3,#20]
 816 002c 1846     	 mov r0,r3
 817 002e FFF7FEFF 	 bl XMC_CCU4_SLICE_StopTimer
 818              	.L28:
 197:../Dave/Generated/TIMER/timer.c ****     }
 198:../Dave/Generated/TIMER/timer.c **** #endif
 199:../Dave/Generated/TIMER/timer.c **** 
 200:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU8_USED
 201:../Dave/Generated/TIMER/timer.c ****     if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 202:../Dave/Generated/TIMER/timer.c ****        {
 203:../Dave/Generated/TIMER/timer.c ****       /* Stops the timer */
 204:../Dave/Generated/TIMER/timer.c ****       XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
 205:../Dave/Generated/TIMER/timer.c ****        }
 206:../Dave/Generated/TIMER/timer.c **** #endif
 207:../Dave/Generated/TIMER/timer.c ****     status = TIMER_STATUS_SUCCESS;
 819              	 .loc 2 207 0
 820 0032 0023     	 movs r3,#0
 821 0034 FB73     	 strb r3,[r7,#15]
 822 0036 01E0     	 b .L29
 823              	.L27:
 208:../Dave/Generated/TIMER/timer.c ****   }
 209:../Dave/Generated/TIMER/timer.c ****   else
 210:../Dave/Generated/TIMER/timer.c ****   {
 211:../Dave/Generated/TIMER/timer.c ****     status = TIMER_STATUS_FAILURE;
 824              	 .loc 2 211 0
 825 0038 0123     	 movs r3,#1
 826 003a FB73     	 strb r3,[r7,#15]
 827              	.L29:
 212:../Dave/Generated/TIMER/timer.c ****   }
 213:../Dave/Generated/TIMER/timer.c **** 
 214:../Dave/Generated/TIMER/timer.c ****   return (status);
 828              	 .loc 2 214 0
 829 003c FB7B     	 ldrb r3,[r7,#15]
 215:../Dave/Generated/TIMER/timer.c **** }
 830              	 .loc 2 215 0
 831 003e 1846     	 mov r0,r3
 832 0040 1037     	 adds r7,r7,#16
 833              	.LCFI91:
 834              	 .cfi_def_cfa_offset 8
 835 0042 BD46     	 mov sp,r7
 836              	.LCFI92:
 837              	 .cfi_def_cfa_register 13
 838              	 
 839 0044 80BD     	 pop {r7,pc}
 840              	 .cfi_endproc
 841              	.LFE205:
 843 0046 00BF     	 .section .text.TIMER_GetTimerStatus,"ax",%progbits
 844              	 .align 2
 845              	 .global TIMER_GetTimerStatus
 846              	 .thumb
 847              	 .thumb_func
 849              	TIMER_GetTimerStatus:
 850              	.LFB206:
 216:../Dave/Generated/TIMER/timer.c **** 
 217:../Dave/Generated/TIMER/timer.c **** /*
 218:../Dave/Generated/TIMER/timer.c ****  * This function returns the status of the timer
 219:../Dave/Generated/TIMER/timer.c ****  */
 220:../Dave/Generated/TIMER/timer.c **** bool TIMER_GetTimerStatus(TIMER_t  *const handle_ptr)
 221:../Dave/Generated/TIMER/timer.c **** {
 851              	 .loc 2 221 0
 852              	 .cfi_startproc
 853              	 
 854              	 
 855 0000 80B5     	 push {r7,lr}
 856              	.LCFI93:
 857              	 .cfi_def_cfa_offset 8
 858              	 .cfi_offset 7,-8
 859              	 .cfi_offset 14,-4
 860 0002 84B0     	 sub sp,sp,#16
 861              	.LCFI94:
 862              	 .cfi_def_cfa_offset 24
 863 0004 00AF     	 add r7,sp,#0
 864              	.LCFI95:
 865              	 .cfi_def_cfa_register 7
 866 0006 7860     	 str r0,[r7,#4]
 222:../Dave/Generated/TIMER/timer.c ****   bool status;
 223:../Dave/Generated/TIMER/timer.c **** 
 224:../Dave/Generated/TIMER/timer.c ****   XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));
 225:../Dave/Generated/TIMER/timer.c **** 
 226:../Dave/Generated/TIMER/timer.c ****   status = false;
 867              	 .loc 2 226 0
 868 0008 0023     	 movs r3,#0
 869 000a FB73     	 strb r3,[r7,#15]
 227:../Dave/Generated/TIMER/timer.c **** 
 228:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
 229:../Dave/Generated/TIMER/timer.c ****   if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 870              	 .loc 2 229 0
 871 000c 7B68     	 ldr r3,[r7,#4]
 872 000e 93F82130 	 ldrb r3,[r3,#33]
 873 0012 002B     	 cmp r3,#0
 874 0014 06D1     	 bne .L32
 230:../Dave/Generated/TIMER/timer.c ****   {
 231:../Dave/Generated/TIMER/timer.c ****     /* Returns the current status of the timer */
 232:../Dave/Generated/TIMER/timer.c ****     status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 875              	 .loc 2 232 0
 876 0016 7B68     	 ldr r3,[r7,#4]
 877 0018 5B69     	 ldr r3,[r3,#20]
 878 001a 1846     	 mov r0,r3
 879 001c FFF7FEFF 	 bl XMC_CCU4_SLICE_IsTimerRunning
 880 0020 0346     	 mov r3,r0
 881 0022 FB73     	 strb r3,[r7,#15]
 882              	.L32:
 233:../Dave/Generated/TIMER/timer.c ****   }
 234:../Dave/Generated/TIMER/timer.c **** #endif
 235:../Dave/Generated/TIMER/timer.c **** 
 236:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU8_USED
 237:../Dave/Generated/TIMER/timer.c ****   if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 238:../Dave/Generated/TIMER/timer.c ****   {
 239:../Dave/Generated/TIMER/timer.c ****     /* Returns the current status of the timer */
 240:../Dave/Generated/TIMER/timer.c ****     status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
 241:../Dave/Generated/TIMER/timer.c ****   }
 242:../Dave/Generated/TIMER/timer.c **** #endif
 243:../Dave/Generated/TIMER/timer.c **** 
 244:../Dave/Generated/TIMER/timer.c ****   return (status);
 883              	 .loc 2 244 0
 884 0024 FB7B     	 ldrb r3,[r7,#15]
 245:../Dave/Generated/TIMER/timer.c **** }
 885              	 .loc 2 245 0
 886 0026 1846     	 mov r0,r3
 887 0028 1037     	 adds r7,r7,#16
 888              	.LCFI96:
 889              	 .cfi_def_cfa_offset 8
 890 002a BD46     	 mov sp,r7
 891              	.LCFI97:
 892              	 .cfi_def_cfa_register 13
 893              	 
 894 002c 80BD     	 pop {r7,pc}
 895              	 .cfi_endproc
 896              	.LFE206:
 898              	 .global __aeabi_uldivmod
 899 002e 00BF     	 .section .text.TIMER_SetTimeInterval,"ax",%progbits
 900              	 .align 2
 901              	 .global TIMER_SetTimeInterval
 902              	 .thumb
 903              	 .thumb_func
 905              	TIMER_SetTimeInterval:
 906              	.LFB207:
 246:../Dave/Generated/TIMER/timer.c **** 
 247:../Dave/Generated/TIMER/timer.c **** /*
 248:../Dave/Generated/TIMER/timer.c ****  * This function changes the PWM period which in turn changes the time tick interval value by check
 249:../Dave/Generated/TIMER/timer.c ****  * the given time tick value is within supported range.
 250:../Dave/Generated/TIMER/timer.c ****  */
 251:../Dave/Generated/TIMER/timer.c **** TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
 252:../Dave/Generated/TIMER/timer.c **** {
 907              	 .loc 2 252 0
 908              	 .cfi_startproc
 909              	 
 910              	 
 911 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 912              	.LCFI98:
 913              	 .cfi_def_cfa_offset 20
 914              	 .cfi_offset 4,-20
 915              	 .cfi_offset 5,-16
 916              	 .cfi_offset 6,-12
 917              	 .cfi_offset 7,-8
 918              	 .cfi_offset 14,-4
 919 0002 87B0     	 sub sp,sp,#28
 920              	.LCFI99:
 921              	 .cfi_def_cfa_offset 48
 922 0004 00AF     	 add r7,sp,#0
 923              	.LCFI100:
 924              	 .cfi_def_cfa_register 7
 925 0006 7860     	 str r0,[r7,#4]
 926 0008 3960     	 str r1,[r7]
 253:../Dave/Generated/TIMER/timer.c ****   TIMER_STATUS_t status;
 254:../Dave/Generated/TIMER/timer.c ****   uint32_t lfrequency;
 255:../Dave/Generated/TIMER/timer.c ****   uint32_t lprescaler;
 256:../Dave/Generated/TIMER/timer.c **** 
 257:../Dave/Generated/TIMER/timer.c ****   XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));
 258:../Dave/Generated/TIMER/timer.c **** 
 259:../Dave/Generated/TIMER/timer.c ****   status = TIMER_STATUS_FAILURE;
 927              	 .loc 2 259 0
 928 000a 0123     	 movs r3,#1
 929 000c FB75     	 strb r3,[r7,#23]
 260:../Dave/Generated/TIMER/timer.c **** 
 261:../Dave/Generated/TIMER/timer.c ****   if (false == TIMER_GetTimerStatus(handle_ptr))
 930              	 .loc 2 261 0
 931 000e 7868     	 ldr r0,[r7,#4]
 932 0010 FFF7FEFF 	 bl TIMER_GetTimerStatus
 933 0014 0346     	 mov r3,r0
 934 0016 83F00103 	 eor r3,r3,#1
 935 001a DBB2     	 uxtb r3,r3
 936 001c 002B     	 cmp r3,#0
 937 001e 79D0     	 beq .L35
 262:../Dave/Generated/TIMER/timer.c ****   {
 263:../Dave/Generated/TIMER/timer.c ****     /* check for time_interval range */
 264:../Dave/Generated/TIMER/timer.c ****     if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_ma
 938              	 .loc 2 264 0
 939 0020 7B68     	 ldr r3,[r7,#4]
 940 0022 9A68     	 ldr r2,[r3,#8]
 941 0024 3B68     	 ldr r3,[r7]
 942 0026 9A42     	 cmp r2,r3
 943 0028 74D8     	 bhi .L35
 944              	 .loc 2 264 0 is_stmt 0 discriminator 1
 945 002a 7B68     	 ldr r3,[r7,#4]
 946 002c 5A68     	 ldr r2,[r3,#4]
 947 002e 3B68     	 ldr r3,[r7]
 948 0030 9A42     	 cmp r2,r3
 949 0032 6FD3     	 bcc .L35
 265:../Dave/Generated/TIMER/timer.c ****     {
 266:../Dave/Generated/TIMER/timer.c ****       /* Initialize the prescaler */
 267:../Dave/Generated/TIMER/timer.c ****       lprescaler = 0U;
 950              	 .loc 2 267 0 is_stmt 1
 951 0034 0023     	 movs r3,#0
 952 0036 3B61     	 str r3,[r7,#16]
 268:../Dave/Generated/TIMER/timer.c ****       while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler))
 953              	 .loc 2 268 0
 954 0038 02E0     	 b .L36
 955              	.L37:
 269:../Dave/Generated/TIMER/timer.c ****       {
 270:../Dave/Generated/TIMER/timer.c ****         lprescaler++;
 956              	 .loc 2 270 0
 957 003a 3B69     	 ldr r3,[r7,#16]
 958 003c 0133     	 adds r3,r3,#1
 959 003e 3B61     	 str r3,[r7,#16]
 960              	.L36:
 268:../Dave/Generated/TIMER/timer.c ****       while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler))
 961              	 .loc 2 268 0
 962 0040 7B68     	 ldr r3,[r7,#4]
 963 0042 5B68     	 ldr r3,[r3,#4]
 964 0044 3A69     	 ldr r2,[r7,#16]
 965 0046 C2F10F02 	 rsb r2,r2,#15
 966 004a 23FA02F2 	 lsr r2,r3,r2
 967 004e 3B68     	 ldr r3,[r7]
 968 0050 9A42     	 cmp r2,r3
 969 0052 F2D3     	 bcc .L37
 271:../Dave/Generated/TIMER/timer.c ****       }
 272:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
 273:../Dave/Generated/TIMER/timer.c ****       if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 970              	 .loc 2 273 0
 971 0054 7B68     	 ldr r3,[r7,#4]
 972 0056 93F82130 	 ldrb r3,[r3,#33]
 973 005a 002B     	 cmp r3,#0
 974 005c 5AD1     	 bne .L35
 274:../Dave/Generated/TIMER/timer.c ****       {
 275:../Dave/Generated/TIMER/timer.c ****         lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
 975              	 .loc 2 275 0
 976 005e 7B68     	 ldr r3,[r7,#4]
 977 0060 1B69     	 ldr r3,[r3,#16]
 978 0062 1B68     	 ldr r3,[r3]
 979 0064 FB60     	 str r3,[r7,#12]
 276:../Dave/Generated/TIMER/timer.c ****         handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 980              	 .loc 2 276 0
 981 0066 7B68     	 ldr r3,[r7,#4]
 982 0068 DA69     	 ldr r2,[r3,#28]
 983 006a 3B69     	 ldr r3,[r7,#16]
 984 006c DBB2     	 uxtb r3,r3
 985 006e 03F00F03 	 and r3,r3,#15
 986 0072 D9B2     	 uxtb r1,r3
 987 0074 1379     	 ldrb r3,[r2,#4]
 988 0076 61F30303 	 bfi r3,r1,#0,#4
 989 007a 1371     	 strb r3,[r2,#4]
 277:../Dave/Generated/TIMER/timer.c ****         /* Calculate the period register for the required time_interval value */
 278:../Dave/Generated/TIMER/timer.c ****         handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 990              	 .loc 2 278 0
 991 007c 3B68     	 ldr r3,[r7]
 992 007e 1846     	 mov r0,r3
 993 0080 4FF00001 	 mov r1,#0
 994 0084 FB68     	 ldr r3,[r7,#12]
 995 0086 1A46     	 mov r2,r3
 996 0088 4FF00003 	 mov r3,#0
 997 008c 02FB01FE 	 mul lr,r2,r1
 998 0090 00FB03F6 	 mul r6,r0,r3
 999 0094 7644     	 add r6,r6,lr
 1000 0096 A0FB0223 	 umull r2,r3,r0,r2
 1001 009a F118     	 adds r1,r6,r3
 1002 009c 0B46     	 mov r3,r1
 279:../Dave/Generated/TIMER/timer.c ****                                                handle_ptr->ccu4_slice_config_ptr->prescaler_initval
 1003              	 .loc 2 279 0
 1004 009e 7968     	 ldr r1,[r7,#4]
 1005 00a0 C969     	 ldr r1,[r1,#28]
 1006 00a2 0979     	 ldrb r1,[r1,#4]
 1007 00a4 C1F30301 	 ubfx r1,r1,#0,#4
 1008 00a8 C9B2     	 uxtb r1,r1
 278:../Dave/Generated/TIMER/timer.c ****                                                handle_ptr->ccu4_slice_config_ptr->prescaler_initval
 1009              	 .loc 2 278 0
 1010 00aa C1F12006 	 rsb r6,r1,#32
 1011 00ae A1F12000 	 sub r0,r1,#32
 1012 00b2 22FA01F4 	 lsr r4,r2,r1
 1013 00b6 03FA06F6 	 lsl r6,r3,r6
 1014 00ba 3443     	 orrs r4,r4,r6
 1015 00bc 23FA00F0 	 lsr r0,r3,r0
 1016 00c0 0443     	 orrs r4,r4,r0
 1017 00c2 23FA01F5 	 lsr r5,r3,r1
 1018              	 .loc 2 279 0
 1019 00c6 2046     	 mov r0,r4
 1020 00c8 2946     	 mov r1,r5
 1021 00ca 15A3     	 adr r3,.L40
 1022 00cc D3E90023 	 ldrd r2,[r3]
 1023 00d0 FFF7FEFF 	 bl __aeabi_uldivmod
 1024 00d4 0246     	 mov r2,r0
 1025 00d6 0B46     	 mov r3,r1
 278:../Dave/Generated/TIMER/timer.c ****                                                handle_ptr->ccu4_slice_config_ptr->prescaler_initval
 1026              	 .loc 2 278 0
 1027 00d8 92B2     	 uxth r2,r2
 1028 00da 7B68     	 ldr r3,[r7,#4]
 1029 00dc 5A84     	 strh r2,[r3,#34]
 280:../Dave/Generated/TIMER/timer.c ****                                               TIMER_RESOLUTION_SEC_TO_MICRO);
 281:../Dave/Generated/TIMER/timer.c ****         /* Actual timer period values is Period_reg_val+1U */
 282:../Dave/Generated/TIMER/timer.c ****         if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 1030              	 .loc 2 282 0
 1031 00de 7B68     	 ldr r3,[r7,#4]
 1032 00e0 5B8C     	 ldrh r3,[r3,#34]
 1033 00e2 012B     	 cmp r3,#1
 1034 00e4 05D9     	 bls .L38
 283:../Dave/Generated/TIMER/timer.c ****         {
 284:../Dave/Generated/TIMER/timer.c ****           (handle_ptr->period_value)--;
 1035              	 .loc 2 284 0
 1036 00e6 7B68     	 ldr r3,[r7,#4]
 1037 00e8 5B8C     	 ldrh r3,[r3,#34]
 1038 00ea 013B     	 subs r3,r3,#1
 1039 00ec 9AB2     	 uxth r2,r3
 1040 00ee 7B68     	 ldr r3,[r7,#4]
 1041 00f0 5A84     	 strh r2,[r3,#34]
 1042              	.L38:
 285:../Dave/Generated/TIMER/timer.c ****         }
 286:../Dave/Generated/TIMER/timer.c ****         /* Update the prescaler */
 287:../Dave/Generated/TIMER/timer.c ****         XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->
 1043              	 .loc 2 287 0
 1044 00f2 7B68     	 ldr r3,[r7,#4]
 1045 00f4 5A69     	 ldr r2,[r3,#20]
 1046 00f6 7B68     	 ldr r3,[r7,#4]
 1047 00f8 DB69     	 ldr r3,[r3,#28]
 1048 00fa 1B79     	 ldrb r3,[r3,#4]
 1049 00fc C3F30303 	 ubfx r3,r3,#0,#4
 1050 0100 DBB2     	 uxtb r3,r3
 1051 0102 1046     	 mov r0,r2
 1052 0104 1946     	 mov r1,r3
 1053 0106 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetPrescaler
 288:../Dave/Generated/TIMER/timer.c ****         /* update period, compare and prescaler values */
 289:../Dave/Generated/TIMER/timer.c ****         TIMER_CCU4_lShadowTransfer(handle_ptr);
 1054              	 .loc 2 289 0
 1055 010a 7868     	 ldr r0,[r7,#4]
 1056 010c FFF7FEFF 	 bl TIMER_CCU4_lShadowTransfer
 290:../Dave/Generated/TIMER/timer.c ****         /* Update the status */
 291:../Dave/Generated/TIMER/timer.c ****         status = TIMER_STATUS_SUCCESS;
 1057              	 .loc 2 291 0
 1058 0110 0023     	 movs r3,#0
 1059 0112 FB75     	 strb r3,[r7,#23]
 1060              	.L35:
 292:../Dave/Generated/TIMER/timer.c ****       }
 293:../Dave/Generated/TIMER/timer.c **** #endif
 294:../Dave/Generated/TIMER/timer.c **** 
 295:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU8_USED
 296:../Dave/Generated/TIMER/timer.c ****       if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 297:../Dave/Generated/TIMER/timer.c ****       {
 298:../Dave/Generated/TIMER/timer.c ****         handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
 299:../Dave/Generated/TIMER/timer.c ****         lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
 300:../Dave/Generated/TIMER/timer.c ****         /* Calculate the period register for the required time_interval value */
 301:../Dave/Generated/TIMER/timer.c ****         handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 302:../Dave/Generated/TIMER/timer.c ****                                                handle_ptr->ccu8_slice_config_ptr->prescaler_initval
 303:../Dave/Generated/TIMER/timer.c ****                                               TIMER_RESOLUTION_SEC_TO_MICRO);
 304:../Dave/Generated/TIMER/timer.c ****         /* Actual timer period values is Period_reg_val+1U */
 305:../Dave/Generated/TIMER/timer.c ****         if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 306:../Dave/Generated/TIMER/timer.c ****         {
 307:../Dave/Generated/TIMER/timer.c ****           (handle_ptr->period_value)--;
 308:../Dave/Generated/TIMER/timer.c ****         }
 309:../Dave/Generated/TIMER/timer.c ****         /* Update the prescaler */
 310:../Dave/Generated/TIMER/timer.c ****         XMC_CCU8_SLICE_SetPrescaler(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr->
 311:../Dave/Generated/TIMER/timer.c ****         /* update period, compare and prescaler values */
 312:../Dave/Generated/TIMER/timer.c ****         TIMER_CCU8_lShadowTransfer(handle_ptr);
 313:../Dave/Generated/TIMER/timer.c ****         /* Update the status */
 314:../Dave/Generated/TIMER/timer.c ****         status = TIMER_STATUS_SUCCESS;
 315:../Dave/Generated/TIMER/timer.c ****       }
 316:../Dave/Generated/TIMER/timer.c **** #endif
 317:../Dave/Generated/TIMER/timer.c ****     }
 318:../Dave/Generated/TIMER/timer.c ****   }
 319:../Dave/Generated/TIMER/timer.c ****   return (status);
 1061              	 .loc 2 319 0
 1062 0114 FB7D     	 ldrb r3,[r7,#23]
 320:../Dave/Generated/TIMER/timer.c **** }
 1063              	 .loc 2 320 0
 1064 0116 1846     	 mov r0,r3
 1065 0118 1C37     	 adds r7,r7,#28
 1066              	.LCFI101:
 1067              	 .cfi_def_cfa_offset 20
 1068 011a BD46     	 mov sp,r7
 1069              	.LCFI102:
 1070              	 .cfi_def_cfa_register 13
 1071              	 
 1072 011c F0BD     	 pop {r4,r5,r6,r7,pc}
 1073              	.L41:
 1074 011e 00BF     	 .align 3
 1075              	.L40:
 1076 0120 00E1F505 	 .word 100000000
 1077 0124 00000000 	 .word 0
 1078              	 .cfi_endproc
 1079              	.LFE207:
 1081              	 .section .text.TIMER_GetInterruptStatus,"ax",%progbits
 1082              	 .align 2
 1083              	 .global TIMER_GetInterruptStatus
 1084              	 .thumb
 1085              	 .thumb_func
 1087              	TIMER_GetInterruptStatus:
 1088              	.LFB208:
 321:../Dave/Generated/TIMER/timer.c **** 
 322:../Dave/Generated/TIMER/timer.c **** /*
 323:../Dave/Generated/TIMER/timer.c ****  * This function reads the timer event(period match interrupt) status of the given timer
 324:../Dave/Generated/TIMER/timer.c ****  */
 325:../Dave/Generated/TIMER/timer.c **** bool TIMER_GetInterruptStatus(TIMER_t * const handle_ptr)
 326:../Dave/Generated/TIMER/timer.c **** {
 1089              	 .loc 2 326 0
 1090              	 .cfi_startproc
 1091              	 
 1092              	 
 1093 0000 80B5     	 push {r7,lr}
 1094              	.LCFI103:
 1095              	 .cfi_def_cfa_offset 8
 1096              	 .cfi_offset 7,-8
 1097              	 .cfi_offset 14,-4
 1098 0002 84B0     	 sub sp,sp,#16
 1099              	.LCFI104:
 1100              	 .cfi_def_cfa_offset 24
 1101 0004 00AF     	 add r7,sp,#0
 1102              	.LCFI105:
 1103              	 .cfi_def_cfa_register 7
 1104 0006 7860     	 str r0,[r7,#4]
 327:../Dave/Generated/TIMER/timer.c ****   bool status;
 328:../Dave/Generated/TIMER/timer.c ****   XMC_ASSERT("TIMER_GetInterruptStatus:handle_ptr NULL" , (handle_ptr != NULL));
 329:../Dave/Generated/TIMER/timer.c ****   status = false;
 1105              	 .loc 2 329 0
 1106 0008 0023     	 movs r3,#0
 1107 000a FB73     	 strb r3,[r7,#15]
 330:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
 331:../Dave/Generated/TIMER/timer.c ****   if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 1108              	 .loc 2 331 0
 1109 000c 7B68     	 ldr r3,[r7,#4]
 1110 000e 93F82130 	 ldrb r3,[r3,#33]
 1111 0012 002B     	 cmp r3,#0
 1112 0014 07D1     	 bne .L43
 332:../Dave/Generated/TIMER/timer.c ****   {
 333:../Dave/Generated/TIMER/timer.c ****     /* Reads the interrupt status */
 334:../Dave/Generated/TIMER/timer.c ****     status = XMC_CCU4_SLICE_GetEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH
 1113              	 .loc 2 334 0
 1114 0016 7B68     	 ldr r3,[r7,#4]
 1115 0018 5B69     	 ldr r3,[r3,#20]
 1116 001a 1846     	 mov r0,r3
 1117 001c 0021     	 movs r1,#0
 1118 001e FFF7FEFF 	 bl XMC_CCU4_SLICE_GetEvent
 1119 0022 0346     	 mov r3,r0
 1120 0024 FB73     	 strb r3,[r7,#15]
 1121              	.L43:
 335:../Dave/Generated/TIMER/timer.c ****   }
 336:../Dave/Generated/TIMER/timer.c **** #endif
 337:../Dave/Generated/TIMER/timer.c **** 
 338:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU8_USED
 339:../Dave/Generated/TIMER/timer.c ****   if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 340:../Dave/Generated/TIMER/timer.c ****   {
 341:../Dave/Generated/TIMER/timer.c ****     /* Reads the interrupt status */
 342:../Dave/Generated/TIMER/timer.c ****     status = XMC_CCU8_SLICE_GetEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH
 343:../Dave/Generated/TIMER/timer.c ****   }
 344:../Dave/Generated/TIMER/timer.c **** #endif
 345:../Dave/Generated/TIMER/timer.c ****   return (status);
 1122              	 .loc 2 345 0
 1123 0026 FB7B     	 ldrb r3,[r7,#15]
 346:../Dave/Generated/TIMER/timer.c **** }
 1124              	 .loc 2 346 0
 1125 0028 1846     	 mov r0,r3
 1126 002a 1037     	 adds r7,r7,#16
 1127              	.LCFI106:
 1128              	 .cfi_def_cfa_offset 8
 1129 002c BD46     	 mov sp,r7
 1130              	.LCFI107:
 1131              	 .cfi_def_cfa_register 13
 1132              	 
 1133 002e 80BD     	 pop {r7,pc}
 1134              	 .cfi_endproc
 1135              	.LFE208:
 1137              	 .section .text.TIMER_ClearEvent,"ax",%progbits
 1138              	 .align 2
 1139              	 .global TIMER_ClearEvent
 1140              	 .thumb
 1141              	 .thumb_func
 1143              	TIMER_ClearEvent:
 1144              	.LFB209:
 347:../Dave/Generated/TIMER/timer.c **** 
 348:../Dave/Generated/TIMER/timer.c **** /*
 349:../Dave/Generated/TIMER/timer.c ****  * This function clears the period match interrupt status of the given timer.
 350:../Dave/Generated/TIMER/timer.c ****  */
 351:../Dave/Generated/TIMER/timer.c **** void TIMER_ClearEvent(TIMER_t *const handle_ptr)
 352:../Dave/Generated/TIMER/timer.c **** {
 1145              	 .loc 2 352 0
 1146              	 .cfi_startproc
 1147              	 
 1148              	 
 1149 0000 80B5     	 push {r7,lr}
 1150              	.LCFI108:
 1151              	 .cfi_def_cfa_offset 8
 1152              	 .cfi_offset 7,-8
 1153              	 .cfi_offset 14,-4
 1154 0002 82B0     	 sub sp,sp,#8
 1155              	.LCFI109:
 1156              	 .cfi_def_cfa_offset 16
 1157 0004 00AF     	 add r7,sp,#0
 1158              	.LCFI110:
 1159              	 .cfi_def_cfa_register 7
 1160 0006 7860     	 str r0,[r7,#4]
 353:../Dave/Generated/TIMER/timer.c ****   XMC_ASSERT("TIME_CCU_AcknowledgeInterrupt:handle_ptr NULL" , (handle_ptr != NULL));
 354:../Dave/Generated/TIMER/timer.c **** 
 355:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
 356:../Dave/Generated/TIMER/timer.c ****   if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 1161              	 .loc 2 356 0
 1162 0008 7B68     	 ldr r3,[r7,#4]
 1163 000a 93F82130 	 ldrb r3,[r3,#33]
 1164 000e 002B     	 cmp r3,#0
 1165 0010 05D1     	 bne .L45
 357:../Dave/Generated/TIMER/timer.c ****   {
 358:../Dave/Generated/TIMER/timer.c ****     /* clears the timer event(period match interrupt) */
 359:../Dave/Generated/TIMER/timer.c ****     XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 1166              	 .loc 2 359 0
 1167 0012 7B68     	 ldr r3,[r7,#4]
 1168 0014 5B69     	 ldr r3,[r3,#20]
 1169 0016 1846     	 mov r0,r3
 1170 0018 0021     	 movs r1,#0
 1171 001a FFF7FEFF 	 bl XMC_CCU4_SLICE_ClearEvent
 1172              	.L45:
 360:../Dave/Generated/TIMER/timer.c ****   }
 361:../Dave/Generated/TIMER/timer.c **** #endif
 362:../Dave/Generated/TIMER/timer.c **** 
 363:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU8_USED
 364:../Dave/Generated/TIMER/timer.c ****   if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 365:../Dave/Generated/TIMER/timer.c ****   {
 366:../Dave/Generated/TIMER/timer.c ****     /* clears the timer event(period match interrupt) */
 367:../Dave/Generated/TIMER/timer.c ****     XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 368:../Dave/Generated/TIMER/timer.c ****   }
 369:../Dave/Generated/TIMER/timer.c **** #endif
 370:../Dave/Generated/TIMER/timer.c **** }
 1173              	 .loc 2 370 0
 1174 001e 0837     	 adds r7,r7,#8
 1175              	.LCFI111:
 1176              	 .cfi_def_cfa_offset 8
 1177 0020 BD46     	 mov sp,r7
 1178              	.LCFI112:
 1179              	 .cfi_def_cfa_register 13
 1180              	 
 1181 0022 80BD     	 pop {r7,pc}
 1182              	 .cfi_endproc
 1183              	.LFE209:
 1185              	 .section .text.TIMER_GetTime,"ax",%progbits
 1186              	 .align 2
 1187              	 .global TIMER_GetTime
 1188              	 .thumb
 1189              	 .thumb_func
 1191              	TIMER_GetTime:
 1192              	.LFB210:
 371:../Dave/Generated/TIMER/timer.c **** 
 372:../Dave/Generated/TIMER/timer.c **** /*
 373:../Dave/Generated/TIMER/timer.c ****  * This function returns the current time value
 374:../Dave/Generated/TIMER/timer.c ****  */
 375:../Dave/Generated/TIMER/timer.c **** uint32_t TIMER_GetTime(TIMER_t *const handle_ptr)
 376:../Dave/Generated/TIMER/timer.c **** {
 1193              	 .loc 2 376 0
 1194              	 .cfi_startproc
 1195              	 
 1196              	 
 1197 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 1198              	.LCFI113:
 1199              	 .cfi_def_cfa_offset 20
 1200              	 .cfi_offset 4,-20
 1201              	 .cfi_offset 5,-16
 1202              	 .cfi_offset 6,-12
 1203              	 .cfi_offset 7,-8
 1204              	 .cfi_offset 14,-4
 1205 0002 87B0     	 sub sp,sp,#28
 1206              	.LCFI114:
 1207              	 .cfi_def_cfa_offset 48
 1208 0004 00AF     	 add r7,sp,#0
 1209              	.LCFI115:
 1210              	 .cfi_def_cfa_register 7
 1211 0006 7860     	 str r0,[r7,#4]
 377:../Dave/Generated/TIMER/timer.c ****   uint32_t ltimer_val;
 378:../Dave/Generated/TIMER/timer.c ****   uint32_t lprescaler;
 379:../Dave/Generated/TIMER/timer.c ****   uint32_t ltime_val;
 380:../Dave/Generated/TIMER/timer.c **** 
 381:../Dave/Generated/TIMER/timer.c ****   XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));
 382:../Dave/Generated/TIMER/timer.c ****   ltime_val = 0U;
 1212              	 .loc 2 382 0
 1213 0008 0023     	 movs r3,#0
 1214 000a 7B61     	 str r3,[r7,#20]
 383:../Dave/Generated/TIMER/timer.c **** 
 384:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
 385:../Dave/Generated/TIMER/timer.c ****   if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 1215              	 .loc 2 385 0
 1216 000c 7B68     	 ldr r3,[r7,#4]
 1217 000e 93F82130 	 ldrb r3,[r3,#33]
 1218 0012 002B     	 cmp r3,#0
 1219 0014 31D1     	 bne .L48
 386:../Dave/Generated/TIMER/timer.c ****   {
 387:../Dave/Generated/TIMER/timer.c ****     /* Added one to according to the edge aligned mode */
 388:../Dave/Generated/TIMER/timer.c ****     ltimer_val = (uint32_t)XMC_CCU4_SLICE_GetTimerValue(handle_ptr->ccu4_slice_ptr) + 1U;
 1220              	 .loc 2 388 0
 1221 0016 7B68     	 ldr r3,[r7,#4]
 1222 0018 5B69     	 ldr r3,[r3,#20]
 1223 001a 1846     	 mov r0,r3
 1224 001c FFF7FEFF 	 bl XMC_CCU4_SLICE_GetTimerValue
 1225 0020 0346     	 mov r3,r0
 1226 0022 0133     	 adds r3,r3,#1
 1227 0024 3B61     	 str r3,[r7,#16]
 389:../Dave/Generated/TIMER/timer.c ****     lprescaler = handle_ptr->ccu4_slice_config_ptr->prescaler_initval;
 1228              	 .loc 2 389 0
 1229 0026 7B68     	 ldr r3,[r7,#4]
 1230 0028 DB69     	 ldr r3,[r3,#28]
 1231 002a 1B79     	 ldrb r3,[r3,#4]
 1232 002c C3F30303 	 ubfx r3,r3,#0,#4
 1233 0030 DBB2     	 uxtb r3,r3
 1234 0032 FB60     	 str r3,[r7,#12]
 390:../Dave/Generated/TIMER/timer.c **** 
 391:../Dave/Generated/TIMER/timer.c ****     /* calculate the time value in micro seconds and scaled with 100 */
 392:../Dave/Generated/TIMER/timer.c ****     ltime_val = (uint32_t)((uint64_t)((uint64_t)ltimer_val * (uint64_t)TIMER_CLK_CONST_SCALED) >> \
 1235              	 .loc 2 392 0
 1236 0034 3B69     	 ldr r3,[r7,#16]
 1237 0036 1A46     	 mov r2,r3
 1238 0038 4FF00003 	 mov r3,#0
 1239 003c 1149     	 ldr r1,.L50
 1240 003e 01FB03F0 	 mul r0,r1,r3
 1241 0042 0021     	 movs r1,#0
 1242 0044 01FB02F1 	 mul r1,r1,r2
 1243 0048 0144     	 add r1,r1,r0
 1244 004a 0E48     	 ldr r0,.L50
 1245 004c A2FB0023 	 umull r2,r3,r2,r0
 1246 0050 1944     	 add r1,r1,r3
 1247 0052 0B46     	 mov r3,r1
 393:../Dave/Generated/TIMER/timer.c ****                            (TIMER_CLK_SCALE_FACTOR - lprescaler));
 1248              	 .loc 2 393 0
 1249 0054 F968     	 ldr r1,[r7,#12]
 1250 0056 C1F12001 	 rsb r1,r1,#32
 392:../Dave/Generated/TIMER/timer.c ****                            (TIMER_CLK_SCALE_FACTOR - lprescaler));
 1251              	 .loc 2 392 0
 1252 005a C1F12006 	 rsb r6,r1,#32
 1253 005e A1F12000 	 sub r0,r1,#32
 1254 0062 22FA01F4 	 lsr r4,r2,r1
 1255 0066 03FA06F6 	 lsl r6,r3,r6
 1256 006a 3443     	 orrs r4,r4,r6
 1257 006c 23FA00F0 	 lsr r0,r3,r0
 1258 0070 0443     	 orrs r4,r4,r0
 1259 0072 23FA01F5 	 lsr r5,r3,r1
 1260 0076 2346     	 mov r3,r4
 1261 0078 7B61     	 str r3,[r7,#20]
 1262              	.L48:
 394:../Dave/Generated/TIMER/timer.c ****   }
 395:../Dave/Generated/TIMER/timer.c **** #endif
 396:../Dave/Generated/TIMER/timer.c **** 
 397:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU8_USED
 398:../Dave/Generated/TIMER/timer.c ****   if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 399:../Dave/Generated/TIMER/timer.c ****   {
 400:../Dave/Generated/TIMER/timer.c ****     /* Added one to according to the edge aligned mode */
 401:../Dave/Generated/TIMER/timer.c ****     ltimer_val = (uint32_t)XMC_CCU8_SLICE_GetTimerValue(handle_ptr->ccu8_slice_ptr) + 1U;
 402:../Dave/Generated/TIMER/timer.c ****     lprescaler = handle_ptr->ccu8_slice_config_ptr->prescaler_initval;
 403:../Dave/Generated/TIMER/timer.c **** 
 404:../Dave/Generated/TIMER/timer.c ****     /* calculate the time value in micro seconds and scaled with 100 */
 405:../Dave/Generated/TIMER/timer.c ****     ltime_val = (uint32_t)((uint64_t)((uint64_t)ltimer_val * (uint64_t)TIMER_CLK_CONST_SCALED) >> \
 406:../Dave/Generated/TIMER/timer.c ****                            (TIMER_CLK_SCALE_FACTOR - lprescaler));
 407:../Dave/Generated/TIMER/timer.c ****   }
 408:../Dave/Generated/TIMER/timer.c **** #endif
 409:../Dave/Generated/TIMER/timer.c **** 
 410:../Dave/Generated/TIMER/timer.c ****   return ltime_val;
 1263              	 .loc 2 410 0
 1264 007a 7B69     	 ldr r3,[r7,#20]
 411:../Dave/Generated/TIMER/timer.c **** }
 1265              	 .loc 2 411 0
 1266 007c 1846     	 mov r0,r3
 1267 007e 1C37     	 adds r7,r7,#28
 1268              	.LCFI116:
 1269              	 .cfi_def_cfa_offset 20
 1270 0080 BD46     	 mov sp,r7
 1271              	.LCFI117:
 1272              	 .cfi_def_cfa_register 13
 1273              	 
 1274 0082 F0BD     	 pop {r4,r5,r6,r7,pc}
 1275              	.L51:
 1276              	 .align 2
 1277              	.L50:
 1278 0084 711CC7B1 	 .word -1312351119
 1279              	 .cfi_endproc
 1280              	.LFE210:
 1282              	 .section .text.TIMER_Clear,"ax",%progbits
 1283              	 .align 2
 1284              	 .global TIMER_Clear
 1285              	 .thumb
 1286              	 .thumb_func
 1288              	TIMER_Clear:
 1289              	.LFB211:
 412:../Dave/Generated/TIMER/timer.c **** 
 413:../Dave/Generated/TIMER/timer.c **** /*
 414:../Dave/Generated/TIMER/timer.c ****  * Clear the timer
 415:../Dave/Generated/TIMER/timer.c ****  */
 416:../Dave/Generated/TIMER/timer.c **** TIMER_STATUS_t TIMER_Clear(TIMER_t *const handle_ptr)
 417:../Dave/Generated/TIMER/timer.c **** {
 1290              	 .loc 2 417 0
 1291              	 .cfi_startproc
 1292              	 
 1293              	 
 1294 0000 80B5     	 push {r7,lr}
 1295              	.LCFI118:
 1296              	 .cfi_def_cfa_offset 8
 1297              	 .cfi_offset 7,-8
 1298              	 .cfi_offset 14,-4
 1299 0002 84B0     	 sub sp,sp,#16
 1300              	.LCFI119:
 1301              	 .cfi_def_cfa_offset 24
 1302 0004 00AF     	 add r7,sp,#0
 1303              	.LCFI120:
 1304              	 .cfi_def_cfa_register 7
 1305 0006 7860     	 str r0,[r7,#4]
 418:../Dave/Generated/TIMER/timer.c ****   TIMER_STATUS_t status;
 419:../Dave/Generated/TIMER/timer.c **** 
 420:../Dave/Generated/TIMER/timer.c ****   XMC_ASSERT("TIMER_Clear:handle_ptr NULL" , (handle_ptr != NULL));
 421:../Dave/Generated/TIMER/timer.c **** 
 422:../Dave/Generated/TIMER/timer.c ****   /* Check for APP instance is initialized or not */
 423:../Dave/Generated/TIMER/timer.c ****   if (true == handle_ptr->initialized)
 1306              	 .loc 2 423 0
 1307 0008 7B68     	 ldr r3,[r7,#4]
 1308 000a 93F82630 	 ldrb r3,[r3,#38]
 1309 000e 002B     	 cmp r3,#0
 1310 0010 0CD0     	 beq .L53
 424:../Dave/Generated/TIMER/timer.c ****   {
 425:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
 426:../Dave/Generated/TIMER/timer.c ****     if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 1311              	 .loc 2 426 0
 1312 0012 7B68     	 ldr r3,[r7,#4]
 1313 0014 93F82130 	 ldrb r3,[r3,#33]
 1314 0018 002B     	 cmp r3,#0
 1315 001a 04D1     	 bne .L54
 427:../Dave/Generated/TIMER/timer.c ****     {
 428:../Dave/Generated/TIMER/timer.c ****       /* Clear the timer register */
 429:../Dave/Generated/TIMER/timer.c ****       XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 1316              	 .loc 2 429 0
 1317 001c 7B68     	 ldr r3,[r7,#4]
 1318 001e 5B69     	 ldr r3,[r3,#20]
 1319 0020 1846     	 mov r0,r3
 1320 0022 FFF7FEFF 	 bl XMC_CCU4_SLICE_ClearTimer
 1321              	.L54:
 430:../Dave/Generated/TIMER/timer.c ****     }
 431:../Dave/Generated/TIMER/timer.c **** #endif
 432:../Dave/Generated/TIMER/timer.c **** 
 433:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU8_USED
 434:../Dave/Generated/TIMER/timer.c ****     if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 435:../Dave/Generated/TIMER/timer.c ****     {
 436:../Dave/Generated/TIMER/timer.c ****       /* Clear the timer register */
 437:../Dave/Generated/TIMER/timer.c ****       XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
 438:../Dave/Generated/TIMER/timer.c ****     }
 439:../Dave/Generated/TIMER/timer.c **** #endif
 440:../Dave/Generated/TIMER/timer.c ****     status = TIMER_STATUS_SUCCESS;
 1322              	 .loc 2 440 0
 1323 0026 0023     	 movs r3,#0
 1324 0028 FB73     	 strb r3,[r7,#15]
 1325 002a 01E0     	 b .L55
 1326              	.L53:
 441:../Dave/Generated/TIMER/timer.c ****   }
 442:../Dave/Generated/TIMER/timer.c ****   else
 443:../Dave/Generated/TIMER/timer.c ****   {
 444:../Dave/Generated/TIMER/timer.c ****     status = TIMER_STATUS_FAILURE;
 1327              	 .loc 2 444 0
 1328 002c 0123     	 movs r3,#1
 1329 002e FB73     	 strb r3,[r7,#15]
 1330              	.L55:
 445:../Dave/Generated/TIMER/timer.c ****   }
 446:../Dave/Generated/TIMER/timer.c **** 
 447:../Dave/Generated/TIMER/timer.c ****   return (status);
 1331              	 .loc 2 447 0
 1332 0030 FB7B     	 ldrb r3,[r7,#15]
 448:../Dave/Generated/TIMER/timer.c **** }
 1333              	 .loc 2 448 0
 1334 0032 1846     	 mov r0,r3
 1335 0034 1037     	 adds r7,r7,#16
 1336              	.LCFI121:
 1337              	 .cfi_def_cfa_offset 8
 1338 0036 BD46     	 mov sp,r7
 1339              	.LCFI122:
 1340              	 .cfi_def_cfa_register 13
 1341              	 
 1342 0038 80BD     	 pop {r7,pc}
 1343              	 .cfi_endproc
 1344              	.LFE211:
 1346 003a 00BF     	 .section .text.TIMER_CCU4_lInit,"ax",%progbits
 1347              	 .align 2
 1348              	 .global TIMER_CCU4_lInit
 1349              	 .thumb
 1350              	 .thumb_func
 1352              	TIMER_CCU4_lInit:
 1353              	.LFB212:
 449:../Dave/Generated/TIMER/timer.c **** 
 450:../Dave/Generated/TIMER/timer.c **** /******************************************** PRIVATE FUNCTION DEFINITIONS ************************
 451:../Dave/Generated/TIMER/timer.c **** #ifdef TIMER_CCU4_USED
 452:../Dave/Generated/TIMER/timer.c **** /*
 453:../Dave/Generated/TIMER/timer.c ****  * This function configures timer ccu4 timer with required time tick value
 454:../Dave/Generated/TIMER/timer.c ****  */
 455:../Dave/Generated/TIMER/timer.c **** TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
 456:../Dave/Generated/TIMER/timer.c **** {
 1354              	 .loc 2 456 0
 1355              	 .cfi_startproc
 1356              	 
 1357              	 
 1358 0000 80B5     	 push {r7,lr}
 1359              	.LCFI123:
 1360              	 .cfi_def_cfa_offset 8
 1361              	 .cfi_offset 7,-8
 1362              	 .cfi_offset 14,-4
 1363 0002 84B0     	 sub sp,sp,#16
 1364              	.LCFI124:
 1365              	 .cfi_def_cfa_offset 24
 1366 0004 00AF     	 add r7,sp,#0
 1367              	.LCFI125:
 1368              	 .cfi_def_cfa_register 7
 1369 0006 7860     	 str r0,[r7,#4]
 457:../Dave/Generated/TIMER/timer.c ****   TIMER_STATUS_t status;
 458:../Dave/Generated/TIMER/timer.c ****   /* Initialize the global registers */
 459:../Dave/Generated/TIMER/timer.c ****   status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 1370              	 .loc 2 459 0
 1371 0008 7B68     	 ldr r3,[r7,#4]
 1372 000a 1B69     	 ldr r3,[r3,#16]
 1373 000c 1846     	 mov r0,r3
 1374 000e FFF7FEFF 	 bl GLOBAL_CCU4_Init
 1375 0012 0346     	 mov r3,r0
 1376 0014 FB73     	 strb r3,[r7,#15]
 460:../Dave/Generated/TIMER/timer.c **** 
 461:../Dave/Generated/TIMER/timer.c ****   /* Enable the clock for selected timer */
 462:../Dave/Generated/TIMER/timer.c ****   XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 1377              	 .loc 2 462 0
 1378 0016 7B68     	 ldr r3,[r7,#4]
 1379 0018 1B69     	 ldr r3,[r3,#16]
 1380 001a 9A68     	 ldr r2,[r3,#8]
 1381 001c 7B68     	 ldr r3,[r7,#4]
 1382 001e 1B7E     	 ldrb r3,[r3,#24]
 1383 0020 1046     	 mov r0,r2
 1384 0022 1946     	 mov r1,r3
 1385 0024 FFF7FEFF 	 bl XMC_CCU4_EnableClock
 463:../Dave/Generated/TIMER/timer.c ****   /* Configure the timer with required settings */
 464:../Dave/Generated/TIMER/timer.c ****   XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 1386              	 .loc 2 464 0
 1387 0028 7B68     	 ldr r3,[r7,#4]
 1388 002a 5A69     	 ldr r2,[r3,#20]
 1389 002c 7B68     	 ldr r3,[r7,#4]
 1390 002e DB69     	 ldr r3,[r3,#28]
 1391 0030 1046     	 mov r0,r2
 1392 0032 1946     	 mov r1,r3
 1393 0034 FFF7FEFF 	 bl XMC_CCU4_SLICE_CompareInit
 465:../Dave/Generated/TIMER/timer.c ****   /* programs the timer period and compare register according to time interval value and do the sha
 466:../Dave/Generated/TIMER/timer.c ****   TIMER_CCU4_lShadowTransfer(handle_ptr);
 1394              	 .loc 2 466 0
 1395 0038 7868     	 ldr r0,[r7,#4]
 1396 003a FFF7FEFF 	 bl TIMER_CCU4_lShadowTransfer
 467:../Dave/Generated/TIMER/timer.c **** 
 468:../Dave/Generated/TIMER/timer.c **** #ifdef  TIMER_INTERRUPT
 469:../Dave/Generated/TIMER/timer.c ****   if (true == handle_ptr->period_match_enable)
 1397              	 .loc 2 469 0
 1398 003e 7B68     	 ldr r3,[r7,#4]
 1399 0040 93F82530 	 ldrb r3,[r3,#37]
 1400 0044 002B     	 cmp r3,#0
 1401 0046 0FD0     	 beq .L58
 470:../Dave/Generated/TIMER/timer.c ****   {
 471:../Dave/Generated/TIMER/timer.c ****     /* Binds a period match event to an NVIC node  */
 472:../Dave/Generated/TIMER/timer.c ****     XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 1402              	 .loc 2 472 0
 1403 0048 7B68     	 ldr r3,[r7,#4]
 1404 004a 5A69     	 ldr r2,[r3,#20]
 1405 004c 7B68     	 ldr r3,[r7,#4]
 1406 004e 93F82030 	 ldrb r3,[r3,#32]
 1407 0052 1046     	 mov r0,r2
 1408 0054 0021     	 movs r1,#0
 1409 0056 1A46     	 mov r2,r3
 1410 0058 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetInterruptNode
 473:../Dave/Generated/TIMER/timer.c ****                                     handle_ptr->ccu4_period_match_node);
 474:../Dave/Generated/TIMER/timer.c ****     /* Enables a timer(period match) event  */
 475:../Dave/Generated/TIMER/timer.c ****     XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 1411              	 .loc 2 475 0
 1412 005c 7B68     	 ldr r3,[r7,#4]
 1413 005e 5B69     	 ldr r3,[r3,#20]
 1414 0060 1846     	 mov r0,r3
 1415 0062 0021     	 movs r1,#0
 1416 0064 FFF7FEFF 	 bl XMC_CCU4_SLICE_EnableEvent
 1417              	.L58:
 476:../Dave/Generated/TIMER/timer.c ****   }
 477:../Dave/Generated/TIMER/timer.c **** #endif
 478:../Dave/Generated/TIMER/timer.c ****   /* Clears the timer register */
 479:../Dave/Generated/TIMER/timer.c ****   XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 1418              	 .loc 2 479 0
 1419 0068 7B68     	 ldr r3,[r7,#4]
 1420 006a 5B69     	 ldr r3,[r3,#20]
 1421 006c 1846     	 mov r0,r3
 1422 006e FFF7FEFF 	 bl XMC_CCU4_SLICE_ClearTimer
 480:../Dave/Generated/TIMER/timer.c **** 
 481:../Dave/Generated/TIMER/timer.c ****   /* update the initialization flag as true for particular instance*/
 482:../Dave/Generated/TIMER/timer.c ****   handle_ptr->initialized = true;
 1423              	 .loc 2 482 0
 1424 0072 7B68     	 ldr r3,[r7,#4]
 1425 0074 0122     	 movs r2,#1
 1426 0076 83F82620 	 strb r2,[r3,#38]
 483:../Dave/Generated/TIMER/timer.c **** 
 484:../Dave/Generated/TIMER/timer.c ****   /* Check whether the start of the timer is enabled during initialization or not */
 485:../Dave/Generated/TIMER/timer.c ****   if (handle_ptr->start_control == true)
 1427              	 .loc 2 485 0
 1428 007a 7B68     	 ldr r3,[r7,#4]
 1429 007c 93F82430 	 ldrb r3,[r3,#36]
 1430 0080 002B     	 cmp r3,#0
 1431 0082 04D0     	 beq .L59
 486:../Dave/Generated/TIMER/timer.c ****   {
 487:../Dave/Generated/TIMER/timer.c ****     /* Start the timer */
 488:../Dave/Generated/TIMER/timer.c ****     XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 1432              	 .loc 2 488 0
 1433 0084 7B68     	 ldr r3,[r7,#4]
 1434 0086 5B69     	 ldr r3,[r3,#20]
 1435 0088 1846     	 mov r0,r3
 1436 008a FFF7FEFF 	 bl XMC_CCU4_SLICE_StartTimer
 1437              	.L59:
 489:../Dave/Generated/TIMER/timer.c ****   }
 490:../Dave/Generated/TIMER/timer.c **** 
 491:../Dave/Generated/TIMER/timer.c ****   return (status);
 1438              	 .loc 2 491 0
 1439 008e FB7B     	 ldrb r3,[r7,#15]
 492:../Dave/Generated/TIMER/timer.c **** }
 1440              	 .loc 2 492 0
 1441 0090 1846     	 mov r0,r3
 1442 0092 1037     	 adds r7,r7,#16
 1443              	.LCFI126:
 1444              	 .cfi_def_cfa_offset 8
 1445 0094 BD46     	 mov sp,r7
 1446              	.LCFI127:
 1447              	 .cfi_def_cfa_register 13
 1448              	 
 1449 0096 80BD     	 pop {r7,pc}
 1450              	 .cfi_endproc
 1451              	.LFE212:
 1453              	 .section .text.TIMER_CCU4_lShadowTransfer,"ax",%progbits
 1454              	 .align 2
 1455              	 .global TIMER_CCU4_lShadowTransfer
 1456              	 .thumb
 1457              	 .thumb_func
 1459              	TIMER_CCU4_lShadowTransfer:
 1460              	.LFB213:
 493:../Dave/Generated/TIMER/timer.c **** 
 494:../Dave/Generated/TIMER/timer.c **** /*
 495:../Dave/Generated/TIMER/timer.c ****  * This function configures timer period and compare values and triggers the shadow transfer operat
 496:../Dave/Generated/TIMER/timer.c ****  */
 497:../Dave/Generated/TIMER/timer.c **** void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
 498:../Dave/Generated/TIMER/timer.c **** {
 1461              	 .loc 2 498 0
 1462              	 .cfi_startproc
 1463              	 
 1464              	 
 1465 0000 80B5     	 push {r7,lr}
 1466              	.LCFI128:
 1467              	 .cfi_def_cfa_offset 8
 1468              	 .cfi_offset 7,-8
 1469              	 .cfi_offset 14,-4
 1470 0002 82B0     	 sub sp,sp,#8
 1471              	.LCFI129:
 1472              	 .cfi_def_cfa_offset 16
 1473 0004 00AF     	 add r7,sp,#0
 1474              	.LCFI130:
 1475              	 .cfi_def_cfa_register 7
 1476 0006 7860     	 str r0,[r7,#4]
 499:../Dave/Generated/TIMER/timer.c ****   /* programs the timer period register according to time interval value */
 500:../Dave/Generated/TIMER/timer.c ****   XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 1477              	 .loc 2 500 0
 1478 0008 7B68     	 ldr r3,[r7,#4]
 1479 000a 5A69     	 ldr r2,[r3,#20]
 1480 000c 7B68     	 ldr r3,[r7,#4]
 1481 000e 5B8C     	 ldrh r3,[r3,#34]
 1482 0010 1046     	 mov r0,r2
 1483 0012 1946     	 mov r1,r3
 1484 0014 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetTimerPeriodMatch
 501:../Dave/Generated/TIMER/timer.c ****   /* programs the timer compare register for 50% duty cycle */
 502:../Dave/Generated/TIMER/timer.c ****   XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 1485              	 .loc 2 502 0
 1486 0018 7B68     	 ldr r3,[r7,#4]
 1487 001a 5B69     	 ldr r3,[r3,#20]
 1488 001c 1846     	 mov r0,r3
 1489 001e 0021     	 movs r1,#0
 1490 0020 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetTimerCompareMatch
 503:../Dave/Generated/TIMER/timer.c ****   /* Transfers value from shadow timer registers to actual timer registers */
 504:../Dave/Generated/TIMER/timer.c ****   XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mas
 1491              	 .loc 2 504 0
 1492 0024 7B68     	 ldr r3,[r7,#4]
 1493 0026 1B69     	 ldr r3,[r3,#16]
 1494 0028 9A68     	 ldr r2,[r3,#8]
 1495 002a 7B68     	 ldr r3,[r7,#4]
 1496 002c DB68     	 ldr r3,[r3,#12]
 1497 002e 1046     	 mov r0,r2
 1498 0030 1946     	 mov r1,r3
 1499 0032 FFF7FEFF 	 bl XMC_CCU4_EnableShadowTransfer
 505:../Dave/Generated/TIMER/timer.c **** }
 1500              	 .loc 2 505 0
 1501 0036 0837     	 adds r7,r7,#8
 1502              	.LCFI131:
 1503              	 .cfi_def_cfa_offset 8
 1504 0038 BD46     	 mov sp,r7
 1505              	.LCFI132:
 1506              	 .cfi_def_cfa_register 13
 1507              	 
 1508 003a 80BD     	 pop {r7,pc}
 1509              	 .cfi_endproc
 1510              	.LFE213:
 1512              	 .text
 1513              	.Letext0:
 1514              	 .file 3 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1515              	 .file 4 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1516              	 .file 5 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Infineon/XMC4300_series/Include/XMC4300.h"
 1517              	 .file 6 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc/xmc4_scu.h"
 1518              	 .file 7 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/DAVE_Common.h"
 1519              	 .file 8 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Dave/Generated/GLOBAL_CCU4/global_ccu4.h"
 1520              	 .file 9 "../Dave/Generated/TIMER/timer.h"
 1521              	 .file 10 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include/core_cm4.h"
 1522              	 .file 11 "E:/\261\270\267\335\316\304\274\376/workplace/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Infineon/XMC4300_series/Include/system_XMC4300.h"
DEFINED SYMBOLS
                            *ABS*:00000000 timer.c
    {standard input}:20     .text.XMC_CCU4_EnableClock:00000000 $t
    {standard input}:24     .text.XMC_CCU4_EnableClock:00000000 XMC_CCU4_EnableClock
    {standard input}:71     .text.XMC_CCU4_SLICE_IsTimerRunning:00000000 $t
    {standard input}:75     .text.XMC_CCU4_SLICE_IsTimerRunning:00000000 XMC_CCU4_SLICE_IsTimerRunning
    {standard input}:120    .text.XMC_CCU4_SLICE_StartTimer:00000000 $t
    {standard input}:124    .text.XMC_CCU4_SLICE_StartTimer:00000000 XMC_CCU4_SLICE_StartTimer
    {standard input}:163    .text.XMC_CCU4_SLICE_StopTimer:00000000 $t
    {standard input}:167    .text.XMC_CCU4_SLICE_StopTimer:00000000 XMC_CCU4_SLICE_StopTimer
    {standard input}:208    .text.XMC_CCU4_SLICE_ClearTimer:00000000 $t
    {standard input}:212    .text.XMC_CCU4_SLICE_ClearTimer:00000000 XMC_CCU4_SLICE_ClearTimer
    {standard input}:253    .text.XMC_CCU4_SLICE_SetTimerPeriodMatch:00000000 $t
    {standard input}:257    .text.XMC_CCU4_SLICE_SetTimerPeriodMatch:00000000 XMC_CCU4_SLICE_SetTimerPeriodMatch
    {standard input}:298    .text.XMC_CCU4_SLICE_SetTimerCompareMatch:00000000 $t
    {standard input}:302    .text.XMC_CCU4_SLICE_SetTimerCompareMatch:00000000 XMC_CCU4_SLICE_SetTimerCompareMatch
    {standard input}:343    .text.XMC_CCU4_EnableShadowTransfer:00000000 $t
    {standard input}:347    .text.XMC_CCU4_EnableShadowTransfer:00000000 XMC_CCU4_EnableShadowTransfer
    {standard input}:387    .text.XMC_CCU4_SLICE_GetTimerValue:00000000 $t
    {standard input}:391    .text.XMC_CCU4_SLICE_GetTimerValue:00000000 XMC_CCU4_SLICE_GetTimerValue
    {standard input}:431    .text.XMC_CCU4_SLICE_EnableEvent:00000000 $t
    {standard input}:435    .text.XMC_CCU4_SLICE_EnableEvent:00000000 XMC_CCU4_SLICE_EnableEvent
    {standard input}:481    .text.XMC_CCU4_SLICE_ClearEvent:00000000 $t
    {standard input}:485    .text.XMC_CCU4_SLICE_ClearEvent:00000000 XMC_CCU4_SLICE_ClearEvent
    {standard input}:531    .text.XMC_CCU4_SLICE_GetEvent:00000000 $t
    {standard input}:535    .text.XMC_CCU4_SLICE_GetEvent:00000000 XMC_CCU4_SLICE_GetEvent
    {standard input}:584    .text.TIMER_GetAppVersion:00000000 $t
    {standard input}:589    .text.TIMER_GetAppVersion:00000000 TIMER_GetAppVersion
    {standard input}:650    .text.TIMER_Init:00000000 $t
    {standard input}:655    .text.TIMER_Init:00000000 TIMER_Init
    {standard input}:1352   .text.TIMER_CCU4_lInit:00000000 TIMER_CCU4_lInit
    {standard input}:710    .text.TIMER_Start:00000000 $t
    {standard input}:715    .text.TIMER_Start:00000000 TIMER_Start
    {standard input}:774    .text.TIMER_Stop:00000000 $t
    {standard input}:779    .text.TIMER_Stop:00000000 TIMER_Stop
    {standard input}:849    .text.TIMER_GetTimerStatus:00000000 TIMER_GetTimerStatus
    {standard input}:844    .text.TIMER_GetTimerStatus:00000000 $t
    {standard input}:900    .text.TIMER_SetTimeInterval:00000000 $t
    {standard input}:905    .text.TIMER_SetTimeInterval:00000000 TIMER_SetTimeInterval
    {standard input}:1459   .text.TIMER_CCU4_lShadowTransfer:00000000 TIMER_CCU4_lShadowTransfer
    {standard input}:1076   .text.TIMER_SetTimeInterval:00000120 $d
    {standard input}:1082   .text.TIMER_GetInterruptStatus:00000000 $t
    {standard input}:1087   .text.TIMER_GetInterruptStatus:00000000 TIMER_GetInterruptStatus
    {standard input}:1138   .text.TIMER_ClearEvent:00000000 $t
    {standard input}:1143   .text.TIMER_ClearEvent:00000000 TIMER_ClearEvent
    {standard input}:1186   .text.TIMER_GetTime:00000000 $t
    {standard input}:1191   .text.TIMER_GetTime:00000000 TIMER_GetTime
    {standard input}:1278   .text.TIMER_GetTime:00000084 $d
    {standard input}:1283   .text.TIMER_Clear:00000000 $t
    {standard input}:1288   .text.TIMER_Clear:00000000 TIMER_Clear
    {standard input}:1347   .text.TIMER_CCU4_lInit:00000000 $t
    {standard input}:1454   .text.TIMER_CCU4_lShadowTransfer:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uldivmod
XMC_CCU4_SLICE_SetPrescaler
GLOBAL_CCU4_Init
XMC_CCU4_SLICE_CompareInit
XMC_CCU4_SLICE_SetInterruptNode
