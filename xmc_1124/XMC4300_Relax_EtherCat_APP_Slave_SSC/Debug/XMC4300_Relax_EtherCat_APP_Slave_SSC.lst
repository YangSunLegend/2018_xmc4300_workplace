
XMC4300_Relax_EtherCat_APP_Slave_SSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        0000029c  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008aa0  08020000  0c020000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 Stack         00000800  1fff0000  1fff0000  00028000  2**0
                  ALLOC
  3 .data         00000c64  1fff0800  0c028aa0  00020800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000149c  1fff1464  0c029704  00021464  2**2
                  ALLOC
  5 .no_init      00000014  2000ffc0  2000ffc0  00027fc0  2**2
                  ALLOC
  6 .debug_aranges 000010c0  00000000  00000000  00021468  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00018c6e  00000000  00000000  00022528  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004237  00000000  00000000  0003b196  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000089b4  00000000  00000000  0003f3cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00004294  00000000  00000000  00047d84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00009ddd  00000000  00000000  0004c018  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008376  00000000  00000000  00055df5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e28  00000000  00000000  0005e16b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 00000aac  00000000  00000000  0005ef93  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08020000 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8020000:	b598      	push	{r3, r4, r7, lr}
 8020002:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8020004:	4a05      	ldr	r2, [pc, #20]	; (802001c <SystemInit+0x1c>)
 8020006:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 802000a:	4614      	mov	r4, r2
 802000c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802000e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8020012:	f007 ff7b 	bl	8027f0c <SystemCoreSetup>
  SystemCoreClockSetup();
 8020016:	f007 fff7 	bl	8028008 <SystemCoreClockSetup>
}
 802001a:	bd98      	pop	{r3, r4, r7, pc}
 802001c:	2000ffc4 	.word	0x2000ffc4

08020020 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 8020020:	b580      	push	{r7, lr}
 8020022:	b084      	sub	sp, #16
 8020024:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8020026:	4b2f      	ldr	r3, [pc, #188]	; (80200e4 <SystemCoreClockUpdate+0xc4>)
 8020028:	68db      	ldr	r3, [r3, #12]
 802002a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802002e:	2b00      	cmp	r3, #0
 8020030:	d03e      	beq.n	80200b0 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8020032:	4b2d      	ldr	r3, [pc, #180]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 8020034:	68db      	ldr	r3, [r3, #12]
 8020036:	f003 0301 	and.w	r3, r3, #1
 802003a:	2b00      	cmp	r3, #0
 802003c:	d002      	beq.n	8020044 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 802003e:	4b2b      	ldr	r3, [pc, #172]	; (80200ec <SystemCoreClockUpdate+0xcc>)
 8020040:	60fb      	str	r3, [r7, #12]
 8020042:	e002      	b.n	802004a <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8020044:	f007 ffc2 	bl	8027fcc <OSCHP_GetFrequency>
 8020048:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 802004a:	4b27      	ldr	r3, [pc, #156]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 802004c:	681b      	ldr	r3, [r3, #0]
 802004e:	f003 0304 	and.w	r3, r3, #4
 8020052:	2b00      	cmp	r3, #0
 8020054:	d020      	beq.n	8020098 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8020056:	4b24      	ldr	r3, [pc, #144]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 8020058:	689b      	ldr	r3, [r3, #8]
 802005a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 802005e:	0e1b      	lsrs	r3, r3, #24
 8020060:	3301      	adds	r3, #1
 8020062:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8020064:	4b20      	ldr	r3, [pc, #128]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 8020066:	689b      	ldr	r3, [r3, #8]
 8020068:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 802006c:	0a1b      	lsrs	r3, r3, #8
 802006e:	3301      	adds	r3, #1
 8020070:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8020072:	4b1d      	ldr	r3, [pc, #116]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 8020074:	689b      	ldr	r3, [r3, #8]
 8020076:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 802007a:	0c1b      	lsrs	r3, r3, #16
 802007c:	3301      	adds	r3, #1
 802007e:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8020080:	68bb      	ldr	r3, [r7, #8]
 8020082:	683a      	ldr	r2, [r7, #0]
 8020084:	fb02 f303 	mul.w	r3, r2, r3
 8020088:	68fa      	ldr	r2, [r7, #12]
 802008a:	fbb2 f3f3 	udiv	r3, r2, r3
 802008e:	687a      	ldr	r2, [r7, #4]
 8020090:	fb02 f303 	mul.w	r3, r2, r3
 8020094:	60fb      	str	r3, [r7, #12]
 8020096:	e00d      	b.n	80200b4 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8020098:	4b13      	ldr	r3, [pc, #76]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 802009a:	689b      	ldr	r3, [r3, #8]
 802009c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80200a0:	3301      	adds	r3, #1
 80200a2:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 80200a4:	68fa      	ldr	r2, [r7, #12]
 80200a6:	683b      	ldr	r3, [r7, #0]
 80200a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80200ac:	60fb      	str	r3, [r7, #12]
 80200ae:	e001      	b.n	80200b4 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 80200b0:	4b0e      	ldr	r3, [pc, #56]	; (80200ec <SystemCoreClockUpdate+0xcc>)
 80200b2:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80200b4:	4b0b      	ldr	r3, [pc, #44]	; (80200e4 <SystemCoreClockUpdate+0xc4>)
 80200b6:	68db      	ldr	r3, [r3, #12]
 80200b8:	b2db      	uxtb	r3, r3
 80200ba:	3301      	adds	r3, #1
 80200bc:	68fa      	ldr	r2, [r7, #12]
 80200be:	fbb2 f3f3 	udiv	r3, r2, r3
 80200c2:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80200c4:	4b07      	ldr	r3, [pc, #28]	; (80200e4 <SystemCoreClockUpdate+0xc4>)
 80200c6:	691b      	ldr	r3, [r3, #16]
 80200c8:	f003 0301 	and.w	r3, r3, #1
 80200cc:	3301      	adds	r3, #1
 80200ce:	68fa      	ldr	r2, [r7, #12]
 80200d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80200d4:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80200d6:	4a06      	ldr	r2, [pc, #24]	; (80200f0 <SystemCoreClockUpdate+0xd0>)
 80200d8:	68fb      	ldr	r3, [r7, #12]
 80200da:	6013      	str	r3, [r2, #0]
}
 80200dc:	3710      	adds	r7, #16
 80200de:	46bd      	mov	sp, r7
 80200e0:	bd80      	pop	{r7, pc}
 80200e2:	bf00      	nop
 80200e4:	50004600 	.word	0x50004600
 80200e8:	50004710 	.word	0x50004710
 80200ec:	016e3600 	.word	0x016e3600
 80200f0:	2000ffc0 	.word	0x2000ffc0

080200f4 <APPL_AckErrorInd>:
 \brief    The function is called when an error state was acknowledged by the master

*////////////////////////////////////////////////////////////////////////////////////////

void    APPL_AckErrorInd(UINT16 stateTrans)
{
 80200f4:	b480      	push	{r7}
 80200f6:	b083      	sub	sp, #12
 80200f8:	af00      	add	r7, sp, #0
 80200fa:	4603      	mov	r3, r0
 80200fc:	80fb      	strh	r3, [r7, #6]

}
 80200fe:	370c      	adds	r7, #12
 8020100:	46bd      	mov	sp, r7
 8020102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020106:	4770      	bx	lr

08020108 <APPL_StartMailboxHandler>:
            until a value unequal NOERROR_INWORK is returned

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartMailboxHandler(void)
{
 8020108:	b480      	push	{r7}
 802010a:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 802010c:	2300      	movs	r3, #0
}
 802010e:	4618      	mov	r0, r3
 8020110:	46bd      	mov	sp, r7
 8020112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020116:	4770      	bx	lr

08020118 <APPL_StopMailboxHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopMailboxHandler(void)
{
 8020118:	b480      	push	{r7}
 802011a:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 802011c:	2300      	movs	r3, #0
}
 802011e:	4618      	mov	r0, r3
 8020120:	46bd      	mov	sp, r7
 8020122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020126:	4770      	bx	lr

08020128 <APPL_StartInputHandler>:
           the state transition immediately, in that case the application need to be complete 
           the transition by calling ECAT_StateChange.
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartInputHandler(UINT16 *pIntMask)
{
 8020128:	b480      	push	{r7}
 802012a:	b083      	sub	sp, #12
 802012c:	af00      	add	r7, sp, #0
 802012e:	6078      	str	r0, [r7, #4]
    return ALSTATUSCODE_NOERROR;
 8020130:	2300      	movs	r3, #0
}
 8020132:	4618      	mov	r0, r3
 8020134:	370c      	adds	r7, #12
 8020136:	46bd      	mov	sp, r7
 8020138:	f85d 7b04 	ldr.w	r7, [sp], #4
 802013c:	4770      	bx	lr
 802013e:	bf00      	nop

08020140 <APPL_StopInputHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopInputHandler(void)
{
 8020140:	b480      	push	{r7}
 8020142:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8020144:	2300      	movs	r3, #0
}
 8020146:	4618      	mov	r0, r3
 8020148:	46bd      	mov	sp, r7
 802014a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802014e:	4770      	bx	lr

08020150 <APPL_StartOutputHandler>:
           the state transition immediately, in that case the application need to be complete 
           the transition by calling ECAT_StateChange.
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartOutputHandler(void)
{
 8020150:	b480      	push	{r7}
 8020152:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8020154:	2300      	movs	r3, #0
}
 8020156:	4618      	mov	r0, r3
 8020158:	46bd      	mov	sp, r7
 802015a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802015e:	4770      	bx	lr

08020160 <APPL_StopOutputHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopOutputHandler(void)
{
 8020160:	b480      	push	{r7}
 8020162:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8020164:	2300      	movs	r3, #0
}
 8020166:	4618      	mov	r0, r3
 8020168:	46bd      	mov	sp, r7
 802016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802016e:	4770      	bx	lr

08020170 <APPL_GenerateMapping>:

\brief    This function calculates the process data sizes from the actual SM-PDO-Assign
            and PDO mapping
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 APPL_GenerateMapping(UINT16 *pInputSize,UINT16 *pOutputSize)
{
 8020170:	b590      	push	{r4, r7, lr}
 8020172:	b089      	sub	sp, #36	; 0x24
 8020174:	af00      	add	r7, sp, #0
 8020176:	6078      	str	r0, [r7, #4]
 8020178:	6039      	str	r1, [r7, #0]
    UINT16 result = ALSTATUSCODE_NOERROR;
 802017a:	2300      	movs	r3, #0
 802017c:	83fb      	strh	r3, [r7, #30]
    UINT16 InputSize = 0;
 802017e:	2300      	movs	r3, #0
 8020180:	83bb      	strh	r3, [r7, #28]
    UINT16 OutputSize = 0;
 8020182:	2300      	movs	r3, #0
 8020184:	837b      	strh	r3, [r7, #26]

#if COE_SUPPORTED
    UINT16 PDOAssignEntryCnt = 0;
 8020186:	2300      	movs	r3, #0
 8020188:	833b      	strh	r3, [r7, #24]
    OBJCONST TOBJECT OBJMEM * pPDO = NULL;
 802018a:	2300      	movs	r3, #0
 802018c:	613b      	str	r3, [r7, #16]
    UINT16 PDOSubindex0 = 0;
 802018e:	2300      	movs	r3, #0
 8020190:	81fb      	strh	r3, [r7, #14]
    UINT32 *pPDOEntry = NULL;
 8020192:	2300      	movs	r3, #0
 8020194:	60bb      	str	r3, [r7, #8]
    UINT16 PDOEntryCnt = 0;
 8020196:	2300      	movs	r3, #0
 8020198:	82fb      	strh	r3, [r7, #22]
   
    /*Scan object 0x1C12 RXPDO assign*/
    for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sRxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 802019a:	2300      	movs	r3, #0
 802019c:	833b      	strh	r3, [r7, #24]
 802019e:	e039      	b.n	8020214 <APPL_GenerateMapping+0xa4>
    {
        pPDO = OBJ_GetObjectHandle(sRxPDOassign.aEntries[PDOAssignEntryCnt]);
 80201a0:	8b3b      	ldrh	r3, [r7, #24]
 80201a2:	4a4b      	ldr	r2, [pc, #300]	; (80202d0 <APPL_GenerateMapping+0x160>)
 80201a4:	005b      	lsls	r3, r3, #1
 80201a6:	4413      	add	r3, r2
 80201a8:	885b      	ldrh	r3, [r3, #2]
 80201aa:	4618      	mov	r0, r3
 80201ac:	f003 fbd2 	bl	8023954 <OBJ_GetObjectHandle>
 80201b0:	6138      	str	r0, [r7, #16]
        if(pPDO != NULL)
 80201b2:	693b      	ldr	r3, [r7, #16]
 80201b4:	2b00      	cmp	r3, #0
 80201b6:	d025      	beq.n	8020204 <APPL_GenerateMapping+0x94>
        {
            PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
 80201b8:	693b      	ldr	r3, [r7, #16]
 80201ba:	699b      	ldr	r3, [r3, #24]
 80201bc:	881b      	ldrh	r3, [r3, #0]
 80201be:	81fb      	strh	r3, [r7, #14]
            for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 80201c0:	2300      	movs	r3, #0
 80201c2:	82fb      	strh	r3, [r7, #22]
 80201c4:	e019      	b.n	80201fa <APPL_GenerateMapping+0x8a>
            {
                pPDOEntry = (UINT32 *)((UINT8 *)pPDO->pVarPtr + (OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>3));    //goto PDO entry
 80201c6:	693b      	ldr	r3, [r7, #16]
 80201c8:	699c      	ldr	r4, [r3, #24]
 80201ca:	8afb      	ldrh	r3, [r7, #22]
 80201cc:	b2db      	uxtb	r3, r3
 80201ce:	3301      	adds	r3, #1
 80201d0:	b2db      	uxtb	r3, r3
 80201d2:	4618      	mov	r0, r3
 80201d4:	6939      	ldr	r1, [r7, #16]
 80201d6:	f003 fe3b 	bl	8023e50 <OBJ_GetEntryOffset>
 80201da:	4603      	mov	r3, r0
 80201dc:	08db      	lsrs	r3, r3, #3
 80201de:	b29b      	uxth	r3, r3
 80201e0:	4423      	add	r3, r4
 80201e2:	60bb      	str	r3, [r7, #8]
                // we increment the expected output size depending on the mapped Entry
                OutputSize += (UINT16) ((*pPDOEntry) & 0xFF);
 80201e4:	68bb      	ldr	r3, [r7, #8]
 80201e6:	681b      	ldr	r3, [r3, #0]
 80201e8:	b29b      	uxth	r3, r3
 80201ea:	b2db      	uxtb	r3, r3
 80201ec:	b29a      	uxth	r2, r3
 80201ee:	8b7b      	ldrh	r3, [r7, #26]
 80201f0:	4413      	add	r3, r2
 80201f2:	837b      	strh	r3, [r7, #26]
    {
        pPDO = OBJ_GetObjectHandle(sRxPDOassign.aEntries[PDOAssignEntryCnt]);
        if(pPDO != NULL)
        {
            PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
            for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 80201f4:	8afb      	ldrh	r3, [r7, #22]
 80201f6:	3301      	adds	r3, #1
 80201f8:	82fb      	strh	r3, [r7, #22]
 80201fa:	8afa      	ldrh	r2, [r7, #22]
 80201fc:	89fb      	ldrh	r3, [r7, #14]
 80201fe:	429a      	cmp	r2, r3
 8020200:	d3e1      	bcc.n	80201c6 <APPL_GenerateMapping+0x56>
 8020202:	e004      	b.n	802020e <APPL_GenerateMapping+0x9e>
            }
        }
        else
        {
            /*assigned PDO was not found in object dictionary. return invalid mapping*/
            OutputSize = 0;
 8020204:	2300      	movs	r3, #0
 8020206:	837b      	strh	r3, [r7, #26]
            result = ALSTATUSCODE_INVALIDOUTPUTMAPPING;
 8020208:	2325      	movs	r3, #37	; 0x25
 802020a:	83fb      	strh	r3, [r7, #30]
            break;
 802020c:	e007      	b.n	802021e <APPL_GenerateMapping+0xae>
    UINT16 PDOSubindex0 = 0;
    UINT32 *pPDOEntry = NULL;
    UINT16 PDOEntryCnt = 0;
   
    /*Scan object 0x1C12 RXPDO assign*/
    for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sRxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 802020e:	8b3b      	ldrh	r3, [r7, #24]
 8020210:	3301      	adds	r3, #1
 8020212:	833b      	strh	r3, [r7, #24]
 8020214:	4b2e      	ldr	r3, [pc, #184]	; (80202d0 <APPL_GenerateMapping+0x160>)
 8020216:	881b      	ldrh	r3, [r3, #0]
 8020218:	8b3a      	ldrh	r2, [r7, #24]
 802021a:	429a      	cmp	r2, r3
 802021c:	d3c0      	bcc.n	80201a0 <APPL_GenerateMapping+0x30>
            result = ALSTATUSCODE_INVALIDOUTPUTMAPPING;
            break;
        }
    }

    OutputSize = (OutputSize + 7) >> 3;
 802021e:	8b7b      	ldrh	r3, [r7, #26]
 8020220:	3307      	adds	r3, #7
 8020222:	10db      	asrs	r3, r3, #3
 8020224:	837b      	strh	r3, [r7, #26]

    if(result == 0)
 8020226:	8bfb      	ldrh	r3, [r7, #30]
 8020228:	2b00      	cmp	r3, #0
 802022a:	d141      	bne.n	80202b0 <APPL_GenerateMapping+0x140>
    {
        /*Scan Object 0x1C13 TXPDO assign*/
        for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sTxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 802022c:	2300      	movs	r3, #0
 802022e:	833b      	strh	r3, [r7, #24]
 8020230:	e039      	b.n	80202a6 <APPL_GenerateMapping+0x136>
        {
            pPDO = OBJ_GetObjectHandle(sTxPDOassign.aEntries[PDOAssignEntryCnt]);
 8020232:	8b3b      	ldrh	r3, [r7, #24]
 8020234:	4a27      	ldr	r2, [pc, #156]	; (80202d4 <APPL_GenerateMapping+0x164>)
 8020236:	005b      	lsls	r3, r3, #1
 8020238:	4413      	add	r3, r2
 802023a:	885b      	ldrh	r3, [r3, #2]
 802023c:	4618      	mov	r0, r3
 802023e:	f003 fb89 	bl	8023954 <OBJ_GetObjectHandle>
 8020242:	6138      	str	r0, [r7, #16]
            if(pPDO != NULL)
 8020244:	693b      	ldr	r3, [r7, #16]
 8020246:	2b00      	cmp	r3, #0
 8020248:	d025      	beq.n	8020296 <APPL_GenerateMapping+0x126>
            {
                PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
 802024a:	693b      	ldr	r3, [r7, #16]
 802024c:	699b      	ldr	r3, [r3, #24]
 802024e:	881b      	ldrh	r3, [r3, #0]
 8020250:	81fb      	strh	r3, [r7, #14]
                for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 8020252:	2300      	movs	r3, #0
 8020254:	82fb      	strh	r3, [r7, #22]
 8020256:	e019      	b.n	802028c <APPL_GenerateMapping+0x11c>
                {
                    pPDOEntry = (UINT32 *)((UINT8 *)pPDO->pVarPtr + (OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>3));    //goto PDO entry
 8020258:	693b      	ldr	r3, [r7, #16]
 802025a:	699c      	ldr	r4, [r3, #24]
 802025c:	8afb      	ldrh	r3, [r7, #22]
 802025e:	b2db      	uxtb	r3, r3
 8020260:	3301      	adds	r3, #1
 8020262:	b2db      	uxtb	r3, r3
 8020264:	4618      	mov	r0, r3
 8020266:	6939      	ldr	r1, [r7, #16]
 8020268:	f003 fdf2 	bl	8023e50 <OBJ_GetEntryOffset>
 802026c:	4603      	mov	r3, r0
 802026e:	08db      	lsrs	r3, r3, #3
 8020270:	b29b      	uxth	r3, r3
 8020272:	4423      	add	r3, r4
 8020274:	60bb      	str	r3, [r7, #8]
                    // we increment the expected output size depending on the mapped Entry
                    InputSize += (UINT16) ((*pPDOEntry) & 0xFF);
 8020276:	68bb      	ldr	r3, [r7, #8]
 8020278:	681b      	ldr	r3, [r3, #0]
 802027a:	b29b      	uxth	r3, r3
 802027c:	b2db      	uxtb	r3, r3
 802027e:	b29a      	uxth	r2, r3
 8020280:	8bbb      	ldrh	r3, [r7, #28]
 8020282:	4413      	add	r3, r2
 8020284:	83bb      	strh	r3, [r7, #28]
        {
            pPDO = OBJ_GetObjectHandle(sTxPDOassign.aEntries[PDOAssignEntryCnt]);
            if(pPDO != NULL)
            {
                PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
                for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 8020286:	8afb      	ldrh	r3, [r7, #22]
 8020288:	3301      	adds	r3, #1
 802028a:	82fb      	strh	r3, [r7, #22]
 802028c:	8afa      	ldrh	r2, [r7, #22]
 802028e:	89fb      	ldrh	r3, [r7, #14]
 8020290:	429a      	cmp	r2, r3
 8020292:	d3e1      	bcc.n	8020258 <APPL_GenerateMapping+0xe8>
 8020294:	e004      	b.n	80202a0 <APPL_GenerateMapping+0x130>
                }
            }
            else
            {
                /*assigned PDO was not found in object dictionary. return invalid mapping*/
                InputSize = 0;
 8020296:	2300      	movs	r3, #0
 8020298:	83bb      	strh	r3, [r7, #28]
                result = ALSTATUSCODE_INVALIDINPUTMAPPING;
 802029a:	2324      	movs	r3, #36	; 0x24
 802029c:	83fb      	strh	r3, [r7, #30]
                break;
 802029e:	e007      	b.n	80202b0 <APPL_GenerateMapping+0x140>
    OutputSize = (OutputSize + 7) >> 3;

    if(result == 0)
    {
        /*Scan Object 0x1C13 TXPDO assign*/
        for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sTxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 80202a0:	8b3b      	ldrh	r3, [r7, #24]
 80202a2:	3301      	adds	r3, #1
 80202a4:	833b      	strh	r3, [r7, #24]
 80202a6:	4b0b      	ldr	r3, [pc, #44]	; (80202d4 <APPL_GenerateMapping+0x164>)
 80202a8:	881b      	ldrh	r3, [r3, #0]
 80202aa:	8b3a      	ldrh	r2, [r7, #24]
 80202ac:	429a      	cmp	r2, r3
 80202ae:	d3c0      	bcc.n	8020232 <APPL_GenerateMapping+0xc2>
                result = ALSTATUSCODE_INVALIDINPUTMAPPING;
                break;
            }
        }
    }
    InputSize = (InputSize + 7) >> 3;
 80202b0:	8bbb      	ldrh	r3, [r7, #28]
 80202b2:	3307      	adds	r3, #7
 80202b4:	10db      	asrs	r3, r3, #3
 80202b6:	83bb      	strh	r3, [r7, #28]
#else
    #warning "Define 'InputSize' and 'OutputSize'."
#endif
#endif

    *pInputSize = InputSize;
 80202b8:	687b      	ldr	r3, [r7, #4]
 80202ba:	8bba      	ldrh	r2, [r7, #28]
 80202bc:	801a      	strh	r2, [r3, #0]
    *pOutputSize = OutputSize;
 80202be:	683b      	ldr	r3, [r7, #0]
 80202c0:	8b7a      	ldrh	r2, [r7, #26]
 80202c2:	801a      	strh	r2, [r3, #0]
    return result;
 80202c4:	8bfb      	ldrh	r3, [r7, #30]
}
 80202c6:	4618      	mov	r0, r3
 80202c8:	3724      	adds	r7, #36	; 0x24
 80202ca:	46bd      	mov	sp, r7
 80202cc:	bd90      	pop	{r4, r7, pc}
 80202ce:	bf00      	nop
 80202d0:	1fff0824 	.word	0x1fff0824
 80202d4:	1fff0828 	.word	0x1fff0828

080202d8 <APPL_InputMapping>:

\brief      This function will copies the inputs from the local memory to the ESC memory
            to the hardware
*////////////////////////////////////////////////////////////////////////////////////////
void APPL_InputMapping(UINT16* pData)
{
 80202d8:	b580      	push	{r7, lr}
 80202da:	b082      	sub	sp, #8
 80202dc:	af00      	add	r7, sp, #0
 80202de:	6078      	str	r0, [r7, #4]
#if _WIN32
   #pragma message ("Warning: Implement input (Slave -> Master) mapping")
#else
	memcpy(pData, &DataInput0x6000.Position1, sizeof(DataInput0x6000.Position1));
 80202e0:	6878      	ldr	r0, [r7, #4]
 80202e2:	490b      	ldr	r1, [pc, #44]	; (8020310 <APPL_InputMapping+0x38>)
 80202e4:	2204      	movs	r2, #4
 80202e6:	f007 ffbd 	bl	8028264 <memcpy>
	pData +=2;
 80202ea:	687b      	ldr	r3, [r7, #4]
 80202ec:	3304      	adds	r3, #4
 80202ee:	607b      	str	r3, [r7, #4]
	memcpy(pData, &DataInput0x6000.Position2, sizeof(DataInput0x6000.Position2));
 80202f0:	6878      	ldr	r0, [r7, #4]
 80202f2:	4908      	ldr	r1, [pc, #32]	; (8020314 <APPL_InputMapping+0x3c>)
 80202f4:	2204      	movs	r2, #4
 80202f6:	f007 ffb5 	bl	8028264 <memcpy>
	pData +=2;
 80202fa:	687b      	ldr	r3, [r7, #4]
 80202fc:	3304      	adds	r3, #4
 80202fe:	607b      	str	r3, [r7, #4]
	memcpy(pData, &DataInput0x6000.Position3, sizeof(DataInput0x6000.Position3));
 8020300:	6878      	ldr	r0, [r7, #4]
 8020302:	4905      	ldr	r1, [pc, #20]	; (8020318 <APPL_InputMapping+0x40>)
 8020304:	2204      	movs	r2, #4
 8020306:	f007 ffad 	bl	8028264 <memcpy>
#endif
}
 802030a:	3708      	adds	r7, #8
 802030c:	46bd      	mov	sp, r7
 802030e:	bd80      	pop	{r7, pc}
 8020310:	1fff0830 	.word	0x1fff0830
 8020314:	1fff0834 	.word	0x1fff0834
 8020318:	1fff0838 	.word	0x1fff0838

0802031c <APPL_OutputMapping>:

\brief    This function will copies the outputs from the ESC memory to the local memory
            to the hardware
*////////////////////////////////////////////////////////////////////////////////////////
void APPL_OutputMapping(UINT16* pData)
{
 802031c:	b580      	push	{r7, lr}
 802031e:	b082      	sub	sp, #8
 8020320:	af00      	add	r7, sp, #0
 8020322:	6078      	str	r0, [r7, #4]
#if _WIN32
   #pragma message ("Warning: Implement output (Master -> Slave) mapping")
#else
	memcpy(&DataOut0x7000.Cmd1, pData, sizeof(DataOut0x7000.Cmd1));
 8020324:	480b      	ldr	r0, [pc, #44]	; (8020354 <APPL_OutputMapping+0x38>)
 8020326:	6879      	ldr	r1, [r7, #4]
 8020328:	2204      	movs	r2, #4
 802032a:	f007 ff9b 	bl	8028264 <memcpy>
	pData +=2;
 802032e:	687b      	ldr	r3, [r7, #4]
 8020330:	3304      	adds	r3, #4
 8020332:	607b      	str	r3, [r7, #4]
	memcpy(&DataOut0x7000.Cmd2, pData, sizeof(DataOut0x7000.Cmd2));
 8020334:	4808      	ldr	r0, [pc, #32]	; (8020358 <APPL_OutputMapping+0x3c>)
 8020336:	6879      	ldr	r1, [r7, #4]
 8020338:	2204      	movs	r2, #4
 802033a:	f007 ff93 	bl	8028264 <memcpy>
	pData +=2;
 802033e:	687b      	ldr	r3, [r7, #4]
 8020340:	3304      	adds	r3, #4
 8020342:	607b      	str	r3, [r7, #4]
	memcpy(&DataOut0x7000.Cmd3, pData, sizeof(DataOut0x7000.Cmd3));
 8020344:	4805      	ldr	r0, [pc, #20]	; (802035c <APPL_OutputMapping+0x40>)
 8020346:	6879      	ldr	r1, [r7, #4]
 8020348:	2204      	movs	r2, #4
 802034a:	f007 ff8b 	bl	8028264 <memcpy>
#endif
}
 802034e:	3708      	adds	r7, #8
 8020350:	46bd      	mov	sp, r7
 8020352:	bd80      	pop	{r7, pc}
 8020354:	1fff0844 	.word	0x1fff0844
 8020358:	1fff0848 	.word	0x1fff0848
 802035c:	1fff084c 	.word	0x1fff084c

08020360 <APPL_Application>:
/**
\brief    This function will called from the synchronisation ISR 
            or from the mainloop if no synchronisation is supported
*////////////////////////////////////////////////////////////////////////////////////////
void APPL_Application(void)
{
 8020360:	b480      	push	{r7}
 8020362:	af00      	add	r7, sp, #0
#if _WIN32
   #pragma message ("Warning: Implement the slave application")
#else
	DataInput0x6000.Position1 = DataOut0x7000.Cmd1;
 8020364:	4b09      	ldr	r3, [pc, #36]	; (802038c <APPL_Application+0x2c>)
 8020366:	685b      	ldr	r3, [r3, #4]
 8020368:	4a09      	ldr	r2, [pc, #36]	; (8020390 <APPL_Application+0x30>)
 802036a:	6053      	str	r3, [r2, #4]
	DataInput0x6000.Position2 = DataOut0x7000.Cmd2;
 802036c:	4b07      	ldr	r3, [pc, #28]	; (802038c <APPL_Application+0x2c>)
 802036e:	689b      	ldr	r3, [r3, #8]
 8020370:	4a07      	ldr	r2, [pc, #28]	; (8020390 <APPL_Application+0x30>)
 8020372:	6093      	str	r3, [r2, #8]
	DataInput0x6000.Position3 = DataOut0x7000.Cmd3;
 8020374:	4b05      	ldr	r3, [pc, #20]	; (802038c <APPL_Application+0x2c>)
 8020376:	68db      	ldr	r3, [r3, #12]
 8020378:	4a05      	ldr	r2, [pc, #20]	; (8020390 <APPL_Application+0x30>)
 802037a:	60d3      	str	r3, [r2, #12]
	DataInput0x6000.Mytestdata = 123;
 802037c:	4b04      	ldr	r3, [pc, #16]	; (8020390 <APPL_Application+0x30>)
 802037e:	227b      	movs	r2, #123	; 0x7b
 8020380:	611a      	str	r2, [r3, #16]
#endif
}
 8020382:	46bd      	mov	sp, r7
 8020384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020388:	4770      	bx	lr
 802038a:	bf00      	nop
 802038c:	1fff0840 	.word	0x1fff0840
 8020390:	1fff082c 	.word	0x1fff082c

08020394 <COE_GetObjectDictionary>:
/**

 \brief    returns the pointer to the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
OBJCONST TOBJECT OBJMEM * COE_GetObjectDictionary(void)
{
 8020394:	b480      	push	{r7}
 8020396:	af00      	add	r7, sp, #0
    return (OBJCONST TOBJECT OBJMEM *) ObjDicList;
 8020398:	4b03      	ldr	r3, [pc, #12]	; (80203a8 <COE_GetObjectDictionary+0x14>)
 802039a:	681b      	ldr	r3, [r3, #0]
}
 802039c:	4618      	mov	r0, r3
 802039e:	46bd      	mov	sp, r7
 80203a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203a4:	4770      	bx	lr
 80203a6:	bf00      	nop
 80203a8:	1fff1468 	.word	0x1fff1468

080203ac <COE_ObjInit>:
/**
 \brief     This function initialize the several objects
*////////////////////////////////////////////////////////////////////////////////////////

void COE_ObjInit(void)
{
 80203ac:	b580      	push	{r7, lr}
 80203ae:	b082      	sub	sp, #8
 80203b0:	af00      	add	r7, sp, #0

    /* initialize the Sync Manager Output parameter object 0x1C32 */

    sSyncManOutPar.subindex0         = 32;
 80203b2:	4b35      	ldr	r3, [pc, #212]	; (8020488 <COE_ObjInit+0xdc>)
 80203b4:	2220      	movs	r2, #32
 80203b6:	801a      	strh	r2, [r3, #0]
      from the master to switch between ECAT FreeRun and ECAT Synchron Mode
        if the slave supports both modes,
        in DC mode (selected by the DC registers) this value will be overwritten
        with SYNCTYPE_DCSYNC0 or SYNCTYPE_DCSYNC1 */
     /*default mode is ECAT Synchron Mode */
    sSyncManOutPar.u16SyncType     = SYNCTYPE_FREERUN;
 80203b8:	4b33      	ldr	r3, [pc, #204]	; (8020488 <COE_ObjInit+0xdc>)
 80203ba:	2200      	movs	r2, #0
 80203bc:	805a      	strh	r2, [r3, #2]
    /* subindex 2 contains the cycle time of the application,
       in ECAT FreeRun mode it could be used for a timer interrupt to run the application,
        in ECAT Synchron mode it could be written from the master with its local cycle time
        that the slave can check if this cycle time is supported,
        in DC Mode this value will be overwritten with the DC cycle time register */
    sSyncManOutPar.u32CycleTime     = 0;
 80203be:	4b32      	ldr	r3, [pc, #200]	; (8020488 <COE_ObjInit+0xdc>)
 80203c0:	2200      	movs	r2, #0
 80203c2:	605a      	str	r2, [r3, #4]
    /* only for DC Mode important: the subindex 3 contains the time shift between the
       SYNC0 (SYNC1) signal and when the outputs are put to the hardware to allow the
        master a very exactly calculation of delay times*/
    sSyncManOutPar.u32ShiftTime     = 0;
 80203c4:	4b30      	ldr	r3, [pc, #192]	; (8020488 <COE_ObjInit+0xdc>)
 80203c6:	2200      	movs	r2, #0
 80203c8:	609a      	str	r2, [r3, #8]

    /* the subindex 4 contains the supported synchronization types */

    sSyncManOutPar.u16SyncTypesSupported    = SYNCTYPE_FREERUNSUPP            /* ECAT FreeRun Mode is supported */
 80203ca:	4b2f      	ldr	r3, [pc, #188]	; (8020488 <COE_ObjInit+0xdc>)
 80203cc:	f244 021f 	movw	r2, #16415	; 0x401f
 80203d0:	819a      	strh	r2, [r3, #12]

    /* subindex 5 contains the minimum cycle time the slave is able to support,
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine).
        For the sample application this value is set to MIN_PD_CYCLE_TIME */
    sSyncManOutPar.u32MinCycleTime = MIN_PD_CYCLE_TIME;
 80203d2:	4b2d      	ldr	r3, [pc, #180]	; (8020488 <COE_ObjInit+0xdc>)
 80203d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80203d8:	611a      	str	r2, [r3, #16]
    /* only for DC Mode important: subindex 6 contains the minimum delay time the slave
       needs after receiving the SM2-event before the SYNC0(SYNC1) can be received without delays
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine) */
    sSyncManOutPar.u32CalcAndCopyTime = (PD_OUTPUT_CALC_AND_COPY_TIME);
 80203da:	4b2b      	ldr	r3, [pc, #172]	; (8020488 <COE_ObjInit+0xdc>)
 80203dc:	2200      	movs	r2, #0
 80203de:	615a      	str	r2, [r3, #20]

    /*subindex 8: trigger cycle time measurement*/
    sSyncManOutPar.u16GetCycleTime = 0;
 80203e0:	4b29      	ldr	r3, [pc, #164]	; (8020488 <COE_ObjInit+0xdc>)
 80203e2:	2200      	movs	r2, #0
 80203e4:	839a      	strh	r2, [r3, #28]

    /*subindex 9: time from start driving outputs until outputs are valid*/
    sSyncManOutPar.u32DelayTime = (PD_OUTPUT_DELAY_TIME);
 80203e6:	4b28      	ldr	r3, [pc, #160]	; (8020488 <COE_ObjInit+0xdc>)
 80203e8:	2200      	movs	r2, #0
 80203ea:	621a      	str	r2, [r3, #32]

    /*subindex 32: indicates if a synchronisation error has occurred*/
    sSyncManOutPar.u8SyncError = 0;
 80203ec:	4b26      	ldr	r3, [pc, #152]	; (8020488 <COE_ObjInit+0xdc>)
 80203ee:	2200      	movs	r2, #0
 80203f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

/*ECATCHANGE_START(V5.11) ECAT4*/
    /* initialize the Sync Manager Input parameter object 0x1C33 */
    sSyncManInPar.subindex0         = 32;
 80203f4:	4b25      	ldr	r3, [pc, #148]	; (802048c <COE_ObjInit+0xe0>)
 80203f6:	2220      	movs	r2, #32
 80203f8:	801a      	strh	r2, [r3, #0]
    /* default mode is ECAT Synchron Mode, if output size > 0 the inputs are updated with the SM2-event */
    sSyncManInPar.u16SyncType         = SYNCTYPE_FREERUN;
 80203fa:	4b24      	ldr	r3, [pc, #144]	; (802048c <COE_ObjInit+0xe0>)
 80203fc:	2200      	movs	r2, #0
 80203fe:	805a      	strh	r2, [r3, #2]

    /* subindex 2: same as 0x1C32:02 */
    sSyncManInPar.u32CycleTime     = sSyncManOutPar.u32CycleTime;
 8020400:	4b21      	ldr	r3, [pc, #132]	; (8020488 <COE_ObjInit+0xdc>)
 8020402:	685b      	ldr	r3, [r3, #4]
 8020404:	4a21      	ldr	r2, [pc, #132]	; (802048c <COE_ObjInit+0xe0>)
 8020406:	6053      	str	r3, [r2, #4]
    /* only for DC Mode important: subindex 3 contains the time shift between the
       SYNC0 (SYNC1) signal and when the inputs are got to the hardware to allow the
        master a very exactly calculation of delay times,
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine) */
    sSyncManInPar.u32ShiftTime     = 0;
 8020408:	4b20      	ldr	r3, [pc, #128]	; (802048c <COE_ObjInit+0xe0>)
 802040a:	2200      	movs	r2, #0
 802040c:	609a      	str	r2, [r3, #8]
    /* subindex 4: same as 0x1C32:04 */
    sSyncManInPar.u16SyncTypesSupported    = sSyncManOutPar.u16SyncTypesSupported;
 802040e:	4b1e      	ldr	r3, [pc, #120]	; (8020488 <COE_ObjInit+0xdc>)
 8020410:	899a      	ldrh	r2, [r3, #12]
 8020412:	4b1e      	ldr	r3, [pc, #120]	; (802048c <COE_ObjInit+0xe0>)
 8020414:	819a      	strh	r2, [r3, #12]

    /* subindex 5: same as 0x1C32:05 */
    sSyncManInPar.u32MinCycleTime = MIN_PD_CYCLE_TIME;
 8020416:	4b1d      	ldr	r3, [pc, #116]	; (802048c <COE_ObjInit+0xe0>)
 8020418:	f242 7210 	movw	r2, #10000	; 0x2710
 802041c:	611a      	str	r2, [r3, #16]
    /* subindex 6: delay read inputs, calculation and copy to SM buffer*/
    sSyncManInPar.u32CalcAndCopyTime = (PD_INPUT_CALC_AND_COPY_TIME);
 802041e:	4b1b      	ldr	r3, [pc, #108]	; (802048c <COE_ObjInit+0xe0>)
 8020420:	2200      	movs	r2, #0
 8020422:	615a      	str	r2, [r3, #20]
    /*subindex 8: trigger cycle time measurement*/
    sSyncManInPar.u16GetCycleTime = 0;
 8020424:	4b19      	ldr	r3, [pc, #100]	; (802048c <COE_ObjInit+0xe0>)
 8020426:	2200      	movs	r2, #0
 8020428:	839a      	strh	r2, [r3, #28]
    /*subindex 9: delay to prepare input latch*/
    sSyncManInPar.u32DelayTime = (PD_INPUT_DELAY_TIME);
 802042a:	4b18      	ldr	r3, [pc, #96]	; (802048c <COE_ObjInit+0xe0>)
 802042c:	2200      	movs	r2, #0
 802042e:	621a      	str	r2, [r3, #32]

    /*subindex 32: incremented if a synchronisation error has occurred*/
    sSyncManInPar.u8SyncError = 0;
 8020430:	4b16      	ldr	r3, [pc, #88]	; (802048c <COE_ObjInit+0xe0>)
 8020432:	2200      	movs	r2, #0
 8020434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
/*ECATCHANGE_END(V5.11) ECAT4*/

    /*Indicate no user specified Sync mode*/
    bSyncSetByUser = FALSE;
 8020438:	4b15      	ldr	r3, [pc, #84]	; (8020490 <COE_ObjInit+0xe4>)
 802043a:	2200      	movs	r2, #0
 802043c:	701a      	strb	r2, [r3, #0]

    {
    UINT16 result = COE_ObjDictionaryInit();
 802043e:	f000 f92d 	bl	802069c <COE_ObjDictionaryInit>
 8020442:	4603      	mov	r3, r0
 8020444:	80fb      	strh	r3, [r7, #6]
    if(result != 0)
 8020446:	88fb      	ldrh	r3, [r7, #6]
 8020448:	2b00      	cmp	r3, #0
 802044a:	d001      	beq.n	8020450 <COE_ObjInit+0xa4>
    {
        /*clear already linked objects*/
        COE_ClearObjDictionary();
 802044c:	f000 f8e6 	bl	802061c <COE_ClearObjDictionary>
    }
    }

    u8PendingSdo = 0;
 8020450:	4b10      	ldr	r3, [pc, #64]	; (8020494 <COE_ObjInit+0xe8>)
 8020452:	2200      	movs	r2, #0
 8020454:	701a      	strb	r2, [r3, #0]
    bStoreCompleteAccess = FALSE;
 8020456:	4b10      	ldr	r3, [pc, #64]	; (8020498 <COE_ObjInit+0xec>)
 8020458:	2200      	movs	r2, #0
 802045a:	701a      	strb	r2, [r3, #0]
    u16StoreIndex   =   0;
 802045c:	4b0f      	ldr	r3, [pc, #60]	; (802049c <COE_ObjInit+0xf0>)
 802045e:	2200      	movs	r2, #0
 8020460:	801a      	strh	r2, [r3, #0]
    u8StoreSubindex = 0;
 8020462:	4b0f      	ldr	r3, [pc, #60]	; (80204a0 <COE_ObjInit+0xf4>)
 8020464:	2200      	movs	r2, #0
 8020466:	701a      	strb	r2, [r3, #0]
    u32StoreDataSize = 0;
 8020468:	4b0e      	ldr	r3, [pc, #56]	; (80204a4 <COE_ObjInit+0xf8>)
 802046a:	2200      	movs	r2, #0
 802046c:	601a      	str	r2, [r3, #0]
    pStoreData = NULL;
 802046e:	4b0e      	ldr	r3, [pc, #56]	; (80204a8 <COE_ObjInit+0xfc>)
 8020470:	2200      	movs	r2, #0
 8020472:	601a      	str	r2, [r3, #0]
    pSdoPendFunc    = NULL;
 8020474:	4b0d      	ldr	r3, [pc, #52]	; (80204ac <COE_ObjInit+0x100>)
 8020476:	2200      	movs	r2, #0
 8020478:	601a      	str	r2, [r3, #0]

    pSdoSegData = NULL;
 802047a:	4b0d      	ldr	r3, [pc, #52]	; (80204b0 <COE_ObjInit+0x104>)
 802047c:	2200      	movs	r2, #0
 802047e:	601a      	str	r2, [r3, #0]
}
 8020480:	3708      	adds	r7, #8
 8020482:	46bd      	mov	sp, r7
 8020484:	bd80      	pop	{r7, pc}
 8020486:	bf00      	nop
 8020488:	1fff2860 	.word	0x1fff2860
 802048c:	1fff281c 	.word	0x1fff281c
 8020490:	1fff28a4 	.word	0x1fff28a4
 8020494:	1fff28c4 	.word	0x1fff28c4
 8020498:	1fff28c5 	.word	0x1fff28c5
 802049c:	1fff28f6 	.word	0x1fff28f6
 80204a0:	1fff28f8 	.word	0x1fff28f8
 80204a4:	1fff28d4 	.word	0x1fff28d4
 80204a8:	1fff28b0 	.word	0x1fff28b0
 80204ac:	1fff28c0 	.word	0x1fff28c0
 80204b0:	1fff28d8 	.word	0x1fff28d8

080204b4 <COE_AddObjectToDic>:
            ALSTATUSCODE_XX add object failed

 \brief    This function adds an object to the object dictionary
 *////////////////////////////////////////////////////////////////////////////////////////
UINT16 COE_AddObjectToDic(TOBJECT OBJMEM * pNewObjEntry)
{
 80204b4:	b480      	push	{r7}
 80204b6:	b085      	sub	sp, #20
 80204b8:	af00      	add	r7, sp, #0
 80204ba:	6078      	str	r0, [r7, #4]
    if(pNewObjEntry != NULL)
 80204bc:	687b      	ldr	r3, [r7, #4]
 80204be:	2b00      	cmp	r3, #0
 80204c0:	d062      	beq.n	8020588 <COE_AddObjectToDic+0xd4>
    {
        if(ObjDicList == NULL)
 80204c2:	4b35      	ldr	r3, [pc, #212]	; (8020598 <COE_AddObjectToDic+0xe4>)
 80204c4:	681b      	ldr	r3, [r3, #0]
 80204c6:	2b00      	cmp	r3, #0
 80204c8:	d10c      	bne.n	80204e4 <COE_AddObjectToDic+0x30>
        {
            /* Object dictionary is empty */
            ObjDicList = pNewObjEntry;
 80204ca:	4a33      	ldr	r2, [pc, #204]	; (8020598 <COE_AddObjectToDic+0xe4>)
 80204cc:	687b      	ldr	r3, [r7, #4]
 80204ce:	6013      	str	r3, [r2, #0]
            ObjDicList->pNext = NULL;
 80204d0:	4b31      	ldr	r3, [pc, #196]	; (8020598 <COE_AddObjectToDic+0xe4>)
 80204d2:	681b      	ldr	r3, [r3, #0]
 80204d4:	2200      	movs	r2, #0
 80204d6:	605a      	str	r2, [r3, #4]
            ObjDicList->pPrev = NULL;
 80204d8:	4b2f      	ldr	r3, [pc, #188]	; (8020598 <COE_AddObjectToDic+0xe4>)
 80204da:	681b      	ldr	r3, [r3, #0]
 80204dc:	2200      	movs	r2, #0
 80204de:	601a      	str	r2, [r3, #0]
            return 0;
 80204e0:	2300      	movs	r3, #0
 80204e2:	e052      	b.n	802058a <COE_AddObjectToDic+0xd6>
        }
        else if(ObjDicList->Index > pNewObjEntry->Index)
 80204e4:	4b2c      	ldr	r3, [pc, #176]	; (8020598 <COE_AddObjectToDic+0xe4>)
 80204e6:	681b      	ldr	r3, [r3, #0]
 80204e8:	891a      	ldrh	r2, [r3, #8]
 80204ea:	687b      	ldr	r3, [r7, #4]
 80204ec:	891b      	ldrh	r3, [r3, #8]
 80204ee:	429a      	cmp	r2, r3
 80204f0:	d90f      	bls.n	8020512 <COE_AddObjectToDic+0x5e>
        {
            /*insert new object dictionary head*/
            pNewObjEntry->pPrev = NULL;
 80204f2:	687b      	ldr	r3, [r7, #4]
 80204f4:	2200      	movs	r2, #0
 80204f6:	601a      	str	r2, [r3, #0]
            pNewObjEntry->pNext = ObjDicList;
 80204f8:	4b27      	ldr	r3, [pc, #156]	; (8020598 <COE_AddObjectToDic+0xe4>)
 80204fa:	681a      	ldr	r2, [r3, #0]
 80204fc:	687b      	ldr	r3, [r7, #4]
 80204fe:	605a      	str	r2, [r3, #4]
            ObjDicList->pPrev = pNewObjEntry;
 8020500:	4b25      	ldr	r3, [pc, #148]	; (8020598 <COE_AddObjectToDic+0xe4>)
 8020502:	681b      	ldr	r3, [r3, #0]
 8020504:	687a      	ldr	r2, [r7, #4]
 8020506:	601a      	str	r2, [r3, #0]
            ObjDicList = pNewObjEntry;
 8020508:	4a23      	ldr	r2, [pc, #140]	; (8020598 <COE_AddObjectToDic+0xe4>)
 802050a:	687b      	ldr	r3, [r7, #4]
 802050c:	6013      	str	r3, [r2, #0]
            return 0;
 802050e:	2300      	movs	r3, #0
 8020510:	e03b      	b.n	802058a <COE_AddObjectToDic+0xd6>
        }
        else
        {
            TOBJECT    OBJMEM * pDicEntry = ObjDicList;
 8020512:	4b21      	ldr	r3, [pc, #132]	; (8020598 <COE_AddObjectToDic+0xe4>)
 8020514:	681b      	ldr	r3, [r3, #0]
 8020516:	60fb      	str	r3, [r7, #12]
            while(pDicEntry != NULL)
 8020518:	e033      	b.n	8020582 <COE_AddObjectToDic+0xce>
            {
                if(pDicEntry->Index == pNewObjEntry->Index)
 802051a:	68fb      	ldr	r3, [r7, #12]
 802051c:	891a      	ldrh	r2, [r3, #8]
 802051e:	687b      	ldr	r3, [r7, #4]
 8020520:	891b      	ldrh	r3, [r3, #8]
 8020522:	429a      	cmp	r2, r3
 8020524:	d101      	bne.n	802052a <COE_AddObjectToDic+0x76>
                {
                    /*object already exists in object dictionary*/
                    return ALSTATUSCODE_UNSPECIFIEDERROR;
 8020526:	2301      	movs	r3, #1
 8020528:	e02f      	b.n	802058a <COE_AddObjectToDic+0xd6>
                }
                else if(pDicEntry->Index > pNewObjEntry->Index)
 802052a:	68fb      	ldr	r3, [r7, #12]
 802052c:	891a      	ldrh	r2, [r3, #8]
 802052e:	687b      	ldr	r3, [r7, #4]
 8020530:	891b      	ldrh	r3, [r3, #8]
 8020532:	429a      	cmp	r2, r3
 8020534:	d913      	bls.n	802055e <COE_AddObjectToDic+0xaa>
                {
                    pNewObjEntry->pPrev = pDicEntry->pPrev;
 8020536:	68fb      	ldr	r3, [r7, #12]
 8020538:	681a      	ldr	r2, [r3, #0]
 802053a:	687b      	ldr	r3, [r7, #4]
 802053c:	601a      	str	r2, [r3, #0]
                    pNewObjEntry->pNext = pDicEntry;
 802053e:	687b      	ldr	r3, [r7, #4]
 8020540:	68fa      	ldr	r2, [r7, #12]
 8020542:	605a      	str	r2, [r3, #4]

                    if(pDicEntry->pPrev != NULL)
 8020544:	68fb      	ldr	r3, [r7, #12]
 8020546:	681b      	ldr	r3, [r3, #0]
 8020548:	2b00      	cmp	r3, #0
 802054a:	d003      	beq.n	8020554 <COE_AddObjectToDic+0xa0>
                        pDicEntry->pPrev->pNext = pNewObjEntry;
 802054c:	68fb      	ldr	r3, [r7, #12]
 802054e:	681b      	ldr	r3, [r3, #0]
 8020550:	687a      	ldr	r2, [r7, #4]
 8020552:	605a      	str	r2, [r3, #4]

                    pDicEntry->pPrev = pNewObjEntry;
 8020554:	68fb      	ldr	r3, [r7, #12]
 8020556:	687a      	ldr	r2, [r7, #4]
 8020558:	601a      	str	r2, [r3, #0]

                    return 0;
 802055a:	2300      	movs	r3, #0
 802055c:	e015      	b.n	802058a <COE_AddObjectToDic+0xd6>
                }
                else if(pDicEntry->pNext == NULL)
 802055e:	68fb      	ldr	r3, [r7, #12]
 8020560:	685b      	ldr	r3, [r3, #4]
 8020562:	2b00      	cmp	r3, #0
 8020564:	d10a      	bne.n	802057c <COE_AddObjectToDic+0xc8>
                {
                    /*Last entry reached => add object to list tail*/
                    pDicEntry->pNext = pNewObjEntry;
 8020566:	68fb      	ldr	r3, [r7, #12]
 8020568:	687a      	ldr	r2, [r7, #4]
 802056a:	605a      	str	r2, [r3, #4]
                    pNewObjEntry->pPrev = pDicEntry;
 802056c:	687b      	ldr	r3, [r7, #4]
 802056e:	68fa      	ldr	r2, [r7, #12]
 8020570:	601a      	str	r2, [r3, #0]
                    pNewObjEntry->pNext = NULL;
 8020572:	687b      	ldr	r3, [r7, #4]
 8020574:	2200      	movs	r2, #0
 8020576:	605a      	str	r2, [r3, #4]
                    return 0;
 8020578:	2300      	movs	r3, #0
 802057a:	e006      	b.n	802058a <COE_AddObjectToDic+0xd6>
                }
                else
                {
                    /*The new object index is smaller than the current index. Get next object handle.*/
                    pDicEntry = pDicEntry->pNext;
 802057c:	68fb      	ldr	r3, [r7, #12]
 802057e:	685b      	ldr	r3, [r3, #4]
 8020580:	60fb      	str	r3, [r7, #12]
            return 0;
        }
        else
        {
            TOBJECT    OBJMEM * pDicEntry = ObjDicList;
            while(pDicEntry != NULL)
 8020582:	68fb      	ldr	r3, [r7, #12]
 8020584:	2b00      	cmp	r3, #0
 8020586:	d1c8      	bne.n	802051a <COE_AddObjectToDic+0x66>
                    pDicEntry = pDicEntry->pNext;
                }
            }
        }
    }
    return ALSTATUSCODE_UNSPECIFIEDERROR;
 8020588:	2301      	movs	r3, #1
}
 802058a:	4618      	mov	r0, r3
 802058c:	3714      	adds	r7, #20
 802058e:	46bd      	mov	sp, r7
 8020590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020594:	4770      	bx	lr
 8020596:	bf00      	nop
 8020598:	1fff1468 	.word	0x1fff1468

0802059c <COE_RemoveDicEntry>:
/**

 \brief    This function removes an object to the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
void COE_RemoveDicEntry(UINT16 index)
{
 802059c:	b480      	push	{r7}
 802059e:	b087      	sub	sp, #28
 80205a0:	af00      	add	r7, sp, #0
 80205a2:	4603      	mov	r3, r0
 80205a4:	80fb      	strh	r3, [r7, #6]
    TOBJECT    OBJMEM * pDicEntry = ObjDicList;
 80205a6:	4b1c      	ldr	r3, [pc, #112]	; (8020618 <COE_RemoveDicEntry+0x7c>)
 80205a8:	681b      	ldr	r3, [r3, #0]
 80205aa:	617b      	str	r3, [r7, #20]

    while(pDicEntry != NULL)
 80205ac:	e02b      	b.n	8020606 <COE_RemoveDicEntry+0x6a>
    {
        if(pDicEntry->Index == index)
 80205ae:	697b      	ldr	r3, [r7, #20]
 80205b0:	891b      	ldrh	r3, [r3, #8]
 80205b2:	88fa      	ldrh	r2, [r7, #6]
 80205b4:	429a      	cmp	r2, r3
 80205b6:	d123      	bne.n	8020600 <COE_RemoveDicEntry+0x64>
        {
            TOBJECT OBJMEM *pPrevEntry = pDicEntry->pPrev;
 80205b8:	697b      	ldr	r3, [r7, #20]
 80205ba:	681b      	ldr	r3, [r3, #0]
 80205bc:	613b      	str	r3, [r7, #16]
            TOBJECT OBJMEM *pNextEntry = pDicEntry->pNext;
 80205be:	697b      	ldr	r3, [r7, #20]
 80205c0:	685b      	ldr	r3, [r3, #4]
 80205c2:	60fb      	str	r3, [r7, #12]

            if(pPrevEntry != NULL)
 80205c4:	693b      	ldr	r3, [r7, #16]
 80205c6:	2b00      	cmp	r3, #0
 80205c8:	d002      	beq.n	80205d0 <COE_RemoveDicEntry+0x34>
                pPrevEntry->pNext = pNextEntry;
 80205ca:	693b      	ldr	r3, [r7, #16]
 80205cc:	68fa      	ldr	r2, [r7, #12]
 80205ce:	605a      	str	r2, [r3, #4]

            if(pNextEntry != NULL)
 80205d0:	68fb      	ldr	r3, [r7, #12]
 80205d2:	2b00      	cmp	r3, #0
 80205d4:	d002      	beq.n	80205dc <COE_RemoveDicEntry+0x40>
                pNextEntry->pPrev = pPrevEntry;
 80205d6:	68fb      	ldr	r3, [r7, #12]
 80205d8:	693a      	ldr	r2, [r7, #16]
 80205da:	601a      	str	r2, [r3, #0]

            pDicEntry->pPrev = NULL;
 80205dc:	697b      	ldr	r3, [r7, #20]
 80205de:	2200      	movs	r2, #0
 80205e0:	601a      	str	r2, [r3, #0]
            pDicEntry->pNext = NULL;
 80205e2:	697b      	ldr	r3, [r7, #20]
 80205e4:	2200      	movs	r2, #0
 80205e6:	605a      	str	r2, [r3, #4]
            /*Update Object dictionary pointer if list head was removed*/
            if(pDicEntry->Index == ObjDicList->Index)
 80205e8:	697b      	ldr	r3, [r7, #20]
 80205ea:	891a      	ldrh	r2, [r3, #8]
 80205ec:	4b0a      	ldr	r3, [pc, #40]	; (8020618 <COE_RemoveDicEntry+0x7c>)
 80205ee:	681b      	ldr	r3, [r3, #0]
 80205f0:	891b      	ldrh	r3, [r3, #8]
 80205f2:	429a      	cmp	r2, r3
 80205f4:	d103      	bne.n	80205fe <COE_RemoveDicEntry+0x62>
            {
                ObjDicList = pNextEntry;
 80205f6:	4a08      	ldr	r2, [pc, #32]	; (8020618 <COE_RemoveDicEntry+0x7c>)
 80205f8:	68fb      	ldr	r3, [r7, #12]
 80205fa:	6013      	str	r3, [r2, #0]
            }
            return;
 80205fc:	e006      	b.n	802060c <COE_RemoveDicEntry+0x70>
 80205fe:	e005      	b.n	802060c <COE_RemoveDicEntry+0x70>
        }

        pDicEntry = pDicEntry->pNext;
 8020600:	697b      	ldr	r3, [r7, #20]
 8020602:	685b      	ldr	r3, [r3, #4]
 8020604:	617b      	str	r3, [r7, #20]
*////////////////////////////////////////////////////////////////////////////////////////
void COE_RemoveDicEntry(UINT16 index)
{
    TOBJECT    OBJMEM * pDicEntry = ObjDicList;

    while(pDicEntry != NULL)
 8020606:	697b      	ldr	r3, [r7, #20]
 8020608:	2b00      	cmp	r3, #0
 802060a:	d1d0      	bne.n	80205ae <COE_RemoveDicEntry+0x12>
            return;
        }

        pDicEntry = pDicEntry->pNext;
    }
}
 802060c:	371c      	adds	r7, #28
 802060e:	46bd      	mov	sp, r7
 8020610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020614:	4770      	bx	lr
 8020616:	bf00      	nop
 8020618:	1fff1468 	.word	0x1fff1468

0802061c <COE_ClearObjDictionary>:
/**

 \brief    This function clear the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
void COE_ClearObjDictionary(void)
{
 802061c:	b580      	push	{r7, lr}
 802061e:	b082      	sub	sp, #8
 8020620:	af00      	add	r7, sp, #0
    TOBJECT OBJMEM * pObjEntry = (TOBJECT OBJMEM *) ObjDicList;
 8020622:	4b0c      	ldr	r3, [pc, #48]	; (8020654 <COE_ClearObjDictionary+0x38>)
 8020624:	681b      	ldr	r3, [r3, #0]
 8020626:	607b      	str	r3, [r7, #4]
    UINT16 Index = 0;
 8020628:	2300      	movs	r3, #0
 802062a:	807b      	strh	r3, [r7, #2]

    while(pObjEntry != NULL)
 802062c:	e009      	b.n	8020642 <COE_ClearObjDictionary+0x26>
    {
        Index = pObjEntry->Index;
 802062e:	687b      	ldr	r3, [r7, #4]
 8020630:	891b      	ldrh	r3, [r3, #8]
 8020632:	807b      	strh	r3, [r7, #2]
        pObjEntry = pObjEntry->pNext;
 8020634:	687b      	ldr	r3, [r7, #4]
 8020636:	685b      	ldr	r3, [r3, #4]
 8020638:	607b      	str	r3, [r7, #4]

        COE_RemoveDicEntry(Index);
 802063a:	887b      	ldrh	r3, [r7, #2]
 802063c:	4618      	mov	r0, r3
 802063e:	f7ff ffad 	bl	802059c <COE_RemoveDicEntry>
void COE_ClearObjDictionary(void)
{
    TOBJECT OBJMEM * pObjEntry = (TOBJECT OBJMEM *) ObjDicList;
    UINT16 Index = 0;

    while(pObjEntry != NULL)
 8020642:	687b      	ldr	r3, [r7, #4]
 8020644:	2b00      	cmp	r3, #0
 8020646:	d1f2      	bne.n	802062e <COE_ClearObjDictionary+0x12>
        Index = pObjEntry->Index;
        pObjEntry = pObjEntry->pNext;

        COE_RemoveDicEntry(Index);
    }
    ObjDicList = NULL;
 8020648:	4b02      	ldr	r3, [pc, #8]	; (8020654 <COE_ClearObjDictionary+0x38>)
 802064a:	2200      	movs	r2, #0
 802064c:	601a      	str	r2, [r3, #0]
}
 802064e:	3708      	adds	r7, #8
 8020650:	46bd      	mov	sp, r7
 8020652:	bd80      	pop	{r7, pc}
 8020654:	1fff1468 	.word	0x1fff1468

08020658 <AddObjectsToObjDictionary>:


UINT16 AddObjectsToObjDictionary(TOBJECT OBJMEM * pObjEntry)
{
 8020658:	b580      	push	{r7, lr}
 802065a:	b084      	sub	sp, #16
 802065c:	af00      	add	r7, sp, #0
 802065e:	6078      	str	r0, [r7, #4]
    UINT16 result = 0;
 8020660:	2300      	movs	r3, #0
 8020662:	81fb      	strh	r3, [r7, #14]
    TOBJECT OBJMEM * pEntry = (TOBJECT OBJMEM *)pObjEntry;
 8020664:	687b      	ldr	r3, [r7, #4]
 8020666:	60bb      	str	r3, [r7, #8]

    while(pEntry->Index != 0xFFFF)
 8020668:	e00c      	b.n	8020684 <AddObjectsToObjDictionary+0x2c>
    {
        result = COE_AddObjectToDic(pEntry);
 802066a:	68b8      	ldr	r0, [r7, #8]
 802066c:	f7ff ff22 	bl	80204b4 <COE_AddObjectToDic>
 8020670:	4603      	mov	r3, r0
 8020672:	81fb      	strh	r3, [r7, #14]

        if(result != 0)
 8020674:	89fb      	ldrh	r3, [r7, #14]
 8020676:	2b00      	cmp	r3, #0
 8020678:	d001      	beq.n	802067e <AddObjectsToObjDictionary+0x26>
            return result;
 802067a:	89fb      	ldrh	r3, [r7, #14]
 802067c:	e009      	b.n	8020692 <AddObjectsToObjDictionary+0x3a>

        pEntry++;
 802067e:	68bb      	ldr	r3, [r7, #8]
 8020680:	3328      	adds	r3, #40	; 0x28
 8020682:	60bb      	str	r3, [r7, #8]
UINT16 AddObjectsToObjDictionary(TOBJECT OBJMEM * pObjEntry)
{
    UINT16 result = 0;
    TOBJECT OBJMEM * pEntry = (TOBJECT OBJMEM *)pObjEntry;

    while(pEntry->Index != 0xFFFF)
 8020684:	68bb      	ldr	r3, [r7, #8]
 8020686:	891b      	ldrh	r3, [r3, #8]
 8020688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802068c:	4293      	cmp	r3, r2
 802068e:	d1ec      	bne.n	802066a <AddObjectsToObjDictionary+0x12>
            return result;

        pEntry++;
    }

    return result;
 8020690:	89fb      	ldrh	r3, [r7, #14]

}
 8020692:	4618      	mov	r0, r3
 8020694:	3710      	adds	r7, #16
 8020696:	46bd      	mov	sp, r7
 8020698:	bd80      	pop	{r7, pc}
 802069a:	bf00      	nop

0802069c <COE_ObjDictionaryInit>:
            ALSTATUSCODE_XX create object dictionary failed

 \brief    This function initialize the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 COE_ObjDictionaryInit(void)
{
 802069c:	b580      	push	{r7, lr}
 802069e:	b082      	sub	sp, #8
 80206a0:	af00      	add	r7, sp, #0
    UINT16 result = 0;
 80206a2:	2300      	movs	r3, #0
 80206a4:	80fb      	strh	r3, [r7, #6]

    /*Reset object dictionary pointer*/
    ObjDicList = NULL;
 80206a6:	4b0b      	ldr	r3, [pc, #44]	; (80206d4 <COE_ObjDictionaryInit+0x38>)
 80206a8:	2200      	movs	r2, #0
 80206aa:	601a      	str	r2, [r3, #0]

    result = AddObjectsToObjDictionary((TOBJECT OBJMEM *) GenObjDic);
 80206ac:	480a      	ldr	r0, [pc, #40]	; (80206d8 <COE_ObjDictionaryInit+0x3c>)
 80206ae:	f7ff ffd3 	bl	8020658 <AddObjectsToObjDictionary>
 80206b2:	4603      	mov	r3, r0
 80206b4:	80fb      	strh	r3, [r7, #6]

    if(result != 0)
 80206b6:	88fb      	ldrh	r3, [r7, #6]
 80206b8:	2b00      	cmp	r3, #0
 80206ba:	d001      	beq.n	80206c0 <COE_ObjDictionaryInit+0x24>
        return result;
 80206bc:	88fb      	ldrh	r3, [r7, #6]
 80206be:	e005      	b.n	80206cc <COE_ObjDictionaryInit+0x30>
    if(ApplicationObjDic != NULL)
    {
        result = AddObjectsToObjDictionary((TOBJECT OBJMEM *) ApplicationObjDic);
 80206c0:	4806      	ldr	r0, [pc, #24]	; (80206dc <COE_ObjDictionaryInit+0x40>)
 80206c2:	f7ff ffc9 	bl	8020658 <AddObjectsToObjDictionary>
 80206c6:	4603      	mov	r3, r0
 80206c8:	80fb      	strh	r3, [r7, #6]
    }

    return result;
 80206ca:	88fb      	ldrh	r3, [r7, #6]
}
 80206cc:	4618      	mov	r0, r3
 80206ce:	3708      	adds	r7, #8
 80206d0:	46bd      	mov	sp, r7
 80206d2:	bd80      	pop	{r7, pc}
 80206d4:	1fff1468 	.word	0x1fff1468
 80206d8:	1fff099c 	.word	0x1fff099c
 80206dc:	1fff0850 	.word	0x1fff0850

080206e0 <COE_Main>:
 \brief    is called for background calculations which should not influence the
             ECAT_Application in synchronous modes
*////////////////////////////////////////////////////////////////////////////////////////

void COE_Main(void)
{
 80206e0:	b5b0      	push	{r4, r5, r7, lr}
 80206e2:	b084      	sub	sp, #16
 80206e4:	af02      	add	r7, sp, #8
     UINT8 abort = 0;
 80206e6:	2300      	movs	r3, #0
 80206e8:	71fb      	strb	r3, [r7, #7]
    if(pSdoPendFunc != NULL)
 80206ea:	4b2f      	ldr	r3, [pc, #188]	; (80207a8 <COE_Main+0xc8>)
 80206ec:	681b      	ldr	r3, [r3, #0]
 80206ee:	2b00      	cmp	r3, #0
 80206f0:	d057      	beq.n	80207a2 <COE_Main+0xc2>
    {
        abort = pSdoPendFunc(u16StoreIndex,u8StoreSubindex,u32StoreDataSize,pStoreData,bStoreCompleteAccess);
 80206f2:	4b2d      	ldr	r3, [pc, #180]	; (80207a8 <COE_Main+0xc8>)
 80206f4:	681c      	ldr	r4, [r3, #0]
 80206f6:	4b2d      	ldr	r3, [pc, #180]	; (80207ac <COE_Main+0xcc>)
 80206f8:	8818      	ldrh	r0, [r3, #0]
 80206fa:	4b2d      	ldr	r3, [pc, #180]	; (80207b0 <COE_Main+0xd0>)
 80206fc:	7819      	ldrb	r1, [r3, #0]
 80206fe:	4b2d      	ldr	r3, [pc, #180]	; (80207b4 <COE_Main+0xd4>)
 8020700:	681a      	ldr	r2, [r3, #0]
 8020702:	4b2d      	ldr	r3, [pc, #180]	; (80207b8 <COE_Main+0xd8>)
 8020704:	681d      	ldr	r5, [r3, #0]
 8020706:	4b2d      	ldr	r3, [pc, #180]	; (80207bc <COE_Main+0xdc>)
 8020708:	781b      	ldrb	r3, [r3, #0]
 802070a:	9300      	str	r3, [sp, #0]
 802070c:	462b      	mov	r3, r5
 802070e:	47a0      	blx	r4
 8020710:	4603      	mov	r3, r0
 8020712:	71fb      	strb	r3, [r7, #7]

        if(abort != ABORTIDX_WORKING)
 8020714:	79fb      	ldrb	r3, [r7, #7]
 8020716:	2bff      	cmp	r3, #255	; 0xff
 8020718:	d043      	beq.n	80207a2 <COE_Main+0xc2>
        {
            switch(u8PendingSdo)
 802071a:	4b29      	ldr	r3, [pc, #164]	; (80207c0 <COE_Main+0xe0>)
 802071c:	781b      	ldrb	r3, [r3, #0]
 802071e:	3b01      	subs	r3, #1
 8020720:	2b03      	cmp	r3, #3
 8020722:	d829      	bhi.n	8020778 <COE_Main+0x98>
 8020724:	a201      	add	r2, pc, #4	; (adr r2, 802072c <COE_Main+0x4c>)
 8020726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802072a:	bf00      	nop
 802072c:	08020755 	.word	0x08020755
 8020730:	0802073d 	.word	0x0802073d
 8020734:	08020763 	.word	0x08020763
 8020738:	08020763 	.word	0x08020763
            {
                case SDO_PENDING_SEG_WRITE:
                    if(pSdoSegData)
 802073c:	4b21      	ldr	r3, [pc, #132]	; (80207c4 <COE_Main+0xe4>)
 802073e:	681b      	ldr	r3, [r3, #0]
 8020740:	2b00      	cmp	r3, #0
 8020742:	d007      	beq.n	8020754 <COE_Main+0x74>
                    {
                        /* the allocated buffer can be released */
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 8020744:	4b1f      	ldr	r3, [pc, #124]	; (80207c4 <COE_Main+0xe4>)
 8020746:	681b      	ldr	r3, [r3, #0]
 8020748:	4618      	mov	r0, r3
 802074a:	f007 fd83 	bl	8028254 <free>
                        pSdoSegData = NULL;
 802074e:	4b1d      	ldr	r3, [pc, #116]	; (80207c4 <COE_Main+0xe4>)
 8020750:	2200      	movs	r2, #0
 8020752:	601a      	str	r2, [r3, #0]
                    }
                case SDO_PENDING_WRITE:
                     /*send SDO Download Response*/
                    SDOS_SdoRes(abort, 0, NULL);
 8020754:	79fb      	ldrb	r3, [r7, #7]
 8020756:	4618      	mov	r0, r3
 8020758:	2100      	movs	r1, #0
 802075a:	2200      	movs	r2, #0
 802075c:	f005 f856 	bl	802580c <SDOS_SdoRes>
                break;
 8020760:	e00a      	b.n	8020778 <COE_Main+0x98>

                case SDO_PENDING_SEG_READ:
                case SDO_PENDING_READ:
                    /* send SDO upload response */
                      SDOS_SdoRes(abort, u32StoreDataSize, pStoreData);
 8020762:	4b14      	ldr	r3, [pc, #80]	; (80207b4 <COE_Main+0xd4>)
 8020764:	681a      	ldr	r2, [r3, #0]
 8020766:	4b14      	ldr	r3, [pc, #80]	; (80207b8 <COE_Main+0xd8>)
 8020768:	681b      	ldr	r3, [r3, #0]
 802076a:	79f9      	ldrb	r1, [r7, #7]
 802076c:	4608      	mov	r0, r1
 802076e:	4611      	mov	r1, r2
 8020770:	461a      	mov	r2, r3
 8020772:	f005 f84b 	bl	802580c <SDOS_SdoRes>
                    break;
 8020776:	bf00      	nop

            }

            u8PendingSdo = 0;
 8020778:	4b11      	ldr	r3, [pc, #68]	; (80207c0 <COE_Main+0xe0>)
 802077a:	2200      	movs	r2, #0
 802077c:	701a      	strb	r2, [r3, #0]
            u16StoreIndex = 0;
 802077e:	4b0b      	ldr	r3, [pc, #44]	; (80207ac <COE_Main+0xcc>)
 8020780:	2200      	movs	r2, #0
 8020782:	801a      	strh	r2, [r3, #0]
            u8StoreSubindex = 0;
 8020784:	4b0a      	ldr	r3, [pc, #40]	; (80207b0 <COE_Main+0xd0>)
 8020786:	2200      	movs	r2, #0
 8020788:	701a      	strb	r2, [r3, #0]
            u32StoreDataSize = 0;
 802078a:	4b0a      	ldr	r3, [pc, #40]	; (80207b4 <COE_Main+0xd4>)
 802078c:	2200      	movs	r2, #0
 802078e:	601a      	str	r2, [r3, #0]
            pStoreData = NULL;
 8020790:	4b09      	ldr	r3, [pc, #36]	; (80207b8 <COE_Main+0xd8>)
 8020792:	2200      	movs	r2, #0
 8020794:	601a      	str	r2, [r3, #0]
            bStoreCompleteAccess = 0;
 8020796:	4b09      	ldr	r3, [pc, #36]	; (80207bc <COE_Main+0xdc>)
 8020798:	2200      	movs	r2, #0
 802079a:	701a      	strb	r2, [r3, #0]
            pSdoPendFunc = NULL;
 802079c:	4b02      	ldr	r3, [pc, #8]	; (80207a8 <COE_Main+0xc8>)
 802079e:	2200      	movs	r2, #0
 80207a0:	601a      	str	r2, [r3, #0]
        }
    }
}
 80207a2:	3708      	adds	r7, #8
 80207a4:	46bd      	mov	sp, r7
 80207a6:	bdb0      	pop	{r4, r5, r7, pc}
 80207a8:	1fff28c0 	.word	0x1fff28c0
 80207ac:	1fff28f6 	.word	0x1fff28f6
 80207b0:	1fff28f8 	.word	0x1fff28f8
 80207b4:	1fff28d4 	.word	0x1fff28d4
 80207b8:	1fff28b0 	.word	0x1fff28b0
 80207bc:	1fff28c5 	.word	0x1fff28c5
 80207c0:	1fff28c4 	.word	0x1fff28c4
 80207c4:	1fff28d8 	.word	0x1fff28d8

080207c8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80207c8:	b480      	push	{r7}
 80207ca:	b083      	sub	sp, #12
 80207cc:	af00      	add	r7, sp, #0
 80207ce:	4603      	mov	r3, r0
 80207d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80207d2:	4908      	ldr	r1, [pc, #32]	; (80207f4 <NVIC_EnableIRQ+0x2c>)
 80207d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80207d8:	095b      	lsrs	r3, r3, #5
 80207da:	79fa      	ldrb	r2, [r7, #7]
 80207dc:	f002 021f 	and.w	r2, r2, #31
 80207e0:	2001      	movs	r0, #1
 80207e2:	fa00 f202 	lsl.w	r2, r0, r2
 80207e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80207ea:	370c      	adds	r7, #12
 80207ec:	46bd      	mov	sp, r7
 80207ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207f2:	4770      	bx	lr
 80207f4:	e000e100 	.word	0xe000e100

080207f8 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80207f8:	b480      	push	{r7}
 80207fa:	b083      	sub	sp, #12
 80207fc:	af00      	add	r7, sp, #0
 80207fe:	4603      	mov	r3, r0
 8020800:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8020802:	4909      	ldr	r1, [pc, #36]	; (8020828 <NVIC_DisableIRQ+0x30>)
 8020804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020808:	095b      	lsrs	r3, r3, #5
 802080a:	79fa      	ldrb	r2, [r7, #7]
 802080c:	f002 021f 	and.w	r2, r2, #31
 8020810:	2001      	movs	r0, #1
 8020812:	fa00 f202 	lsl.w	r2, r0, r2
 8020816:	3320      	adds	r3, #32
 8020818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 802081c:	370c      	adds	r7, #12
 802081e:	46bd      	mov	sp, r7
 8020820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020824:	4770      	bx	lr
 8020826:	bf00      	nop
 8020828:	e000e100 	.word	0xe000e100

0802082c <XMC_ECAT_GetALEventRegister>:
 *
 * \par
 * Get the first two bytes of the AL Event register (0x220-0x221).
 */
__STATIC_INLINE uint16_t XMC_ECAT_GetALEventRegister(void)
{
 802082c:	b480      	push	{r7}
 802082e:	af00      	add	r7, sp, #0
  return ((uint16_t)ECAT0->AL_EVENT_REQ);
 8020830:	4b04      	ldr	r3, [pc, #16]	; (8020844 <XMC_ECAT_GetALEventRegister+0x18>)
 8020832:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8020836:	b29b      	uxth	r3, r3
}
 8020838:	4618      	mov	r0, r3
 802083a:	46bd      	mov	sp, r7
 802083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020840:	4770      	bx	lr
 8020842:	bf00      	nop
 8020844:	54010000 	.word	0x54010000

08020848 <HW_EscRead>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscRead(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8020848:	b580      	push	{r7, lr}
 802084a:	b082      	sub	sp, #8
 802084c:	af00      	add	r7, sp, #0
 802084e:	6078      	str	r0, [r7, #4]
 8020850:	460b      	mov	r3, r1
 8020852:	807b      	strh	r3, [r7, #2]
 8020854:	4613      	mov	r3, r2
 8020856:	803b      	strh	r3, [r7, #0]
  memcpy(pData, &pEsc[Address], Len);
 8020858:	887b      	ldrh	r3, [r7, #2]
 802085a:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 802085e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8020862:	883a      	ldrh	r2, [r7, #0]
 8020864:	6878      	ldr	r0, [r7, #4]
 8020866:	4619      	mov	r1, r3
 8020868:	f007 fcfc 	bl	8028264 <memcpy>
}
 802086c:	3708      	adds	r7, #8
 802086e:	46bd      	mov	sp, r7
 8020870:	bd80      	pop	{r7, pc}
 8020872:	bf00      	nop

08020874 <HW_EscReadIsr>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscReadIsr(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8020874:	b580      	push	{r7, lr}
 8020876:	b082      	sub	sp, #8
 8020878:	af00      	add	r7, sp, #0
 802087a:	6078      	str	r0, [r7, #4]
 802087c:	460b      	mov	r3, r1
 802087e:	807b      	strh	r3, [r7, #2]
 8020880:	4613      	mov	r3, r2
 8020882:	803b      	strh	r3, [r7, #0]
  HW_EscRead(pData, Address, Len);
 8020884:	887a      	ldrh	r2, [r7, #2]
 8020886:	883b      	ldrh	r3, [r7, #0]
 8020888:	6878      	ldr	r0, [r7, #4]
 802088a:	4611      	mov	r1, r2
 802088c:	461a      	mov	r2, r3
 802088e:	f7ff ffdb 	bl	8020848 <HW_EscRead>
}
 8020892:	3708      	adds	r7, #8
 8020894:	46bd      	mov	sp, r7
 8020896:	bd80      	pop	{r7, pc}

08020898 <HW_EscWrite>:
 * \par<b>Description:</b><br>
 * Writes from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscWrite(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8020898:	b580      	push	{r7, lr}
 802089a:	b082      	sub	sp, #8
 802089c:	af00      	add	r7, sp, #0
 802089e:	6078      	str	r0, [r7, #4]
 80208a0:	460b      	mov	r3, r1
 80208a2:	807b      	strh	r3, [r7, #2]
 80208a4:	4613      	mov	r3, r2
 80208a6:	803b      	strh	r3, [r7, #0]
  memcpy(&pEsc[Address], pData, Len);
 80208a8:	887b      	ldrh	r3, [r7, #2]
 80208aa:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 80208ae:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80208b2:	883a      	ldrh	r2, [r7, #0]
 80208b4:	4618      	mov	r0, r3
 80208b6:	6879      	ldr	r1, [r7, #4]
 80208b8:	f007 fcd4 	bl	8028264 <memcpy>
}
 80208bc:	3708      	adds	r7, #8
 80208be:	46bd      	mov	sp, r7
 80208c0:	bd80      	pop	{r7, pc}
 80208c2:	bf00      	nop

080208c4 <HW_EscWriteIsr>:
 * \par<b>Description:</b><br>
 * Writes from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscWriteIsr(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 80208c4:	b580      	push	{r7, lr}
 80208c6:	b082      	sub	sp, #8
 80208c8:	af00      	add	r7, sp, #0
 80208ca:	6078      	str	r0, [r7, #4]
 80208cc:	460b      	mov	r3, r1
 80208ce:	807b      	strh	r3, [r7, #2]
 80208d0:	4613      	mov	r3, r2
 80208d2:	803b      	strh	r3, [r7, #0]
  HW_EscWrite(pData, Address, Len);
 80208d4:	887a      	ldrh	r2, [r7, #2]
 80208d6:	883b      	ldrh	r3, [r7, #0]
 80208d8:	6878      	ldr	r0, [r7, #4]
 80208da:	4611      	mov	r1, r2
 80208dc:	461a      	mov	r2, r3
 80208de:	f7ff ffdb 	bl	8020898 <HW_EscWrite>
}
 80208e2:	3708      	adds	r7, #8
 80208e4:	46bd      	mov	sp, r7
 80208e6:	bd80      	pop	{r7, pc}

080208e8 <HW_GetALEventRegister>:
 * \par<b>Description:</b><br>
 *
 *
 */
__STATIC_INLINE UINT16 HW_GetALEventRegister(void)
{
 80208e8:	b580      	push	{r7, lr}
 80208ea:	af00      	add	r7, sp, #0
  return XMC_ECAT_GetALEventRegister();
 80208ec:	f7ff ff9e 	bl	802082c <XMC_ECAT_GetALEventRegister>
 80208f0:	4603      	mov	r3, r0
}
 80208f2:	4618      	mov	r0, r3
 80208f4:	bd80      	pop	{r7, pc}
 80208f6:	bf00      	nop

080208f8 <HW_GetALEventRegister_Isr>:
 * Special function for ESC access from interrupt service routines if required, otherwise this function is defined as
 * HW_GetALEventRegister.
 *
 */
__STATIC_INLINE UINT16 HW_GetALEventRegister_Isr(void)
{
 80208f8:	b580      	push	{r7, lr}
 80208fa:	af00      	add	r7, sp, #0
  return HW_GetALEventRegister();
 80208fc:	f7ff fff4 	bl	80208e8 <HW_GetALEventRegister>
 8020900:	4603      	mov	r3, r0
}
 8020902:	4618      	mov	r0, r3
 8020904:	bd80      	pop	{r7, pc}
 8020906:	bf00      	nop

08020908 <ENABLE_ESC_INT>:
 * \par<b>Description:</b><br>
 * Function to enable the XMC EtherCAT slave controller interrupt.
 *
 */
__STATIC_INLINE void ENABLE_ESC_INT(void)
{
 8020908:	b580      	push	{r7, lr}
 802090a:	af00      	add	r7, sp, #0
  NVIC_EnableIRQ(ECAT0_0_IRQn);
 802090c:	206d      	movs	r0, #109	; 0x6d
 802090e:	f7ff ff5b 	bl	80207c8 <NVIC_EnableIRQ>
}
 8020912:	bd80      	pop	{r7, pc}

08020914 <DISABLE_ESC_INT>:
 * \par<b>Description:</b><br>
 * Function to disable the XMC EtherCAT slave controller interrupt.
 *
 */
__STATIC_INLINE void DISABLE_ESC_INT(void)
{
 8020914:	b580      	push	{r7, lr}
 8020916:	af00      	add	r7, sp, #0
  NVIC_DisableIRQ(ECAT0_0_IRQn);
 8020918:	206d      	movs	r0, #109	; 0x6d
 802091a:	f7ff ff6d 	bl	80207f8 <NVIC_DisableIRQ>
}
 802091e:	bd80      	pop	{r7, pc}

08020920 <PDO_InputMapping>:
/**
\brief      This function will copies the inputs from the local memory to the ESC memory
            to the hardware
*////////////////////////////////////////////////////////////////////////////////////////
void PDO_InputMapping(void)
{
 8020920:	b580      	push	{r7, lr}
 8020922:	af00      	add	r7, sp, #0
    APPL_InputMapping((UINT16*)aPdInputData);
 8020924:	4806      	ldr	r0, [pc, #24]	; (8020940 <PDO_InputMapping+0x20>)
 8020926:	f7ff fcd7 	bl	80202d8 <APPL_InputMapping>
    HW_EscWriteIsr(((MEM_ADDR *) aPdInputData), nEscAddrInputData, nPdInputSize );
 802092a:	4b06      	ldr	r3, [pc, #24]	; (8020944 <PDO_InputMapping+0x24>)
 802092c:	881a      	ldrh	r2, [r3, #0]
 802092e:	4b06      	ldr	r3, [pc, #24]	; (8020948 <PDO_InputMapping+0x28>)
 8020930:	881b      	ldrh	r3, [r3, #0]
 8020932:	4803      	ldr	r0, [pc, #12]	; (8020940 <PDO_InputMapping+0x20>)
 8020934:	4611      	mov	r1, r2
 8020936:	461a      	mov	r2, r3
 8020938:	f7ff ffc4 	bl	80208c4 <HW_EscWriteIsr>
}
 802093c:	bd80      	pop	{r7, pc}
 802093e:	bf00      	nop
 8020940:	1fff24e4 	.word	0x1fff24e4
 8020944:	1fff2584 	.word	0x1fff2584
 8020948:	1fff256c 	.word	0x1fff256c

0802094c <PDO_OutputMapping>:
\brief    This function will copies the outputs from the ESC memory to the local memory
          to the hardware. This function is only called in case of an SM2 
          (output process data) event.
*////////////////////////////////////////////////////////////////////////////////////////
void PDO_OutputMapping(void)
{
 802094c:	b580      	push	{r7, lr}
 802094e:	af00      	add	r7, sp, #0

    HW_EscReadIsr(((MEM_ADDR *)aPdOutputData), nEscAddrOutputData, nPdOutputSize );
 8020950:	4b06      	ldr	r3, [pc, #24]	; (802096c <PDO_OutputMapping+0x20>)
 8020952:	881a      	ldrh	r2, [r3, #0]
 8020954:	4b06      	ldr	r3, [pc, #24]	; (8020970 <PDO_OutputMapping+0x24>)
 8020956:	881b      	ldrh	r3, [r3, #0]
 8020958:	4806      	ldr	r0, [pc, #24]	; (8020974 <PDO_OutputMapping+0x28>)
 802095a:	4611      	mov	r1, r2
 802095c:	461a      	mov	r2, r3
 802095e:	f7ff ff89 	bl	8020874 <HW_EscReadIsr>

    APPL_OutputMapping((UINT16*) aPdOutputData);
 8020962:	4804      	ldr	r0, [pc, #16]	; (8020974 <PDO_OutputMapping+0x28>)
 8020964:	f7ff fcda 	bl	802031c <APPL_OutputMapping>
}
 8020968:	bd80      	pop	{r7, pc}
 802096a:	bf00      	nop
 802096c:	1fff254e 	.word	0x1fff254e
 8020970:	1fff2542 	.word	0x1fff2542
 8020974:	1fff249c 	.word	0x1fff249c

08020978 <ECAT_CheckTimer>:
 \brief interrupts. In this case a local timer register is checked every ECAT_Main cycle
 \brief and the function is triggered if 1 ms is elapsed
 *////////////////////////////////////////////////////////////////////////////////////////

void ECAT_CheckTimer(void)
{
 8020978:	b580      	push	{r7, lr}
 802097a:	af00      	add	r7, sp, #0
    if(sSyncManOutPar.u32CycleTime == 0)
 802097c:	4b0f      	ldr	r3, [pc, #60]	; (80209bc <ECAT_CheckTimer+0x44>)
 802097e:	685b      	ldr	r3, [r3, #4]
 8020980:	2b00      	cmp	r3, #0
 8020982:	d105      	bne.n	8020990 <ECAT_CheckTimer+0x18>
    {
        u16BusCycleCntMs++;
 8020984:	4b0e      	ldr	r3, [pc, #56]	; (80209c0 <ECAT_CheckTimer+0x48>)
 8020986:	881b      	ldrh	r3, [r3, #0]
 8020988:	3301      	adds	r3, #1
 802098a:	b29a      	uxth	r2, r3
 802098c:	4b0c      	ldr	r3, [pc, #48]	; (80209c0 <ECAT_CheckTimer+0x48>)
 802098e:	801a      	strh	r2, [r3, #0]
    }

    /*decrement the state transition timeout counter*/
    if(bEcatWaitForAlControlRes &&  (EsmTimeoutCounter > 0))
 8020990:	4b0c      	ldr	r3, [pc, #48]	; (80209c4 <ECAT_CheckTimer+0x4c>)
 8020992:	781b      	ldrb	r3, [r3, #0]
 8020994:	2b00      	cmp	r3, #0
 8020996:	d00d      	beq.n	80209b4 <ECAT_CheckTimer+0x3c>
 8020998:	4b0b      	ldr	r3, [pc, #44]	; (80209c8 <ECAT_CheckTimer+0x50>)
 802099a:	881b      	ldrh	r3, [r3, #0]
 802099c:	b21b      	sxth	r3, r3
 802099e:	2b00      	cmp	r3, #0
 80209a0:	dd08      	ble.n	80209b4 <ECAT_CheckTimer+0x3c>
    {
        EsmTimeoutCounter--;
 80209a2:	4b09      	ldr	r3, [pc, #36]	; (80209c8 <ECAT_CheckTimer+0x50>)
 80209a4:	881b      	ldrh	r3, [r3, #0]
 80209a6:	b29b      	uxth	r3, r3
 80209a8:	b29b      	uxth	r3, r3
 80209aa:	3b01      	subs	r3, #1
 80209ac:	b29b      	uxth	r3, r3
 80209ae:	b29a      	uxth	r2, r3
 80209b0:	4b05      	ldr	r3, [pc, #20]	; (80209c8 <ECAT_CheckTimer+0x50>)
 80209b2:	801a      	strh	r2, [r3, #0]
    }



    DC_CheckWatchdog();
 80209b4:	f002 f868 	bl	8022a88 <DC_CheckWatchdog>
}
 80209b8:	bd80      	pop	{r7, pc}
 80209ba:	bf00      	nop
 80209bc:	1fff2860 	.word	0x1fff2860
 80209c0:	1fff2534 	.word	0x1fff2534
 80209c4:	1fff256a 	.word	0x1fff256a
 80209c8:	1fff2574 	.word	0x1fff2574

080209cc <HandleBusCycleCalculation>:
/////////////////////////////////////////////////////////////////////////////////////////
/**
 \brief    This function is called from the PDI_Isr and is used to calculate the bus cycle time 
  *////////////////////////////////////////////////////////////////////////////////////////
void HandleBusCycleCalculation(void)
{
 80209cc:	b580      	push	{r7, lr}
 80209ce:	b084      	sub	sp, #16
 80209d0:	af00      	add	r7, sp, #0
    /*calculate the cycle time if device is in SM Sync mode and Cycle time was not calculated yet*/
    if ( !bDcSyncActive && bEscIntEnabled)
 80209d2:	4b2c      	ldr	r3, [pc, #176]	; (8020a84 <HandleBusCycleCalculation+0xb8>)
 80209d4:	781b      	ldrb	r3, [r3, #0]
 80209d6:	f083 0301 	eor.w	r3, r3, #1
 80209da:	b2db      	uxtb	r3, r3
 80209dc:	2b00      	cmp	r3, #0
 80209de:	d04e      	beq.n	8020a7e <HandleBusCycleCalculation+0xb2>
 80209e0:	4b29      	ldr	r3, [pc, #164]	; (8020a88 <HandleBusCycleCalculation+0xbc>)
 80209e2:	781b      	ldrb	r3, [r3, #0]
 80209e4:	2b00      	cmp	r3, #0
 80209e6:	d04a      	beq.n	8020a7e <HandleBusCycleCalculation+0xb2>
    {
        BOOL bTiggerCalcCycleTime = FALSE;
 80209e8:	2300      	movs	r3, #0
 80209ea:	73fb      	strb	r3, [r7, #15]

        if(sSyncManOutPar.u16GetCycleTime == 1)
 80209ec:	4b27      	ldr	r3, [pc, #156]	; (8020a8c <HandleBusCycleCalculation+0xc0>)
 80209ee:	8b9b      	ldrh	r3, [r3, #28]
 80209f0:	2b01      	cmp	r3, #1
 80209f2:	d101      	bne.n	80209f8 <HandleBusCycleCalculation+0x2c>
            bTiggerCalcCycleTime = TRUE;
 80209f4:	2301      	movs	r3, #1
 80209f6:	73fb      	strb	r3, [r7, #15]
        if(bTiggerCalcCycleTime)
 80209f8:	7bfb      	ldrb	r3, [r7, #15]
 80209fa:	2b00      	cmp	r3, #0
 80209fc:	d017      	beq.n	8020a2e <HandleBusCycleCalculation+0x62>
        {
            /*get bus cycle time triggered */
            sSyncManOutPar.u32CycleTime = 0;
 80209fe:	4b23      	ldr	r3, [pc, #140]	; (8020a8c <HandleBusCycleCalculation+0xc0>)
 8020a00:	2200      	movs	r2, #0
 8020a02:	605a      	str	r2, [r3, #4]
            sSyncManOutPar.u16GetCycleTime = 0;
 8020a04:	4b21      	ldr	r3, [pc, #132]	; (8020a8c <HandleBusCycleCalculation+0xc0>)
 8020a06:	2200      	movs	r2, #0
 8020a08:	839a      	strh	r2, [r3, #28]

            sSyncManInPar.u32CycleTime  = 0;
 8020a0a:	4b21      	ldr	r3, [pc, #132]	; (8020a90 <HandleBusCycleCalculation+0xc4>)
 8020a0c:	2200      	movs	r2, #0
 8020a0e:	605a      	str	r2, [r3, #4]
            sSyncManInPar.u16GetCycleTime = 0;
 8020a10:	4b1f      	ldr	r3, [pc, #124]	; (8020a90 <HandleBusCycleCalculation+0xc4>)
 8020a12:	2200      	movs	r2, #0
 8020a14:	839a      	strh	r2, [r3, #28]
            
            u16BusCycleCntMs = 0;
 8020a16:	4b1f      	ldr	r3, [pc, #124]	; (8020a94 <HandleBusCycleCalculation+0xc8>)
 8020a18:	2200      	movs	r2, #0
 8020a1a:	801a      	strh	r2, [r3, #0]
            bCycleTimeMeasurementStarted = TRUE;
 8020a1c:	4b1e      	ldr	r3, [pc, #120]	; (8020a98 <HandleBusCycleCalculation+0xcc>)
 8020a1e:	2201      	movs	r2, #1
 8020a20:	701a      	strb	r2, [r3, #0]
            StartTimerCnt = (UINT32) HW_GetTimer();
 8020a22:	f007 fa43 	bl	8027eac <HW_GetTimer>
 8020a26:	4602      	mov	r2, r0
 8020a28:	4b1c      	ldr	r3, [pc, #112]	; (8020a9c <HandleBusCycleCalculation+0xd0>)
 8020a2a:	601a      	str	r2, [r3, #0]
 8020a2c:	e027      	b.n	8020a7e <HandleBusCycleCalculation+0xb2>
        }
        else
        {
            if(bCycleTimeMeasurementStarted == TRUE)
 8020a2e:	4b1a      	ldr	r3, [pc, #104]	; (8020a98 <HandleBusCycleCalculation+0xcc>)
 8020a30:	781b      	ldrb	r3, [r3, #0]
 8020a32:	2b00      	cmp	r3, #0
 8020a34:	d023      	beq.n	8020a7e <HandleBusCycleCalculation+0xb2>
            {
                UINT32 CurTimerCnt = (UINT32)HW_GetTimer();
 8020a36:	f007 fa39 	bl	8027eac <HW_GetTimer>
 8020a3a:	60b8      	str	r0, [r7, #8]
/*ECATCHANGE_START(V5.11) ECAT3*/
                UINT32 CalcCycleTime = 0;
 8020a3c:	2300      	movs	r3, #0
 8020a3e:	607b      	str	r3, [r7, #4]


#if ECAT_TIMER_INC_P_MS
                CalcCycleTime = (UINT32)u16BusCycleCntMs * 1000000 + (((INT32)(CurTimerCnt-StartTimerCnt))*1000000/ECAT_TIMER_INC_P_MS);    //get elapsed cycle time in ns
 8020a40:	4b14      	ldr	r3, [pc, #80]	; (8020a94 <HandleBusCycleCalculation+0xc8>)
 8020a42:	881b      	ldrh	r3, [r3, #0]
 8020a44:	461a      	mov	r2, r3
 8020a46:	4b16      	ldr	r3, [pc, #88]	; (8020aa0 <HandleBusCycleCalculation+0xd4>)
 8020a48:	fb03 f302 	mul.w	r3, r3, r2
 8020a4c:	4a13      	ldr	r2, [pc, #76]	; (8020a9c <HandleBusCycleCalculation+0xd0>)
 8020a4e:	6812      	ldr	r2, [r2, #0]
 8020a50:	68b9      	ldr	r1, [r7, #8]
 8020a52:	1a8a      	subs	r2, r1, r2
 8020a54:	4611      	mov	r1, r2
 8020a56:	4a12      	ldr	r2, [pc, #72]	; (8020aa0 <HandleBusCycleCalculation+0xd4>)
 8020a58:	fb02 f201 	mul.w	r2, r2, r1
 8020a5c:	4413      	add	r3, r2
 8020a5e:	607b      	str	r3, [r7, #4]
#endif

/*ECATCHANGE_START(V5.11) ECAT4*/
                sSyncManOutPar.u32CycleTime = CalcCycleTime;
 8020a60:	4a0a      	ldr	r2, [pc, #40]	; (8020a8c <HandleBusCycleCalculation+0xc0>)
 8020a62:	687b      	ldr	r3, [r7, #4]
 8020a64:	6053      	str	r3, [r2, #4]
/*ECATCHANGE_END(V5.11) ECAT4*/
                sSyncManInPar.u32CycleTime  = CalcCycleTime;
 8020a66:	4a0a      	ldr	r2, [pc, #40]	; (8020a90 <HandleBusCycleCalculation+0xc4>)
 8020a68:	687b      	ldr	r3, [r7, #4]
 8020a6a:	6053      	str	r3, [r2, #4]
                u16BusCycleCntMs = 0;
 8020a6c:	4b09      	ldr	r3, [pc, #36]	; (8020a94 <HandleBusCycleCalculation+0xc8>)
 8020a6e:	2200      	movs	r2, #0
 8020a70:	801a      	strh	r2, [r3, #0]
                StartTimerCnt = 0;
 8020a72:	4b0a      	ldr	r3, [pc, #40]	; (8020a9c <HandleBusCycleCalculation+0xd0>)
 8020a74:	2200      	movs	r2, #0
 8020a76:	601a      	str	r2, [r3, #0]
                bCycleTimeMeasurementStarted = FALSE;
 8020a78:	4b07      	ldr	r3, [pc, #28]	; (8020a98 <HandleBusCycleCalculation+0xcc>)
 8020a7a:	2200      	movs	r2, #0
 8020a7c:	701a      	strb	r2, [r3, #0]
/*ECATCHANGE_END(V5.11) ECAT3*/
            /* CiA402 Motion controller cycle time is only set if DC Synchronisation is active*/
            }
        }
    }
}
 8020a7e:	3710      	adds	r7, #16
 8020a80:	46bd      	mov	sp, r7
 8020a82:	bd80      	pop	{r7, pc}
 8020a84:	1fff2576 	.word	0x1fff2576
 8020a88:	1fff257d 	.word	0x1fff257d
 8020a8c:	1fff2860 	.word	0x1fff2860
 8020a90:	1fff281c 	.word	0x1fff281c
 8020a94:	1fff2534 	.word	0x1fff2534
 8020a98:	1fff248c 	.word	0x1fff248c
 8020a9c:	1fff2488 	.word	0x1fff2488
 8020aa0:	000f4240 	.word	0x000f4240

08020aa4 <PDI_Isr>:
/*ECATCHANGE_END(V5.11) ECAT6*/

void PDI_Isr(void)
{
 8020aa4:	b580      	push	{r7, lr}
 8020aa6:	b082      	sub	sp, #8
 8020aa8:	af00      	add	r7, sp, #0
    if(bEscIntEnabled)
 8020aaa:	4b49      	ldr	r3, [pc, #292]	; (8020bd0 <PDI_Isr+0x12c>)
 8020aac:	781b      	ldrb	r3, [r3, #0]
 8020aae:	2b00      	cmp	r3, #0
 8020ab0:	f000 808a 	beq.w	8020bc8 <PDI_Isr+0x124>
    {
        /* get the AL event register */
        UINT16  ALEvent = HW_GetALEventRegister_Isr();
 8020ab4:	f7ff ff20 	bl	80208f8 <HW_GetALEventRegister_Isr>
 8020ab8:	4603      	mov	r3, r0
 8020aba:	80fb      	strh	r3, [r7, #6]
        ALEvent = SWAPWORD(ALEvent);

        if ( ALEvent & PROCESS_OUTPUT_EVENT )
 8020abc:	88fb      	ldrh	r3, [r7, #6]
 8020abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8020ac2:	2b00      	cmp	r3, #0
 8020ac4:	d037      	beq.n	8020b36 <PDI_Isr+0x92>
        {
            if(bDcRunning && bDcSyncActive)
 8020ac6:	4b43      	ldr	r3, [pc, #268]	; (8020bd4 <PDI_Isr+0x130>)
 8020ac8:	781b      	ldrb	r3, [r3, #0]
 8020aca:	2b00      	cmp	r3, #0
 8020acc:	d006      	beq.n	8020adc <PDI_Isr+0x38>
 8020ace:	4b42      	ldr	r3, [pc, #264]	; (8020bd8 <PDI_Isr+0x134>)
 8020ad0:	781b      	ldrb	r3, [r3, #0]
 8020ad2:	2b00      	cmp	r3, #0
 8020ad4:	d002      	beq.n	8020adc <PDI_Isr+0x38>
            {
                /* Reset SM/Sync0 counter. Will be incremented on every Sync0 event*/
                u16SmSync0Counter = 0;
 8020ad6:	4b41      	ldr	r3, [pc, #260]	; (8020bdc <PDI_Isr+0x138>)
 8020ad8:	2200      	movs	r2, #0
 8020ada:	801a      	strh	r2, [r3, #0]
            }
            if(sSyncManOutPar.u16SmEventMissedCounter > 0)
 8020adc:	4b40      	ldr	r3, [pc, #256]	; (8020be0 <PDI_Isr+0x13c>)
 8020ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020ae0:	2b00      	cmp	r3, #0
 8020ae2:	d005      	beq.n	8020af0 <PDI_Isr+0x4c>
                sSyncManOutPar.u16SmEventMissedCounter--;
 8020ae4:	4b3e      	ldr	r3, [pc, #248]	; (8020be0 <PDI_Isr+0x13c>)
 8020ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020ae8:	3b01      	subs	r3, #1
 8020aea:	b29a      	uxth	r2, r3
 8020aec:	4b3c      	ldr	r3, [pc, #240]	; (8020be0 <PDI_Isr+0x13c>)
 8020aee:	851a      	strh	r2, [r3, #40]	; 0x28


/*ECATCHANGE_START(V5.11) ECAT6*/
            //calculate the bus cycle time if required
            HandleBusCycleCalculation();
 8020af0:	f7ff ff6c 	bl	80209cc <HandleBusCycleCalculation>
/*ECATCHANGE_END(V5.11) ECAT6*/

        /* Outputs were updated, set flag for watchdog monitoring */
        bEcatFirstOutputsReceived = TRUE;
 8020af4:	4b3b      	ldr	r3, [pc, #236]	; (8020be4 <PDI_Isr+0x140>)
 8020af6:	2201      	movs	r2, #1
 8020af8:	701a      	strb	r2, [r3, #0]


        /*
            handle output process data event
        */
        if ( bEcatOutputUpdateRunning )
 8020afa:	4b3b      	ldr	r3, [pc, #236]	; (8020be8 <PDI_Isr+0x144>)
 8020afc:	781b      	ldrb	r3, [r3, #0]
 8020afe:	2b00      	cmp	r3, #0
 8020b00:	d002      	beq.n	8020b08 <PDI_Isr+0x64>
        {
            /* slave is in OP, update the outputs */
            PDO_OutputMapping();
 8020b02:	f7ff ff23 	bl	802094c <PDO_OutputMapping>
 8020b06:	e016      	b.n	8020b36 <PDI_Isr+0x92>
        }
        else
        {
            /* Just acknowledge the process data event in the INIT,PreOP and SafeOP state */
            HW_EscReadByteIsr(u8dummy,nEscAddrOutputData);
 8020b08:	4b38      	ldr	r3, [pc, #224]	; (8020bec <PDI_Isr+0x148>)
 8020b0a:	881b      	ldrh	r3, [r3, #0]
 8020b0c:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8020b10:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8020b14:	781b      	ldrb	r3, [r3, #0]
 8020b16:	b2da      	uxtb	r2, r3
 8020b18:	4b35      	ldr	r3, [pc, #212]	; (8020bf0 <PDI_Isr+0x14c>)
 8020b1a:	701a      	strb	r2, [r3, #0]
            HW_EscReadByteIsr(u8dummy,(nEscAddrOutputData+nPdOutputSize-1));
 8020b1c:	4b33      	ldr	r3, [pc, #204]	; (8020bec <PDI_Isr+0x148>)
 8020b1e:	881b      	ldrh	r3, [r3, #0]
 8020b20:	461a      	mov	r2, r3
 8020b22:	4b34      	ldr	r3, [pc, #208]	; (8020bf4 <PDI_Isr+0x150>)
 8020b24:	881b      	ldrh	r3, [r3, #0]
 8020b26:	4413      	add	r3, r2
 8020b28:	461a      	mov	r2, r3
 8020b2a:	4b33      	ldr	r3, [pc, #204]	; (8020bf8 <PDI_Isr+0x154>)
 8020b2c:	4413      	add	r3, r2
 8020b2e:	781b      	ldrb	r3, [r3, #0]
 8020b30:	b2da      	uxtb	r2, r3
 8020b32:	4b2f      	ldr	r3, [pc, #188]	; (8020bf0 <PDI_Isr+0x14c>)
 8020b34:	701a      	strb	r2, [r3, #0]
        }
        }

/*ECATCHANGE_START(V5.11) ECAT4*/
        if (( ALEvent & PROCESS_INPUT_EVENT ) && (nPdOutputSize == 0))
 8020b36:	88fb      	ldrh	r3, [r7, #6]
 8020b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8020b3c:	2b00      	cmp	r3, #0
 8020b3e:	d005      	beq.n	8020b4c <PDI_Isr+0xa8>
 8020b40:	4b2c      	ldr	r3, [pc, #176]	; (8020bf4 <PDI_Isr+0x150>)
 8020b42:	881b      	ldrh	r3, [r3, #0]
 8020b44:	2b00      	cmp	r3, #0
 8020b46:	d101      	bne.n	8020b4c <PDI_Isr+0xa8>
        {
            //calculate the bus cycle time if required
            HandleBusCycleCalculation();
 8020b48:	f7ff ff40 	bl	80209cc <HandleBusCycleCalculation>
/*ECATCHANGE_END(V5.11) ECAT4*/

        /*
            Call ECAT_Application() in SM Sync mode
        */
        if (sSyncManOutPar.u16SyncType == SYNCTYPE_SM_SYNCHRON)
 8020b4c:	4b24      	ldr	r3, [pc, #144]	; (8020be0 <PDI_Isr+0x13c>)
 8020b4e:	885b      	ldrh	r3, [r3, #2]
 8020b50:	2b01      	cmp	r3, #1
 8020b52:	d101      	bne.n	8020b58 <PDI_Isr+0xb4>
        {
            /* The Application is synchronized to process data Sync Manager event*/
            ECAT_Application();
 8020b54:	f000 f9ba 	bl	8020ecc <ECAT_Application>
        }

    if ( bEcatInputUpdateRunning 
 8020b58:	4b28      	ldr	r3, [pc, #160]	; (8020bfc <PDI_Isr+0x158>)
 8020b5a:	781b      	ldrb	r3, [r3, #0]
 8020b5c:	2b00      	cmp	r3, #0
 8020b5e:	d009      	beq.n	8020b74 <PDI_Isr+0xd0>
/*ECATCHANGE_START(V5.11) ESM7*/
       && ((sSyncManInPar.u16SyncType == SYNCTYPE_SM_SYNCHRON) || (sSyncManInPar.u16SyncType == SYNCTYPE_SM2_SYNCHRON))
 8020b60:	4b27      	ldr	r3, [pc, #156]	; (8020c00 <PDI_Isr+0x15c>)
 8020b62:	885b      	ldrh	r3, [r3, #2]
 8020b64:	2b01      	cmp	r3, #1
 8020b66:	d003      	beq.n	8020b70 <PDI_Isr+0xcc>
 8020b68:	4b25      	ldr	r3, [pc, #148]	; (8020c00 <PDI_Isr+0x15c>)
 8020b6a:	885b      	ldrh	r3, [r3, #2]
 8020b6c:	2b22      	cmp	r3, #34	; 0x22
 8020b6e:	d101      	bne.n	8020b74 <PDI_Isr+0xd0>
/*ECATCHANGE_END(V5.11) ESM7*/
        )
    {
        /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
        PDO_InputMapping();
 8020b70:	f7ff fed6 	bl	8020920 <PDO_InputMapping>

    /*
      Check if cycle exceed
    */
    /*if next SM event was triggered during runtime increment cycle exceed counter*/
    ALEvent = HW_GetALEventRegister_Isr();
 8020b74:	f7ff fec0 	bl	80208f8 <HW_GetALEventRegister_Isr>
 8020b78:	4603      	mov	r3, r0
 8020b7a:	80fb      	strh	r3, [r7, #6]
    ALEvent = SWAPWORD(ALEvent);

    if ( ALEvent & PROCESS_OUTPUT_EVENT )
 8020b7c:	88fb      	ldrh	r3, [r7, #6]
 8020b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8020b82:	2b00      	cmp	r3, #0
 8020b84:	d020      	beq.n	8020bc8 <PDI_Isr+0x124>
    {
        sSyncManOutPar.u16CycleExceededCounter++;
 8020b86:	4b16      	ldr	r3, [pc, #88]	; (8020be0 <PDI_Isr+0x13c>)
 8020b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8020b8a:	3301      	adds	r3, #1
 8020b8c:	b29a      	uxth	r2, r3
 8020b8e:	4b14      	ldr	r3, [pc, #80]	; (8020be0 <PDI_Isr+0x13c>)
 8020b90:	855a      	strh	r2, [r3, #42]	; 0x2a
        sSyncManInPar.u16CycleExceededCounter = sSyncManOutPar.u16CycleExceededCounter;
 8020b92:	4b13      	ldr	r3, [pc, #76]	; (8020be0 <PDI_Isr+0x13c>)
 8020b94:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8020b96:	4b1a      	ldr	r3, [pc, #104]	; (8020c00 <PDI_Isr+0x15c>)
 8020b98:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Acknowledge the process data event*/
            HW_EscReadByteIsr(u8dummy,nEscAddrOutputData);
 8020b9a:	4b14      	ldr	r3, [pc, #80]	; (8020bec <PDI_Isr+0x148>)
 8020b9c:	881b      	ldrh	r3, [r3, #0]
 8020b9e:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8020ba2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8020ba6:	781b      	ldrb	r3, [r3, #0]
 8020ba8:	b2da      	uxtb	r2, r3
 8020baa:	4b11      	ldr	r3, [pc, #68]	; (8020bf0 <PDI_Isr+0x14c>)
 8020bac:	701a      	strb	r2, [r3, #0]
            HW_EscReadByteIsr(u8dummy,(nEscAddrOutputData+nPdOutputSize-1));
 8020bae:	4b0f      	ldr	r3, [pc, #60]	; (8020bec <PDI_Isr+0x148>)
 8020bb0:	881b      	ldrh	r3, [r3, #0]
 8020bb2:	461a      	mov	r2, r3
 8020bb4:	4b0f      	ldr	r3, [pc, #60]	; (8020bf4 <PDI_Isr+0x150>)
 8020bb6:	881b      	ldrh	r3, [r3, #0]
 8020bb8:	4413      	add	r3, r2
 8020bba:	461a      	mov	r2, r3
 8020bbc:	4b0e      	ldr	r3, [pc, #56]	; (8020bf8 <PDI_Isr+0x154>)
 8020bbe:	4413      	add	r3, r2
 8020bc0:	781b      	ldrb	r3, [r3, #0]
 8020bc2:	b2da      	uxtb	r2, r3
 8020bc4:	4b0a      	ldr	r3, [pc, #40]	; (8020bf0 <PDI_Isr+0x14c>)
 8020bc6:	701a      	strb	r2, [r3, #0]
    }
    } //if(bEscIntEnabled)
}
 8020bc8:	3708      	adds	r7, #8
 8020bca:	46bd      	mov	sp, r7
 8020bcc:	bd80      	pop	{r7, pc}
 8020bce:	bf00      	nop
 8020bd0:	1fff257d 	.word	0x1fff257d
 8020bd4:	1fff255c 	.word	0x1fff255c
 8020bd8:	1fff2576 	.word	0x1fff2576
 8020bdc:	1fff2580 	.word	0x1fff2580
 8020be0:	1fff2860 	.word	0x1fff2860
 8020be4:	1fff2572 	.word	0x1fff2572
 8020be8:	1fff2577 	.word	0x1fff2577
 8020bec:	1fff254e 	.word	0x1fff254e
 8020bf0:	1fff2558 	.word	0x1fff2558
 8020bf4:	1fff2542 	.word	0x1fff2542
 8020bf8:	5400ffff 	.word	0x5400ffff
 8020bfc:	1fff257c 	.word	0x1fff257c
 8020c00:	1fff281c 	.word	0x1fff281c

08020c04 <Sync0_Isr>:

void Sync0_Isr(void)
{
 8020c04:	b580      	push	{r7, lr}
 8020c06:	b082      	sub	sp, #8
 8020c08:	af00      	add	r7, sp, #0
     Sync0WdCounter = 0;
 8020c0a:	4b47      	ldr	r3, [pc, #284]	; (8020d28 <Sync0_Isr+0x124>)
 8020c0c:	2200      	movs	r2, #0
 8020c0e:	801a      	strh	r2, [r3, #0]

    if(bDcSyncActive)
 8020c10:	4b46      	ldr	r3, [pc, #280]	; (8020d2c <Sync0_Isr+0x128>)
 8020c12:	781b      	ldrb	r3, [r3, #0]
 8020c14:	2b00      	cmp	r3, #0
 8020c16:	f000 8083 	beq.w	8020d20 <Sync0_Isr+0x11c>
    {

        if ( bEcatInputUpdateRunning )
 8020c1a:	4b45      	ldr	r3, [pc, #276]	; (8020d30 <Sync0_Isr+0x12c>)
 8020c1c:	781b      	ldrb	r3, [r3, #0]
 8020c1e:	2b00      	cmp	r3, #0
 8020c20:	d005      	beq.n	8020c2e <Sync0_Isr+0x2a>
        {
            LatchInputSync0Counter++;
 8020c22:	4b44      	ldr	r3, [pc, #272]	; (8020d34 <Sync0_Isr+0x130>)
 8020c24:	881b      	ldrh	r3, [r3, #0]
 8020c26:	3301      	adds	r3, #1
 8020c28:	b29a      	uxth	r2, r3
 8020c2a:	4b42      	ldr	r3, [pc, #264]	; (8020d34 <Sync0_Isr+0x130>)
 8020c2c:	801a      	strh	r2, [r3, #0]
        }

/*ECATCHANGE_START(V5.11) ECAT4*/
        if(u16SmSync0Value > 0)
 8020c2e:	4b42      	ldr	r3, [pc, #264]	; (8020d38 <Sync0_Isr+0x134>)
 8020c30:	881b      	ldrh	r3, [r3, #0]
 8020c32:	2b00      	cmp	r3, #0
 8020c34:	d04e      	beq.n	8020cd4 <Sync0_Isr+0xd0>
        {
           /* Check if Sm-Sync sequence is invalid */
           if (u16SmSync0Counter > u16SmSync0Value)
 8020c36:	4b41      	ldr	r3, [pc, #260]	; (8020d3c <Sync0_Isr+0x138>)
 8020c38:	881a      	ldrh	r2, [r3, #0]
 8020c3a:	4b3f      	ldr	r3, [pc, #252]	; (8020d38 <Sync0_Isr+0x134>)
 8020c3c:	881b      	ldrh	r3, [r3, #0]
 8020c3e:	429a      	cmp	r2, r3
 8020c40:	d923      	bls.n	8020c8a <Sync0_Isr+0x86>
           {
              /*ECATCHANGE_START(V5.11) COE3*/
              if ((nPdOutputSize > 0) && (sSyncManOutPar.u16SmEventMissedCounter <= sErrorSettings.u16SyncErrorCounterLimit))
 8020c42:	4b3f      	ldr	r3, [pc, #252]	; (8020d40 <Sync0_Isr+0x13c>)
 8020c44:	881b      	ldrh	r3, [r3, #0]
 8020c46:	2b00      	cmp	r3, #0
 8020c48:	d00b      	beq.n	8020c62 <Sync0_Isr+0x5e>
 8020c4a:	4b3e      	ldr	r3, [pc, #248]	; (8020d44 <Sync0_Isr+0x140>)
 8020c4c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020c4e:	4b3e      	ldr	r3, [pc, #248]	; (8020d48 <Sync0_Isr+0x144>)
 8020c50:	891b      	ldrh	r3, [r3, #8]
 8020c52:	429a      	cmp	r2, r3
 8020c54:	d805      	bhi.n	8020c62 <Sync0_Isr+0x5e>
              {
                 /*ECATCHANGE_END(V5.11) COE3*/
                 sSyncManOutPar.u16SmEventMissedCounter = sSyncManOutPar.u16SmEventMissedCounter + 3;
 8020c56:	4b3b      	ldr	r3, [pc, #236]	; (8020d44 <Sync0_Isr+0x140>)
 8020c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020c5a:	3303      	adds	r3, #3
 8020c5c:	b29a      	uxth	r2, r3
 8020c5e:	4b39      	ldr	r3, [pc, #228]	; (8020d44 <Sync0_Isr+0x140>)
 8020c60:	851a      	strh	r2, [r3, #40]	; 0x28
              }

/*ECATCHANGE_START(V5.11) COE3*/
           if ((nPdInputSize > 0) && (nPdOutputSize == 0) && (sSyncManInPar.u16SmEventMissedCounter <= sErrorSettings.u16SyncErrorCounterLimit))
 8020c62:	4b3a      	ldr	r3, [pc, #232]	; (8020d4c <Sync0_Isr+0x148>)
 8020c64:	881b      	ldrh	r3, [r3, #0]
 8020c66:	2b00      	cmp	r3, #0
 8020c68:	d00f      	beq.n	8020c8a <Sync0_Isr+0x86>
 8020c6a:	4b35      	ldr	r3, [pc, #212]	; (8020d40 <Sync0_Isr+0x13c>)
 8020c6c:	881b      	ldrh	r3, [r3, #0]
 8020c6e:	2b00      	cmp	r3, #0
 8020c70:	d10b      	bne.n	8020c8a <Sync0_Isr+0x86>
 8020c72:	4b37      	ldr	r3, [pc, #220]	; (8020d50 <Sync0_Isr+0x14c>)
 8020c74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020c76:	4b34      	ldr	r3, [pc, #208]	; (8020d48 <Sync0_Isr+0x144>)
 8020c78:	891b      	ldrh	r3, [r3, #8]
 8020c7a:	429a      	cmp	r2, r3
 8020c7c:	d805      	bhi.n	8020c8a <Sync0_Isr+0x86>
           {
/*ECATCHANGE_END(V5.11) COE3*/
               sSyncManInPar.u16SmEventMissedCounter = sSyncManInPar.u16SmEventMissedCounter + 3;
 8020c7e:	4b34      	ldr	r3, [pc, #208]	; (8020d50 <Sync0_Isr+0x14c>)
 8020c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020c82:	3303      	adds	r3, #3
 8020c84:	b29a      	uxth	r2, r3
 8020c86:	4b32      	ldr	r3, [pc, #200]	; (8020d50 <Sync0_Isr+0x14c>)
 8020c88:	851a      	strh	r2, [r3, #40]	; 0x28
           }

           } // if (u16SmSync0Counter > u16SmSync0Value)

           
           if ((nPdOutputSize == 0) && (nPdInputSize > 0))
 8020c8a:	4b2d      	ldr	r3, [pc, #180]	; (8020d40 <Sync0_Isr+0x13c>)
 8020c8c:	881b      	ldrh	r3, [r3, #0]
 8020c8e:	2b00      	cmp	r3, #0
 8020c90:	d11a      	bne.n	8020cc8 <Sync0_Isr+0xc4>
 8020c92:	4b2e      	ldr	r3, [pc, #184]	; (8020d4c <Sync0_Isr+0x148>)
 8020c94:	881b      	ldrh	r3, [r3, #0]
 8020c96:	2b00      	cmp	r3, #0
 8020c98:	d016      	beq.n	8020cc8 <Sync0_Isr+0xc4>
           {
              /* Input only with DC, check if the last input data was read*/
              UINT16  ALEvent = HW_GetALEventRegister_Isr();
 8020c9a:	f7ff fe2d 	bl	80208f8 <HW_GetALEventRegister_Isr>
 8020c9e:	4603      	mov	r3, r0
 8020ca0:	80fb      	strh	r3, [r7, #6]
              ALEvent = SWAPWORD(ALEvent);

              if ((ALEvent & PROCESS_INPUT_EVENT) == 0)
 8020ca2:	88fb      	ldrh	r3, [r7, #6]
 8020ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8020ca8:	2b00      	cmp	r3, #0
 8020caa:	d106      	bne.n	8020cba <Sync0_Isr+0xb6>
              {
                 /* no input data was read by the master, increment the sm missed counter*/
                 u16SmSync0Counter++;
 8020cac:	4b23      	ldr	r3, [pc, #140]	; (8020d3c <Sync0_Isr+0x138>)
 8020cae:	881b      	ldrh	r3, [r3, #0]
 8020cb0:	3301      	adds	r3, #1
 8020cb2:	b29a      	uxth	r2, r3
 8020cb4:	4b21      	ldr	r3, [pc, #132]	; (8020d3c <Sync0_Isr+0x138>)
 8020cb6:	801a      	strh	r2, [r3, #0]

           } // if (u16SmSync0Counter > u16SmSync0Value)

           
           if ((nPdOutputSize == 0) && (nPdInputSize > 0))
           {
 8020cb8:	e00c      	b.n	8020cd4 <Sync0_Isr+0xd0>
                 u16SmSync0Counter++;
              }
              else
              {
                 /* Reset SM/Sync0 counter*/
                 u16SmSync0Counter = 0;
 8020cba:	4b20      	ldr	r3, [pc, #128]	; (8020d3c <Sync0_Isr+0x138>)
 8020cbc:	2200      	movs	r2, #0
 8020cbe:	801a      	strh	r2, [r3, #0]

                 sSyncManInPar.u16SmEventMissedCounter = 0;
 8020cc0:	4b23      	ldr	r3, [pc, #140]	; (8020d50 <Sync0_Isr+0x14c>)
 8020cc2:	2200      	movs	r2, #0
 8020cc4:	851a      	strh	r2, [r3, #40]	; 0x28

           } // if (u16SmSync0Counter > u16SmSync0Value)

           
           if ((nPdOutputSize == 0) && (nPdInputSize > 0))
           {
 8020cc6:	e005      	b.n	8020cd4 <Sync0_Isr+0xd0>

              }
           }
           else
           {
              u16SmSync0Counter++;
 8020cc8:	4b1c      	ldr	r3, [pc, #112]	; (8020d3c <Sync0_Isr+0x138>)
 8020cca:	881b      	ldrh	r3, [r3, #0]
 8020ccc:	3301      	adds	r3, #1
 8020cce:	b29a      	uxth	r2, r3
 8020cd0:	4b1a      	ldr	r3, [pc, #104]	; (8020d3c <Sync0_Isr+0x138>)
 8020cd2:	801a      	strh	r2, [r3, #0]
           }
        }//SM -Sync monitoring enabled
/*ECATCHANGE_END(V5.11) ECAT4*/


        if(!bEscIntEnabled && bEcatOutputUpdateRunning)
 8020cd4:	4b1f      	ldr	r3, [pc, #124]	; (8020d54 <Sync0_Isr+0x150>)
 8020cd6:	781b      	ldrb	r3, [r3, #0]
 8020cd8:	f083 0301 	eor.w	r3, r3, #1
 8020cdc:	b2db      	uxtb	r3, r3
 8020cde:	2b00      	cmp	r3, #0
 8020ce0:	d005      	beq.n	8020cee <Sync0_Isr+0xea>
 8020ce2:	4b1d      	ldr	r3, [pc, #116]	; (8020d58 <Sync0_Isr+0x154>)
 8020ce4:	781b      	ldrb	r3, [r3, #0]
 8020ce6:	2b00      	cmp	r3, #0
 8020ce8:	d001      	beq.n	8020cee <Sync0_Isr+0xea>
        {
            /* Output mapping was not done by the PDI ISR */
            PDO_OutputMapping();
 8020cea:	f7ff fe2f 	bl	802094c <PDO_OutputMapping>
        }

        /* Application is synchronized to SYNC0 event*/
        ECAT_Application();
 8020cee:	f000 f8ed 	bl	8020ecc <ECAT_Application>

        if ( bEcatInputUpdateRunning 
 8020cf2:	4b0f      	ldr	r3, [pc, #60]	; (8020d30 <Sync0_Isr+0x12c>)
 8020cf4:	781b      	ldrb	r3, [r3, #0]
 8020cf6:	2b00      	cmp	r3, #0
 8020cf8:	d012      	beq.n	8020d20 <Sync0_Isr+0x11c>
           && (LatchInputSync0Value > 0) && (LatchInputSync0Value == LatchInputSync0Counter) ) /* Inputs shall be latched on a specific Sync0 event */
 8020cfa:	4b18      	ldr	r3, [pc, #96]	; (8020d5c <Sync0_Isr+0x158>)
 8020cfc:	881b      	ldrh	r3, [r3, #0]
 8020cfe:	2b00      	cmp	r3, #0
 8020d00:	d00e      	beq.n	8020d20 <Sync0_Isr+0x11c>
 8020d02:	4b16      	ldr	r3, [pc, #88]	; (8020d5c <Sync0_Isr+0x158>)
 8020d04:	881a      	ldrh	r2, [r3, #0]
 8020d06:	4b0b      	ldr	r3, [pc, #44]	; (8020d34 <Sync0_Isr+0x130>)
 8020d08:	881b      	ldrh	r3, [r3, #0]
 8020d0a:	429a      	cmp	r2, r3
 8020d0c:	d108      	bne.n	8020d20 <Sync0_Isr+0x11c>
        {
            /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
            PDO_InputMapping();
 8020d0e:	f7ff fe07 	bl	8020920 <PDO_InputMapping>

            if(LatchInputSync0Value == 1)
 8020d12:	4b12      	ldr	r3, [pc, #72]	; (8020d5c <Sync0_Isr+0x158>)
 8020d14:	881b      	ldrh	r3, [r3, #0]
 8020d16:	2b01      	cmp	r3, #1
 8020d18:	d102      	bne.n	8020d20 <Sync0_Isr+0x11c>
            {
                /* if inputs are latched on every Sync0 event (otherwise the counter is reset on the next Sync1 event) */
                LatchInputSync0Counter = 0;
 8020d1a:	4b06      	ldr	r3, [pc, #24]	; (8020d34 <Sync0_Isr+0x130>)
 8020d1c:	2200      	movs	r2, #0
 8020d1e:	801a      	strh	r2, [r3, #0]
            }
        }

    }
}
 8020d20:	3708      	adds	r7, #8
 8020d22:	46bd      	mov	sp, r7
 8020d24:	bd80      	pop	{r7, pc}
 8020d26:	bf00      	nop
 8020d28:	1fff2546 	.word	0x1fff2546
 8020d2c:	1fff2576 	.word	0x1fff2576
 8020d30:	1fff257c 	.word	0x1fff257c
 8020d34:	1fff254a 	.word	0x1fff254a
 8020d38:	1fff256e 	.word	0x1fff256e
 8020d3c:	1fff2580 	.word	0x1fff2580
 8020d40:	1fff2542 	.word	0x1fff2542
 8020d44:	1fff2860 	.word	0x1fff2860
 8020d48:	1fff1354 	.word	0x1fff1354
 8020d4c:	1fff256c 	.word	0x1fff256c
 8020d50:	1fff281c 	.word	0x1fff281c
 8020d54:	1fff257d 	.word	0x1fff257d
 8020d58:	1fff2577 	.word	0x1fff2577
 8020d5c:	1fff2568 	.word	0x1fff2568

08020d60 <Sync1_Isr>:

void Sync1_Isr(void)
{
 8020d60:	b580      	push	{r7, lr}
 8020d62:	af00      	add	r7, sp, #0
    Sync1WdCounter = 0;
 8020d64:	4b0a      	ldr	r3, [pc, #40]	; (8020d90 <Sync1_Isr+0x30>)
 8020d66:	2200      	movs	r2, #0
 8020d68:	801a      	strh	r2, [r3, #0]

        if ( bEcatInputUpdateRunning 
 8020d6a:	4b0a      	ldr	r3, [pc, #40]	; (8020d94 <Sync1_Isr+0x34>)
 8020d6c:	781b      	ldrb	r3, [r3, #0]
 8020d6e:	2b00      	cmp	r3, #0
 8020d70:	d009      	beq.n	8020d86 <Sync1_Isr+0x26>
            && (sSyncManInPar.u16SyncType == SYNCTYPE_DCSYNC1)
 8020d72:	4b09      	ldr	r3, [pc, #36]	; (8020d98 <Sync1_Isr+0x38>)
 8020d74:	885b      	ldrh	r3, [r3, #2]
 8020d76:	2b03      	cmp	r3, #3
 8020d78:	d105      	bne.n	8020d86 <Sync1_Isr+0x26>
            && (LatchInputSync0Value == 0)) /* Inputs are latched on Sync1 (LatchInputSync0Value == 0), if LatchInputSync0Value > 0 inputs are latched with Sync0 */
 8020d7a:	4b08      	ldr	r3, [pc, #32]	; (8020d9c <Sync1_Isr+0x3c>)
 8020d7c:	881b      	ldrh	r3, [r3, #0]
 8020d7e:	2b00      	cmp	r3, #0
 8020d80:	d101      	bne.n	8020d86 <Sync1_Isr+0x26>
        {
            /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
            PDO_InputMapping();
 8020d82:	f7ff fdcd 	bl	8020920 <PDO_InputMapping>
        }

        /* Reset Sync0 latch counter (to start next Sync0 latch cycle) */
        LatchInputSync0Counter = 0;
 8020d86:	4b06      	ldr	r3, [pc, #24]	; (8020da0 <Sync1_Isr+0x40>)
 8020d88:	2200      	movs	r2, #0
 8020d8a:	801a      	strh	r2, [r3, #0]
}
 8020d8c:	bd80      	pop	{r7, pc}
 8020d8e:	bf00      	nop
 8020d90:	1fff2578 	.word	0x1fff2578
 8020d94:	1fff257c 	.word	0x1fff257c
 8020d98:	1fff281c 	.word	0x1fff281c
 8020d9c:	1fff2568 	.word	0x1fff2568
 8020da0:	1fff254a 	.word	0x1fff254a

08020da4 <MainInit>:
 \brief    This function initialize the EtherCAT Sample Code

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 MainInit(void)
{
 8020da4:	b580      	push	{r7, lr}
 8020da6:	b082      	sub	sp, #8
 8020da8:	af00      	add	r7, sp, #0
    UINT16 Error = 0;
 8020daa:	2300      	movs	r3, #0
 8020dac:	80fb      	strh	r3, [r7, #6]
/*Hardware init function need to be called from the application layer*/

/*ECATCHANGE_START(V5.11) EEPROM1*/
#ifdef SET_EEPROM_PTR
    SET_EEPROM_PTR
 8020dae:	4b0c      	ldr	r3, [pc, #48]	; (8020de0 <MainInit+0x3c>)
 8020db0:	4a0c      	ldr	r2, [pc, #48]	; (8020de4 <MainInit+0x40>)
 8020db2:	601a      	str	r2, [r3, #0]
#endif
/*ECATCHANGE_END(V5.11) EEPROM1*/

    /* initialize the EtherCAT Slave Interface */
    ECAT_Init();
 8020db4:	f001 ff4a 	bl	8022c4c <ECAT_Init>
    /* initialize the objects */
    COE_ObjInit();
 8020db8:	f7ff faf8 	bl	80203ac <COE_ObjInit>


    /*Timer initialization*/
    u16BusCycleCntMs = 0;
 8020dbc:	4b0a      	ldr	r3, [pc, #40]	; (8020de8 <MainInit+0x44>)
 8020dbe:	2200      	movs	r2, #0
 8020dc0:	801a      	strh	r2, [r3, #0]
    StartTimerCnt = 0;
 8020dc2:	4b0a      	ldr	r3, [pc, #40]	; (8020dec <MainInit+0x48>)
 8020dc4:	2200      	movs	r2, #0
 8020dc6:	601a      	str	r2, [r3, #0]
    bCycleTimeMeasurementStarted = FALSE;
 8020dc8:	4b09      	ldr	r3, [pc, #36]	; (8020df0 <MainInit+0x4c>)
 8020dca:	2200      	movs	r2, #0
 8020dcc:	701a      	strb	r2, [r3, #0]

    /*indicate that the slave stack initialization finished*/
    bInitFinished = TRUE;
 8020dce:	4b09      	ldr	r3, [pc, #36]	; (8020df4 <MainInit+0x50>)
 8020dd0:	2201      	movs	r2, #1
 8020dd2:	701a      	strb	r2, [r3, #0]

/*Application Init need to be called from the application layer*/
     return Error;
 8020dd4:	88fb      	ldrh	r3, [r7, #6]
}
 8020dd6:	4618      	mov	r0, r3
 8020dd8:	3708      	adds	r7, #8
 8020dda:	46bd      	mov	sp, r7
 8020ddc:	bd80      	pop	{r7, pc}
 8020dde:	bf00      	nop
 8020de0:	1fff2528 	.word	0x1fff2528
 8020de4:	1fff0b54 	.word	0x1fff0b54
 8020de8:	1fff2534 	.word	0x1fff2534
 8020dec:	1fff2488 	.word	0x1fff2488
 8020df0:	1fff248c 	.word	0x1fff248c
 8020df4:	1fff146c 	.word	0x1fff146c

08020df8 <MainLoop>:
 \brief    This function shall be called cyclically from main

*////////////////////////////////////////////////////////////////////////////////////////

void MainLoop(void)
{
 8020df8:	b580      	push	{r7, lr}
 8020dfa:	b082      	sub	sp, #8
 8020dfc:	af00      	add	r7, sp, #0
    /*return if initialization not finished */
    if(bInitFinished == FALSE)
 8020dfe:	4b2c      	ldr	r3, [pc, #176]	; (8020eb0 <MainLoop+0xb8>)
 8020e00:	781b      	ldrb	r3, [r3, #0]
 8020e02:	f083 0301 	eor.w	r3, r3, #1
 8020e06:	b2db      	uxtb	r3, r3
 8020e08:	2b00      	cmp	r3, #0
 8020e0a:	d000      	beq.n	8020e0e <MainLoop+0x16>
        return;
 8020e0c:	e04c      	b.n	8020ea8 <MainLoop+0xb0>

        /* FreeRun-Mode:  bEscIntEnabled = FALSE, bDcSyncActive = FALSE
           Synchron-Mode: bEscIntEnabled = TRUE, bDcSyncActive = FALSE
           DC-Mode:       bEscIntEnabled = TRUE, bDcSyncActive = TRUE */
        if (
            (!bEscIntEnabled || !bEcatFirstOutputsReceived)     /* SM-Synchronous, but not SM-event received */
 8020e0e:	4b29      	ldr	r3, [pc, #164]	; (8020eb4 <MainLoop+0xbc>)
 8020e10:	781b      	ldrb	r3, [r3, #0]
 8020e12:	f083 0301 	eor.w	r3, r3, #1
 8020e16:	b2db      	uxtb	r3, r3


        /* FreeRun-Mode:  bEscIntEnabled = FALSE, bDcSyncActive = FALSE
           Synchron-Mode: bEscIntEnabled = TRUE, bDcSyncActive = FALSE
           DC-Mode:       bEscIntEnabled = TRUE, bDcSyncActive = TRUE */
        if (
 8020e18:	2b00      	cmp	r3, #0
 8020e1a:	d106      	bne.n	8020e2a <MainLoop+0x32>
            (!bEscIntEnabled || !bEcatFirstOutputsReceived)     /* SM-Synchronous, but not SM-event received */
 8020e1c:	4b26      	ldr	r3, [pc, #152]	; (8020eb8 <MainLoop+0xc0>)
 8020e1e:	781b      	ldrb	r3, [r3, #0]
 8020e20:	f083 0301 	eor.w	r3, r3, #1
 8020e24:	b2db      	uxtb	r3, r3
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	d038      	beq.n	8020e9c <MainLoop+0xa4>
          && !bDcSyncActive                                               /* DC-Synchronous */
 8020e2a:	4b24      	ldr	r3, [pc, #144]	; (8020ebc <MainLoop+0xc4>)
 8020e2c:	781b      	ldrb	r3, [r3, #0]
 8020e2e:	f083 0301 	eor.w	r3, r3, #1
 8020e32:	b2db      	uxtb	r3, r3
 8020e34:	2b00      	cmp	r3, #0
 8020e36:	d031      	beq.n	8020e9c <MainLoop+0xa4>
               from the ESC interrupt routine (in mcihw.c or spihw.c),
               in ECAT Synchron Mode it should be additionally checked, if the SM-event is received
               at least once (bEcatFirstOutputsReceived = 1), otherwise no interrupt is generated
               and the function ECAT_Application has to be called here (with interrupts disabled,
               because the SM-event could be generated while executing ECAT_Application) */
            if ( !bEscIntEnabled )
 8020e38:	4b1e      	ldr	r3, [pc, #120]	; (8020eb4 <MainLoop+0xbc>)
 8020e3a:	781b      	ldrb	r3, [r3, #0]
 8020e3c:	f083 0301 	eor.w	r3, r3, #1
 8020e40:	b2db      	uxtb	r3, r3
 8020e42:	2b00      	cmp	r3, #0
 8020e44:	d01e      	beq.n	8020e84 <MainLoop+0x8c>
            {
                /* application is running in ECAT FreeRun Mode,
                   first we have to check, if outputs were received */
                UINT16 ALEvent = HW_GetALEventRegister();
 8020e46:	f7ff fd4f 	bl	80208e8 <HW_GetALEventRegister>
 8020e4a:	4603      	mov	r3, r0
 8020e4c:	80fb      	strh	r3, [r7, #6]
                ALEvent = SWAPWORD(ALEvent);

                if ( ALEvent & PROCESS_OUTPUT_EVENT )
 8020e4e:	88fb      	ldrh	r3, [r7, #6]
 8020e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8020e54:	2b00      	cmp	r3, #0
 8020e56:	d009      	beq.n	8020e6c <MainLoop+0x74>
                {
                    /* set the flag for the state machine behaviour */
                    bEcatFirstOutputsReceived = TRUE;
 8020e58:	4b17      	ldr	r3, [pc, #92]	; (8020eb8 <MainLoop+0xc0>)
 8020e5a:	2201      	movs	r2, #1
 8020e5c:	701a      	strb	r2, [r3, #0]
                    if ( bEcatOutputUpdateRunning )
 8020e5e:	4b18      	ldr	r3, [pc, #96]	; (8020ec0 <MainLoop+0xc8>)
 8020e60:	781b      	ldrb	r3, [r3, #0]
 8020e62:	2b00      	cmp	r3, #0
 8020e64:	d00e      	beq.n	8020e84 <MainLoop+0x8c>
                    {
                        /* update the outputs */
                        PDO_OutputMapping();
 8020e66:	f7ff fd71 	bl	802094c <PDO_OutputMapping>
 8020e6a:	e00b      	b.n	8020e84 <MainLoop+0x8c>
                    }
                }
                else if ( nPdOutputSize == 0 )
 8020e6c:	4b15      	ldr	r3, [pc, #84]	; (8020ec4 <MainLoop+0xcc>)
 8020e6e:	881b      	ldrh	r3, [r3, #0]
 8020e70:	2b00      	cmp	r3, #0
 8020e72:	d107      	bne.n	8020e84 <MainLoop+0x8c>
                {
                    /* if no outputs are transmitted, the watchdog must be reset, when the inputs were read */
                    if ( ALEvent & PROCESS_INPUT_EVENT )
 8020e74:	88fb      	ldrh	r3, [r7, #6]
 8020e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8020e7a:	2b00      	cmp	r3, #0
 8020e7c:	d002      	beq.n	8020e84 <MainLoop+0x8c>
                    {
                        /* Outputs were updated, set flag for watchdog monitoring */
                        bEcatFirstOutputsReceived = TRUE;
 8020e7e:	4b0e      	ldr	r3, [pc, #56]	; (8020eb8 <MainLoop+0xc0>)
 8020e80:	2201      	movs	r2, #1
 8020e82:	701a      	strb	r2, [r3, #0]
                    }
                }
            }

            DISABLE_ESC_INT();
 8020e84:	f7ff fd46 	bl	8020914 <DISABLE_ESC_INT>
            ECAT_Application();
 8020e88:	f000 f820 	bl	8020ecc <ECAT_Application>

            if ( bEcatInputUpdateRunning )
 8020e8c:	4b0e      	ldr	r3, [pc, #56]	; (8020ec8 <MainLoop+0xd0>)
 8020e8e:	781b      	ldrb	r3, [r3, #0]
 8020e90:	2b00      	cmp	r3, #0
 8020e92:	d001      	beq.n	8020e98 <MainLoop+0xa0>
            {
                /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
                PDO_InputMapping();
 8020e94:	f7ff fd44 	bl	8020920 <PDO_InputMapping>
            }
            ENABLE_ESC_INT();
 8020e98:	f7ff fd36 	bl	8020908 <ENABLE_ESC_INT>
        }


        /* call EtherCAT functions */
        ECAT_Main();
 8020e9c:	f001 ff7c 	bl	8022d98 <ECAT_Main>

        /* call lower prior application part */
       COE_Main();
 8020ea0:	f7ff fc1e 	bl	80206e0 <COE_Main>
       CheckIfEcatError();
 8020ea4:	f001 fe7e 	bl	8022ba4 <CheckIfEcatError>

}
 8020ea8:	3708      	adds	r7, #8
 8020eaa:	46bd      	mov	sp, r7
 8020eac:	bd80      	pop	{r7, pc}
 8020eae:	bf00      	nop
 8020eb0:	1fff146c 	.word	0x1fff146c
 8020eb4:	1fff257d 	.word	0x1fff257d
 8020eb8:	1fff2572 	.word	0x1fff2572
 8020ebc:	1fff2576 	.word	0x1fff2576
 8020ec0:	1fff2577 	.word	0x1fff2577
 8020ec4:	1fff2542 	.word	0x1fff2542
 8020ec8:	1fff257c 	.word	0x1fff257c

08020ecc <ECAT_Application>:
/**
 \brief    ECAT_Application (prev. SSC versions "COE_Application")
 this function calculates and the physical process signals and triggers the input mapping
*////////////////////////////////////////////////////////////////////////////////////////
void ECAT_Application(void)
{
 8020ecc:	b580      	push	{r7, lr}
 8020ece:	af00      	add	r7, sp, #0
    {
        APPL_Application();
 8020ed0:	f7ff fa46 	bl	8020360 <APPL_Application>
    }
/* PDO Input mapping is called from the specific trigger ISR */
}
 8020ed4:	bd80      	pop	{r7, pc}
 8020ed6:	bf00      	nop

08020ed8 <EEPROM_CommandHandler>:


void EEPROM_CommandHandler(void)
{
 8020ed8:	b580      	push	{r7, lr}
 8020eda:	b086      	sub	sp, #24
 8020edc:	af00      	add	r7, sp, #0
   UINT16 Result = 0;
 8020ede:	2300      	movs	r3, #0
 8020ee0:	82bb      	strh	r3, [r7, #20]
    UINT16 EEPROMReg = 0; //Regvalue 0x502 - 0x5003
 8020ee2:	2300      	movs	r3, #0
 8020ee4:	82fb      	strh	r3, [r7, #22]

    HW_EscReadWord(EEPROMReg,ESC_EEPROM_CONTROL_OFFSET);
 8020ee6:	4b59      	ldr	r3, [pc, #356]	; (802104c <EEPROM_CommandHandler+0x174>)
 8020ee8:	881b      	ldrh	r3, [r3, #0]
 8020eea:	82fb      	strh	r3, [r7, #22]
    EEPROMReg = SWAPWORD(EEPROMReg);

    if (EEPROMReg & ESC_EEPROM_BUSY_MASK) 
 8020eec:	8afb      	ldrh	r3, [r7, #22]
 8020eee:	b21b      	sxth	r3, r3
 8020ef0:	2b00      	cmp	r3, #0
 8020ef2:	f280 80a7 	bge.w	8021044 <EEPROM_CommandHandler+0x16c>
    {
        UINT32 cmd = EEPROMReg  & ESC_EEPROM_CMD_MASK;
 8020ef6:	8afb      	ldrh	r3, [r7, #22]
 8020ef8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8020efc:	613b      	str	r3, [r7, #16]
        UINT32 addr;
        HW_EscReadDWord(addr,ESC_EEPROM_ADDRESS_OFFSET);
 8020efe:	4b54      	ldr	r3, [pc, #336]	; (8021050 <EEPROM_CommandHandler+0x178>)
 8020f00:	681b      	ldr	r3, [r3, #0]
 8020f02:	60fb      	str	r3, [r7, #12]
        addr = SWAPDWORD(addr);

/* ECATCHANGE_START(V5.11) EEPROM3*/
        //Clear error bits
        EEPROMReg &= ~(ESC_EEPROM_ERROR_MASK);
 8020f04:	8afb      	ldrh	r3, [r7, #22]
 8020f06:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8020f0a:	82fb      	strh	r3, [r7, #22]
/* ECATCHANGE_END(V5.11) EEPROM3*/
        switch (cmd) {
 8020f0c:	693b      	ldr	r3, [r7, #16]
 8020f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020f12:	d00d      	beq.n	8020f30 <EEPROM_CommandHandler+0x58>
 8020f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020f18:	d803      	bhi.n	8020f22 <EEPROM_CommandHandler+0x4a>
 8020f1a:	2b00      	cmp	r3, #0
 8020f1c:	f000 808c 	beq.w	8021038 <EEPROM_CommandHandler+0x160>
 8020f20:	e085      	b.n	802102e <EEPROM_CommandHandler+0x156>
 8020f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020f26:	d031      	beq.n	8020f8c <EEPROM_CommandHandler+0xb4>
 8020f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020f2c:	d05c      	beq.n	8020fe8 <EEPROM_CommandHandler+0x110>
 8020f2e:	e07e      	b.n	802102e <EEPROM_CommandHandler+0x156>
        case 0x00: //IDLE
            break;
        case ESC_EEPROM_CMD_READ_MASK:
        {
/* ECATCHANGE_START(V5.11) ECAT11*/
           if (pAPPL_EEPROM_Read != NULL)
 8020f30:	4b48      	ldr	r3, [pc, #288]	; (8021054 <EEPROM_CommandHandler+0x17c>)
 8020f32:	681b      	ldr	r3, [r3, #0]
 8020f34:	2b00      	cmp	r3, #0
 8020f36:	d00d      	beq.n	8020f54 <EEPROM_CommandHandler+0x7c>
           {
              Result = pAPPL_EEPROM_Read(addr);
 8020f38:	4b46      	ldr	r3, [pc, #280]	; (8021054 <EEPROM_CommandHandler+0x17c>)
 8020f3a:	681b      	ldr	r3, [r3, #0]
 8020f3c:	68f8      	ldr	r0, [r7, #12]
 8020f3e:	4798      	blx	r3
 8020f40:	4603      	mov	r3, r0
 8020f42:	82bb      	strh	r3, [r7, #20]
              if (Result > 0)
 8020f44:	8abb      	ldrh	r3, [r7, #20]
 8020f46:	2b00      	cmp	r3, #0
 8020f48:	d01f      	beq.n	8020f8a <EEPROM_CommandHandler+0xb2>
              {
                 //Set Error
                 EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 8020f4a:	8afb      	ldrh	r3, [r7, #22]
 8020f4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8020f50:	82fb      	strh	r3, [r7, #22]
                 //Set Error
                 EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
              }
           }
        }
        break;
 8020f52:	e072      	b.n	802103a <EEPROM_CommandHandler+0x162>
           }
           else
           {
/* ECATCHANGE_END(V5.11) ECAT11*/

              if (addr <= ESC_EEPROM_SIZE && (pEEPROM != NULL))
 8020f54:	68fb      	ldr	r3, [r7, #12]
 8020f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8020f5a:	d811      	bhi.n	8020f80 <EEPROM_CommandHandler+0xa8>
 8020f5c:	4b3e      	ldr	r3, [pc, #248]	; (8021058 <EEPROM_CommandHandler+0x180>)
 8020f5e:	681b      	ldr	r3, [r3, #0]
 8020f60:	2b00      	cmp	r3, #0
 8020f62:	d00d      	beq.n	8020f80 <EEPROM_CommandHandler+0xa8>
              {
                 UINT16 *pData = (UINT16 *)pEEPROM;
 8020f64:	4b3c      	ldr	r3, [pc, #240]	; (8021058 <EEPROM_CommandHandler+0x180>)
 8020f66:	681b      	ldr	r3, [r3, #0]
 8020f68:	60bb      	str	r3, [r7, #8]
                 HW_EscWrite((MEM_ADDR *)&pData[(addr)], ESC_EEPROM_DATA_OFFSET, EEPROM_READ_SIZE);
 8020f6a:	68fb      	ldr	r3, [r7, #12]
 8020f6c:	005b      	lsls	r3, r3, #1
 8020f6e:	68ba      	ldr	r2, [r7, #8]
 8020f70:	4413      	add	r3, r2
 8020f72:	4618      	mov	r0, r3
 8020f74:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 8020f78:	2208      	movs	r2, #8
 8020f7a:	f7ff fc8d 	bl	8020898 <HW_EscWrite>
           else
           {
/* ECATCHANGE_END(V5.11) ECAT11*/

              if (addr <= ESC_EEPROM_SIZE && (pEEPROM != NULL))
              {
 8020f7e:	e004      	b.n	8020f8a <EEPROM_CommandHandler+0xb2>
                 HW_EscWrite((MEM_ADDR *)&pData[(addr)], ESC_EEPROM_DATA_OFFSET, EEPROM_READ_SIZE);
              }
              else
              {
                 //Set Error
                 EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 8020f80:	8afb      	ldrh	r3, [r7, #22]
 8020f82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8020f86:	82fb      	strh	r3, [r7, #22]
              }
           }
        }
        break;
 8020f88:	e057      	b.n	802103a <EEPROM_CommandHandler+0x162>
 8020f8a:	e056      	b.n	802103a <EEPROM_CommandHandler+0x162>
        case ESC_EEPROM_CMD_WRITE_MASK:
            {
/* ECATCHANGE_START(V5.11) ECAT11*/
                 if (pAPPL_EEPROM_Write != NULL)
 8020f8c:	4b33      	ldr	r3, [pc, #204]	; (802105c <EEPROM_CommandHandler+0x184>)
 8020f8e:	681b      	ldr	r3, [r3, #0]
 8020f90:	2b00      	cmp	r3, #0
 8020f92:	d00d      	beq.n	8020fb0 <EEPROM_CommandHandler+0xd8>
                 {
                    Result = pAPPL_EEPROM_Write(addr);
 8020f94:	4b31      	ldr	r3, [pc, #196]	; (802105c <EEPROM_CommandHandler+0x184>)
 8020f96:	681b      	ldr	r3, [r3, #0]
 8020f98:	68f8      	ldr	r0, [r7, #12]
 8020f9a:	4798      	blx	r3
 8020f9c:	4603      	mov	r3, r0
 8020f9e:	82bb      	strh	r3, [r7, #20]
                    if (Result > 0)
 8020fa0:	8abb      	ldrh	r3, [r7, #20]
 8020fa2:	2b00      	cmp	r3, #0
 8020fa4:	d01f      	beq.n	8020fe6 <EEPROM_CommandHandler+0x10e>
                    {
                       //Set Error
                       EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 8020fa6:	8afb      	ldrh	r3, [r7, #22]
 8020fa8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8020fac:	82fb      	strh	r3, [r7, #22]
                       //Set Error
                       EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
                    }
                 }
            }
            break;
 8020fae:	e044      	b.n	802103a <EEPROM_CommandHandler+0x162>
                 }
                 else
                 {
/* ECATCHANGE_END(V5.11) ECAT11*/

                    if (addr <= ESC_EEPROM_SIZE && (pEEPROM != NULL))
 8020fb0:	68fb      	ldr	r3, [r7, #12]
 8020fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8020fb6:	d811      	bhi.n	8020fdc <EEPROM_CommandHandler+0x104>
 8020fb8:	4b27      	ldr	r3, [pc, #156]	; (8021058 <EEPROM_CommandHandler+0x180>)
 8020fba:	681b      	ldr	r3, [r3, #0]
 8020fbc:	2b00      	cmp	r3, #0
 8020fbe:	d00d      	beq.n	8020fdc <EEPROM_CommandHandler+0x104>
                    {
                       UINT16 *pData = (UINT16 *)pEEPROM;
 8020fc0:	4b25      	ldr	r3, [pc, #148]	; (8021058 <EEPROM_CommandHandler+0x180>)
 8020fc2:	681b      	ldr	r3, [r3, #0]
 8020fc4:	607b      	str	r3, [r7, #4]
                       HW_EscRead((MEM_ADDR *)&pData[(addr)], ESC_EEPROM_DATA_OFFSET, EEPROM_WRITE_SIZE);
 8020fc6:	68fb      	ldr	r3, [r7, #12]
 8020fc8:	005b      	lsls	r3, r3, #1
 8020fca:	687a      	ldr	r2, [r7, #4]
 8020fcc:	4413      	add	r3, r2
 8020fce:	4618      	mov	r0, r3
 8020fd0:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 8020fd4:	2202      	movs	r2, #2
 8020fd6:	f7ff fc37 	bl	8020848 <HW_EscRead>
                 else
                 {
/* ECATCHANGE_END(V5.11) ECAT11*/

                    if (addr <= ESC_EEPROM_SIZE && (pEEPROM != NULL))
                    {
 8020fda:	e004      	b.n	8020fe6 <EEPROM_CommandHandler+0x10e>
                       HW_EscRead((MEM_ADDR *)&pData[(addr)], ESC_EEPROM_DATA_OFFSET, EEPROM_WRITE_SIZE);
                    }
                    else
                    {
                       //Set Error
                       EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 8020fdc:	8afb      	ldrh	r3, [r7, #22]
 8020fde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8020fe2:	82fb      	strh	r3, [r7, #22]
                    }
                 }
            }
            break;
 8020fe4:	e029      	b.n	802103a <EEPROM_CommandHandler+0x162>
 8020fe6:	e028      	b.n	802103a <EEPROM_CommandHandler+0x162>
        case ESC_EEPROM_CMD_RELOAD_MASK:
        {
/* ECATCHANGE_START(V5.11) ECAT11*/
           if (pAPPL_EEPROM_Reload != NULL)
 8020fe8:	4b1d      	ldr	r3, [pc, #116]	; (8021060 <EEPROM_CommandHandler+0x188>)
 8020fea:	681b      	ldr	r3, [r3, #0]
 8020fec:	2b00      	cmp	r3, #0
 8020fee:	d00c      	beq.n	802100a <EEPROM_CommandHandler+0x132>
           {
              Result = pAPPL_EEPROM_Reload();
 8020ff0:	4b1b      	ldr	r3, [pc, #108]	; (8021060 <EEPROM_CommandHandler+0x188>)
 8020ff2:	681b      	ldr	r3, [r3, #0]
 8020ff4:	4798      	blx	r3
 8020ff6:	4603      	mov	r3, r0
 8020ff8:	82bb      	strh	r3, [r7, #20]
              if (Result > 0)
 8020ffa:	8abb      	ldrh	r3, [r7, #20]
 8020ffc:	2b00      	cmp	r3, #0
 8020ffe:	d015      	beq.n	802102c <EEPROM_CommandHandler+0x154>
              {
                 //Set Error
                 EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 8021000:	8afb      	ldrh	r3, [r7, #22]
 8021002:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021006:	82fb      	strh	r3, [r7, #22]

                 EEPROMReg |= ESC_EEPROM_ERROR_CRC;
              }
           }
        }
         break;
 8021008:	e017      	b.n	802103a <EEPROM_CommandHandler+0x162>
           }
           else
           {
/* ECATCHANGE_END(V5.11) ECAT11*/

              Result = HW_EepromReload();
 802100a:	f006 fef7 	bl	8027dfc <HW_EepromReload>
 802100e:	4603      	mov	r3, r0
 8021010:	82bb      	strh	r3, [r7, #20]
              if (Result != 0)
 8021012:	8abb      	ldrh	r3, [r7, #20]
 8021014:	2b00      	cmp	r3, #0
 8021016:	d009      	beq.n	802102c <EEPROM_CommandHandler+0x154>
              {
                 /* ECATCHANGE_START(V5.11) EEPROM2*/
                 //copy the configured station alias
                 HW_EscWriteWord(((UINT16 *)pEEPROM)[0x4], ESC_EEPROM_DATA_OFFSET);
 8021018:	4a12      	ldr	r2, [pc, #72]	; (8021064 <EEPROM_CommandHandler+0x18c>)
 802101a:	4b0f      	ldr	r3, [pc, #60]	; (8021058 <EEPROM_CommandHandler+0x180>)
 802101c:	681b      	ldr	r3, [r3, #0]
 802101e:	891b      	ldrh	r3, [r3, #8]
 8021020:	8013      	strh	r3, [r2, #0]
                 /* ECATCHANGE_END(V5.11) EEPROM2*/

                 EEPROMReg |= ESC_EEPROM_ERROR_CRC;
 8021022:	8afb      	ldrh	r3, [r7, #22]
 8021024:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8021028:	82fb      	strh	r3, [r7, #22]
              }
           }
        }
         break;
 802102a:	e006      	b.n	802103a <EEPROM_CommandHandler+0x162>
 802102c:	e005      	b.n	802103a <EEPROM_CommandHandler+0x162>
        default:
            EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 802102e:	8afb      	ldrh	r3, [r7, #22]
 8021030:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021034:	82fb      	strh	r3, [r7, #22]
            break;
 8021036:	e000      	b.n	802103a <EEPROM_CommandHandler+0x162>
        //Clear error bits
        EEPROMReg &= ~(ESC_EEPROM_ERROR_MASK);
/* ECATCHANGE_END(V5.11) EEPROM3*/
        switch (cmd) {
        case 0x00: //IDLE
            break;
 8021038:	bf00      	nop
            EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
            break;
        }

        {
        UINT16 TmpData = SWAPWORD(EEPROMReg);
 802103a:	8afb      	ldrh	r3, [r7, #22]
 802103c:	807b      	strh	r3, [r7, #2]
        HW_EscWriteWord(TmpData,ESC_EEPROM_CONTROL_OFFSET);
 802103e:	4a03      	ldr	r2, [pc, #12]	; (802104c <EEPROM_CommandHandler+0x174>)
 8021040:	887b      	ldrh	r3, [r7, #2]
 8021042:	8013      	strh	r3, [r2, #0]
        }
    }
}
 8021044:	3718      	adds	r7, #24
 8021046:	46bd      	mov	sp, r7
 8021048:	bd80      	pop	{r7, pc}
 802104a:	bf00      	nop
 802104c:	54010502 	.word	0x54010502
 8021050:	54010504 	.word	0x54010504
 8021054:	1fff2490 	.word	0x1fff2490
 8021058:	1fff2528 	.word	0x1fff2528
 802105c:	1fff2494 	.word	0x1fff2494
 8021060:	1fff2530 	.word	0x1fff2530
 8021064:	54010508 	.word	0x54010508

08021068 <COE_Init>:

 \brief    This function intialize the CoE Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void COE_Init(void)
{
 8021068:	b480      	push	{r7}
 802106a:	af00      	add	r7, sp, #0
    pCoeSendStored = 0;
 802106c:	4b04      	ldr	r3, [pc, #16]	; (8021080 <COE_Init+0x18>)
 802106e:	2200      	movs	r2, #0
 8021070:	601a      	str	r2, [r3, #0]
    nSdoInfoFragmentsLeft = 0;
 8021072:	4b04      	ldr	r3, [pc, #16]	; (8021084 <COE_Init+0x1c>)
 8021074:	2200      	movs	r2, #0
 8021076:	801a      	strh	r2, [r3, #0]
}
 8021078:	46bd      	mov	sp, r7
 802107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802107e:	4770      	bx	lr
 8021080:	1fff2538 	.word	0x1fff2538
 8021084:	1fff28cc 	.word	0x1fff28cc

08021088 <COE_ServiceInd>:
 \brief    This function is called when a CoE (CAN application layer over EtherCAT) service is received from
             the master.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 COE_ServiceInd(TCOEMBX MBXMEM *pCoeMbx)
{
 8021088:	b580      	push	{r7, lr}
 802108a:	b084      	sub	sp, #16
 802108c:	af00      	add	r7, sp, #0
 802108e:	6078      	str	r0, [r7, #4]
    UINT8 result = 0;
 8021090:	2300      	movs	r3, #0
 8021092:	73fb      	strb	r3, [r7, #15]

    switch ((pCoeMbx->CoeHeader & COEHEADER_COESERVICEMASK) >> COEHEADER_COESERVICESHIFT)
 8021094:	687b      	ldr	r3, [r7, #4]
 8021096:	88db      	ldrh	r3, [r3, #6]
 8021098:	0b1b      	lsrs	r3, r3, #12
 802109a:	b29b      	uxth	r3, r3
 802109c:	3b01      	subs	r3, #1
 802109e:	2b07      	cmp	r3, #7
 80210a0:	d821      	bhi.n	80210e6 <COE_ServiceInd+0x5e>
 80210a2:	a201      	add	r2, pc, #4	; (adr r2, 80210a8 <COE_ServiceInd+0x20>)
 80210a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80210a8:	080210e1 	.word	0x080210e1
 80210ac:	080210c9 	.word	0x080210c9
 80210b0:	080210e1 	.word	0x080210e1
 80210b4:	080210e1 	.word	0x080210e1
 80210b8:	080210e1 	.word	0x080210e1
 80210bc:	080210e1 	.word	0x080210e1
 80210c0:	080210e1 	.word	0x080210e1
 80210c4:	080210d5 	.word	0x080210d5
    {
    case COESERVICE_SDOREQUEST:
        /* SDO-Request received, call SDOS_SdoInd to process the SDO-Request
           if an existing SDO-Stack shall be used, the corresponding function
            should be called */
        result = SDOS_SdoInd( (TINITSDOMBX MBXMEM *) pCoeMbx );
 80210c8:	6878      	ldr	r0, [r7, #4]
 80210ca:	f004 f8e9 	bl	80252a0 <SDOS_SdoInd>
 80210ce:	4603      	mov	r3, r0
 80210d0:	73fb      	strb	r3, [r7, #15]
        break;
 80210d2:	e00b      	b.n	80210ec <COE_ServiceInd+0x64>

    case COESERVICE_SDOINFO:
        /* SDO-Information Request received, call SDOS_SdoInfoInd to process the SDO-Request */
        result = SDOS_SdoInfoInd( (TSDOINFORMATION MBXMEM *) pCoeMbx );
 80210d4:	6878      	ldr	r0, [r7, #4]
 80210d6:	f004 fc2b 	bl	8025930 <SDOS_SdoInfoInd>
 80210da:	4603      	mov	r3, r0
 80210dc:	73fb      	strb	r3, [r7, #15]
        /*NOERROR_INWORK is never returned by SDOS_SdoInfoInd() => delete return code handling*/
        break;
 80210de:	e005      	b.n	80210ec <COE_ServiceInd+0x64>
    case COESERVICE_TXPDO:
    case COESERVICE_RXPDO:
    case COESERVICE_TXPDOREMREQ:
    case COESERVICE_RXPDOREMREQ:
        /* these CoE services are not supported yet */
        result = MBXERR_SERVICENOTSUPPORTED;
 80210e0:	2304      	movs	r3, #4
 80210e2:	73fb      	strb	r3, [r7, #15]
        break;
 80210e4:	e002      	b.n	80210ec <COE_ServiceInd+0x64>

    default:
        result = MBXERR_INVALIDHEADER;
 80210e6:	2305      	movs	r3, #5
 80210e8:	73fb      	strb	r3, [r7, #15]
        break;
 80210ea:	bf00      	nop
    }
    return result;
 80210ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80210ee:	4618      	mov	r0, r3
 80210f0:	3710      	adds	r7, #16
 80210f2:	46bd      	mov	sp, r7
 80210f4:	bd80      	pop	{r7, pc}
 80210f6:	bf00      	nop

080210f8 <COE_ContinueInd>:
*////////////////////////////////////////////////////////////////////////////////////////

/*ECATCHANGE_START(V5.11) COE4*/
UINT8 COE_ContinueInd(TMBX MBXMEM * pMbx)
/*ECATCHANGE_END(V5.11) COE4*/
{
 80210f8:	b580      	push	{r7, lr}
 80210fa:	b082      	sub	sp, #8
 80210fc:	af00      	add	r7, sp, #0
 80210fe:	6078      	str	r0, [r7, #4]
    if (pCoeSendStored)
 8021100:	4b12      	ldr	r3, [pc, #72]	; (802114c <COE_ContinueInd+0x54>)
 8021102:	681b      	ldr	r3, [r3, #0]
 8021104:	2b00      	cmp	r3, #0
 8021106:	d009      	beq.n	802111c <COE_ContinueInd+0x24>
    {
        /* send the stored CoE service which could not be sent before */
        MBX_MailboxSendReq(pCoeSendStored, 0);
 8021108:	4b10      	ldr	r3, [pc, #64]	; (802114c <COE_ContinueInd+0x54>)
 802110a:	681b      	ldr	r3, [r3, #0]
 802110c:	4618      	mov	r0, r3
 802110e:	2100      	movs	r1, #0
 8021110:	f002 fa66 	bl	80235e0 <MBX_MailboxSendReq>
        pCoeSendStored = 0;
 8021114:	4b0d      	ldr	r3, [pc, #52]	; (802114c <COE_ContinueInd+0x54>)
 8021116:	2200      	movs	r2, #0
 8021118:	601a      	str	r2, [r3, #0]
 802111a:	e012      	b.n	8021142 <COE_ContinueInd+0x4a>
    }
    else
    {
        /* send the next fragment of the last CoE service (only for SDO-Information possible) */
        /* in mailbox queue mode pMbx is always 0, so a mailbox buffer shall be get */
        pMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(SIZEOF(TMBX));
 802111c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8021120:	f007 f890 	bl	8028244 <malloc>
 8021124:	4603      	mov	r3, r0
 8021126:	607b      	str	r3, [r7, #4]
        /* it shall be checked if a valid pointer was returned */
/*ECATCHANGE_START(V5.11) COE4*/
        if (pMbx == NULL)
 8021128:	687b      	ldr	r3, [r7, #4]
 802112a:	2b00      	cmp	r3, #0
 802112c:	d101      	bne.n	8021132 <COE_ContinueInd+0x3a>
        {
            return MBXERR_NOMOREMEMORY;
 802112e:	2307      	movs	r3, #7
 8021130:	e008      	b.n	8021144 <COE_ContinueInd+0x4c>
        }
        else
/*ECATCHANGE_END(V5.11) COE4*/
        {
            /* copy the stored SDO-Info-Header in the request */
            MBXMEMCPY(pMbx, aSdoInfoHeader, SDO_INFO_HEADER_BYTE_SIZE);
 8021132:	6878      	ldr	r0, [r7, #4]
 8021134:	4906      	ldr	r1, [pc, #24]	; (8021150 <COE_ContinueInd+0x58>)
 8021136:	220e      	movs	r2, #14
 8021138:	f007 f894 	bl	8028264 <memcpy>
            /* call SDOS_SdoInfoInd to generate and send the next fragment */
            SDOS_SdoInfoInd( (TSDOINFORMATION MBXMEM *) pMbx );
 802113c:	6878      	ldr	r0, [r7, #4]
 802113e:	f004 fbf7 	bl	8025930 <SDOS_SdoInfoInd>
        }
    }

    return 0;
 8021142:	2300      	movs	r3, #0
}
 8021144:	4618      	mov	r0, r3
 8021146:	3708      	adds	r7, #8
 8021148:	46bd      	mov	sp, r7
 802114a:	bd80      	pop	{r7, pc}
 802114c:	1fff2538 	.word	0x1fff2538
 8021150:	1fff28e0 	.word	0x1fff28e0

08021154 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8021154:	b480      	push	{r7}
 8021156:	b083      	sub	sp, #12
 8021158:	af00      	add	r7, sp, #0
 802115a:	4603      	mov	r3, r0
 802115c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 802115e:	4908      	ldr	r1, [pc, #32]	; (8021180 <NVIC_EnableIRQ+0x2c>)
 8021160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021164:	095b      	lsrs	r3, r3, #5
 8021166:	79fa      	ldrb	r2, [r7, #7]
 8021168:	f002 021f 	and.w	r2, r2, #31
 802116c:	2001      	movs	r0, #1
 802116e:	fa00 f202 	lsl.w	r2, r0, r2
 8021172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8021176:	370c      	adds	r7, #12
 8021178:	46bd      	mov	sp, r7
 802117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802117e:	4770      	bx	lr
 8021180:	e000e100 	.word	0xe000e100

08021184 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8021184:	b480      	push	{r7}
 8021186:	b083      	sub	sp, #12
 8021188:	af00      	add	r7, sp, #0
 802118a:	4603      	mov	r3, r0
 802118c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 802118e:	4909      	ldr	r1, [pc, #36]	; (80211b4 <NVIC_DisableIRQ+0x30>)
 8021190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021194:	095b      	lsrs	r3, r3, #5
 8021196:	79fa      	ldrb	r2, [r7, #7]
 8021198:	f002 021f 	and.w	r2, r2, #31
 802119c:	2001      	movs	r0, #1
 802119e:	fa00 f202 	lsl.w	r2, r0, r2
 80211a2:	3320      	adds	r3, #32
 80211a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80211a8:	370c      	adds	r7, #12
 80211aa:	46bd      	mov	sp, r7
 80211ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211b0:	4770      	bx	lr
 80211b2:	bf00      	nop
 80211b4:	e000e100 	.word	0xe000e100

080211b8 <XMC_ECAT_GetALEventRegister>:
 *
 * \par
 * Get the first two bytes of the AL Event register (0x220-0x221).
 */
__STATIC_INLINE uint16_t XMC_ECAT_GetALEventRegister(void)
{
 80211b8:	b480      	push	{r7}
 80211ba:	af00      	add	r7, sp, #0
  return ((uint16_t)ECAT0->AL_EVENT_REQ);
 80211bc:	4b04      	ldr	r3, [pc, #16]	; (80211d0 <XMC_ECAT_GetALEventRegister+0x18>)
 80211be:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80211c2:	b29b      	uxth	r3, r3
}
 80211c4:	4618      	mov	r0, r3
 80211c6:	46bd      	mov	sp, r7
 80211c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211cc:	4770      	bx	lr
 80211ce:	bf00      	nop
 80211d0:	54010000 	.word	0x54010000

080211d4 <HW_EscRead>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscRead(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 80211d4:	b580      	push	{r7, lr}
 80211d6:	b082      	sub	sp, #8
 80211d8:	af00      	add	r7, sp, #0
 80211da:	6078      	str	r0, [r7, #4]
 80211dc:	460b      	mov	r3, r1
 80211de:	807b      	strh	r3, [r7, #2]
 80211e0:	4613      	mov	r3, r2
 80211e2:	803b      	strh	r3, [r7, #0]
  memcpy(pData, &pEsc[Address], Len);
 80211e4:	887b      	ldrh	r3, [r7, #2]
 80211e6:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 80211ea:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80211ee:	883a      	ldrh	r2, [r7, #0]
 80211f0:	6878      	ldr	r0, [r7, #4]
 80211f2:	4619      	mov	r1, r3
 80211f4:	f007 f836 	bl	8028264 <memcpy>
}
 80211f8:	3708      	adds	r7, #8
 80211fa:	46bd      	mov	sp, r7
 80211fc:	bd80      	pop	{r7, pc}
 80211fe:	bf00      	nop

08021200 <HW_GetALEventRegister>:
 * \par<b>Description:</b><br>
 *
 *
 */
__STATIC_INLINE UINT16 HW_GetALEventRegister(void)
{
 8021200:	b580      	push	{r7, lr}
 8021202:	af00      	add	r7, sp, #0
  return XMC_ECAT_GetALEventRegister();
 8021204:	f7ff ffd8 	bl	80211b8 <XMC_ECAT_GetALEventRegister>
 8021208:	4603      	mov	r3, r0
}
 802120a:	4618      	mov	r0, r3
 802120c:	bd80      	pop	{r7, pc}
 802120e:	bf00      	nop

08021210 <ENABLE_ESC_INT>:
 * \par<b>Description:</b><br>
 * Function to enable the XMC EtherCAT slave controller interrupt.
 *
 */
__STATIC_INLINE void ENABLE_ESC_INT(void)
{
 8021210:	b580      	push	{r7, lr}
 8021212:	af00      	add	r7, sp, #0
  NVIC_EnableIRQ(ECAT0_0_IRQn);
 8021214:	206d      	movs	r0, #109	; 0x6d
 8021216:	f7ff ff9d 	bl	8021154 <NVIC_EnableIRQ>
}
 802121a:	bd80      	pop	{r7, pc}

0802121c <DISABLE_ESC_INT>:
 * \par<b>Description:</b><br>
 * Function to disable the XMC EtherCAT slave controller interrupt.
 *
 */
__STATIC_INLINE void DISABLE_ESC_INT(void)
{
 802121c:	b580      	push	{r7, lr}
 802121e:	af00      	add	r7, sp, #0
  NVIC_DisableIRQ(ECAT0_0_IRQn);
 8021220:	206d      	movs	r0, #109	; 0x6d
 8021222:	f7ff ffaf 	bl	8021184 <NVIC_DisableIRQ>
}
 8021226:	bd80      	pop	{r7, pc}

08021228 <ResetALEventMask>:
 \param    intMask        interrupt mask (disabled interrupt shall be zero)

 \brief    This function makes an logical and with the AL Event Mask register (0x204)
*////////////////////////////////////////////////////////////////////////////////////////
void ResetALEventMask(UINT16 intMask)
{
 8021228:	b580      	push	{r7, lr}
 802122a:	b084      	sub	sp, #16
 802122c:	af00      	add	r7, sp, #0
 802122e:	4603      	mov	r3, r0
 8021230:	80fb      	strh	r3, [r7, #6]
    UINT16 mask;
    HW_EscReadWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8021232:	4b08      	ldr	r3, [pc, #32]	; (8021254 <ResetALEventMask+0x2c>)
 8021234:	881b      	ldrh	r3, [r3, #0]
 8021236:	81fb      	strh	r3, [r7, #14]
    
    mask &= intMask;
 8021238:	89fa      	ldrh	r2, [r7, #14]
 802123a:	88fb      	ldrh	r3, [r7, #6]
 802123c:	4013      	ands	r3, r2
 802123e:	81fb      	strh	r3, [r7, #14]

    DISABLE_ESC_INT();
 8021240:	f7ff ffec 	bl	802121c <DISABLE_ESC_INT>


    HW_EscWriteWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8021244:	4a03      	ldr	r2, [pc, #12]	; (8021254 <ResetALEventMask+0x2c>)
 8021246:	89fb      	ldrh	r3, [r7, #14]
 8021248:	8013      	strh	r3, [r2, #0]
    ENABLE_ESC_INT();
 802124a:	f7ff ffe1 	bl	8021210 <ENABLE_ESC_INT>
}
 802124e:	3710      	adds	r7, #16
 8021250:	46bd      	mov	sp, r7
 8021252:	bd80      	pop	{r7, pc}
 8021254:	54010204 	.word	0x54010204

08021258 <SetALEventMask>:
 \param    intMask        interrupt mask (enabled interrupt shall be one)

  \brief    This function makes an logical or with the AL Event Mask register (0x204)
*////////////////////////////////////////////////////////////////////////////////////////
void SetALEventMask(UINT16 intMask)
{
 8021258:	b580      	push	{r7, lr}
 802125a:	b084      	sub	sp, #16
 802125c:	af00      	add	r7, sp, #0
 802125e:	4603      	mov	r3, r0
 8021260:	80fb      	strh	r3, [r7, #6]
    UINT16 mask;
    HW_EscReadWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8021262:	4b08      	ldr	r3, [pc, #32]	; (8021284 <SetALEventMask+0x2c>)
 8021264:	881b      	ldrh	r3, [r3, #0]
 8021266:	81fb      	strh	r3, [r7, #14]
    
    mask |= intMask;
 8021268:	89fa      	ldrh	r2, [r7, #14]
 802126a:	88fb      	ldrh	r3, [r7, #6]
 802126c:	4313      	orrs	r3, r2
 802126e:	81fb      	strh	r3, [r7, #14]

    DISABLE_ESC_INT();
 8021270:	f7ff ffd4 	bl	802121c <DISABLE_ESC_INT>


    HW_EscWriteWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8021274:	4a03      	ldr	r2, [pc, #12]	; (8021284 <SetALEventMask+0x2c>)
 8021276:	89fb      	ldrh	r3, [r7, #14]
 8021278:	8013      	strh	r3, [r2, #0]
    ENABLE_ESC_INT();
 802127a:	f7ff ffc9 	bl	8021210 <ENABLE_ESC_INT>
}
 802127e:	3710      	adds	r7, #16
 8021280:	46bd      	mov	sp, r7
 8021282:	bd80      	pop	{r7, pc}
 8021284:	54010204 	.word	0x54010204

08021288 <UpdateEEPROMLoadedState>:
/**

\brief    This function reads the EEPROM loaded state
*////////////////////////////////////////////////////////////////////////////////////////
void UpdateEEPROMLoadedState(void)
{
 8021288:	b480      	push	{r7}
 802128a:	b083      	sub	sp, #12
 802128c:	af00      	add	r7, sp, #0
    {
       UINT16 TmpVar = 0;
 802128e:	2300      	movs	r3, #0
 8021290:	80fb      	strh	r3, [r7, #6]
       //read EEPROM loaded information
       HW_EscReadWord(TmpVar, ESC_EEPROM_CONTROL_OFFSET);
 8021292:	4b0c      	ldr	r3, [pc, #48]	; (80212c4 <UpdateEEPROMLoadedState+0x3c>)
 8021294:	881b      	ldrh	r3, [r3, #0]
 8021296:	80fb      	strh	r3, [r7, #6]
       TmpVar = SWAPWORD(TmpVar);

       if (((TmpVar & ESC_EEPROM_ERROR_CRC) > 0)
 8021298:	88fb      	ldrh	r3, [r7, #6]
 802129a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802129e:	2b00      	cmp	r3, #0
 80212a0:	dc04      	bgt.n	80212ac <UpdateEEPROMLoadedState+0x24>
          || ((TmpVar & ESC_EEPROM_ERROR_LOAD) > 0))
 80212a2:	88fb      	ldrh	r3, [r7, #6]
 80212a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80212a8:	2b00      	cmp	r3, #0
 80212aa:	dd03      	ble.n	80212b4 <UpdateEEPROMLoadedState+0x2c>
       {
          EepromLoaded = FALSE;
 80212ac:	4b06      	ldr	r3, [pc, #24]	; (80212c8 <UpdateEEPROMLoadedState+0x40>)
 80212ae:	2200      	movs	r2, #0
 80212b0:	701a      	strb	r2, [r3, #0]
 80212b2:	e002      	b.n	80212ba <UpdateEEPROMLoadedState+0x32>
       }
       else
       {
          EepromLoaded = TRUE;
 80212b4:	4b04      	ldr	r3, [pc, #16]	; (80212c8 <UpdateEEPROMLoadedState+0x40>)
 80212b6:	2201      	movs	r2, #1
 80212b8:	701a      	strb	r2, [r3, #0]
       }
    }
}
 80212ba:	370c      	adds	r7, #12
 80212bc:	46bd      	mov	sp, r7
 80212be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212c2:	4770      	bx	lr
 80212c4:	54010502 	.word	0x54010502
 80212c8:	1fff146e 	.word	0x1fff146e

080212cc <GetSyncMan>:
 \brief    This function is called to read the SYNC Manager channel descriptions of the
             process data SYNC Managers.
*////////////////////////////////////////////////////////////////////////////////////////

TSYNCMAN ESCMEM * GetSyncMan( UINT8 channel )
{
 80212cc:	b580      	push	{r7, lr}
 80212ce:	b082      	sub	sp, #8
 80212d0:	af00      	add	r7, sp, #0
 80212d2:	4603      	mov	r3, r0
 80212d4:	71fb      	strb	r3, [r7, #7]
    HW_EscRead((MEM_ADDR *)&SyncManInfo, ESC_SYNCMAN_REG_OFFSET + (channel * SIZEOF_SM_REGISTER), SIZEOF_SM_REGISTER );
 80212d6:	79fb      	ldrb	r3, [r7, #7]
 80212d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80212dc:	b29b      	uxth	r3, r3
 80212de:	00db      	lsls	r3, r3, #3
 80212e0:	b29b      	uxth	r3, r3
 80212e2:	4805      	ldr	r0, [pc, #20]	; (80212f8 <GetSyncMan+0x2c>)
 80212e4:	4619      	mov	r1, r3
 80212e6:	2208      	movs	r2, #8
 80212e8:	f7ff ff74 	bl	80211d4 <HW_EscRead>


    return &SyncManInfo;
 80212ec:	4b02      	ldr	r3, [pc, #8]	; (80212f8 <GetSyncMan+0x2c>)
}
 80212ee:	4618      	mov	r0, r3
 80212f0:	3708      	adds	r7, #8
 80212f2:	46bd      	mov	sp, r7
 80212f4:	bd80      	pop	{r7, pc}
 80212f6:	bf00      	nop
 80212f8:	1fff2560 	.word	0x1fff2560

080212fc <DisableSyncManChannel>:
 \param     channel        Sync Manager channel

 \brief    This function disables a Sync Manager channel
*////////////////////////////////////////////////////////////////////////////////////////
void DisableSyncManChannel(UINT8 channel)
{
 80212fc:	b480      	push	{r7}
 80212fe:	b085      	sub	sp, #20
 8021300:	af00      	add	r7, sp, #0
 8021302:	4603      	mov	r3, r0
 8021304:	71fb      	strb	r3, [r7, #7]
    UINT16 Offset;
    VARVOLATILE UINT8 smStatus = SM_SETTING_PDI_DISABLE;
 8021306:	2301      	movs	r3, #1
 8021308:	737b      	strb	r3, [r7, #13]
    Offset = (ESC_SM_PDICONTROL_OFFSET + (SIZEOF_SM_REGISTER*channel));
 802130a:	79fb      	ldrb	r3, [r7, #7]
 802130c:	b29b      	uxth	r3, r3
 802130e:	00db      	lsls	r3, r3, #3
 8021310:	b29b      	uxth	r3, r3
 8021312:	f603 0307 	addw	r3, r3, #2055	; 0x807
 8021316:	81fb      	strh	r3, [r7, #14]

    HW_EscWriteByte(smStatus,Offset);
 8021318:	89fb      	ldrh	r3, [r7, #14]
 802131a:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 802131e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8021322:	7b7a      	ldrb	r2, [r7, #13]
 8021324:	b2d2      	uxtb	r2, r2
 8021326:	701a      	strb	r2, [r3, #0]
    
    /*wait until SyncManager is disabled*/
    do
    {
        HW_EscReadByte(smStatus, Offset);
 8021328:	89fb      	ldrh	r3, [r7, #14]
 802132a:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 802132e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8021332:	781b      	ldrb	r3, [r3, #0]
 8021334:	b2db      	uxtb	r3, r3
 8021336:	737b      	strb	r3, [r7, #13]
    }while(!(smStatus & SM_SETTING_PDI_DISABLE));
 8021338:	7b7b      	ldrb	r3, [r7, #13]
 802133a:	b2db      	uxtb	r3, r3
 802133c:	f003 0301 	and.w	r3, r3, #1
 8021340:	2b00      	cmp	r3, #0
 8021342:	d0f1      	beq.n	8021328 <DisableSyncManChannel+0x2c>
}
 8021344:	3714      	adds	r7, #20
 8021346:	46bd      	mov	sp, r7
 8021348:	f85d 7b04 	ldr.w	r7, [sp], #4
 802134c:	4770      	bx	lr
 802134e:	bf00      	nop

08021350 <EnableSyncManChannel>:
 \param     channel        Sync Manager channel

 \brief    This function enables a Sync Manager channel
*////////////////////////////////////////////////////////////////////////////////////////
void EnableSyncManChannel(UINT8 channel)
{
 8021350:	b480      	push	{r7}
 8021352:	b085      	sub	sp, #20
 8021354:	af00      	add	r7, sp, #0
 8021356:	4603      	mov	r3, r0
 8021358:	71fb      	strb	r3, [r7, #7]
    UINT16 Offset;
    VARVOLATILE UINT8 smStatus = 0x00;
 802135a:	2300      	movs	r3, #0
 802135c:	737b      	strb	r3, [r7, #13]
    Offset = (ESC_SM_PDICONTROL_OFFSET + (SIZEOF_SM_REGISTER*channel));
 802135e:	79fb      	ldrb	r3, [r7, #7]
 8021360:	b29b      	uxth	r3, r3
 8021362:	00db      	lsls	r3, r3, #3
 8021364:	b29b      	uxth	r3, r3
 8021366:	f603 0307 	addw	r3, r3, #2055	; 0x807
 802136a:	81fb      	strh	r3, [r7, #14]

    HW_EscWriteByte(smStatus,Offset);
 802136c:	89fb      	ldrh	r3, [r7, #14]
 802136e:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8021372:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8021376:	7b7a      	ldrb	r2, [r7, #13]
 8021378:	b2d2      	uxtb	r2, r2
 802137a:	701a      	strb	r2, [r3, #0]
    
    /*wait until SyncManager is enabled*/
    do
    {
        HW_EscReadByte(smStatus,Offset);
 802137c:	89fb      	ldrh	r3, [r7, #14]
 802137e:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8021382:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8021386:	781b      	ldrb	r3, [r3, #0]
 8021388:	b2db      	uxtb	r3, r3
 802138a:	737b      	strb	r3, [r7, #13]
    }while((smStatus & SM_SETTING_PDI_DISABLE));
 802138c:	7b7b      	ldrb	r3, [r7, #13]
 802138e:	b2db      	uxtb	r3, r3
 8021390:	f003 0301 	and.w	r3, r3, #1
 8021394:	2b00      	cmp	r3, #0
 8021396:	d1f1      	bne.n	802137c <EnableSyncManChannel+0x2c>
}
 8021398:	3714      	adds	r7, #20
 802139a:	46bd      	mov	sp, r7
 802139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213a0:	4770      	bx	lr
 80213a2:	bf00      	nop

080213a4 <CheckSmSettings>:
 \brief    This function checks all SM channels

*////////////////////////////////////////////////////////////////////////////////////////

UINT8    CheckSmSettings(UINT8 maxChannel)
{
 80213a4:	b580      	push	{r7, lr}
 80213a6:	b086      	sub	sp, #24
 80213a8:	af00      	add	r7, sp, #0
 80213aa:	4603      	mov	r3, r0
 80213ac:	71fb      	strb	r3, [r7, #7]
    UINT8 i;
    UINT8 result = 0;
 80213ae:	2300      	movs	r3, #0
 80213b0:	75bb      	strb	r3, [r7, #22]
    TSYNCMAN ESCMEM *pSyncMan;
    UINT16 SMLength = 0;
 80213b2:	2300      	movs	r3, #0
 80213b4:	82bb      	strh	r3, [r7, #20]
    UINT16 SMAddress = 0;
 80213b6:	2300      	movs	r3, #0
 80213b8:	827b      	strh	r3, [r7, #18]

    //Check if max address defines are within the available ESC address range
    if((nMaxEscAddress < MAX_PD_WRITE_ADDRESS)
 80213ba:	4ba0      	ldr	r3, [pc, #640]	; (802163c <CheckSmSettings+0x298>)
 80213bc:	881b      	ldrh	r3, [r3, #0]
 80213be:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 80213c2:	4293      	cmp	r3, r2
 80213c4:	d911      	bls.n	80213ea <CheckSmSettings+0x46>
        ||(nMaxEscAddress < MAX_PD_READ_ADDRESS)
 80213c6:	4b9d      	ldr	r3, [pc, #628]	; (802163c <CheckSmSettings+0x298>)
 80213c8:	881b      	ldrh	r3, [r3, #0]
 80213ca:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 80213ce:	4293      	cmp	r3, r2
 80213d0:	d90b      	bls.n	80213ea <CheckSmSettings+0x46>
/*ECATCHANGE_START(V5.11) ESM5*/
        ||(nMaxEscAddress < MAX_MBX_WRITE_ADDRESS)
 80213d2:	4b9a      	ldr	r3, [pc, #616]	; (802163c <CheckSmSettings+0x298>)
 80213d4:	881b      	ldrh	r3, [r3, #0]
 80213d6:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 80213da:	4293      	cmp	r3, r2
 80213dc:	d905      	bls.n	80213ea <CheckSmSettings+0x46>
/*ECATCHANGE_END(V5.11) ESM5*/
        ||(nMaxEscAddress < MAX_MBX_READ_ADDRESS))
 80213de:	4b97      	ldr	r3, [pc, #604]	; (802163c <CheckSmSettings+0x298>)
 80213e0:	881b      	ldrh	r3, [r3, #0]
 80213e2:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 80213e6:	4293      	cmp	r3, r2
 80213e8:	d801      	bhi.n	80213ee <CheckSmSettings+0x4a>
    {
        /*The defines for maximum SM addresses are invalid for the used ESC (change the defines in the file ecat_def.h or the SSC Tool)
        It may be also required to adapt the SM settings in the ESI file*/

        return ALSTATUSCODE_NOVALIDFIRMWARE;
 80213ea:	2314      	movs	r3, #20
 80213ec:	e1a7      	b.n	802173e <CheckSmSettings+0x39a>
    }

    /* check the Sync Manager Parameter for the Receive Mailbox (Sync Manager Channel 0) */
/*ECATCHANGE_START(V5.11) HW1*/
    pSyncMan = GetSyncMan(MAILBOX_WRITE);
 80213ee:	2000      	movs	r0, #0
 80213f0:	f7ff ff6c 	bl	80212cc <GetSyncMan>
 80213f4:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/

    SMLength = pSyncMan->Length;
 80213f6:	68fb      	ldr	r3, [r7, #12]
 80213f8:	789a      	ldrb	r2, [r3, #2]
 80213fa:	78db      	ldrb	r3, [r3, #3]
 80213fc:	021b      	lsls	r3, r3, #8
 80213fe:	4313      	orrs	r3, r2
 8021400:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8021402:	68fb      	ldr	r3, [r7, #12]
 8021404:	781a      	ldrb	r2, [r3, #0]
 8021406:	785b      	ldrb	r3, [r3, #1]
 8021408:	021b      	lsls	r3, r3, #8
 802140a:	4313      	orrs	r3, r2
 802140c:	827b      	strh	r3, [r7, #18]


    if (!(pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE))
 802140e:	68fb      	ldr	r3, [r7, #12]
 8021410:	799b      	ldrb	r3, [r3, #6]
 8021412:	f003 0301 	and.w	r3, r3, #1
 8021416:	2b00      	cmp	r3, #0
 8021418:	d102      	bne.n	8021420 <CheckSmSettings+0x7c>
        /* receive mailbox is not enabled */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 802141a:	2316      	movs	r3, #22
 802141c:	75bb      	strb	r3, [r7, #22]
 802141e:	e02b      	b.n	8021478 <CheckSmSettings+0xd4>
    else if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) != SM_SETTING_DIRECTION_WRITE_VALUE)
 8021420:	68fb      	ldr	r3, [r7, #12]
 8021422:	791b      	ldrb	r3, [r3, #4]
 8021424:	f003 030c 	and.w	r3, r3, #12
 8021428:	2b04      	cmp	r3, #4
 802142a:	d002      	beq.n	8021432 <CheckSmSettings+0x8e>
       /* receive mailbox is not writable by the master*/
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 802142c:	2316      	movs	r3, #22
 802142e:	75bb      	strb	r3, [r7, #22]
 8021430:	e022      	b.n	8021478 <CheckSmSettings+0xd4>
    else if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) != SM_SETTING_MODE_ONE_BUFFER_VALUE )
 8021432:	68fb      	ldr	r3, [r7, #12]
 8021434:	791b      	ldrb	r3, [r3, #4]
 8021436:	f003 0302 	and.w	r3, r3, #2
 802143a:	2b00      	cmp	r3, #0
 802143c:	d102      	bne.n	8021444 <CheckSmSettings+0xa0>
        /* receive mailbox is not in one buffer mode */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 802143e:	2316      	movs	r3, #22
 8021440:	75bb      	strb	r3, [r7, #22]
 8021442:	e019      	b.n	8021478 <CheckSmSettings+0xd4>
    else if ( SMLength < MIN_MBX_SIZE )
 8021444:	8abb      	ldrh	r3, [r7, #20]
 8021446:	2b21      	cmp	r3, #33	; 0x21
 8021448:	d802      	bhi.n	8021450 <CheckSmSettings+0xac>
        /* receive mailbox size is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 802144a:	2316      	movs	r3, #22
 802144c:	75bb      	strb	r3, [r7, #22]
 802144e:	e013      	b.n	8021478 <CheckSmSettings+0xd4>
    else if ( SMLength > MAX_MBX_SIZE )
 8021450:	8abb      	ldrh	r3, [r7, #20]
 8021452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021456:	d902      	bls.n	802145e <CheckSmSettings+0xba>
        /* receive mailbox size is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021458:	2316      	movs	r3, #22
 802145a:	75bb      	strb	r3, [r7, #22]
 802145c:	e00c      	b.n	8021478 <CheckSmSettings+0xd4>
     else if ( SMAddress < MIN_MBX_WRITE_ADDRESS )
 802145e:	8a7b      	ldrh	r3, [r7, #18]
 8021460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021464:	d202      	bcs.n	802146c <CheckSmSettings+0xc8>
        /* receive mailbox address is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021466:	2316      	movs	r3, #22
 8021468:	75bb      	strb	r3, [r7, #22]
 802146a:	e005      	b.n	8021478 <CheckSmSettings+0xd4>
    else if ( SMAddress > MAX_MBX_WRITE_ADDRESS)
 802146c:	8a7b      	ldrh	r3, [r7, #18]
 802146e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8021472:	d301      	bcc.n	8021478 <CheckSmSettings+0xd4>
        /* receive mailbox address is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021474:	2316      	movs	r3, #22
 8021476:	75bb      	strb	r3, [r7, #22]


    if ( result == 0 )
 8021478:	7dbb      	ldrb	r3, [r7, #22]
 802147a:	2b00      	cmp	r3, #0
 802147c:	d144      	bne.n	8021508 <CheckSmSettings+0x164>
    {
        /* check the Sync Manager Parameter for the Send Mailbox (Sync Manager Channel 1) */
/*ECATCHANGE_START(V5.11) HW1*/
        pSyncMan = GetSyncMan(MAILBOX_READ);
 802147e:	2001      	movs	r0, #1
 8021480:	f7ff ff24 	bl	80212cc <GetSyncMan>
 8021484:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/

    SMLength = pSyncMan->Length;
 8021486:	68fb      	ldr	r3, [r7, #12]
 8021488:	789a      	ldrb	r2, [r3, #2]
 802148a:	78db      	ldrb	r3, [r3, #3]
 802148c:	021b      	lsls	r3, r3, #8
 802148e:	4313      	orrs	r3, r2
 8021490:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8021492:	68fb      	ldr	r3, [r7, #12]
 8021494:	781a      	ldrb	r2, [r3, #0]
 8021496:	785b      	ldrb	r3, [r3, #1]
 8021498:	021b      	lsls	r3, r3, #8
 802149a:	4313      	orrs	r3, r2
 802149c:	827b      	strh	r3, [r7, #18]


      if (!(pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE))
 802149e:	68fb      	ldr	r3, [r7, #12]
 80214a0:	799b      	ldrb	r3, [r3, #6]
 80214a2:	f003 0301 	and.w	r3, r3, #1
 80214a6:	2b00      	cmp	r3, #0
 80214a8:	d102      	bne.n	80214b0 <CheckSmSettings+0x10c>
            /* send mailbox is not enabled */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80214aa:	2316      	movs	r3, #22
 80214ac:	75bb      	strb	r3, [r7, #22]
 80214ae:	e02b      	b.n	8021508 <CheckSmSettings+0x164>
        else if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) != SM_SETTING_DIRECTION_READ_VALUE)
 80214b0:	68fb      	ldr	r3, [r7, #12]
 80214b2:	791b      	ldrb	r3, [r3, #4]
 80214b4:	f003 030c 	and.w	r3, r3, #12
 80214b8:	2b00      	cmp	r3, #0
 80214ba:	d002      	beq.n	80214c2 <CheckSmSettings+0x11e>
           /* receive mailbox is not readable by the master*/
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80214bc:	2316      	movs	r3, #22
 80214be:	75bb      	strb	r3, [r7, #22]
 80214c0:	e022      	b.n	8021508 <CheckSmSettings+0x164>
        else if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) != SM_SETTING_MODE_ONE_BUFFER_VALUE )
 80214c2:	68fb      	ldr	r3, [r7, #12]
 80214c4:	791b      	ldrb	r3, [r3, #4]
 80214c6:	f003 0302 	and.w	r3, r3, #2
 80214ca:	2b00      	cmp	r3, #0
 80214cc:	d102      	bne.n	80214d4 <CheckSmSettings+0x130>
            /* receive mailbox is not in one buffer mode */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80214ce:	2316      	movs	r3, #22
 80214d0:	75bb      	strb	r3, [r7, #22]
 80214d2:	e019      	b.n	8021508 <CheckSmSettings+0x164>
        else if ( SMLength < MIN_MBX_SIZE )
 80214d4:	8abb      	ldrh	r3, [r7, #20]
 80214d6:	2b21      	cmp	r3, #33	; 0x21
 80214d8:	d802      	bhi.n	80214e0 <CheckSmSettings+0x13c>
            /* send mailbox size is too small */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80214da:	2316      	movs	r3, #22
 80214dc:	75bb      	strb	r3, [r7, #22]
 80214de:	e013      	b.n	8021508 <CheckSmSettings+0x164>
        else if ( SMLength > MAX_MBX_SIZE )
 80214e0:	8abb      	ldrh	r3, [r7, #20]
 80214e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80214e6:	d902      	bls.n	80214ee <CheckSmSettings+0x14a>
            /* send mailbox size is too great */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80214e8:	2316      	movs	r3, #22
 80214ea:	75bb      	strb	r3, [r7, #22]
 80214ec:	e00c      	b.n	8021508 <CheckSmSettings+0x164>
         else if ( SMAddress < MIN_MBX_READ_ADDRESS )
 80214ee:	8a7b      	ldrh	r3, [r7, #18]
 80214f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80214f4:	d202      	bcs.n	80214fc <CheckSmSettings+0x158>
            /* send mailbox address is too small */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80214f6:	2316      	movs	r3, #22
 80214f8:	75bb      	strb	r3, [r7, #22]
 80214fa:	e005      	b.n	8021508 <CheckSmSettings+0x164>
        else if ( SMAddress > MAX_MBX_READ_ADDRESS )
 80214fc:	8a7b      	ldrh	r3, [r7, #18]
 80214fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8021502:	d301      	bcc.n	8021508 <CheckSmSettings+0x164>
            /* send mailbox address is too great */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021504:	2316      	movs	r3, #22
 8021506:	75bb      	strb	r3, [r7, #22]

    }

    if ( result == 0 && maxChannel > PROCESS_DATA_IN )
 8021508:	7dbb      	ldrb	r3, [r7, #22]
 802150a:	2b00      	cmp	r3, #0
 802150c:	d171      	bne.n	80215f2 <CheckSmSettings+0x24e>
 802150e:	79fb      	ldrb	r3, [r7, #7]
 8021510:	2b03      	cmp	r3, #3
 8021512:	d96e      	bls.n	80215f2 <CheckSmSettings+0x24e>
    {
        /* b3BufferMode is only set, if inputs and outputs are running in 3-Buffer-Mode when leaving this function */
        b3BufferMode = TRUE;
 8021514:	4b4a      	ldr	r3, [pc, #296]	; (8021640 <CheckSmSettings+0x29c>)
 8021516:	2201      	movs	r2, #1
 8021518:	701a      	strb	r2, [r3, #0]
        /* check the Sync Manager Parameter for the Inputs (Sync Manager Channel 2) */
/*ECATCHANGE_START(V5.11) HW1*/
        pSyncMan = GetSyncMan(PROCESS_DATA_IN);
 802151a:	2003      	movs	r0, #3
 802151c:	f7ff fed6 	bl	80212cc <GetSyncMan>
 8021520:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/

    SMLength = pSyncMan->Length;
 8021522:	68fb      	ldr	r3, [r7, #12]
 8021524:	789a      	ldrb	r2, [r3, #2]
 8021526:	78db      	ldrb	r3, [r3, #3]
 8021528:	021b      	lsls	r3, r3, #8
 802152a:	4313      	orrs	r3, r2
 802152c:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 802152e:	68fb      	ldr	r3, [r7, #12]
 8021530:	781a      	ldrb	r2, [r3, #0]
 8021532:	785b      	ldrb	r3, [r3, #1]
 8021534:	021b      	lsls	r3, r3, #8
 8021536:	4313      	orrs	r3, r2
 8021538:	827b      	strh	r3, [r7, #18]


        if ((pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE) != 0 && SMLength == 0 )
 802153a:	68fb      	ldr	r3, [r7, #12]
 802153c:	799b      	ldrb	r3, [r3, #6]
 802153e:	f003 0301 	and.w	r3, r3, #1
 8021542:	2b00      	cmp	r3, #0
 8021544:	d005      	beq.n	8021552 <CheckSmSettings+0x1ae>
 8021546:	8abb      	ldrh	r3, [r7, #20]
 8021548:	2b00      	cmp	r3, #0
 802154a:	d102      	bne.n	8021552 <CheckSmSettings+0x1ae>
            /* the SM3 size is 0 and the SM3 is active */
            result = SYNCMANCHSETTINGS+1;
 802154c:	2304      	movs	r3, #4
 802154e:	75bb      	strb	r3, [r7, #22]
 8021550:	e04a      	b.n	80215e8 <CheckSmSettings+0x244>
        else if (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE)
 8021552:	68fb      	ldr	r3, [r7, #12]
 8021554:	799b      	ldrb	r3, [r3, #6]
 8021556:	f003 0301 	and.w	r3, r3, #1
 802155a:	2b00      	cmp	r3, #0
 802155c:	d03b      	beq.n	80215d6 <CheckSmSettings+0x232>
        {
            /* Sync Manager Channel 3 is active, input size has to greater 0 */
            if ( SMLength != nPdInputSize || nPdInputSize == 0 || SMLength > MAX_PD_INPUT_SIZE)
 802155e:	4b39      	ldr	r3, [pc, #228]	; (8021644 <CheckSmSettings+0x2a0>)
 8021560:	881b      	ldrh	r3, [r3, #0]
 8021562:	8aba      	ldrh	r2, [r7, #20]
 8021564:	429a      	cmp	r2, r3
 8021566:	d106      	bne.n	8021576 <CheckSmSettings+0x1d2>
 8021568:	4b36      	ldr	r3, [pc, #216]	; (8021644 <CheckSmSettings+0x2a0>)
 802156a:	881b      	ldrh	r3, [r3, #0]
 802156c:	2b00      	cmp	r3, #0
 802156e:	d002      	beq.n	8021576 <CheckSmSettings+0x1d2>
 8021570:	8abb      	ldrh	r3, [r7, #20]
 8021572:	2b44      	cmp	r3, #68	; 0x44
 8021574:	d902      	bls.n	802157c <CheckSmSettings+0x1d8>
                /* sizes don't match */
                result = SYNCMANCHSIZE+1;
 8021576:	2303      	movs	r3, #3
 8021578:	75bb      	strb	r3, [r7, #22]
 802157a:	e035      	b.n	80215e8 <CheckSmSettings+0x244>
            else
                /* sizes matches */
            if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_READ_VALUE )
 802157c:	68fb      	ldr	r3, [r7, #12]
 802157e:	791b      	ldrb	r3, [r3, #4]
 8021580:	f003 030c 	and.w	r3, r3, #12
 8021584:	2b00      	cmp	r3, #0
 8021586:	d123      	bne.n	80215d0 <CheckSmSettings+0x22c>
            {
                /* settings match */
                if ( ( ( nAlStatus == STATE_PREOP )&&( SMAddress >= MIN_PD_READ_ADDRESS )&&( SMAddress <= MAX_PD_READ_ADDRESS ) )
 8021588:	4b2f      	ldr	r3, [pc, #188]	; (8021648 <CheckSmSettings+0x2a4>)
 802158a:	781b      	ldrb	r3, [r3, #0]
 802158c:	2b02      	cmp	r3, #2
 802158e:	d107      	bne.n	80215a0 <CheckSmSettings+0x1fc>
 8021590:	8a7b      	ldrh	r3, [r7, #18]
 8021592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021596:	d303      	bcc.n	80215a0 <CheckSmSettings+0x1fc>
 8021598:	8a7b      	ldrh	r3, [r7, #18]
 802159a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 802159e:	d308      	bcc.n	80215b2 <CheckSmSettings+0x20e>
                   ||( ( nAlStatus != STATE_PREOP )&&( SMAddress == nEscAddrInputData ) )
 80215a0:	4b29      	ldr	r3, [pc, #164]	; (8021648 <CheckSmSettings+0x2a4>)
 80215a2:	781b      	ldrb	r3, [r3, #0]
 80215a4:	2b02      	cmp	r3, #2
 80215a6:	d00f      	beq.n	80215c8 <CheckSmSettings+0x224>
 80215a8:	4b28      	ldr	r3, [pc, #160]	; (802164c <CheckSmSettings+0x2a8>)
 80215aa:	881b      	ldrh	r3, [r3, #0]
 80215ac:	8a7a      	ldrh	r2, [r7, #18]
 80215ae:	429a      	cmp	r2, r3
 80215b0:	d10a      	bne.n	80215c8 <CheckSmSettings+0x224>
                    )
                {
                    /* addresses match */

                    if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE )
 80215b2:	68fb      	ldr	r3, [r7, #12]
 80215b4:	791b      	ldrb	r3, [r3, #4]
 80215b6:	f003 0302 	and.w	r3, r3, #2
 80215ba:	2b00      	cmp	r3, #0
 80215bc:	d003      	beq.n	80215c6 <CheckSmSettings+0x222>
                        /* inputs are running in 1-Buffer-Mode, reset flag b3BufferMode */
                        b3BufferMode = FALSE;
 80215be:	4b20      	ldr	r3, [pc, #128]	; (8021640 <CheckSmSettings+0x29c>)
 80215c0:	2200      	movs	r2, #0
 80215c2:	701a      	strb	r2, [r3, #0]
                   ||( ( nAlStatus != STATE_PREOP )&&( SMAddress == nEscAddrInputData ) )
                    )
                {
                    /* addresses match */

                    if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE )
 80215c4:	e003      	b.n	80215ce <CheckSmSettings+0x22a>
 80215c6:	e002      	b.n	80215ce <CheckSmSettings+0x22a>
                        /* inputs are running in 1-Buffer-Mode, reset flag b3BufferMode */
                        b3BufferMode = FALSE;
                }
                else
                    /* input address is out of the allowed area or has changed in SAFEOP or OP */
                    result = SYNCMANCHADDRESS+1;
 80215c8:	2302      	movs	r3, #2
 80215ca:	75bb      	strb	r3, [r7, #22]
 80215cc:	e00c      	b.n	80215e8 <CheckSmSettings+0x244>
 80215ce:	e00b      	b.n	80215e8 <CheckSmSettings+0x244>
            }
            else
                /* input settings do not match */
                result = SYNCMANCHSETTINGS+1;
 80215d0:	2304      	movs	r3, #4
 80215d2:	75bb      	strb	r3, [r7, #22]
 80215d4:	e008      	b.n	80215e8 <CheckSmSettings+0x244>
        }
        else if ( SMLength != 0 || nPdInputSize != 0 )
 80215d6:	8abb      	ldrh	r3, [r7, #20]
 80215d8:	2b00      	cmp	r3, #0
 80215da:	d103      	bne.n	80215e4 <CheckSmSettings+0x240>
 80215dc:	4b19      	ldr	r3, [pc, #100]	; (8021644 <CheckSmSettings+0x2a0>)
 80215de:	881b      	ldrh	r3, [r3, #0]
 80215e0:	2b00      	cmp	r3, #0
 80215e2:	d001      	beq.n	80215e8 <CheckSmSettings+0x244>
            /* input size is not zero although the SM3 channel is not enabled */
            result = SYNCMANCHSIZE+1;
 80215e4:	2303      	movs	r3, #3
 80215e6:	75bb      	strb	r3, [r7, #22]



        if ( result != 0 )
 80215e8:	7dbb      	ldrb	r3, [r7, #22]
 80215ea:	2b00      	cmp	r3, #0
 80215ec:	d001      	beq.n	80215f2 <CheckSmSettings+0x24e>
        {
            result = ALSTATUSCODE_INVALIDSMINCFG;
 80215ee:	231e      	movs	r3, #30
 80215f0:	75bb      	strb	r3, [r7, #22]
        }
    }


//    else
    if ( result == 0 && maxChannel > PROCESS_DATA_OUT )
 80215f2:	7dbb      	ldrb	r3, [r7, #22]
 80215f4:	2b00      	cmp	r3, #0
 80215f6:	f040 808a 	bne.w	802170e <CheckSmSettings+0x36a>
 80215fa:	79fb      	ldrb	r3, [r7, #7]
 80215fc:	2b02      	cmp	r3, #2
 80215fe:	f240 8086 	bls.w	802170e <CheckSmSettings+0x36a>
    {
        /* check the Sync Manager Parameter for the Outputs (Sync Manager Channel 2) */
/*ECATCHANGE_START(V5.11) HW1*/
        pSyncMan = GetSyncMan(PROCESS_DATA_OUT);
 8021602:	2002      	movs	r0, #2
 8021604:	f7ff fe62 	bl	80212cc <GetSyncMan>
 8021608:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/

    SMLength = pSyncMan->Length;
 802160a:	68fb      	ldr	r3, [r7, #12]
 802160c:	789a      	ldrb	r2, [r3, #2]
 802160e:	78db      	ldrb	r3, [r3, #3]
 8021610:	021b      	lsls	r3, r3, #8
 8021612:	4313      	orrs	r3, r2
 8021614:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8021616:	68fb      	ldr	r3, [r7, #12]
 8021618:	781a      	ldrb	r2, [r3, #0]
 802161a:	785b      	ldrb	r3, [r3, #1]
 802161c:	021b      	lsls	r3, r3, #8
 802161e:	4313      	orrs	r3, r2
 8021620:	827b      	strh	r3, [r7, #18]


    if ( (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE) != 0 && SMLength == 0 )
 8021622:	68fb      	ldr	r3, [r7, #12]
 8021624:	799b      	ldrb	r3, [r3, #6]
 8021626:	f003 0301 	and.w	r3, r3, #1
 802162a:	2b00      	cmp	r3, #0
 802162c:	d010      	beq.n	8021650 <CheckSmSettings+0x2ac>
 802162e:	8abb      	ldrh	r3, [r7, #20]
 8021630:	2b00      	cmp	r3, #0
 8021632:	d10d      	bne.n	8021650 <CheckSmSettings+0x2ac>
            /* the SM2 size is 0 and the SM2 is active */
            result = SYNCMANCHSETTINGS+1;
 8021634:	2304      	movs	r3, #4
 8021636:	75bb      	strb	r3, [r7, #22]
 8021638:	e064      	b.n	8021704 <CheckSmSettings+0x360>
 802163a:	bf00      	nop
 802163c:	1fff2570 	.word	0x1fff2570
 8021640:	1fff253c 	.word	0x1fff253c
 8021644:	1fff256c 	.word	0x1fff256c
 8021648:	1fff2541 	.word	0x1fff2541
 802164c:	1fff2584 	.word	0x1fff2584
        else if (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE)
 8021650:	68fb      	ldr	r3, [r7, #12]
 8021652:	799b      	ldrb	r3, [r3, #6]
 8021654:	f003 0301 	and.w	r3, r3, #1
 8021658:	2b00      	cmp	r3, #0
 802165a:	d04a      	beq.n	80216f2 <CheckSmSettings+0x34e>
        {
            /* Sync Manager Channel 2 is active, output size has to greater 0 */
            if ( SMLength == nPdOutputSize && nPdOutputSize != 0 && SMLength <= ((UINT16)MAX_PD_OUTPUT_SIZE))
 802165c:	4b3a      	ldr	r3, [pc, #232]	; (8021748 <CheckSmSettings+0x3a4>)
 802165e:	881b      	ldrh	r3, [r3, #0]
 8021660:	8aba      	ldrh	r2, [r7, #20]
 8021662:	429a      	cmp	r2, r3
 8021664:	d141      	bne.n	80216ea <CheckSmSettings+0x346>
 8021666:	4b38      	ldr	r3, [pc, #224]	; (8021748 <CheckSmSettings+0x3a4>)
 8021668:	881b      	ldrh	r3, [r3, #0]
 802166a:	2b00      	cmp	r3, #0
 802166c:	d03d      	beq.n	80216ea <CheckSmSettings+0x346>
 802166e:	8abb      	ldrh	r3, [r7, #20]
 8021670:	2b44      	cmp	r3, #68	; 0x44
 8021672:	d83a      	bhi.n	80216ea <CheckSmSettings+0x346>

            {
                /* sizes match */
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 8021674:	68fb      	ldr	r3, [r7, #12]
 8021676:	791b      	ldrb	r3, [r3, #4]
 8021678:	f003 030c 	and.w	r3, r3, #12
 802167c:	2b04      	cmp	r3, #4
 802167e:	d130      	bne.n	80216e2 <CheckSmSettings+0x33e>
                {
                    /* settings match */
                    if ( ( ( nAlStatus == STATE_PREOP )&&( SMAddress >= MIN_PD_WRITE_ADDRESS )&&( SMAddress <= MAX_PD_WRITE_ADDRESS ) )
 8021680:	4b32      	ldr	r3, [pc, #200]	; (802174c <CheckSmSettings+0x3a8>)
 8021682:	781b      	ldrb	r3, [r3, #0]
 8021684:	2b02      	cmp	r3, #2
 8021686:	d107      	bne.n	8021698 <CheckSmSettings+0x2f4>
 8021688:	8a7b      	ldrh	r3, [r7, #18]
 802168a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802168e:	d303      	bcc.n	8021698 <CheckSmSettings+0x2f4>
 8021690:	8a7b      	ldrh	r3, [r7, #18]
 8021692:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8021696:	d308      	bcc.n	80216aa <CheckSmSettings+0x306>
                       ||( ( nAlStatus != STATE_PREOP )&&( SMAddress == nEscAddrOutputData ) )
 8021698:	4b2c      	ldr	r3, [pc, #176]	; (802174c <CheckSmSettings+0x3a8>)
 802169a:	781b      	ldrb	r3, [r3, #0]
 802169c:	2b02      	cmp	r3, #2
 802169e:	d01c      	beq.n	80216da <CheckSmSettings+0x336>
 80216a0:	4b2b      	ldr	r3, [pc, #172]	; (8021750 <CheckSmSettings+0x3ac>)
 80216a2:	881b      	ldrh	r3, [r3, #0]
 80216a4:	8a7a      	ldrh	r2, [r7, #18]
 80216a6:	429a      	cmp	r2, r3
 80216a8:	d117      	bne.n	80216da <CheckSmSettings+0x336>
                        )
                    {
                        /* addresses match */
                        {
                            /* check, if watchdog trigger is enabled */
                            if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_WATCHDOG_VALUE)
 80216aa:	68fb      	ldr	r3, [r7, #12]
 80216ac:	791b      	ldrb	r3, [r3, #4]
 80216ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80216b2:	2b00      	cmp	r3, #0
 80216b4:	d003      	beq.n	80216be <CheckSmSettings+0x31a>
                            {
                                bWdTrigger = TRUE;
 80216b6:	4b27      	ldr	r3, [pc, #156]	; (8021754 <CheckSmSettings+0x3b0>)
 80216b8:	2201      	movs	r2, #1
 80216ba:	701a      	strb	r2, [r3, #0]
 80216bc:	e002      	b.n	80216c4 <CheckSmSettings+0x320>
                            }
                            else
                            {
                                bWdTrigger = FALSE;
 80216be:	4b25      	ldr	r3, [pc, #148]	; (8021754 <CheckSmSettings+0x3b0>)
 80216c0:	2200      	movs	r2, #0
 80216c2:	701a      	strb	r2, [r3, #0]
                            }

                            if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE )
 80216c4:	68fb      	ldr	r3, [r7, #12]
 80216c6:	791b      	ldrb	r3, [r3, #4]
 80216c8:	f003 0302 	and.w	r3, r3, #2
 80216cc:	2b00      	cmp	r3, #0
 80216ce:	d003      	beq.n	80216d8 <CheckSmSettings+0x334>
                                /* outputs are running in 1-Buffer-Mode, reset flag b3BufferMode */
                                b3BufferMode = FALSE;
 80216d0:	4b21      	ldr	r3, [pc, #132]	; (8021758 <CheckSmSettings+0x3b4>)
 80216d2:	2200      	movs	r2, #0
 80216d4:	701a      	strb	r2, [r3, #0]
                            else
                            {
                                bWdTrigger = FALSE;
                            }

                            if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE )
 80216d6:	e003      	b.n	80216e0 <CheckSmSettings+0x33c>
 80216d8:	e002      	b.n	80216e0 <CheckSmSettings+0x33c>
                                b3BufferMode = FALSE;
                        }
                    }
                    else
                        /* output address is out of the allowed area or has changed in SAFEOP or OP */
                        result = SYNCMANCHADDRESS+1;
 80216da:	2302      	movs	r3, #2
 80216dc:	75bb      	strb	r3, [r7, #22]
 80216de:	e003      	b.n	80216e8 <CheckSmSettings+0x344>
 80216e0:	e002      	b.n	80216e8 <CheckSmSettings+0x344>
                }
                else
                    /* output settings do not match */
                    result = SYNCMANCHSETTINGS+1;
 80216e2:	2304      	movs	r3, #4
 80216e4:	75bb      	strb	r3, [r7, #22]
            /* Sync Manager Channel 2 is active, output size has to greater 0 */
            if ( SMLength == nPdOutputSize && nPdOutputSize != 0 && SMLength <= ((UINT16)MAX_PD_OUTPUT_SIZE))

            {
                /* sizes match */
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 80216e6:	e003      	b.n	80216f0 <CheckSmSettings+0x34c>
 80216e8:	e002      	b.n	80216f0 <CheckSmSettings+0x34c>
                    /* output settings do not match */
                    result = SYNCMANCHSETTINGS+1;
            }
            else
                /* output sizes don't match */
                result = SYNCMANCHSIZE+1;
 80216ea:	2303      	movs	r3, #3
 80216ec:	75bb      	strb	r3, [r7, #22]
 80216ee:	e009      	b.n	8021704 <CheckSmSettings+0x360>
 80216f0:	e008      	b.n	8021704 <CheckSmSettings+0x360>
        }
        else if ( SMLength != 0 || nPdOutputSize != 0 )
 80216f2:	8abb      	ldrh	r3, [r7, #20]
 80216f4:	2b00      	cmp	r3, #0
 80216f6:	d103      	bne.n	8021700 <CheckSmSettings+0x35c>
 80216f8:	4b13      	ldr	r3, [pc, #76]	; (8021748 <CheckSmSettings+0x3a4>)
 80216fa:	881b      	ldrh	r3, [r3, #0]
 80216fc:	2b00      	cmp	r3, #0
 80216fe:	d001      	beq.n	8021704 <CheckSmSettings+0x360>
            /* output size is not zero although the SM2 channel is not enabled */
            result = SYNCMANCHSIZE+1;
 8021700:	2303      	movs	r3, #3
 8021702:	75bb      	strb	r3, [r7, #22]

        if ( result != 0 )
 8021704:	7dbb      	ldrb	r3, [r7, #22]
 8021706:	2b00      	cmp	r3, #0
 8021708:	d001      	beq.n	802170e <CheckSmSettings+0x36a>
        {
            result = ALSTATUSCODE_INVALIDSMOUTCFG;
 802170a:	231d      	movs	r3, #29
 802170c:	75bb      	strb	r3, [r7, #22]
        }
    }


    if ( result == 0 )
 802170e:	7dbb      	ldrb	r3, [r7, #22]
 8021710:	2b00      	cmp	r3, #0
 8021712:	d113      	bne.n	802173c <CheckSmSettings+0x398>
    {
        /* the Enable-Byte of the rest of the SM channels has to be read to acknowledge the SM-Change-Interrupt */
        for (i = maxChannel; i < nMaxSyncMan; i++)
 8021714:	79fb      	ldrb	r3, [r7, #7]
 8021716:	75fb      	strb	r3, [r7, #23]
 8021718:	e00b      	b.n	8021732 <CheckSmSettings+0x38e>
        {
/*ECATCHANGE_START(V5.11) HW1*/
            pSyncMan = GetSyncMan(i);
 802171a:	7dfb      	ldrb	r3, [r7, #23]
 802171c:	4618      	mov	r0, r3
 802171e:	f7ff fdd5 	bl	80212cc <GetSyncMan>
 8021722:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/
            SMActivate = pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET];
 8021724:	68fb      	ldr	r3, [r7, #12]
 8021726:	799a      	ldrb	r2, [r3, #6]
 8021728:	4b0c      	ldr	r3, [pc, #48]	; (802175c <CheckSmSettings+0x3b8>)
 802172a:	701a      	strb	r2, [r3, #0]


    if ( result == 0 )
    {
        /* the Enable-Byte of the rest of the SM channels has to be read to acknowledge the SM-Change-Interrupt */
        for (i = maxChannel; i < nMaxSyncMan; i++)
 802172c:	7dfb      	ldrb	r3, [r7, #23]
 802172e:	3301      	adds	r3, #1
 8021730:	75fb      	strb	r3, [r7, #23]
 8021732:	4b0b      	ldr	r3, [pc, #44]	; (8021760 <CheckSmSettings+0x3bc>)
 8021734:	781b      	ldrb	r3, [r3, #0]
 8021736:	7dfa      	ldrb	r2, [r7, #23]
 8021738:	429a      	cmp	r2, r3
 802173a:	d3ee      	bcc.n	802171a <CheckSmSettings+0x376>
            pSyncMan = GetSyncMan(i);
/*ECATCHANGE_END(V5.11) HW1*/
            SMActivate = pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET];
        }
    }
    return result;
 802173c:	7dbb      	ldrb	r3, [r7, #22]
}
 802173e:	4618      	mov	r0, r3
 8021740:	3718      	adds	r7, #24
 8021742:	46bd      	mov	sp, r7
 8021744:	bd80      	pop	{r7, pc}
 8021746:	bf00      	nop
 8021748:	1fff2542 	.word	0x1fff2542
 802174c:	1fff2541 	.word	0x1fff2541
 8021750:	1fff254e 	.word	0x1fff254e
 8021754:	1fff257e 	.word	0x1fff257e
 8021758:	1fff253c 	.word	0x1fff253c
 802175c:	1fff146d 	.word	0x1fff146d
 8021760:	1fff2582 	.word	0x1fff2582

08021764 <StartInputHandler>:
 \brief  and the AL Event Mask register will be set

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 StartInputHandler(void)
{
 8021764:	b580      	push	{r7, lr}
 8021766:	b08c      	sub	sp, #48	; 0x30
 8021768:	af00      	add	r7, sp, #0
    TSYNCMAN ESCMEM * pSyncMan;
    UINT8        dcControl;
    UINT16     wdiv = 0;
 802176a:	2300      	movs	r3, #0
 802176c:	84bb      	strh	r3, [r7, #36]	; 0x24
/*ECATCHANGE_START(V5.11) ECAT4*/
    UINT16     wd = 0;
 802176e:	2300      	movs	r3, #0
 8021770:	847b      	strh	r3, [r7, #34]	; 0x22
/*ECATCHANGE_END(V5.11) ECAT4*/
    UINT32     cycleTimeSync0 = 0; /* Sync0 cycle time */
 8021772:	2300      	movs	r3, #0
 8021774:	61fb      	str	r3, [r7, #28]
    UINT32     cycleTimeSync1 = 0; /* Delay between the Sync0 and Sycn1 signal. A new Sync1 cycle starts on the next Sync0 signal after Sync1 signal.*/
 8021776:	2300      	movs	r3, #0
 8021778:	61bb      	str	r3, [r7, #24]
    BOOL bSubordinatedCycles = FALSE;
 802177a:	2300      	movs	r3, #0
 802177c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    UINT16    nPdInputBuffer = 3;
 8021780:	2303      	movs	r3, #3
 8021782:	85bb      	strh	r3, [r7, #44]	; 0x2c
    UINT16    nPdOutputBuffer = 3;
 8021784:	2303      	movs	r3, #3
 8021786:	857b      	strh	r3, [r7, #42]	; 0x2a

    UINT16 SyncType0x1C32 = 0; /* Helper variable for sync type for SM2 (required if no CoE is supported or no output process data available)*/
 8021788:	2300      	movs	r3, #0
 802178a:	853b      	strh	r3, [r7, #40]	; 0x28
    UINT16 SyncType0x1C33 = 0; /* Helper variable for sync type for SM3 (required if no CoE is supported or no input process data available)*/
 802178c:	2300      	movs	r3, #0
 802178e:	84fb      	strh	r3, [r7, #38]	; 0x26

    UINT16 u16MinSuppSyncType = 0xFFFF;  /* Minimum supported Sync Types */
 8021790:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021794:	82fb      	strh	r3, [r7, #22]

    u16MinSuppSyncType &= sSyncManOutPar.u16SyncTypesSupported;
 8021796:	4ba2      	ldr	r3, [pc, #648]	; (8021a20 <StartInputHandler+0x2bc>)
 8021798:	899a      	ldrh	r2, [r3, #12]
 802179a:	8afb      	ldrh	r3, [r7, #22]
 802179c:	4013      	ands	r3, r2
 802179e:	82fb      	strh	r3, [r7, #22]
    u16MinSuppSyncType &= sSyncManInPar.u16SyncTypesSupported;
 80217a0:	4ba0      	ldr	r3, [pc, #640]	; (8021a24 <StartInputHandler+0x2c0>)
 80217a2:	899a      	ldrh	r2, [r3, #12]
 80217a4:	8afb      	ldrh	r3, [r7, #22]
 80217a6:	4013      	ands	r3, r2
 80217a8:	82fb      	strh	r3, [r7, #22]

    u16ALEventMask = 0;
 80217aa:	4b9f      	ldr	r3, [pc, #636]	; (8021a28 <StartInputHandler+0x2c4>)
 80217ac:	2200      	movs	r2, #0
 80217ae:	801a      	strh	r2, [r3, #0]

    /* 
        --- Check if SyncManager areas overlapping --- 
    */
    bEcatFirstOutputsReceived = FALSE;
 80217b0:	4b9e      	ldr	r3, [pc, #632]	; (8021a2c <StartInputHandler+0x2c8>)
 80217b2:	2200      	movs	r2, #0
 80217b4:	701a      	strb	r2, [r3, #0]

    /* get a pointer to the Sync Manager Channel 2 (Outputs) */
/*ECATCHANGE_START(V5.11) HW1*/
    pSyncMan = GetSyncMan(PROCESS_DATA_OUT);
 80217b6:	2002      	movs	r0, #2
 80217b8:	f7ff fd88 	bl	80212cc <GetSyncMan>
 80217bc:	6138      	str	r0, [r7, #16]
/*ECATCHANGE_END(V5.11) HW1*/
    /* store the address of the Sync Manager Channel 2 (Outputs) */
    nEscAddrOutputData = pSyncMan->PhysicalStartAddress;
 80217be:	693b      	ldr	r3, [r7, #16]
 80217c0:	881b      	ldrh	r3, [r3, #0]
 80217c2:	b29a      	uxth	r2, r3
 80217c4:	4b9a      	ldr	r3, [pc, #616]	; (8021a30 <StartInputHandler+0x2cc>)
 80217c6:	801a      	strh	r2, [r3, #0]
    /* get the number of output buffer used for calculating the address areas */
    if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_ONE_BUFFER_VALUE)
 80217c8:	693b      	ldr	r3, [r7, #16]
 80217ca:	791b      	ldrb	r3, [r3, #4]
 80217cc:	f003 0302 	and.w	r3, r3, #2
 80217d0:	2b00      	cmp	r3, #0
 80217d2:	d001      	beq.n	80217d8 <StartInputHandler+0x74>
    {
       nPdOutputBuffer = 1;
 80217d4:	2301      	movs	r3, #1
 80217d6:	857b      	strh	r3, [r7, #42]	; 0x2a
    }


    /* get a pointer to the Sync Manager Channel 3 (Inputs) */
/*ECATCHANGE_START(V5.11) HW1*/
    pSyncMan = GetSyncMan(PROCESS_DATA_IN);
 80217d8:	2003      	movs	r0, #3
 80217da:	f7ff fd77 	bl	80212cc <GetSyncMan>
 80217de:	6138      	str	r0, [r7, #16]
/*ECATCHANGE_END(V5.11) HW1*/
    /* store the address of the Sync Manager Channel 3 (Inputs)*/
    nEscAddrInputData = pSyncMan->PhysicalStartAddress;
 80217e0:	693b      	ldr	r3, [r7, #16]
 80217e2:	881b      	ldrh	r3, [r3, #0]
 80217e4:	b29a      	uxth	r2, r3
 80217e6:	4b93      	ldr	r3, [pc, #588]	; (8021a34 <StartInputHandler+0x2d0>)
 80217e8:	801a      	strh	r2, [r3, #0]
    
    /* get the number of input buffer used for calculating the address areas */
    if ( pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_ONE_BUFFER_VALUE )
 80217ea:	693b      	ldr	r3, [r7, #16]
 80217ec:	791b      	ldrb	r3, [r3, #4]
 80217ee:	f003 0302 	and.w	r3, r3, #2
 80217f2:	2b00      	cmp	r3, #0
 80217f4:	d001      	beq.n	80217fa <StartInputHandler+0x96>
        nPdInputBuffer = 1;
 80217f6:	2301      	movs	r3, #1
 80217f8:	85bb      	strh	r3, [r7, #44]	; 0x2c

    /* it has be checked if the Sync Manager memory areas for Inputs and Outputs will not overlap
       the Sync Manager memory areas for the Mailbox */

    if (((nEscAddrInputData + nPdInputSize * nPdInputBuffer) > u16EscAddrSendMbx && (nEscAddrInputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 80217fa:	4b8e      	ldr	r3, [pc, #568]	; (8021a34 <StartInputHandler+0x2d0>)
 80217fc:	881b      	ldrh	r3, [r3, #0]
 80217fe:	461a      	mov	r2, r3
 8021800:	4b8d      	ldr	r3, [pc, #564]	; (8021a38 <StartInputHandler+0x2d4>)
 8021802:	881b      	ldrh	r3, [r3, #0]
 8021804:	4619      	mov	r1, r3
 8021806:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8021808:	fb03 f301 	mul.w	r3, r3, r1
 802180c:	4413      	add	r3, r2
 802180e:	4a8b      	ldr	r2, [pc, #556]	; (8021a3c <StartInputHandler+0x2d8>)
 8021810:	8812      	ldrh	r2, [r2, #0]
 8021812:	4293      	cmp	r3, r2
 8021814:	dd0a      	ble.n	802182c <StartInputHandler+0xc8>
 8021816:	4b87      	ldr	r3, [pc, #540]	; (8021a34 <StartInputHandler+0x2d0>)
 8021818:	881b      	ldrh	r3, [r3, #0]
 802181a:	461a      	mov	r2, r3
 802181c:	4b87      	ldr	r3, [pc, #540]	; (8021a3c <StartInputHandler+0x2d8>)
 802181e:	881b      	ldrh	r3, [r3, #0]
 8021820:	4619      	mov	r1, r3
 8021822:	4b87      	ldr	r3, [pc, #540]	; (8021a40 <StartInputHandler+0x2dc>)
 8021824:	881b      	ldrh	r3, [r3, #0]
 8021826:	440b      	add	r3, r1
 8021828:	429a      	cmp	r2, r3
 802182a:	db18      	blt.n	802185e <StartInputHandler+0xfa>
       || ((nEscAddrInputData + nPdInputSize * nPdInputBuffer) > u16EscAddrReceiveMbx && (nEscAddrInputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
 802182c:	4b81      	ldr	r3, [pc, #516]	; (8021a34 <StartInputHandler+0x2d0>)
 802182e:	881b      	ldrh	r3, [r3, #0]
 8021830:	461a      	mov	r2, r3
 8021832:	4b81      	ldr	r3, [pc, #516]	; (8021a38 <StartInputHandler+0x2d4>)
 8021834:	881b      	ldrh	r3, [r3, #0]
 8021836:	4619      	mov	r1, r3
 8021838:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802183a:	fb03 f301 	mul.w	r3, r3, r1
 802183e:	4413      	add	r3, r2
 8021840:	4a80      	ldr	r2, [pc, #512]	; (8021a44 <StartInputHandler+0x2e0>)
 8021842:	8812      	ldrh	r2, [r2, #0]
 8021844:	4293      	cmp	r3, r2
 8021846:	dd0c      	ble.n	8021862 <StartInputHandler+0xfe>
 8021848:	4b7a      	ldr	r3, [pc, #488]	; (8021a34 <StartInputHandler+0x2d0>)
 802184a:	881b      	ldrh	r3, [r3, #0]
 802184c:	461a      	mov	r2, r3
 802184e:	4b7d      	ldr	r3, [pc, #500]	; (8021a44 <StartInputHandler+0x2e0>)
 8021850:	881b      	ldrh	r3, [r3, #0]
 8021852:	4619      	mov	r1, r3
 8021854:	4b7c      	ldr	r3, [pc, #496]	; (8021a48 <StartInputHandler+0x2e4>)
 8021856:	881b      	ldrh	r3, [r3, #0]
 8021858:	440b      	add	r3, r1
 802185a:	429a      	cmp	r2, r3
 802185c:	da01      	bge.n	8021862 <StartInputHandler+0xfe>
        )
    {
        return ALSTATUSCODE_INVALIDSMINCFG;
 802185e:	231e      	movs	r3, #30
 8021860:	e30a      	b.n	8021e78 <StartInputHandler+0x714>
    }

    if (
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 8021862:	4b73      	ldr	r3, [pc, #460]	; (8021a30 <StartInputHandler+0x2cc>)
 8021864:	881b      	ldrh	r3, [r3, #0]
 8021866:	461a      	mov	r2, r3
 8021868:	4b78      	ldr	r3, [pc, #480]	; (8021a4c <StartInputHandler+0x2e8>)
 802186a:	881b      	ldrh	r3, [r3, #0]
 802186c:	4619      	mov	r1, r3
 802186e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8021870:	fb03 f301 	mul.w	r3, r3, r1
 8021874:	4413      	add	r3, r2
 8021876:	4a71      	ldr	r2, [pc, #452]	; (8021a3c <StartInputHandler+0x2d8>)
 8021878:	8812      	ldrh	r2, [r2, #0]
        )
    {
        return ALSTATUSCODE_INVALIDSMINCFG;
    }

    if (
 802187a:	4293      	cmp	r3, r2
 802187c:	dd0a      	ble.n	8021894 <StartInputHandler+0x130>
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 802187e:	4b6c      	ldr	r3, [pc, #432]	; (8021a30 <StartInputHandler+0x2cc>)
 8021880:	881b      	ldrh	r3, [r3, #0]
 8021882:	461a      	mov	r2, r3
 8021884:	4b6d      	ldr	r3, [pc, #436]	; (8021a3c <StartInputHandler+0x2d8>)
 8021886:	881b      	ldrh	r3, [r3, #0]
 8021888:	4619      	mov	r1, r3
 802188a:	4b6d      	ldr	r3, [pc, #436]	; (8021a40 <StartInputHandler+0x2dc>)
 802188c:	881b      	ldrh	r3, [r3, #0]
 802188e:	440b      	add	r3, r1
 8021890:	429a      	cmp	r2, r3
 8021892:	db31      	blt.n	80218f8 <StartInputHandler+0x194>
        ||((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrReceiveMbx && (nEscAddrOutputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
 8021894:	4b66      	ldr	r3, [pc, #408]	; (8021a30 <StartInputHandler+0x2cc>)
 8021896:	881b      	ldrh	r3, [r3, #0]
 8021898:	461a      	mov	r2, r3
 802189a:	4b6c      	ldr	r3, [pc, #432]	; (8021a4c <StartInputHandler+0x2e8>)
 802189c:	881b      	ldrh	r3, [r3, #0]
 802189e:	4619      	mov	r1, r3
 80218a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80218a2:	fb03 f301 	mul.w	r3, r3, r1
 80218a6:	4413      	add	r3, r2
 80218a8:	4a66      	ldr	r2, [pc, #408]	; (8021a44 <StartInputHandler+0x2e0>)
 80218aa:	8812      	ldrh	r2, [r2, #0]
 80218ac:	4293      	cmp	r3, r2
 80218ae:	dd0a      	ble.n	80218c6 <StartInputHandler+0x162>
 80218b0:	4b5f      	ldr	r3, [pc, #380]	; (8021a30 <StartInputHandler+0x2cc>)
 80218b2:	881b      	ldrh	r3, [r3, #0]
 80218b4:	461a      	mov	r2, r3
 80218b6:	4b63      	ldr	r3, [pc, #396]	; (8021a44 <StartInputHandler+0x2e0>)
 80218b8:	881b      	ldrh	r3, [r3, #0]
 80218ba:	4619      	mov	r1, r3
 80218bc:	4b62      	ldr	r3, [pc, #392]	; (8021a48 <StartInputHandler+0x2e4>)
 80218be:	881b      	ldrh	r3, [r3, #0]
 80218c0:	440b      	add	r3, r1
 80218c2:	429a      	cmp	r2, r3
 80218c4:	db18      	blt.n	80218f8 <StartInputHandler+0x194>
        ||
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > nEscAddrInputData && (nEscAddrOutputData < (nEscAddrInputData + nPdInputSize)))
 80218c6:	4b5a      	ldr	r3, [pc, #360]	; (8021a30 <StartInputHandler+0x2cc>)
 80218c8:	881b      	ldrh	r3, [r3, #0]
 80218ca:	461a      	mov	r2, r3
 80218cc:	4b5f      	ldr	r3, [pc, #380]	; (8021a4c <StartInputHandler+0x2e8>)
 80218ce:	881b      	ldrh	r3, [r3, #0]
 80218d0:	4619      	mov	r1, r3
 80218d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80218d4:	fb03 f301 	mul.w	r3, r3, r1
 80218d8:	4413      	add	r3, r2
 80218da:	4a56      	ldr	r2, [pc, #344]	; (8021a34 <StartInputHandler+0x2d0>)
 80218dc:	8812      	ldrh	r2, [r2, #0]
    }

    if (
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
        ||((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrReceiveMbx && (nEscAddrOutputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
        ||
 80218de:	4293      	cmp	r3, r2
 80218e0:	dd0c      	ble.n	80218fc <StartInputHandler+0x198>
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > nEscAddrInputData && (nEscAddrOutputData < (nEscAddrInputData + nPdInputSize)))
 80218e2:	4b53      	ldr	r3, [pc, #332]	; (8021a30 <StartInputHandler+0x2cc>)
 80218e4:	881b      	ldrh	r3, [r3, #0]
 80218e6:	461a      	mov	r2, r3
 80218e8:	4b52      	ldr	r3, [pc, #328]	; (8021a34 <StartInputHandler+0x2d0>)
 80218ea:	881b      	ldrh	r3, [r3, #0]
 80218ec:	4619      	mov	r1, r3
 80218ee:	4b52      	ldr	r3, [pc, #328]	; (8021a38 <StartInputHandler+0x2d4>)
 80218f0:	881b      	ldrh	r3, [r3, #0]
 80218f2:	440b      	add	r3, r1
 80218f4:	429a      	cmp	r2, r3
 80218f6:	da01      	bge.n	80218fc <StartInputHandler+0x198>
        )
    {
        /* Sync Manager Channel 2 memory area (Outputs) overlaps the Sync Manager memory areas for the Mailbox
           or the Sync Manager Channel 3 memory area (Inputs) */
        return ALSTATUSCODE_INVALIDSMOUTCFG;
 80218f8:	231d      	movs	r3, #29
 80218fa:	e2bd      	b.n	8021e78 <StartInputHandler+0x714>
        --- Check configured synchronisation ---
    */

    /* Get the DC Control/Activation register value*/
    /*Read register 0x981 (corresponding masks are adapted)*/
    HW_EscReadByte(dcControl, ESC_DC_SYNC_ACTIVATION_OFFSET);
 80218fc:	4b54      	ldr	r3, [pc, #336]	; (8021a50 <StartInputHandler+0x2ec>)
 80218fe:	781b      	ldrb	r3, [r3, #0]
 8021900:	73fb      	strb	r3, [r7, #15]

    // Cycle time for Sync0
        HW_EscReadDWord(cycleTimeSync0, ESC_DC_SYNC0_CYCLETIME_OFFSET);
 8021902:	4b54      	ldr	r3, [pc, #336]	; (8021a54 <StartInputHandler+0x2f0>)
 8021904:	681b      	ldr	r3, [r3, #0]
 8021906:	61fb      	str	r3, [r7, #28]
        cycleTimeSync0 = SWAPDWORD(cycleTimeSync0);

    // Cycle time for Sync1
        HW_EscReadDWord(cycleTimeSync1, ESC_DC_SYNC1_CYCLETIME_OFFSET);
 8021908:	4b53      	ldr	r3, [pc, #332]	; (8021a58 <StartInputHandler+0x2f4>)
 802190a:	681b      	ldr	r3, [r3, #0]
 802190c:	61bb      	str	r3, [r7, #24]
        cycleTimeSync1 = SWAPDWORD(cycleTimeSync1);


    SyncType0x1C32 = sSyncManOutPar.u16SyncType;
 802190e:	4b44      	ldr	r3, [pc, #272]	; (8021a20 <StartInputHandler+0x2bc>)
 8021910:	885b      	ldrh	r3, [r3, #2]
 8021912:	853b      	strh	r3, [r7, #40]	; 0x28
    SyncType0x1C33 = sSyncManInPar.u16SyncType;
 8021914:	4b43      	ldr	r3, [pc, #268]	; (8021a24 <StartInputHandler+0x2c0>)
 8021916:	885b      	ldrh	r3, [r3, #2]
 8021918:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* check general DC register plausibility and if configuration is supported
       - 0x981 DC Active
       - 0x9A0:0x9A3 Sync0 Cycle
       - 0x9A4:0x9A7 Sync1 Cycle
    */
    if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) != 0)
 802191a:	7bfb      	ldrb	r3, [r7, #15]
 802191c:	f003 0309 	and.w	r3, r3, #9
 8021920:	2b00      	cmp	r3, #0
 8021922:	d058      	beq.n	80219d6 <StartInputHandler+0x272>
    {
        /* DC unit is active at least one Sync signal shall be generated */
        if((dcControl & (ESC_DC_SYNC0_ACTIVE_MASK | ESC_DC_SYNC1_ACTIVE_MASK)) == 0)
 8021924:	7bfb      	ldrb	r3, [r7, #15]
 8021926:	f003 0306 	and.w	r3, r3, #6
 802192a:	2b00      	cmp	r3, #0
 802192c:	d101      	bne.n	8021932 <StartInputHandler+0x1ce>
        {
            return ALSTATUSCODE_DCINVALIDSYNCCFG;
 802192e:	2330      	movs	r3, #48	; 0x30
 8021930:	e2a2      	b.n	8021e78 <StartInputHandler+0x714>
        }

        /* If Sync1 shall only be active if also Sync0 will be generated*/
        if(((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) == 0)
 8021932:	7bfb      	ldrb	r3, [r7, #15]
 8021934:	f003 0302 	and.w	r3, r3, #2
 8021938:	2b00      	cmp	r3, #0
 802193a:	d106      	bne.n	802194a <StartInputHandler+0x1e6>
            && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0))
 802193c:	7bfb      	ldrb	r3, [r7, #15]
 802193e:	f003 0304 	and.w	r3, r3, #4
 8021942:	2b00      	cmp	r3, #0
 8021944:	d001      	beq.n	802194a <StartInputHandler+0x1e6>
        {
            return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8021946:	2330      	movs	r3, #48	; 0x30
 8021948:	e296      	b.n	8021e78 <StartInputHandler+0x714>
        }

        if(u16MinSuppSyncType != 0)
 802194a:	8afb      	ldrh	r3, [r7, #22]
 802194c:	2b00      	cmp	r3, #0
 802194e:	d015      	beq.n	802197c <StartInputHandler+0x218>
        {
/*ECATCHANGE_START(V5.11) ESM2*/
            if((((u16MinSuppSyncType & SYNCTYPE_DCSYNC0SUPP) == 0) && ((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0))
 8021950:	8afb      	ldrh	r3, [r7, #22]
 8021952:	f003 0304 	and.w	r3, r3, #4
 8021956:	2b00      	cmp	r3, #0
 8021958:	d104      	bne.n	8021964 <StartInputHandler+0x200>
 802195a:	7bfb      	ldrb	r3, [r7, #15]
 802195c:	f003 0302 	and.w	r3, r3, #2
 8021960:	2b00      	cmp	r3, #0
 8021962:	d109      	bne.n	8021978 <StartInputHandler+0x214>
                ||(((u16MinSuppSyncType & SYNCTYPE_DCSYNC1SUPP) == 0) && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0)))
 8021964:	8afb      	ldrh	r3, [r7, #22]
 8021966:	f003 0308 	and.w	r3, r3, #8
 802196a:	2b00      	cmp	r3, #0
 802196c:	d106      	bne.n	802197c <StartInputHandler+0x218>
 802196e:	7bfb      	ldrb	r3, [r7, #15]
 8021970:	f003 0304 	and.w	r3, r3, #4
 8021974:	2b00      	cmp	r3, #0
 8021976:	d001      	beq.n	802197c <StartInputHandler+0x218>
/*ECATCHANGE_END(V5.11) ESM2*/
            {
                /* Sync0 is not supported but will be generated*/
                return ALSTATUSCODE_DCINVALIDSYNCCFG;                   
 8021978:	2330      	movs	r3, #48	; 0x30
 802197a:	e27d      	b.n	8021e78 <StartInputHandler+0x714>
    }
        }

        /*Check if Sync0 cycle time is supported*/
        if ( cycleTimeSync0 != 0 && (cycleTimeSync0 < MIN_PD_CYCLE_TIME || cycleTimeSync0 > MAX_PD_CYCLE_TIME) )
 802197c:	69fb      	ldr	r3, [r7, #28]
 802197e:	2b00      	cmp	r3, #0
 8021980:	d00a      	beq.n	8021998 <StartInputHandler+0x234>
 8021982:	69fb      	ldr	r3, [r7, #28]
 8021984:	f242 720f 	movw	r2, #9999	; 0x270f
 8021988:	4293      	cmp	r3, r2
 802198a:	d903      	bls.n	8021994 <StartInputHandler+0x230>
 802198c:	69fb      	ldr	r3, [r7, #28]
 802198e:	4a33      	ldr	r2, [pc, #204]	; (8021a5c <StartInputHandler+0x2f8>)
 8021990:	4293      	cmp	r3, r2
 8021992:	d901      	bls.n	8021998 <StartInputHandler+0x234>
            return ALSTATUSCODE_DCSYNC0CYCLETIME;
 8021994:	2336      	movs	r3, #54	; 0x36
 8021996:	e26f      	b.n	8021e78 <StartInputHandler+0x714>


        /* Check if Subordinated cycles are configured */
        if(((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0) && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0))
 8021998:	7bfb      	ldrb	r3, [r7, #15]
 802199a:	f003 0302 	and.w	r3, r3, #2
 802199e:	2b00      	cmp	r3, #0
 80219a0:	d00e      	beq.n	80219c0 <StartInputHandler+0x25c>
 80219a2:	7bfb      	ldrb	r3, [r7, #15]
 80219a4:	f003 0304 	and.w	r3, r3, #4
 80219a8:	2b00      	cmp	r3, #0
 80219aa:	d009      	beq.n	80219c0 <StartInputHandler+0x25c>
        {
            /* For Subordinated cycles both Sync signals shall be active and Sync0 is not configured in single shot (cycle time == 0)*/
/*ECATCHANGE_START(V5.11) ESM1*/
            if((cycleTimeSync1 > 0) && (cycleTimeSync1 >= cycleTimeSync0))
 80219ac:	69bb      	ldr	r3, [r7, #24]
 80219ae:	2b00      	cmp	r3, #0
 80219b0:	d006      	beq.n	80219c0 <StartInputHandler+0x25c>
 80219b2:	69ba      	ldr	r2, [r7, #24]
 80219b4:	69fb      	ldr	r3, [r7, #28]
 80219b6:	429a      	cmp	r2, r3
 80219b8:	d302      	bcc.n	80219c0 <StartInputHandler+0x25c>
/*ECATCHANGE_END(V5.11) ESM1*/
            {
                bSubordinatedCycles = TRUE;
 80219ba:	2301      	movs	r3, #1
 80219bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
        }

        /* Dump an error if subordinated cycles are configured but not supported */
        if(bSubordinatedCycles && ((u16MinSuppSyncType & SYNCTYPE_SUBCYCLESUPP) == 0))
 80219c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80219c4:	2b00      	cmp	r3, #0
 80219c6:	d006      	beq.n	80219d6 <StartInputHandler+0x272>
 80219c8:	8afb      	ldrh	r3, [r7, #22]
 80219ca:	f003 0310 	and.w	r3, r3, #16
 80219ce:	2b00      	cmp	r3, #0
 80219d0:	d101      	bne.n	80219d6 <StartInputHandler+0x272>
        {
             return ALSTATUSCODE_DCINVALIDSYNCCFG;
 80219d2:	2330      	movs	r3, #48	; 0x30
 80219d4:	e250      	b.n	8021e78 <StartInputHandler+0x714>


    /*
        Check if the user configured Sync Type matches the DC register values (if the Sync Type is supported was already checked in the object write function)
    */
    if(bSyncSetByUser)
 80219d6:	4b22      	ldr	r3, [pc, #136]	; (8021a60 <StartInputHandler+0x2fc>)
 80219d8:	781b      	ldrb	r3, [r3, #0]
 80219da:	2b00      	cmp	r3, #0
 80219dc:	d04f      	beq.n	8021a7e <StartInputHandler+0x31a>
    {
        if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
 80219de:	7bfb      	ldrb	r3, [r7, #15]
 80219e0:	f003 0309 	and.w	r3, r3, #9
 80219e4:	2b00      	cmp	r3, #0
 80219e6:	d10e      	bne.n	8021a06 <StartInputHandler+0x2a2>
        {
            /* DC out unit not enabled => no DC mode shall be set */
            if((SyncType0x1C32 == SYNCTYPE_DCSYNC0) || (SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 80219e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80219ea:	2b02      	cmp	r3, #2
 80219ec:	d009      	beq.n	8021a02 <StartInputHandler+0x29e>
 80219ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80219f0:	2b03      	cmp	r3, #3
 80219f2:	d006      	beq.n	8021a02 <StartInputHandler+0x29e>
                ||(SyncType0x1C33 == SYNCTYPE_DCSYNC0) || (SyncType0x1C33 == SYNCTYPE_DCSYNC1))
 80219f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80219f6:	2b02      	cmp	r3, #2
 80219f8:	d003      	beq.n	8021a02 <StartInputHandler+0x29e>
 80219fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80219fc:	2b03      	cmp	r3, #3
 80219fe:	f040 8085 	bne.w	8021b0c <StartInputHandler+0x3a8>
            {
                return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8021a02:	2330      	movs	r3, #48	; 0x30
 8021a04:	e238      	b.n	8021e78 <StartInputHandler+0x714>
            }
        } //if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
    else
    {
            if((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) == 0)
 8021a06:	7bfb      	ldrb	r3, [r7, #15]
 8021a08:	f003 0304 	and.w	r3, r3, #4
 8021a0c:	2b00      	cmp	r3, #0
 8021a0e:	d129      	bne.n	8021a64 <StartInputHandler+0x300>
            {
                /* No Sync 1 is generated => No Sync1 Sync Type shall configured*/
/*ECATCHANGE_START(V5.11) ESM3*/
                if((SyncType0x1C32 == (UINT16)SYNCTYPE_DCSYNC1)
 8021a10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8021a12:	2b03      	cmp	r3, #3
 8021a14:	d002      	beq.n	8021a1c <StartInputHandler+0x2b8>
                    ||(SyncType0x1C33 == (UINT16)SYNCTYPE_DCSYNC1))
 8021a16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021a18:	2b03      	cmp	r3, #3
 8021a1a:	d123      	bne.n	8021a64 <StartInputHandler+0x300>
/*ECATCHANGE_END(V5.11) ESM3*/
                {
                    return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8021a1c:	2330      	movs	r3, #48	; 0x30
 8021a1e:	e22b      	b.n	8021e78 <StartInputHandler+0x714>
 8021a20:	1fff2860 	.word	0x1fff2860
 8021a24:	1fff281c 	.word	0x1fff281c
 8021a28:	1fff255a 	.word	0x1fff255a
 8021a2c:	1fff2572 	.word	0x1fff2572
 8021a30:	1fff254e 	.word	0x1fff254e
 8021a34:	1fff2584 	.word	0x1fff2584
 8021a38:	1fff256c 	.word	0x1fff256c
 8021a3c:	1fff280a 	.word	0x1fff280a
 8021a40:	1fff2800 	.word	0x1fff2800
 8021a44:	1fff27f8 	.word	0x1fff27f8
 8021a48:	1fff2812 	.word	0x1fff2812
 8021a4c:	1fff2542 	.word	0x1fff2542
 8021a50:	54010981 	.word	0x54010981
 8021a54:	540109a0 	.word	0x540109a0
 8021a58:	540109a4 	.word	0x540109a4
 8021a5c:	c3500000 	.word	0xc3500000
 8021a60:	1fff28a4 	.word	0x1fff28a4
                }
            } //if((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) == 0)

            if((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) == 0)
 8021a64:	7bfb      	ldrb	r3, [r7, #15]
 8021a66:	f003 0302 	and.w	r3, r3, #2
 8021a6a:	2b00      	cmp	r3, #0
 8021a6c:	d14e      	bne.n	8021b0c <StartInputHandler+0x3a8>
            {
                /* No Sync 0 is generated => No Sync0 Sync Type shall configured*/
/*ECATCHANGE_START(V5.11) ESM3*/
                if((SyncType0x1C32 == (UINT16)SYNCTYPE_DCSYNC0)
 8021a6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8021a70:	2b02      	cmp	r3, #2
 8021a72:	d002      	beq.n	8021a7a <StartInputHandler+0x316>
                    ||(SyncType0x1C33 == (UINT16)SYNCTYPE_DCSYNC0))
 8021a74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021a76:	2b02      	cmp	r3, #2
 8021a78:	d148      	bne.n	8021b0c <StartInputHandler+0x3a8>
/*ECATCHANGE_END(V5.11) ESM3*/
                {
                    return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8021a7a:	2330      	movs	r3, #48	; 0x30
 8021a7c:	e1fc      	b.n	8021e78 <StartInputHandler+0x714>
        }
    } //if(bSyncSetByUser)
    else
    {
        /* No Sync Type selected by user => Configure Sync Type based on DC register values*/
        if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
 8021a7e:	7bfb      	ldrb	r3, [r7, #15]
 8021a80:	f003 0309 	and.w	r3, r3, #9
 8021a84:	2b00      	cmp	r3, #0
 8021a86:	d120      	bne.n	8021aca <StartInputHandler+0x366>
        {
            /* Activation or auto activation of the Sync Out Unit is disabled => Free Run or SM Sync is configured*/

            /* AL Event enabled => Configure SM Sync*/
            if (nPdOutputSize > 0)
 8021a88:	4b92      	ldr	r3, [pc, #584]	; (8021cd4 <StartInputHandler+0x570>)
 8021a8a:	881b      	ldrh	r3, [r3, #0]
 8021a8c:	2b00      	cmp	r3, #0
 8021a8e:	d00b      	beq.n	8021aa8 <StartInputHandler+0x344>
            {
                SyncType0x1C32 = SYNCTYPE_SM_SYNCHRON;
 8021a90:	2301      	movs	r3, #1
 8021a92:	853b      	strh	r3, [r7, #40]	; 0x28
                
                if (nPdInputSize > 0)
 8021a94:	4b90      	ldr	r3, [pc, #576]	; (8021cd8 <StartInputHandler+0x574>)
 8021a96:	881b      	ldrh	r3, [r3, #0]
 8021a98:	2b00      	cmp	r3, #0
 8021a9a:	d002      	beq.n	8021aa2 <StartInputHandler+0x33e>
                    SyncType0x1C33 = SYNCTYPE_SM2_SYNCHRON;
 8021a9c:	2322      	movs	r3, #34	; 0x22
 8021a9e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8021aa0:	e00f      	b.n	8021ac2 <StartInputHandler+0x35e>
                else
                    SyncType0x1C33 = SYNCTYPE_FREERUN;
 8021aa2:	2300      	movs	r3, #0
 8021aa4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8021aa6:	e00c      	b.n	8021ac2 <StartInputHandler+0x35e>
            }
            else if (nPdInputSize > 0)
 8021aa8:	4b8b      	ldr	r3, [pc, #556]	; (8021cd8 <StartInputHandler+0x574>)
 8021aaa:	881b      	ldrh	r3, [r3, #0]
 8021aac:	2b00      	cmp	r3, #0
 8021aae:	d004      	beq.n	8021aba <StartInputHandler+0x356>
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 8021ab0:	2300      	movs	r3, #0
 8021ab2:	853b      	strh	r3, [r7, #40]	; 0x28
                SyncType0x1C33 = SYNCTYPE_SM_SYNCHRON;
 8021ab4:	2301      	movs	r3, #1
 8021ab6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8021ab8:	e003      	b.n	8021ac2 <StartInputHandler+0x35e>
            }
            else
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 8021aba:	2300      	movs	r3, #0
 8021abc:	853b      	strh	r3, [r7, #40]	; 0x28
                SyncType0x1C33 = SYNCTYPE_FREERUN;
 8021abe:	2300      	movs	r3, #0
 8021ac0:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
            sSyncManOutPar.u16GetCycleTime = 1;
 8021ac2:	4b86      	ldr	r3, [pc, #536]	; (8021cdc <StartInputHandler+0x578>)
 8021ac4:	2201      	movs	r2, #1
 8021ac6:	839a      	strh	r2, [r3, #28]
 8021ac8:	e020      	b.n	8021b0c <StartInputHandler+0x3a8>

        }
        else
        {
            if (nPdOutputSize > 0)
 8021aca:	4b82      	ldr	r3, [pc, #520]	; (8021cd4 <StartInputHandler+0x570>)
 8021acc:	881b      	ldrh	r3, [r3, #0]
 8021ace:	2b00      	cmp	r3, #0
 8021ad0:	d009      	beq.n	8021ae6 <StartInputHandler+0x382>
            {
                /* Sync Signal generation is active*/
                if (bSubordinatedCycles)
 8021ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021ad6:	2b00      	cmp	r3, #0
 8021ad8:	d002      	beq.n	8021ae0 <StartInputHandler+0x37c>
                {
                    SyncType0x1C32 = SYNCTYPE_DCSYNC1;
 8021ada:	2303      	movs	r3, #3
 8021adc:	853b      	strh	r3, [r7, #40]	; 0x28
 8021ade:	e004      	b.n	8021aea <StartInputHandler+0x386>
                }
                else
                {
                    SyncType0x1C32 = SYNCTYPE_DCSYNC0;
 8021ae0:	2302      	movs	r3, #2
 8021ae2:	853b      	strh	r3, [r7, #40]	; 0x28
 8021ae4:	e001      	b.n	8021aea <StartInputHandler+0x386>
                }
            }
            else
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 8021ae6:	2300      	movs	r3, #0
 8021ae8:	853b      	strh	r3, [r7, #40]	; 0x28
            }


            if (nPdInputSize > 0)
 8021aea:	4b7b      	ldr	r3, [pc, #492]	; (8021cd8 <StartInputHandler+0x574>)
 8021aec:	881b      	ldrh	r3, [r3, #0]
 8021aee:	2b00      	cmp	r3, #0
 8021af0:	d00a      	beq.n	8021b08 <StartInputHandler+0x3a4>
            {
                if ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0)
 8021af2:	7bfb      	ldrb	r3, [r7, #15]
 8021af4:	f003 0304 	and.w	r3, r3, #4
 8021af8:	2b00      	cmp	r3, #0
 8021afa:	d002      	beq.n	8021b02 <StartInputHandler+0x39e>
                {
                    /* If Sync1 is available the inputs will always be mapped with Sync1 */
                    SyncType0x1C33 = SYNCTYPE_DCSYNC1;
 8021afc:	2303      	movs	r3, #3
 8021afe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8021b00:	e004      	b.n	8021b0c <StartInputHandler+0x3a8>
                }
                else
                {
                    /* Map Inputs based on Sync0*/
                    SyncType0x1C33 = SYNCTYPE_DCSYNC0;
 8021b02:	2302      	movs	r3, #2
 8021b04:	84fb      	strh	r3, [r7, #38]	; 0x26
 8021b06:	e001      	b.n	8021b0c <StartInputHandler+0x3a8>
                }
            }
            else
            {
                SyncType0x1C33 = SYNCTYPE_FREERUN;
 8021b08:	2300      	movs	r3, #0
 8021b0a:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
        }
    }

    /* Update Cycle time entries if DC Sync Mode enabled */
    if(SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 8021b0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8021b0e:	2b03      	cmp	r3, #3
 8021b10:	d106      	bne.n	8021b20 <StartInputHandler+0x3bc>
    {
        sSyncManOutPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 8021b12:	4a72      	ldr	r2, [pc, #456]	; (8021cdc <StartInputHandler+0x578>)
 8021b14:	69fb      	ldr	r3, [r7, #28]
 8021b16:	6253      	str	r3, [r2, #36]	; 0x24

/*ECATCHANGE_START(V5.11) ECAT4*/
        sSyncManInPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 8021b18:	4a71      	ldr	r2, [pc, #452]	; (8021ce0 <StartInputHandler+0x57c>)
 8021b1a:	69fb      	ldr	r3, [r7, #28]
 8021b1c:	6253      	str	r3, [r2, #36]	; 0x24
 8021b1e:	e00a      	b.n	8021b36 <StartInputHandler+0x3d2>
/*ECATCHANGE_END(V5.11) ECAT4*/
    }
    else if(SyncType0x1C32 == SYNCTYPE_DCSYNC0)
 8021b20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8021b22:	2b02      	cmp	r3, #2
 8021b24:	d107      	bne.n	8021b36 <StartInputHandler+0x3d2>
    {
        sSyncManOutPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 8021b26:	4a6d      	ldr	r2, [pc, #436]	; (8021cdc <StartInputHandler+0x578>)
 8021b28:	69fb      	ldr	r3, [r7, #28]
 8021b2a:	6253      	str	r3, [r2, #36]	; 0x24

/*ECATCHANGE_START(V5.11) ECAT4*/
        sSyncManInPar.u32Sync0CycleTime = (UINT16)cycleTimeSync0;
 8021b2c:	69fb      	ldr	r3, [r7, #28]
 8021b2e:	b29b      	uxth	r3, r3
 8021b30:	461a      	mov	r2, r3
 8021b32:	4b6b      	ldr	r3, [pc, #428]	; (8021ce0 <StartInputHandler+0x57c>)
 8021b34:	625a      	str	r2, [r3, #36]	; 0x24
/*ECATCHANGE_END(V5.11) ECAT4*/
    }

    /* Set global flags based on Sync Type */
    if ( !b3BufferMode )
 8021b36:	4b6b      	ldr	r3, [pc, #428]	; (8021ce4 <StartInputHandler+0x580>)
 8021b38:	781b      	ldrb	r3, [r3, #0]
 8021b3a:	f083 0301 	eor.w	r3, r3, #1
 8021b3e:	b2db      	uxtb	r3, r3
 8021b40:	2b00      	cmp	r3, #0
 8021b42:	d007      	beq.n	8021b54 <StartInputHandler+0x3f0>
    {
        /* 1-Buffer-Mode configured => For free run it shall be 3Buffer mode*/
        if (( SyncType0x1C32 == SYNCTYPE_FREERUN ) || ( SyncType0x1C33 == SYNCTYPE_FREERUN ))
 8021b44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8021b46:	2b00      	cmp	r3, #0
 8021b48:	d002      	beq.n	8021b50 <StartInputHandler+0x3ec>
 8021b4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021b4c:	2b00      	cmp	r3, #0
 8021b4e:	d101      	bne.n	8021b54 <StartInputHandler+0x3f0>
        {
                return ALSTATUSCODE_FREERUNNEEDS3BUFFERMODE;
 8021b50:	2329      	movs	r3, #41	; 0x29
 8021b52:	e191      	b.n	8021e78 <StartInputHandler+0x714>
        }
    }

    /* If no free run is supported the EscInt is always enabled*/
        if (( SyncType0x1C32 != SYNCTYPE_FREERUN ) || ( SyncType0x1C33 != SYNCTYPE_FREERUN ))
 8021b54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8021b56:	2b00      	cmp	r3, #0
 8021b58:	d102      	bne.n	8021b60 <StartInputHandler+0x3fc>
 8021b5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021b5c:	2b00      	cmp	r3, #0
 8021b5e:	d002      	beq.n	8021b66 <StartInputHandler+0x402>
        {
        /* ECAT Synchron Mode, the ESC interrupt is enabled */
        bEscIntEnabled = TRUE;
 8021b60:	4b61      	ldr	r3, [pc, #388]	; (8021ce8 <StartInputHandler+0x584>)
 8021b62:	2201      	movs	r2, #1
 8021b64:	701a      	strb	r2, [r3, #0]
    }

        /* Update value for AL Event Mask register (0x204) */
        if(bEscIntEnabled)
 8021b66:	4b60      	ldr	r3, [pc, #384]	; (8021ce8 <StartInputHandler+0x584>)
 8021b68:	781b      	ldrb	r3, [r3, #0]
 8021b6a:	2b00      	cmp	r3, #0
 8021b6c:	d010      	beq.n	8021b90 <StartInputHandler+0x42c>
        {
            if(nPdOutputSize > 0)
 8021b6e:	4b59      	ldr	r3, [pc, #356]	; (8021cd4 <StartInputHandler+0x570>)
 8021b70:	881b      	ldrh	r3, [r3, #0]
 8021b72:	2b00      	cmp	r3, #0
 8021b74:	d004      	beq.n	8021b80 <StartInputHandler+0x41c>
            {
                u16ALEventMask = PROCESS_OUTPUT_EVENT;
 8021b76:	4b5d      	ldr	r3, [pc, #372]	; (8021cec <StartInputHandler+0x588>)
 8021b78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021b7c:	801a      	strh	r2, [r3, #0]
 8021b7e:	e007      	b.n	8021b90 <StartInputHandler+0x42c>
            }
            else if(nPdInputSize > 0)
 8021b80:	4b55      	ldr	r3, [pc, #340]	; (8021cd8 <StartInputHandler+0x574>)
 8021b82:	881b      	ldrh	r3, [r3, #0]
 8021b84:	2b00      	cmp	r3, #0
 8021b86:	d003      	beq.n	8021b90 <StartInputHandler+0x42c>
            {
                u16ALEventMask = PROCESS_INPUT_EVENT;
 8021b88:	4b58      	ldr	r3, [pc, #352]	; (8021cec <StartInputHandler+0x588>)
 8021b8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8021b8e:	801a      	strh	r2, [r3, #0]
            }

        }

        if ((SyncType0x1C32 == SYNCTYPE_DCSYNC0) || (SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 8021b90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8021b92:	2b02      	cmp	r3, #2
 8021b94:	d008      	beq.n	8021ba8 <StartInputHandler+0x444>
 8021b96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8021b98:	2b03      	cmp	r3, #3
 8021b9a:	d005      	beq.n	8021ba8 <StartInputHandler+0x444>
            || (SyncType0x1C33 == SYNCTYPE_DCSYNC0) || (SyncType0x1C33 == SYNCTYPE_DCSYNC1))/* Sync to Sync0 or Sync1 is enabled*/
 8021b9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021b9e:	2b02      	cmp	r3, #2
 8021ba0:	d002      	beq.n	8021ba8 <StartInputHandler+0x444>
 8021ba2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021ba4:	2b03      	cmp	r3, #3
 8021ba6:	d109      	bne.n	8021bbc <StartInputHandler+0x458>
        {
            /* slave is running in DC-mode */
            bDcSyncActive = TRUE;
 8021ba8:	4b51      	ldr	r3, [pc, #324]	; (8021cf0 <StartInputHandler+0x58c>)
 8021baa:	2201      	movs	r2, #1
 8021bac:	701a      	strb	r2, [r3, #0]

/*ECATCHANGE_START(V5.11) ECAT4*/
            /*In case of an Input only application with DC no PDI Isr handling is required*/
            if (nPdOutputSize == 0)
 8021bae:	4b49      	ldr	r3, [pc, #292]	; (8021cd4 <StartInputHandler+0x570>)
 8021bb0:	881b      	ldrh	r3, [r3, #0]
 8021bb2:	2b00      	cmp	r3, #0
 8021bb4:	d102      	bne.n	8021bbc <StartInputHandler+0x458>
            {
               u16ALEventMask = 0;
 8021bb6:	4b4d      	ldr	r3, [pc, #308]	; (8021cec <StartInputHandler+0x588>)
 8021bb8:	2200      	movs	r2, #0
 8021bba:	801a      	strh	r2, [r3, #0]
            }
/*ECATCHANGE_END(V5.11) ECAT4*/
        }

    sSyncManOutPar.u16SyncType = SyncType0x1C32;
 8021bbc:	4a47      	ldr	r2, [pc, #284]	; (8021cdc <StartInputHandler+0x578>)
 8021bbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8021bc0:	8053      	strh	r3, [r2, #2]
    sSyncManInPar.u16SyncType = SyncType0x1C33;
 8021bc2:	4a47      	ldr	r2, [pc, #284]	; (8021ce0 <StartInputHandler+0x57c>)
 8021bc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021bc6:	8053      	strh	r3, [r2, #2]

    /* Calculate number of Sync0 events within one SM cycle and the Sync0 events on which the inputs has to be latched*/
    LatchInputSync0Value = 0;
 8021bc8:	4b4a      	ldr	r3, [pc, #296]	; (8021cf4 <StartInputHandler+0x590>)
 8021bca:	2200      	movs	r2, #0
 8021bcc:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Counter = 0;
 8021bce:	4b4a      	ldr	r3, [pc, #296]	; (8021cf8 <StartInputHandler+0x594>)
 8021bd0:	2200      	movs	r2, #0
 8021bd2:	801a      	strh	r2, [r3, #0]
    u16SmSync0Value = 0;
 8021bd4:	4b49      	ldr	r3, [pc, #292]	; (8021cfc <StartInputHandler+0x598>)
 8021bd6:	2200      	movs	r2, #0
 8021bd8:	801a      	strh	r2, [r3, #0]
    u16SmSync0Counter = 0;
 8021bda:	4b49      	ldr	r3, [pc, #292]	; (8021d00 <StartInputHandler+0x59c>)
 8021bdc:	2200      	movs	r2, #0
 8021bde:	801a      	strh	r2, [r3, #0]


    if(bSubordinatedCycles == TRUE)
 8021be0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021be4:	2b00      	cmp	r3, #0
 8021be6:	d036      	beq.n	8021c56 <StartInputHandler+0x4f2>
    {
        /* get the number of Sync0 event within on SM cycle */
        if(cycleTimeSync1 >= cycleTimeSync0)
 8021be8:	69ba      	ldr	r2, [r7, #24]
 8021bea:	69fb      	ldr	r3, [r7, #28]
 8021bec:	429a      	cmp	r2, r3
 8021bee:	d317      	bcc.n	8021c20 <StartInputHandler+0x4bc>
        {
            u16SmSync0Value = (UINT16)(cycleTimeSync1 / cycleTimeSync0);
 8021bf0:	69ba      	ldr	r2, [r7, #24]
 8021bf2:	69fb      	ldr	r3, [r7, #28]
 8021bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8021bf8:	b29a      	uxth	r2, r3
 8021bfa:	4b40      	ldr	r3, [pc, #256]	; (8021cfc <StartInputHandler+0x598>)
 8021bfc:	801a      	strh	r2, [r3, #0]
            
            if((cycleTimeSync1 % cycleTimeSync0) == 0)
 8021bfe:	69bb      	ldr	r3, [r7, #24]
 8021c00:	69fa      	ldr	r2, [r7, #28]
 8021c02:	fbb3 f2f2 	udiv	r2, r3, r2
 8021c06:	69f9      	ldr	r1, [r7, #28]
 8021c08:	fb01 f202 	mul.w	r2, r1, r2
 8021c0c:	1a9b      	subs	r3, r3, r2
 8021c0e:	2b00      	cmp	r3, #0
 8021c10:	d109      	bne.n	8021c26 <StartInputHandler+0x4c2>
            {
                /* if the Sync1cycletime/Sync0cycletime ratio is even one additional tick */
                u16SmSync0Value ++;
 8021c12:	4b3a      	ldr	r3, [pc, #232]	; (8021cfc <StartInputHandler+0x598>)
 8021c14:	881b      	ldrh	r3, [r3, #0]
 8021c16:	3301      	adds	r3, #1
 8021c18:	b29a      	uxth	r2, r3
 8021c1a:	4b38      	ldr	r3, [pc, #224]	; (8021cfc <StartInputHandler+0x598>)
 8021c1c:	801a      	strh	r2, [r3, #0]
 8021c1e:	e002      	b.n	8021c26 <StartInputHandler+0x4c2>
        }
        }
        else
        {
            u16SmSync0Value = 1;
 8021c20:	4b36      	ldr	r3, [pc, #216]	; (8021cfc <StartInputHandler+0x598>)
 8021c22:	2201      	movs	r2, #1
 8021c24:	801a      	strh	r2, [r3, #0]
        }

        /* Calculate the Sync0 tick on which the inputs shall be latched (last Sync0 before the next Sync1 event)*/
        LatchInputSync0Value = (UINT16) (cycleTimeSync1 / cycleTimeSync0);
 8021c26:	69ba      	ldr	r2, [r7, #24]
 8021c28:	69fb      	ldr	r3, [r7, #28]
 8021c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8021c2e:	b29a      	uxth	r2, r3
 8021c30:	4b30      	ldr	r3, [pc, #192]	; (8021cf4 <StartInputHandler+0x590>)
 8021c32:	801a      	strh	r2, [r3, #0]

        if((cycleTimeSync1 % cycleTimeSync0) > 0)
 8021c34:	69bb      	ldr	r3, [r7, #24]
 8021c36:	69fa      	ldr	r2, [r7, #28]
 8021c38:	fbb3 f2f2 	udiv	r2, r3, r2
 8021c3c:	69f9      	ldr	r1, [r7, #28]
 8021c3e:	fb01 f202 	mul.w	r2, r1, r2
 8021c42:	1a9b      	subs	r3, r3, r2
 8021c44:	2b00      	cmp	r3, #0
 8021c46:	d012      	beq.n	8021c6e <StartInputHandler+0x50a>
            LatchInputSync0Value++;
 8021c48:	4b2a      	ldr	r3, [pc, #168]	; (8021cf4 <StartInputHandler+0x590>)
 8021c4a:	881b      	ldrh	r3, [r3, #0]
 8021c4c:	3301      	adds	r3, #1
 8021c4e:	b29a      	uxth	r2, r3
 8021c50:	4b28      	ldr	r3, [pc, #160]	; (8021cf4 <StartInputHandler+0x590>)
 8021c52:	801a      	strh	r2, [r3, #0]
 8021c54:	e00b      	b.n	8021c6e <StartInputHandler+0x50a>

    }
    else 
    {
        if(SyncType0x1C32 == SYNCTYPE_DCSYNC0)
 8021c56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8021c58:	2b02      	cmp	r3, #2
 8021c5a:	d102      	bne.n	8021c62 <StartInputHandler+0x4fe>
        {
            /* if SyncType of 0x1C32 is 2 the Sync0 event is trigger once during a SM cycle */
            u16SmSync0Value = 1;
 8021c5c:	4b27      	ldr	r3, [pc, #156]	; (8021cfc <StartInputHandler+0x598>)
 8021c5e:	2201      	movs	r2, #1
 8021c60:	801a      	strh	r2, [r3, #0]
        }   

        if(SyncType0x1C33 != SYNCTYPE_DCSYNC1)
 8021c62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021c64:	2b03      	cmp	r3, #3
 8021c66:	d002      	beq.n	8021c6e <StartInputHandler+0x50a>
        {
            LatchInputSync0Value = 1;
 8021c68:	4b22      	ldr	r3, [pc, #136]	; (8021cf4 <StartInputHandler+0x590>)
 8021c6a:	2201      	movs	r2, #1
 8021c6c:	801a      	strh	r2, [r3, #0]
    }



    /* reset the error counter indicating synchronization problems */
    sCycleDiag.syncFailedCounter = 0;
 8021c6e:	4b25      	ldr	r3, [pc, #148]	; (8021d04 <StartInputHandler+0x5a0>)
 8021c70:	2200      	movs	r2, #0
 8021c72:	801a      	strh	r2, [r3, #0]
        --- Check watchdog settings ---
    */

    /*get the watchdog time (register 0x420). if value is > 0 watchdog is active*/
/*ECATCHANGE_START(V5.11) ECAT4*/
    HW_EscReadWord(wd, ESC_PD_WD_TIME);
 8021c74:	4b24      	ldr	r3, [pc, #144]	; (8021d08 <StartInputHandler+0x5a4>)
 8021c76:	881b      	ldrh	r3, [r3, #0]
 8021c78:	847b      	strh	r3, [r7, #34]	; 0x22
    wd = SWAPWORD(wd);
/*ECATCHANGE_END(V5.11) ECAT4*/

    if (nPdOutputSize > 0 &&  wd != 0 )
 8021c7a:	4b16      	ldr	r3, [pc, #88]	; (8021cd4 <StartInputHandler+0x570>)
 8021c7c:	881b      	ldrh	r3, [r3, #0]
 8021c7e:	2b00      	cmp	r3, #0
 8021c80:	d04a      	beq.n	8021d18 <StartInputHandler+0x5b4>
 8021c82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021c84:	2b00      	cmp	r3, #0
 8021c86:	d047      	beq.n	8021d18 <StartInputHandler+0x5b4>
    {
    /*get watchdog divider (register 0x400)*/
    HW_EscReadWord(wdiv, ESC_WD_DIVIDER_OFFSET);
 8021c88:	4b20      	ldr	r3, [pc, #128]	; (8021d0c <StartInputHandler+0x5a8>)
 8021c8a:	881b      	ldrh	r3, [r3, #0]
 8021c8c:	84bb      	strh	r3, [r7, #36]	; 0x24
    wdiv = SWAPWORD(wdiv);
        if ( wdiv != 0 )
 8021c8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021c90:	2b00      	cmp	r3, #0
 8021c92:	d018      	beq.n	8021cc6 <StartInputHandler+0x562>
        {
            /* the ESC subtracts 2 in register 0x400 so it has to be added here */
            UINT32 d = wdiv+2;
 8021c94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021c96:	3302      	adds	r3, #2
 8021c98:	60bb      	str	r3, [r7, #8]

            d *= wd;
 8021c9a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8021c9c:	68bb      	ldr	r3, [r7, #8]
 8021c9e:	fb02 f303 	mul.w	r3, r2, r3
 8021ca2:	60bb      	str	r3, [r7, #8]
            /* store watchdog in ms in variable u16WdValue */
            /* watchdog value has to be rounded up */
            d += 24999;
 8021ca4:	68bb      	ldr	r3, [r7, #8]
 8021ca6:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 8021caa:	3327      	adds	r3, #39	; 0x27
 8021cac:	60bb      	str	r3, [r7, #8]
            d /= 25000;
 8021cae:	68bb      	ldr	r3, [r7, #8]
 8021cb0:	08db      	lsrs	r3, r3, #3
 8021cb2:	4a17      	ldr	r2, [pc, #92]	; (8021d10 <StartInputHandler+0x5ac>)
 8021cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8021cb8:	0a1b      	lsrs	r3, r3, #8
 8021cba:	60bb      	str	r3, [r7, #8]
            EcatWdValue = (UINT16) d;
 8021cbc:	68bb      	ldr	r3, [r7, #8]
 8021cbe:	b29a      	uxth	r2, r3
 8021cc0:	4b14      	ldr	r3, [pc, #80]	; (8021d14 <StartInputHandler+0x5b0>)
 8021cc2:	801a      	strh	r2, [r3, #0]
    if (nPdOutputSize > 0 &&  wd != 0 )
    {
    /*get watchdog divider (register 0x400)*/
    HW_EscReadWord(wdiv, ESC_WD_DIVIDER_OFFSET);
    wdiv = SWAPWORD(wdiv);
        if ( wdiv != 0 )
 8021cc4:	e02d      	b.n	8021d22 <StartInputHandler+0x5be>
            d /= 25000;
            EcatWdValue = (UINT16) d;
        }
        else
        {
            wd = 0;
 8021cc6:	2300      	movs	r3, #0
 8021cc8:	847b      	strh	r3, [r7, #34]	; 0x22
            /* wd value has to be set to zero, if the wd is 0 */
            EcatWdValue = 0;
 8021cca:	4b12      	ldr	r3, [pc, #72]	; (8021d14 <StartInputHandler+0x5b0>)
 8021ccc:	2200      	movs	r2, #0
 8021cce:	801a      	strh	r2, [r3, #0]
    if (nPdOutputSize > 0 &&  wd != 0 )
    {
    /*get watchdog divider (register 0x400)*/
    HW_EscReadWord(wdiv, ESC_WD_DIVIDER_OFFSET);
    wdiv = SWAPWORD(wdiv);
        if ( wdiv != 0 )
 8021cd0:	e027      	b.n	8021d22 <StartInputHandler+0x5be>
 8021cd2:	bf00      	nop
 8021cd4:	1fff2542 	.word	0x1fff2542
 8021cd8:	1fff256c 	.word	0x1fff256c
 8021cdc:	1fff2860 	.word	0x1fff2860
 8021ce0:	1fff281c 	.word	0x1fff281c
 8021ce4:	1fff253c 	.word	0x1fff253c
 8021ce8:	1fff257d 	.word	0x1fff257d
 8021cec:	1fff255a 	.word	0x1fff255a
 8021cf0:	1fff2576 	.word	0x1fff2576
 8021cf4:	1fff2568 	.word	0x1fff2568
 8021cf8:	1fff254a 	.word	0x1fff254a
 8021cfc:	1fff256e 	.word	0x1fff256e
 8021d00:	1fff2580 	.word	0x1fff2580
 8021d04:	1fff28a8 	.word	0x1fff28a8
 8021d08:	54010420 	.word	0x54010420
 8021d0c:	54010400 	.word	0x54010400
 8021d10:	14f8b589 	.word	0x14f8b589
 8021d14:	1fff257a 	.word	0x1fff257a
        }
    }
    else
    {
        /* the watchdog is deactivated or slave has no output process data*/
        wdiv = 0;
 8021d18:	2300      	movs	r3, #0
 8021d1a:	84bb      	strh	r3, [r7, #36]	; 0x24
        EcatWdValue = 0;
 8021d1c:	4b58      	ldr	r3, [pc, #352]	; (8021e80 <StartInputHandler+0x71c>)
 8021d1e:	2200      	movs	r2, #0
 8021d20:	801a      	strh	r2, [r3, #0]
    }

    if((EcatWdValue == 0 && bWdTrigger) || (EcatWdValue != 0 && !bWdTrigger))
 8021d22:	4b57      	ldr	r3, [pc, #348]	; (8021e80 <StartInputHandler+0x71c>)
 8021d24:	881b      	ldrh	r3, [r3, #0]
 8021d26:	2b00      	cmp	r3, #0
 8021d28:	d103      	bne.n	8021d32 <StartInputHandler+0x5ce>
 8021d2a:	4b56      	ldr	r3, [pc, #344]	; (8021e84 <StartInputHandler+0x720>)
 8021d2c:	781b      	ldrb	r3, [r3, #0]
 8021d2e:	2b00      	cmp	r3, #0
 8021d30:	d10a      	bne.n	8021d48 <StartInputHandler+0x5e4>
 8021d32:	4b53      	ldr	r3, [pc, #332]	; (8021e80 <StartInputHandler+0x71c>)
 8021d34:	881b      	ldrh	r3, [r3, #0]
 8021d36:	2b00      	cmp	r3, #0
 8021d38:	d008      	beq.n	8021d4c <StartInputHandler+0x5e8>
 8021d3a:	4b52      	ldr	r3, [pc, #328]	; (8021e84 <StartInputHandler+0x720>)
 8021d3c:	781b      	ldrb	r3, [r3, #0]
 8021d3e:	f083 0301 	eor.w	r3, r3, #1
 8021d42:	b2db      	uxtb	r3, r3
 8021d44:	2b00      	cmp	r3, #0
 8021d46:	d001      	beq.n	8021d4c <StartInputHandler+0x5e8>
    {
        /* if the WD-Trigger in the Sync Manager Channel 2 Control-Byte is set (Bit 6 of Register 0x814)
            an error has to be returned */
        return ALSTATUSCODE_INVALIDWDCFG;
 8021d48:	231f      	movs	r3, #31
 8021d4a:	e095      	b.n	8021e78 <StartInputHandler+0x714>
    }

    if ( bEscIntEnabled && nPdOutputSize != 0 )
 8021d4c:	4b4e      	ldr	r3, [pc, #312]	; (8021e88 <StartInputHandler+0x724>)
 8021d4e:	781b      	ldrb	r3, [r3, #0]
 8021d50:	2b00      	cmp	r3, #0
 8021d52:	d00a      	beq.n	8021d6a <StartInputHandler+0x606>
 8021d54:	4b4d      	ldr	r3, [pc, #308]	; (8021e8c <StartInputHandler+0x728>)
 8021d56:	881b      	ldrh	r3, [r3, #0]
 8021d58:	2b00      	cmp	r3, #0
 8021d5a:	d006      	beq.n	8021d6a <StartInputHandler+0x606>
    {
        /* ECAT synchron Mode is active, the Sync Manager Channel 2 event
           has to activated in the AL-Event mask register */
        u16ALEventMask |= PROCESS_OUTPUT_EVENT;
 8021d5c:	4b4c      	ldr	r3, [pc, #304]	; (8021e90 <StartInputHandler+0x72c>)
 8021d5e:	881b      	ldrh	r3, [r3, #0]
 8021d60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8021d64:	b29a      	uxth	r2, r3
 8021d66:	4b4a      	ldr	r3, [pc, #296]	; (8021e90 <StartInputHandler+0x72c>)
 8021d68:	801a      	strh	r2, [r3, #0]
    }
/*The application ESM function is separated from this function to handle pending transitions*/

    Sync0WdValue = 0;
 8021d6a:	4b4a      	ldr	r3, [pc, #296]	; (8021e94 <StartInputHandler+0x730>)
 8021d6c:	2200      	movs	r2, #0
 8021d6e:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8021d70:	4b49      	ldr	r3, [pc, #292]	; (8021e98 <StartInputHandler+0x734>)
 8021d72:	2200      	movs	r2, #0
 8021d74:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 8021d76:	4b49      	ldr	r3, [pc, #292]	; (8021e9c <StartInputHandler+0x738>)
 8021d78:	2200      	movs	r2, #0
 8021d7a:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 8021d7c:	4b48      	ldr	r3, [pc, #288]	; (8021ea0 <StartInputHandler+0x73c>)
 8021d7e:	2200      	movs	r2, #0
 8021d80:	801a      	strh	r2, [r3, #0]
    bDcRunning = FALSE;
 8021d82:	4b48      	ldr	r3, [pc, #288]	; (8021ea4 <StartInputHandler+0x740>)
 8021d84:	2200      	movs	r2, #0
 8021d86:	701a      	strb	r2, [r3, #0]
    bSmSyncSequenceValid = FALSE;
 8021d88:	4b47      	ldr	r3, [pc, #284]	; (8021ea8 <StartInputHandler+0x744>)
 8021d8a:	2200      	movs	r2, #0
 8021d8c:	701a      	strb	r2, [r3, #0]
    i16WaitForPllRunningTimeout = 0;
 8021d8e:	4b47      	ldr	r3, [pc, #284]	; (8021eac <StartInputHandler+0x748>)
 8021d90:	2200      	movs	r2, #0
 8021d92:	801a      	strh	r2, [r3, #0]
/*ECATCHANGE_START(V5.11) ECAT4*/
    sSyncManInPar.u8SyncError = 0;
 8021d94:	4b46      	ldr	r3, [pc, #280]	; (8021eb0 <StartInputHandler+0x74c>)
 8021d96:	2200      	movs	r2, #0
 8021d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
/*ECATCHANGE_END(V5.11) ECAT4*/
    sSyncManOutPar.u8SyncError = 0;
 8021d9c:	4b45      	ldr	r3, [pc, #276]	; (8021eb4 <StartInputHandler+0x750>)
 8021d9e:	2200      	movs	r2, #0
 8021da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    sSyncManOutPar.u16SmEventMissedCounter = 0;
 8021da4:	4b43      	ldr	r3, [pc, #268]	; (8021eb4 <StartInputHandler+0x750>)
 8021da6:	2200      	movs	r2, #0
 8021da8:	851a      	strh	r2, [r3, #40]	; 0x28

    /* calculate the Sync0/Sync1 watchdog timeouts */
    if ( (dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0 )
 8021daa:	7bfb      	ldrb	r3, [r7, #15]
 8021dac:	f003 0302 	and.w	r3, r3, #2
 8021db0:	2b00      	cmp	r3, #0
 8021db2:	d050      	beq.n	8021e56 <StartInputHandler+0x6f2>
    {
        /*calculate the Sync0 Watchdog counter value the minimum value is 1 ms
            if the sync0 cycle is greater 500us the Sync0 Wd value is 2*Sycn0 cycle */
        if(cycleTimeSync0 == 0)
 8021db4:	69fb      	ldr	r3, [r7, #28]
 8021db6:	2b00      	cmp	r3, #0
 8021db8:	d103      	bne.n	8021dc2 <StartInputHandler+0x65e>
        {
            Sync0WdValue = 0;
 8021dba:	4b36      	ldr	r3, [pc, #216]	; (8021e94 <StartInputHandler+0x730>)
 8021dbc:	2200      	movs	r2, #0
 8021dbe:	801a      	strh	r2, [r3, #0]
 8021dc0:	e018      	b.n	8021df4 <StartInputHandler+0x690>
        }
        else
        {
            UINT32 Sync0Cycle = cycleTimeSync0/100000;
 8021dc2:	69fb      	ldr	r3, [r7, #28]
 8021dc4:	095b      	lsrs	r3, r3, #5
 8021dc6:	4a3c      	ldr	r2, [pc, #240]	; (8021eb8 <StartInputHandler+0x754>)
 8021dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8021dcc:	09db      	lsrs	r3, r3, #7
 8021dce:	607b      	str	r3, [r7, #4]
            if(Sync0Cycle < 5)
 8021dd0:	687b      	ldr	r3, [r7, #4]
 8021dd2:	2b04      	cmp	r3, #4
 8021dd4:	d803      	bhi.n	8021dde <StartInputHandler+0x67a>
            {
                /*Sync0 cycle less than 500us*/
                Sync0WdValue = 1;
 8021dd6:	4b2f      	ldr	r3, [pc, #188]	; (8021e94 <StartInputHandler+0x730>)
 8021dd8:	2201      	movs	r2, #1
 8021dda:	801a      	strh	r2, [r3, #0]
 8021ddc:	e00a      	b.n	8021df4 <StartInputHandler+0x690>
            }
            else
            {
                Sync0WdValue = (UINT16)(Sync0Cycle*2)/10;
 8021dde:	687b      	ldr	r3, [r7, #4]
 8021de0:	b29b      	uxth	r3, r3
 8021de2:	005b      	lsls	r3, r3, #1
 8021de4:	b29b      	uxth	r3, r3
 8021de6:	4a35      	ldr	r2, [pc, #212]	; (8021ebc <StartInputHandler+0x758>)
 8021de8:	fba2 2303 	umull	r2, r3, r2, r3
 8021dec:	08db      	lsrs	r3, r3, #3
 8021dee:	b29a      	uxth	r2, r3
 8021df0:	4b28      	ldr	r3, [pc, #160]	; (8021e94 <StartInputHandler+0x730>)
 8021df2:	801a      	strh	r2, [r3, #0]
            }
        }

        /* Calculate also the watchdog time for Sync1*/
        if ( (dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0 )
 8021df4:	7bfb      	ldrb	r3, [r7, #15]
 8021df6:	f003 0304 	and.w	r3, r3, #4
 8021dfa:	2b00      	cmp	r3, #0
 8021dfc:	d02b      	beq.n	8021e56 <StartInputHandler+0x6f2>
        {
            if(cycleTimeSync1 < cycleTimeSync0)
 8021dfe:	69ba      	ldr	r2, [r7, #24]
 8021e00:	69fb      	ldr	r3, [r7, #28]
 8021e02:	429a      	cmp	r2, r3
 8021e04:	d204      	bcs.n	8021e10 <StartInputHandler+0x6ac>
        {
                /* Sync 1 has the same cycle time than Sync0 (maybe with a shift (cycleTimeSync1 > 0))*/
                Sync1WdValue = Sync0WdValue;
 8021e06:	4b23      	ldr	r3, [pc, #140]	; (8021e94 <StartInputHandler+0x730>)
 8021e08:	881a      	ldrh	r2, [r3, #0]
 8021e0a:	4b25      	ldr	r3, [pc, #148]	; (8021ea0 <StartInputHandler+0x73c>)
 8021e0c:	801a      	strh	r2, [r3, #0]
 8021e0e:	e022      	b.n	8021e56 <StartInputHandler+0x6f2>
        }
        else
        {
                /* Sync1 cycle is larger than Sync0 (e.g. subordinated Sync0 cycles) */
                UINT32 Sync1Cycle = cycleTimeSync1/100000;
 8021e10:	69bb      	ldr	r3, [r7, #24]
 8021e12:	095b      	lsrs	r3, r3, #5
 8021e14:	4a28      	ldr	r2, [pc, #160]	; (8021eb8 <StartInputHandler+0x754>)
 8021e16:	fba2 2303 	umull	r2, r3, r2, r3
 8021e1a:	09db      	lsrs	r3, r3, #7
 8021e1c:	603b      	str	r3, [r7, #0]
                if(Sync1Cycle < 5)
 8021e1e:	683b      	ldr	r3, [r7, #0]
 8021e20:	2b04      	cmp	r3, #4
 8021e22:	d803      	bhi.n	8021e2c <StartInputHandler+0x6c8>
                {
                    /*Sync0 cycle less than 500us*/
                    Sync1WdValue = 1;
 8021e24:	4b1e      	ldr	r3, [pc, #120]	; (8021ea0 <StartInputHandler+0x73c>)
 8021e26:	2201      	movs	r2, #1
 8021e28:	801a      	strh	r2, [r3, #0]
 8021e2a:	e00a      	b.n	8021e42 <StartInputHandler+0x6de>
    }
    else
    {
                    Sync1WdValue = (UINT16)(Sync1Cycle*2)/10;
 8021e2c:	683b      	ldr	r3, [r7, #0]
 8021e2e:	b29b      	uxth	r3, r3
 8021e30:	005b      	lsls	r3, r3, #1
 8021e32:	b29b      	uxth	r3, r3
 8021e34:	4a21      	ldr	r2, [pc, #132]	; (8021ebc <StartInputHandler+0x758>)
 8021e36:	fba2 2303 	umull	r2, r3, r2, r3
 8021e3a:	08db      	lsrs	r3, r3, #3
 8021e3c:	b29a      	uxth	r2, r3
 8021e3e:	4b18      	ldr	r3, [pc, #96]	; (8021ea0 <StartInputHandler+0x73c>)
 8021e40:	801a      	strh	r2, [r3, #0]
                }

                /* add one Sync0 cycle because the Sync1 cycle starts on the next Sync0 after the Sync1 signal */
                Sync1WdValue += Sync0WdValue/2;
 8021e42:	4b14      	ldr	r3, [pc, #80]	; (8021e94 <StartInputHandler+0x730>)
 8021e44:	881b      	ldrh	r3, [r3, #0]
 8021e46:	085b      	lsrs	r3, r3, #1
 8021e48:	b29a      	uxth	r2, r3
 8021e4a:	4b15      	ldr	r3, [pc, #84]	; (8021ea0 <StartInputHandler+0x73c>)
 8021e4c:	881b      	ldrh	r3, [r3, #0]
 8021e4e:	4413      	add	r3, r2
 8021e50:	b29a      	uxth	r2, r3
 8021e52:	4b13      	ldr	r3, [pc, #76]	; (8021ea0 <StartInputHandler+0x73c>)
 8021e54:	801a      	strh	r2, [r3, #0]





    if(nPdOutputSize > 0)
 8021e56:	4b0d      	ldr	r3, [pc, #52]	; (8021e8c <StartInputHandler+0x728>)
 8021e58:	881b      	ldrh	r3, [r3, #0]
 8021e5a:	2b00      	cmp	r3, #0
 8021e5c:	d002      	beq.n	8021e64 <StartInputHandler+0x700>
    {
/*ECATCHANGE_START(V5.11) HW1*/
        EnableSyncManChannel(PROCESS_DATA_OUT);
 8021e5e:	2002      	movs	r0, #2
 8021e60:	f7ff fa76 	bl	8021350 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    if(nPdInputSize > 0)
 8021e64:	4b16      	ldr	r3, [pc, #88]	; (8021ec0 <StartInputHandler+0x75c>)
 8021e66:	881b      	ldrh	r3, [r3, #0]
 8021e68:	2b00      	cmp	r3, #0
 8021e6a:	d002      	beq.n	8021e72 <StartInputHandler+0x70e>
    {
/*ECATCHANGE_START(V5.11) HW1*/
        EnableSyncManChannel(PROCESS_DATA_IN);
 8021e6c:	2003      	movs	r0, #3
 8021e6e:	f7ff fa6f 	bl	8021350 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    /*write initial input data*/
    PDO_InputMapping();
 8021e72:	f7fe fd55 	bl	8020920 <PDO_InputMapping>

    return ALSTATUSCODE_NOERROR;
 8021e76:	2300      	movs	r3, #0
}
 8021e78:	4618      	mov	r0, r3
 8021e7a:	3730      	adds	r7, #48	; 0x30
 8021e7c:	46bd      	mov	sp, r7
 8021e7e:	bd80      	pop	{r7, pc}
 8021e80:	1fff257a 	.word	0x1fff257a
 8021e84:	1fff257e 	.word	0x1fff257e
 8021e88:	1fff257d 	.word	0x1fff257d
 8021e8c:	1fff2542 	.word	0x1fff2542
 8021e90:	1fff255a 	.word	0x1fff255a
 8021e94:	1fff2550 	.word	0x1fff2550
 8021e98:	1fff2546 	.word	0x1fff2546
 8021e9c:	1fff2578 	.word	0x1fff2578
 8021ea0:	1fff2556 	.word	0x1fff2556
 8021ea4:	1fff255c 	.word	0x1fff255c
 8021ea8:	1fff2573 	.word	0x1fff2573
 8021eac:	1fff2554 	.word	0x1fff2554
 8021eb0:	1fff281c 	.word	0x1fff281c
 8021eb4:	1fff2860 	.word	0x1fff2860
 8021eb8:	0a7c5ac5 	.word	0x0a7c5ac5
 8021ebc:	cccccccd 	.word	0xcccccccd
 8021ec0:	1fff256c 	.word	0x1fff256c

08021ec4 <StartOutputHandler>:
 \brief  and the state transition would be refused if outputs are missing

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 StartOutputHandler(void)
{
 8021ec4:	b480      	push	{r7}
 8021ec6:	b083      	sub	sp, #12
 8021ec8:	af00      	add	r7, sp, #0
/*ECATCHANGE_START(V5.11) ESM6*/
    /* by default the SO transition should be completed in AlControlRes().
       required to support also masters which starts to send process data after the SO transition was triggered
       (if the master don't send process data within "SAFEOP2OPTIMEOUT" the transition is rejected)*/
    UINT16 result = NOERROR_INWORK;
 8021eca:	23ff      	movs	r3, #255	; 0xff
 8021ecc:	80fb      	strh	r3, [r7, #6]
/*ECATCHANGE_END(V5.11) ESM6*/
    if(bLocalErrorFlag)
 8021ece:	4b0c      	ldr	r3, [pc, #48]	; (8021f00 <StartOutputHandler+0x3c>)
 8021ed0:	781b      	ldrb	r3, [r3, #0]
 8021ed2:	2b00      	cmp	r3, #0
 8021ed4:	d002      	beq.n	8021edc <StartOutputHandler+0x18>
    {
        /*Local error still exists => skip state request to OP and response with "u16LocalErrorCode"*/
        return u16LocalErrorCode;
 8021ed6:	4b0b      	ldr	r3, [pc, #44]	; (8021f04 <StartOutputHandler+0x40>)
 8021ed8:	881b      	ldrh	r3, [r3, #0]
 8021eda:	e00a      	b.n	8021ef2 <StartOutputHandler+0x2e>
    }
/*The application ESM function is separated from this function to handle pending transitions*/


    /*DC synchronisation is active wait until pll is valid*/
    if(bDcSyncActive)
 8021edc:	4b0a      	ldr	r3, [pc, #40]	; (8021f08 <StartOutputHandler+0x44>)
 8021ede:	781b      	ldrb	r3, [r3, #0]
 8021ee0:	2b00      	cmp	r3, #0
 8021ee2:	d005      	beq.n	8021ef0 <StartOutputHandler+0x2c>
    {
        i16WaitForPllRunningTimeout = 200;
 8021ee4:	4b09      	ldr	r3, [pc, #36]	; (8021f0c <StartOutputHandler+0x48>)
 8021ee6:	22c8      	movs	r2, #200	; 0xc8
 8021ee8:	801a      	strh	r2, [r3, #0]
        i16WaitForPllRunningCnt = 0;
 8021eea:	4b09      	ldr	r3, [pc, #36]	; (8021f10 <StartOutputHandler+0x4c>)
 8021eec:	2200      	movs	r2, #0
 8021eee:	801a      	strh	r2, [r3, #0]
    }


    return result;
 8021ef0:	88fb      	ldrh	r3, [r7, #6]
}
 8021ef2:	4618      	mov	r0, r3
 8021ef4:	370c      	adds	r7, #12
 8021ef6:	46bd      	mov	sp, r7
 8021ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021efc:	4770      	bx	lr
 8021efe:	bf00      	nop
 8021f00:	1fff2548 	.word	0x1fff2548
 8021f04:	1fff2544 	.word	0x1fff2544
 8021f08:	1fff2576 	.word	0x1fff2576
 8021f0c:	1fff2554 	.word	0x1fff2554
 8021f10:	1fff254c 	.word	0x1fff254c

08021f14 <StopOutputHandler>:
 \brief  the state transition can be delayed by returning NOERROR_INWORK

*////////////////////////////////////////////////////////////////////////////////////////

void StopOutputHandler(void)
{
 8021f14:	b480      	push	{r7}
 8021f16:	af00      	add	r7, sp, #0
    /* reset the flags that outputs were received and that the slave is in OP */
    bEcatFirstOutputsReceived = FALSE;
 8021f18:	4b04      	ldr	r3, [pc, #16]	; (8021f2c <StopOutputHandler+0x18>)
 8021f1a:	2200      	movs	r2, #0
 8021f1c:	701a      	strb	r2, [r3, #0]
    bEcatOutputUpdateRunning = FALSE;
 8021f1e:	4b04      	ldr	r3, [pc, #16]	; (8021f30 <StopOutputHandler+0x1c>)
 8021f20:	2200      	movs	r2, #0
 8021f22:	701a      	strb	r2, [r3, #0]
}
 8021f24:	46bd      	mov	sp, r7
 8021f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f2a:	4770      	bx	lr
 8021f2c:	1fff2572 	.word	0x1fff2572
 8021f30:	1fff2577 	.word	0x1fff2577

08021f34 <StopInputHandler>:
  \brief    This function is called in case of the state transition from SAFEOP to PREOP

*////////////////////////////////////////////////////////////////////////////////////////

void StopInputHandler(void)
{
 8021f34:	b580      	push	{r7, lr}
 8021f36:	b082      	sub	sp, #8
 8021f38:	af00      	add	r7, sp, #0
    if(nPdOutputSize > 0)
 8021f3a:	4b2c      	ldr	r3, [pc, #176]	; (8021fec <StopInputHandler+0xb8>)
 8021f3c:	881b      	ldrh	r3, [r3, #0]
 8021f3e:	2b00      	cmp	r3, #0
 8021f40:	d002      	beq.n	8021f48 <StopInputHandler+0x14>
    {
        /* disable the Sync Manager Channel 2 (outputs) */
/*ECATCHANGE_END(V5.11) HW1*/
        DisableSyncManChannel(PROCESS_DATA_OUT);
 8021f42:	2002      	movs	r0, #2
 8021f44:	f7ff f9da 	bl	80212fc <DisableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    if(nPdInputSize > 0)
 8021f48:	4b29      	ldr	r3, [pc, #164]	; (8021ff0 <StopInputHandler+0xbc>)
 8021f4a:	881b      	ldrh	r3, [r3, #0]
 8021f4c:	2b00      	cmp	r3, #0
 8021f4e:	d002      	beq.n	8021f56 <StopInputHandler+0x22>
    {
        /*disable Sync Manager 3 (inputs) if no outputs available*/
/*ECATCHANGE_START(V5.11) HW1*/
        DisableSyncManChannel(PROCESS_DATA_IN);
 8021f50:	2003      	movs	r0, #3
 8021f52:	f7ff f9d3 	bl	80212fc <DisableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    /* reset the events in the AL Event mask register (0x204) */
    {
        UINT16 ResetMask = SYNC0_EVENT | SYNC1_EVENT;
 8021f56:	230c      	movs	r3, #12
 8021f58:	80fb      	strh	r3, [r7, #6]
        ResetMask |= PROCESS_OUTPUT_EVENT;
 8021f5a:	88fb      	ldrh	r3, [r7, #6]
 8021f5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8021f60:	80fb      	strh	r3, [r7, #6]
        ResetMask |= PROCESS_INPUT_EVENT;
 8021f62:	88fb      	ldrh	r3, [r7, #6]
 8021f64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8021f68:	80fb      	strh	r3, [r7, #6]

/*ECATCHANGE_START(V5.11) HW1*/
    ResetALEventMask( ~(ResetMask) );
 8021f6a:	88fb      	ldrh	r3, [r7, #6]
 8021f6c:	43db      	mvns	r3, r3
 8021f6e:	b29b      	uxth	r3, r3
 8021f70:	4618      	mov	r0, r3
 8021f72:	f7ff f959 	bl	8021228 <ResetALEventMask>
/*ECATCHANGE_END(V5.11) HW1*/
    }
    /* reset the flags */
    bEcatFirstOutputsReceived = FALSE;
 8021f76:	4b1f      	ldr	r3, [pc, #124]	; (8021ff4 <StopInputHandler+0xc0>)
 8021f78:	2200      	movs	r2, #0
 8021f7a:	701a      	strb	r2, [r3, #0]
    bEscIntEnabled = FALSE;
 8021f7c:	4b1e      	ldr	r3, [pc, #120]	; (8021ff8 <StopInputHandler+0xc4>)
 8021f7e:	2200      	movs	r2, #0
 8021f80:	701a      	strb	r2, [r3, #0]
/*The application ESM function is separated from this function to handle pending transitions*/

    bDcSyncActive = FALSE;
 8021f82:	4b1e      	ldr	r3, [pc, #120]	; (8021ffc <StopInputHandler+0xc8>)
 8021f84:	2200      	movs	r2, #0
 8021f86:	701a      	strb	r2, [r3, #0]
    bDcRunning = FALSE;
 8021f88:	4b1d      	ldr	r3, [pc, #116]	; (8022000 <StopInputHandler+0xcc>)
 8021f8a:	2200      	movs	r2, #0
 8021f8c:	701a      	strb	r2, [r3, #0]
    bSmSyncSequenceValid = FALSE;
 8021f8e:	4b1d      	ldr	r3, [pc, #116]	; (8022004 <StopInputHandler+0xd0>)
 8021f90:	2200      	movs	r2, #0
 8021f92:	701a      	strb	r2, [r3, #0]
    u16SmSync0Value = 0;
 8021f94:	4b1c      	ldr	r3, [pc, #112]	; (8022008 <StopInputHandler+0xd4>)
 8021f96:	2200      	movs	r2, #0
 8021f98:	801a      	strh	r2, [r3, #0]
    u16SmSync0Counter = 0;
 8021f9a:	4b1c      	ldr	r3, [pc, #112]	; (802200c <StopInputHandler+0xd8>)
 8021f9c:	2200      	movs	r2, #0
 8021f9e:	801a      	strh	r2, [r3, #0]

    Sync0WdValue = 0;
 8021fa0:	4b1b      	ldr	r3, [pc, #108]	; (8022010 <StopInputHandler+0xdc>)
 8021fa2:	2200      	movs	r2, #0
 8021fa4:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8021fa6:	4b1b      	ldr	r3, [pc, #108]	; (8022014 <StopInputHandler+0xe0>)
 8021fa8:	2200      	movs	r2, #0
 8021faa:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 8021fac:	4b1a      	ldr	r3, [pc, #104]	; (8022018 <StopInputHandler+0xe4>)
 8021fae:	2200      	movs	r2, #0
 8021fb0:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 8021fb2:	4b1a      	ldr	r3, [pc, #104]	; (802201c <StopInputHandler+0xe8>)
 8021fb4:	2200      	movs	r2, #0
 8021fb6:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Value = 0;
 8021fb8:	4b19      	ldr	r3, [pc, #100]	; (8022020 <StopInputHandler+0xec>)
 8021fba:	2200      	movs	r2, #0
 8021fbc:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Counter = 0;
 8021fbe:	4b19      	ldr	r3, [pc, #100]	; (8022024 <StopInputHandler+0xf0>)
 8021fc0:	2200      	movs	r2, #0
 8021fc2:	801a      	strh	r2, [r3, #0]
/*ECATCHANGE_START(V5.11) ECAT4*/
    sSyncManInPar.u8SyncError = 0;
 8021fc4:	4b18      	ldr	r3, [pc, #96]	; (8022028 <StopInputHandler+0xf4>)
 8021fc6:	2200      	movs	r2, #0
 8021fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
/*ECATCHANGE_END(V5.11) ECAT4*/

    i16WaitForPllRunningTimeout = 0;
 8021fcc:	4b17      	ldr	r3, [pc, #92]	; (802202c <StopInputHandler+0xf8>)
 8021fce:	2200      	movs	r2, #0
 8021fd0:	801a      	strh	r2, [r3, #0]

    bWdTrigger = FALSE;
 8021fd2:	4b17      	ldr	r3, [pc, #92]	; (8022030 <StopInputHandler+0xfc>)
 8021fd4:	2200      	movs	r2, #0
 8021fd6:	701a      	strb	r2, [r3, #0]
    bEcatInputUpdateRunning = FALSE;
 8021fd8:	4b16      	ldr	r3, [pc, #88]	; (8022034 <StopInputHandler+0x100>)
 8021fda:	2200      	movs	r2, #0
 8021fdc:	701a      	strb	r2, [r3, #0]

    /*Indicate no user specified Sync mode*/
    bSyncSetByUser = FALSE;
 8021fde:	4b16      	ldr	r3, [pc, #88]	; (8022038 <StopInputHandler+0x104>)
 8021fe0:	2200      	movs	r2, #0
 8021fe2:	701a      	strb	r2, [r3, #0]
}
 8021fe4:	3708      	adds	r7, #8
 8021fe6:	46bd      	mov	sp, r7
 8021fe8:	bd80      	pop	{r7, pc}
 8021fea:	bf00      	nop
 8021fec:	1fff2542 	.word	0x1fff2542
 8021ff0:	1fff256c 	.word	0x1fff256c
 8021ff4:	1fff2572 	.word	0x1fff2572
 8021ff8:	1fff257d 	.word	0x1fff257d
 8021ffc:	1fff2576 	.word	0x1fff2576
 8022000:	1fff255c 	.word	0x1fff255c
 8022004:	1fff2573 	.word	0x1fff2573
 8022008:	1fff256e 	.word	0x1fff256e
 802200c:	1fff2580 	.word	0x1fff2580
 8022010:	1fff2550 	.word	0x1fff2550
 8022014:	1fff2546 	.word	0x1fff2546
 8022018:	1fff2578 	.word	0x1fff2578
 802201c:	1fff2556 	.word	0x1fff2556
 8022020:	1fff2568 	.word	0x1fff2568
 8022024:	1fff254a 	.word	0x1fff254a
 8022028:	1fff281c 	.word	0x1fff281c
 802202c:	1fff2554 	.word	0x1fff2554
 8022030:	1fff257e 	.word	0x1fff257e
 8022034:	1fff257c 	.word	0x1fff257c
 8022038:	1fff28a4 	.word	0x1fff28a4

0802203c <BackToInitTransition>:
\brief    This function is called when a X to Init transition is completed

*////////////////////////////////////////////////////////////////////////////////////////

void BackToInitTransition(void)
{
 802203c:	b480      	push	{r7}
 802203e:	af00      	add	r7, sp, #0
    /* Reset indication that the user has written a sync mode*/
    bSyncSetByUser = FALSE;
 8022040:	4b03      	ldr	r3, [pc, #12]	; (8022050 <BackToInitTransition+0x14>)
 8022042:	2200      	movs	r2, #0
 8022044:	701a      	strb	r2, [r3, #0]
}
 8022046:	46bd      	mov	sp, r7
 8022048:	f85d 7b04 	ldr.w	r7, [sp], #4
 802204c:	4770      	bx	lr
 802204e:	bf00      	nop
 8022050:	1fff28a4 	.word	0x1fff28a4

08022054 <SetALStatus>:
 \param alStatusCode    New AL Status Code (written to register 0x134)

  \brief  The function changes the state of the EtherCAT ASIC to the requested.
*////////////////////////////////////////////////////////////////////////////////////////
void SetALStatus(UINT8 alStatus, UINT16 alStatusCode)
{
 8022054:	b480      	push	{r7}
 8022056:	b085      	sub	sp, #20
 8022058:	af00      	add	r7, sp, #0
 802205a:	4603      	mov	r3, r0
 802205c:	460a      	mov	r2, r1
 802205e:	71fb      	strb	r3, [r7, #7]
 8022060:	4613      	mov	r3, r2
 8022062:	80bb      	strh	r3, [r7, #4]
    UINT16 Value = alStatusCode;
 8022064:	88bb      	ldrh	r3, [r7, #4]
 8022066:	81fb      	strh	r3, [r7, #14]

    /*update global status variable if required*/
    if(nAlStatus != alStatus)
 8022068:	4b24      	ldr	r3, [pc, #144]	; (80220fc <SetALStatus+0xa8>)
 802206a:	781b      	ldrb	r3, [r3, #0]
 802206c:	79fa      	ldrb	r2, [r7, #7]
 802206e:	429a      	cmp	r2, r3
 8022070:	d002      	beq.n	8022078 <SetALStatus+0x24>
    {
        nAlStatus = alStatus;
 8022072:	4a22      	ldr	r2, [pc, #136]	; (80220fc <SetALStatus+0xa8>)
 8022074:	79fb      	ldrb	r3, [r7, #7]
 8022076:	7013      	strb	r3, [r2, #0]
    }


    if (alStatusCode != 0xFFFF)
 8022078:	88bb      	ldrh	r3, [r7, #4]
 802207a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802207e:	4293      	cmp	r3, r2
 8022080:	d002      	beq.n	8022088 <SetALStatus+0x34>
    {
        Value = SWAPWORD(Value);

        HW_EscWriteWord(Value,ESC_AL_STATUS_CODE_OFFSET);
 8022082:	4a1f      	ldr	r2, [pc, #124]	; (8022100 <SetALStatus+0xac>)
 8022084:	89fb      	ldrh	r3, [r7, #14]
 8022086:	8013      	strh	r3, [r2, #0]
    }

    Value = nAlStatus;
 8022088:	4b1c      	ldr	r3, [pc, #112]	; (80220fc <SetALStatus+0xa8>)
 802208a:	781b      	ldrb	r3, [r3, #0]
 802208c:	81fb      	strh	r3, [r7, #14]
    Value = SWAPWORD(Value);
    HW_EscWriteWord(Value,ESC_AL_STATUS_OFFSET);
 802208e:	4a1d      	ldr	r2, [pc, #116]	; (8022104 <SetALStatus+0xb0>)
 8022090:	89fb      	ldrh	r3, [r7, #14]
 8022092:	8013      	strh	r3, [r2, #0]

    /*The Run LED state is set in Set LED Indication, only the Error LED blink code is set here*/

    /*set Error blink code*/
    if(alStatusCode == 0x00 || !(alStatus & STATE_CHANGE))
 8022094:	88bb      	ldrh	r3, [r7, #4]
 8022096:	2b00      	cmp	r3, #0
 8022098:	d004      	beq.n	80220a4 <SetALStatus+0x50>
 802209a:	79fb      	ldrb	r3, [r7, #7]
 802209c:	f003 0310 	and.w	r3, r3, #16
 80220a0:	2b00      	cmp	r3, #0
 80220a2:	d103      	bne.n	80220ac <SetALStatus+0x58>
    {
        u8EcatErrorLed = LED_OFF;
 80220a4:	4b18      	ldr	r3, [pc, #96]	; (8022108 <SetALStatus+0xb4>)
 80220a6:	2200      	movs	r2, #0
 80220a8:	701a      	strb	r2, [r3, #0]
 80220aa:	e016      	b.n	80220da <SetALStatus+0x86>
    }
    else if((alStatusCode == ALSTATUSCODE_NOSYNCERROR) ||
 80220ac:	88bb      	ldrh	r3, [r7, #4]
 80220ae:	2b2d      	cmp	r3, #45	; 0x2d
 80220b0:	d005      	beq.n	80220be <SetALStatus+0x6a>
 80220b2:	88bb      	ldrh	r3, [r7, #4]
 80220b4:	2b1a      	cmp	r3, #26
 80220b6:	d002      	beq.n	80220be <SetALStatus+0x6a>
        (alStatusCode == ALSTATUSCODE_SYNCERROR) ||
 80220b8:	88bb      	ldrh	r3, [r7, #4]
 80220ba:	2b32      	cmp	r3, #50	; 0x32
 80220bc:	d103      	bne.n	80220c6 <SetALStatus+0x72>
        (alStatusCode == ALSTATUSCODE_DCPLLSYNCERROR))
    {
        u8EcatErrorLed = LED_SINGLEFLASH;
 80220be:	4b12      	ldr	r3, [pc, #72]	; (8022108 <SetALStatus+0xb4>)
 80220c0:	2201      	movs	r2, #1
 80220c2:	701a      	strb	r2, [r3, #0]
 80220c4:	e009      	b.n	80220da <SetALStatus+0x86>
    }
    else if((alStatusCode == ALSTATUSCODE_SMWATCHDOG))
 80220c6:	88bb      	ldrh	r3, [r7, #4]
 80220c8:	2b1b      	cmp	r3, #27
 80220ca:	d103      	bne.n	80220d4 <SetALStatus+0x80>
    {
        u8EcatErrorLed = LED_DOUBLEFLASH;
 80220cc:	4b0e      	ldr	r3, [pc, #56]	; (8022108 <SetALStatus+0xb4>)
 80220ce:	2202      	movs	r2, #2
 80220d0:	701a      	strb	r2, [r3, #0]
 80220d2:	e002      	b.n	80220da <SetALStatus+0x86>
    }
    else
    {
        u8EcatErrorLed = LED_BLINKING;
 80220d4:	4b0c      	ldr	r3, [pc, #48]	; (8022108 <SetALStatus+0xb4>)
 80220d6:	220d      	movs	r2, #13
 80220d8:	701a      	strb	r2, [r3, #0]
    }
    u8EcatErrorLed |= LED_OVERRIDE;
 80220da:	4b0b      	ldr	r3, [pc, #44]	; (8022108 <SetALStatus+0xb4>)
 80220dc:	781b      	ldrb	r3, [r3, #0]
 80220de:	f043 0310 	orr.w	r3, r3, #16
 80220e2:	b2da      	uxtb	r2, r3
 80220e4:	4b08      	ldr	r3, [pc, #32]	; (8022108 <SetALStatus+0xb4>)
 80220e6:	701a      	strb	r2, [r3, #0]

    HW_EscWriteByte(u8EcatErrorLed,ESC_ERROR_LED_OVERRIDE);
 80220e8:	4b08      	ldr	r3, [pc, #32]	; (802210c <SetALStatus+0xb8>)
 80220ea:	4a07      	ldr	r2, [pc, #28]	; (8022108 <SetALStatus+0xb4>)
 80220ec:	7812      	ldrb	r2, [r2, #0]
 80220ee:	701a      	strb	r2, [r3, #0]
}
 80220f0:	3714      	adds	r7, #20
 80220f2:	46bd      	mov	sp, r7
 80220f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220f8:	4770      	bx	lr
 80220fa:	bf00      	nop
 80220fc:	1fff2541 	.word	0x1fff2541
 8022100:	54010134 	.word	0x54010134
 8022104:	54010130 	.word	0x54010130
 8022108:	1fff2583 	.word	0x1fff2583
 802210c:	54010139 	.word	0x54010139

08022110 <AL_ControlInd>:
              alControl contains the requested new state (INIT, PRE_OP or SAFE_OP)

*////////////////////////////////////////////////////////////////////////////////////////

void AL_ControlInd(UINT8 alControl, UINT16 alStatusCode)
{
 8022110:	b580      	push	{r7, lr}
 8022112:	b084      	sub	sp, #16
 8022114:	af00      	add	r7, sp, #0
 8022116:	4603      	mov	r3, r0
 8022118:	460a      	mov	r2, r1
 802211a:	71fb      	strb	r3, [r7, #7]
 802211c:	4613      	mov	r3, r2
 802211e:	80bb      	strh	r3, [r7, #4]
    UINT16        result = 0;
 8022120:	2300      	movs	r3, #0
 8022122:	81fb      	strh	r3, [r7, #14]
    UINT8            bErrAck = 0;
 8022124:	2300      	movs	r3, #0
 8022126:	737b      	strb	r3, [r7, #13]
    UINT8         stateTrans;
    /*deactivate ESM timeout counter*/
    EsmTimeoutCounter = -1;
 8022128:	4bd3      	ldr	r3, [pc, #844]	; (8022478 <AL_ControlInd+0x368>)
 802212a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802212e:	801a      	strh	r2, [r3, #0]
    bApplEsmPending = TRUE;
 8022130:	4bd2      	ldr	r3, [pc, #840]	; (802247c <AL_ControlInd+0x36c>)
 8022132:	2201      	movs	r2, #1
 8022134:	701a      	strb	r2, [r3, #0]

    /* reset the Error Flag in case of acknowledge by the Master */
    if ( alControl & STATE_CHANGE )
 8022136:	79fb      	ldrb	r3, [r7, #7]
 8022138:	f003 0310 	and.w	r3, r3, #16
 802213c:	2b00      	cmp	r3, #0
 802213e:	d009      	beq.n	8022154 <AL_ControlInd+0x44>
    {
        bErrAck = 1;
 8022140:	2301      	movs	r3, #1
 8022142:	737b      	strb	r3, [r7, #13]
        nAlStatus &= ~STATE_CHANGE;
 8022144:	4bce      	ldr	r3, [pc, #824]	; (8022480 <AL_ControlInd+0x370>)
 8022146:	781b      	ldrb	r3, [r3, #0]
 8022148:	f023 0310 	bic.w	r3, r3, #16
 802214c:	b2da      	uxtb	r2, r3
 802214e:	4bcc      	ldr	r3, [pc, #816]	; (8022480 <AL_ControlInd+0x370>)
 8022150:	701a      	strb	r2, [r3, #0]
 8022152:	e012      	b.n	802217a <AL_ControlInd+0x6a>
        /*enable SM2 is moved to state transition block. First check SM Settings.*/
    }
    else if ( (nAlStatus & STATE_CHANGE)
 8022154:	4bca      	ldr	r3, [pc, #808]	; (8022480 <AL_ControlInd+0x370>)
 8022156:	781b      	ldrb	r3, [r3, #0]
 8022158:	f003 0310 	and.w	r3, r3, #16
 802215c:	2b00      	cmp	r3, #0
 802215e:	d005      	beq.n	802216c <AL_ControlInd+0x5c>
    // HBu 17.04.08: the error has to be acknowledged before when sending the same (or a higher) state
    //               (the error was acknowledged with the same state before independent of the acknowledge flag)
    /*Error Acknowledge with 0xX1 is allowed*/
           && (alControl & STATE_MASK) != STATE_INIT )
 8022160:	79fb      	ldrb	r3, [r7, #7]
 8022162:	f003 030f 	and.w	r3, r3, #15
 8022166:	2b01      	cmp	r3, #1
 8022168:	d000      	beq.n	802216c <AL_ControlInd+0x5c>
        /* the error flag (Bit 4) is set in the AL-Status and the ErrAck bit (Bit 4)
           is not set in the AL-Control, so the state cannot be set to a higher state
           and the new state request will be ignored */
        return;
 802216a:	e325      	b.n	80227b8 <AL_ControlInd+0x6a8>
    else
    {
        nAlStatus &= STATE_MASK;
 802216c:	4bc4      	ldr	r3, [pc, #784]	; (8022480 <AL_ControlInd+0x370>)
 802216e:	781b      	ldrb	r3, [r3, #0]
 8022170:	f003 030f 	and.w	r3, r3, #15
 8022174:	b2da      	uxtb	r2, r3
 8022176:	4bc2      	ldr	r3, [pc, #776]	; (8022480 <AL_ControlInd+0x370>)
 8022178:	701a      	strb	r2, [r3, #0]
    }

    /* generate a variable for the state transition
      (Bit 0-3: new state (AL Control), Bit 4-7: old state (AL Status) */
    alControl &= STATE_MASK;
 802217a:	79fb      	ldrb	r3, [r7, #7]
 802217c:	f003 030f 	and.w	r3, r3, #15
 8022180:	71fb      	strb	r3, [r7, #7]
    stateTrans = nAlStatus;
 8022182:	4bbf      	ldr	r3, [pc, #764]	; (8022480 <AL_ControlInd+0x370>)
 8022184:	781b      	ldrb	r3, [r3, #0]
 8022186:	733b      	strb	r3, [r7, #12]
    stateTrans <<= 4;
 8022188:	7b3b      	ldrb	r3, [r7, #12]
 802218a:	011b      	lsls	r3, r3, #4
 802218c:	733b      	strb	r3, [r7, #12]
    stateTrans += alControl;
 802218e:	7b3a      	ldrb	r2, [r7, #12]
 8022190:	79fb      	ldrb	r3, [r7, #7]
 8022192:	4413      	add	r3, r2
 8022194:	733b      	strb	r3, [r7, #12]


    /* check the SYNCM settings depending on the state transition */
    switch ( stateTrans )
 8022196:	7b3b      	ldrb	r3, [r7, #12]
 8022198:	2b44      	cmp	r3, #68	; 0x44
 802219a:	d029      	beq.n	80221f0 <AL_ControlInd+0xe0>
 802219c:	2b44      	cmp	r3, #68	; 0x44
 802219e:	dc0b      	bgt.n	80221b8 <AL_ControlInd+0xa8>
 80221a0:	2b22      	cmp	r3, #34	; 0x22
 80221a2:	d015      	beq.n	80221d0 <AL_ControlInd+0xc0>
 80221a4:	2b22      	cmp	r3, #34	; 0x22
 80221a6:	dc02      	bgt.n	80221ae <AL_ControlInd+0x9e>
 80221a8:	2b12      	cmp	r3, #18
 80221aa:	d011      	beq.n	80221d0 <AL_ControlInd+0xc0>
 80221ac:	e028      	b.n	8022200 <AL_ControlInd+0xf0>
 80221ae:	2b24      	cmp	r3, #36	; 0x24
 80221b0:	d014      	beq.n	80221dc <AL_ControlInd+0xcc>
 80221b2:	2b42      	cmp	r3, #66	; 0x42
 80221b4:	d00c      	beq.n	80221d0 <AL_ControlInd+0xc0>
 80221b6:	e023      	b.n	8022200 <AL_ControlInd+0xf0>
 80221b8:	2b82      	cmp	r3, #130	; 0x82
 80221ba:	d009      	beq.n	80221d0 <AL_ControlInd+0xc0>
 80221bc:	2b82      	cmp	r3, #130	; 0x82
 80221be:	dc02      	bgt.n	80221c6 <AL_ControlInd+0xb6>
 80221c0:	2b48      	cmp	r3, #72	; 0x48
 80221c2:	d015      	beq.n	80221f0 <AL_ControlInd+0xe0>
 80221c4:	e01c      	b.n	8022200 <AL_ControlInd+0xf0>
 80221c6:	2b84      	cmp	r3, #132	; 0x84
 80221c8:	d012      	beq.n	80221f0 <AL_ControlInd+0xe0>
 80221ca:	2b88      	cmp	r3, #136	; 0x88
 80221cc:	d010      	beq.n	80221f0 <AL_ControlInd+0xe0>
 80221ce:	e017      	b.n	8022200 <AL_ControlInd+0xf0>
    case SAFEOP_2_PREOP:
    case PREOP_2_PREOP:
        /* in PREOP only the SYNCM settings for SYNCM0 and SYNCM1 (mailbox)
           are checked, if result is unequal 0, the slave will stay in or
           switch to INIT and set the ErrorInd Bit (bit 4) of the AL-Status */
        result = CheckSmSettings(MAILBOX_READ+1);
 80221d0:	2002      	movs	r0, #2
 80221d2:	f7ff f8e7 	bl	80213a4 <CheckSmSettings>
 80221d6:	4603      	mov	r3, r0
 80221d8:	81fb      	strh	r3, [r7, #14]
        break;
 80221da:	e011      	b.n	8022200 <AL_ControlInd+0xf0>
        /* before checking the SYNCM settings for SYNCM2 and SYNCM3 (process data)
           the expected length of input data (nPdInputSize) and output data (nPdOutputSize)
            could be adapted (changed by PDO-Assign and/or PDO-Mapping)
            if result is unequal 0, the slave will stay in PREOP and set
            the ErrorInd Bit (bit 4) of the AL-Status */
        result = APPL_GenerateMapping(&nPdInputSize,&nPdOutputSize);
 80221dc:	48a9      	ldr	r0, [pc, #676]	; (8022484 <AL_ControlInd+0x374>)
 80221de:	49aa      	ldr	r1, [pc, #680]	; (8022488 <AL_ControlInd+0x378>)
 80221e0:	f7fd ffc6 	bl	8020170 <APPL_GenerateMapping>
 80221e4:	4603      	mov	r3, r0
 80221e6:	81fb      	strh	r3, [r7, #14]

        if (result != 0)
 80221e8:	89fb      	ldrh	r3, [r7, #14]
 80221ea:	2b00      	cmp	r3, #0
 80221ec:	d000      	beq.n	80221f0 <AL_ControlInd+0xe0>
            break;
 80221ee:	e007      	b.n	8022200 <AL_ControlInd+0xf0>
    case SAFEOP_2_SAFEOP:
    case OP_2_OP:
        /* in SAFEOP or OP the SYNCM settings for all SYNCM are checked
           if result is unequal 0, the slave will stay in or
           switch to PREOP and set the ErrorInd Bit (bit 4) of the AL-Status */
        result = CheckSmSettings(nMaxSyncMan);
 80221f0:	4ba6      	ldr	r3, [pc, #664]	; (802248c <AL_ControlInd+0x37c>)
 80221f2:	781b      	ldrb	r3, [r3, #0]
 80221f4:	4618      	mov	r0, r3
 80221f6:	f7ff f8d5 	bl	80213a4 <CheckSmSettings>
 80221fa:	4603      	mov	r3, r0
 80221fc:	81fb      	strh	r3, [r7, #14]
        break;
 80221fe:	bf00      	nop
    }

    if ( result == 0 )
 8022200:	89fb      	ldrh	r3, [r7, #14]
 8022202:	2b00      	cmp	r3, #0
 8022204:	f040 8215 	bne.w	8022632 <AL_ControlInd+0x522>
    {
        /* execute the corresponding local management service(s) depending on the state transition */
        nEcatStateTrans = 0;
 8022208:	4ba1      	ldr	r3, [pc, #644]	; (8022490 <AL_ControlInd+0x380>)
 802220a:	2200      	movs	r2, #0
 802220c:	801a      	strh	r2, [r3, #0]
        switch ( stateTrans )
 802220e:	7b3b      	ldrb	r3, [r7, #12]
 8022210:	3b11      	subs	r3, #17
 8022212:	2b77      	cmp	r3, #119	; 0x77
 8022214:	f200 8209 	bhi.w	802262a <AL_ControlInd+0x51a>
 8022218:	a201      	add	r2, pc, #4	; (adr r2, 8022220 <AL_ControlInd+0x110>)
 802221a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802221e:	bf00      	nop
 8022220:	080225d3 	.word	0x080225d3
 8022224:	08022411 	.word	0x08022411
 8022228:	08022401 	.word	0x08022401
 802222c:	08022625 	.word	0x08022625
 8022230:	0802262b 	.word	0x0802262b
 8022234:	0802262b 	.word	0x0802262b
 8022238:	0802262b 	.word	0x0802262b
 802223c:	08022625 	.word	0x08022625
 8022240:	0802262b 	.word	0x0802262b
 8022244:	0802262b 	.word	0x0802262b
 8022248:	0802262b 	.word	0x0802262b
 802224c:	0802262b 	.word	0x0802262b
 8022250:	0802262b 	.word	0x0802262b
 8022254:	0802262b 	.word	0x0802262b
 8022258:	0802262b 	.word	0x0802262b
 802225c:	0802262b 	.word	0x0802262b
 8022260:	080225c1 	.word	0x080225c1
 8022264:	080225d7 	.word	0x080225d7
 8022268:	08022625 	.word	0x08022625
 802226c:	0802249f 	.word	0x0802249f
 8022270:	0802262b 	.word	0x0802262b
 8022274:	0802262b 	.word	0x0802262b
 8022278:	0802262b 	.word	0x0802262b
 802227c:	08022625 	.word	0x08022625
 8022280:	0802262b 	.word	0x0802262b
 8022284:	0802262b 	.word	0x0802262b
 8022288:	0802262b 	.word	0x0802262b
 802228c:	0802262b 	.word	0x0802262b
 8022290:	0802262b 	.word	0x0802262b
 8022294:	0802262b 	.word	0x0802262b
 8022298:	0802262b 	.word	0x0802262b
 802229c:	0802262b 	.word	0x0802262b
 80222a0:	08022407 	.word	0x08022407
 80222a4:	08022625 	.word	0x08022625
 80222a8:	0802262b 	.word	0x0802262b
 80222ac:	08022625 	.word	0x08022625
 80222b0:	0802262b 	.word	0x0802262b
 80222b4:	0802262b 	.word	0x0802262b
 80222b8:	0802262b 	.word	0x0802262b
 80222bc:	08022625 	.word	0x08022625
 80222c0:	0802262b 	.word	0x0802262b
 80222c4:	0802262b 	.word	0x0802262b
 80222c8:	0802262b 	.word	0x0802262b
 80222cc:	0802262b 	.word	0x0802262b
 80222d0:	0802262b 	.word	0x0802262b
 80222d4:	0802262b 	.word	0x0802262b
 80222d8:	0802262b 	.word	0x0802262b
 80222dc:	0802262b 	.word	0x0802262b
 80222e0:	080225a3 	.word	0x080225a3
 80222e4:	08022575 	.word	0x08022575
 80222e8:	08022625 	.word	0x08022625
 80222ec:	080225d7 	.word	0x080225d7
 80222f0:	0802262b 	.word	0x0802262b
 80222f4:	0802262b 	.word	0x0802262b
 80222f8:	0802262b 	.word	0x0802262b
 80222fc:	080224f9 	.word	0x080224f9
 8022300:	0802262b 	.word	0x0802262b
 8022304:	0802262b 	.word	0x0802262b
 8022308:	0802262b 	.word	0x0802262b
 802230c:	0802262b 	.word	0x0802262b
 8022310:	0802262b 	.word	0x0802262b
 8022314:	0802262b 	.word	0x0802262b
 8022318:	0802262b 	.word	0x0802262b
 802231c:	0802262b 	.word	0x0802262b
 8022320:	0802262b 	.word	0x0802262b
 8022324:	0802262b 	.word	0x0802262b
 8022328:	0802262b 	.word	0x0802262b
 802232c:	0802262b 	.word	0x0802262b
 8022330:	0802262b 	.word	0x0802262b
 8022334:	0802262b 	.word	0x0802262b
 8022338:	0802262b 	.word	0x0802262b
 802233c:	0802262b 	.word	0x0802262b
 8022340:	0802262b 	.word	0x0802262b
 8022344:	0802262b 	.word	0x0802262b
 8022348:	0802262b 	.word	0x0802262b
 802234c:	0802262b 	.word	0x0802262b
 8022350:	0802262b 	.word	0x0802262b
 8022354:	0802262b 	.word	0x0802262b
 8022358:	0802262b 	.word	0x0802262b
 802235c:	0802262b 	.word	0x0802262b
 8022360:	0802262b 	.word	0x0802262b
 8022364:	0802262b 	.word	0x0802262b
 8022368:	0802262b 	.word	0x0802262b
 802236c:	0802262b 	.word	0x0802262b
 8022370:	0802262b 	.word	0x0802262b
 8022374:	0802262b 	.word	0x0802262b
 8022378:	0802262b 	.word	0x0802262b
 802237c:	0802262b 	.word	0x0802262b
 8022380:	0802262b 	.word	0x0802262b
 8022384:	0802262b 	.word	0x0802262b
 8022388:	0802262b 	.word	0x0802262b
 802238c:	0802262b 	.word	0x0802262b
 8022390:	0802262b 	.word	0x0802262b
 8022394:	0802262b 	.word	0x0802262b
 8022398:	0802262b 	.word	0x0802262b
 802239c:	0802262b 	.word	0x0802262b
 80223a0:	0802262b 	.word	0x0802262b
 80223a4:	0802262b 	.word	0x0802262b
 80223a8:	0802262b 	.word	0x0802262b
 80223ac:	0802262b 	.word	0x0802262b
 80223b0:	0802262b 	.word	0x0802262b
 80223b4:	0802262b 	.word	0x0802262b
 80223b8:	0802262b 	.word	0x0802262b
 80223bc:	0802262b 	.word	0x0802262b
 80223c0:	0802262b 	.word	0x0802262b
 80223c4:	0802262b 	.word	0x0802262b
 80223c8:	0802262b 	.word	0x0802262b
 80223cc:	0802262b 	.word	0x0802262b
 80223d0:	0802262b 	.word	0x0802262b
 80223d4:	0802262b 	.word	0x0802262b
 80223d8:	0802262b 	.word	0x0802262b
 80223dc:	0802262b 	.word	0x0802262b
 80223e0:	08022585 	.word	0x08022585
 80223e4:	08022557 	.word	0x08022557
 80223e8:	08022625 	.word	0x08022625
 80223ec:	08022547 	.word	0x08022547
 80223f0:	0802262b 	.word	0x0802262b
 80223f4:	0802262b 	.word	0x0802262b
 80223f8:	0802262b 	.word	0x0802262b
 80223fc:	080225d7 	.word	0x080225d7
        {
        case INIT_2_BOOT    :
            result = ALSTATUSCODE_BOOTNOTSUPP;
 8022400:	2313      	movs	r3, #19
 8022402:	81fb      	strh	r3, [r7, #14]
            break;
 8022404:	e114      	b.n	8022630 <AL_ControlInd+0x520>

        case BOOT_2_INIT    :
            result = ALSTATUSCODE_BOOTNOTSUPP;
 8022406:	2313      	movs	r3, #19
 8022408:	81fb      	strh	r3, [r7, #14]

            BackToInitTransition();
 802240a:	f7ff fe17 	bl	802203c <BackToInitTransition>

            break;
 802240e:	e10f      	b.n	8022630 <AL_ControlInd+0x520>
        case INIT_2_PREOP :

           UpdateEEPROMLoadedState();
 8022410:	f7fe ff3a 	bl	8021288 <UpdateEEPROMLoadedState>

            if (EepromLoaded == FALSE)
 8022414:	4b1f      	ldr	r3, [pc, #124]	; (8022494 <AL_ControlInd+0x384>)
 8022416:	781b      	ldrb	r3, [r3, #0]
 8022418:	f083 0301 	eor.w	r3, r3, #1
 802241c:	b2db      	uxtb	r3, r3
 802241e:	2b00      	cmp	r3, #0
 8022420:	d001      	beq.n	8022426 <AL_ControlInd+0x316>
            {
                //return an error if the EEPROM was not loaded correct  (device restart is required after the new EEPORM update)
                result = ALSTATUSCODE_EE_ERROR;
 8022422:	2351      	movs	r3, #81	; 0x51
 8022424:	81fb      	strh	r3, [r7, #14]
            }
            if (result == 0)
 8022426:	89fb      	ldrh	r3, [r7, #14]
 8022428:	2b00      	cmp	r3, #0
 802242a:	d137      	bne.n	802249c <AL_ControlInd+0x38c>
            {
            /* MBX_StartMailboxHandler (in mailbox.c) checks if the areas of the mailbox
               sync managers SYNCM0 and SYNCM1 overlap each other
              if result is unequal 0, the slave will stay in INIT
              and sets the ErrorInd Bit (bit 4) of the AL-Status */
            result = MBX_StartMailboxHandler();
 802242c:	f000 fea2 	bl	8023174 <MBX_StartMailboxHandler>
 8022430:	4603      	mov	r3, r0
 8022432:	81fb      	strh	r3, [r7, #14]
            if (result == 0)
 8022434:	89fb      	ldrh	r3, [r7, #14]
 8022436:	2b00      	cmp	r3, #0
 8022438:	d10c      	bne.n	8022454 <AL_ControlInd+0x344>
            {
                bApplEsmPending = FALSE;
 802243a:	4b10      	ldr	r3, [pc, #64]	; (802247c <AL_ControlInd+0x36c>)
 802243c:	2200      	movs	r2, #0
 802243e:	701a      	strb	r2, [r3, #0]
                /* additionally there could be an application specific check (in ecatappl.c)
                   if the state transition from INIT to PREOP should be done
                 if result is unequal 0, the slave will stay in INIT
                 and sets the ErrorInd Bit (bit 4) of the AL-Status */
                result = APPL_StartMailboxHandler();
 8022440:	f7fd fe62 	bl	8020108 <APPL_StartMailboxHandler>
 8022444:	4603      	mov	r3, r0
 8022446:	81fb      	strh	r3, [r7, #14]
                if ( result == 0 )
 8022448:	89fb      	ldrh	r3, [r7, #14]
 802244a:	2b00      	cmp	r3, #0
 802244c:	d102      	bne.n	8022454 <AL_ControlInd+0x344>
                {
                    bMbxRunning = TRUE;
 802244e:	4b12      	ldr	r3, [pc, #72]	; (8022498 <AL_ControlInd+0x388>)
 8022450:	2201      	movs	r2, #1
 8022452:	701a      	strb	r2, [r3, #0]
                }
            }

            if(result != 0 && result != NOERROR_INWORK)
 8022454:	89fb      	ldrh	r3, [r7, #14]
 8022456:	2b00      	cmp	r3, #0
 8022458:	d020      	beq.n	802249c <AL_ControlInd+0x38c>
 802245a:	89fb      	ldrh	r3, [r7, #14]
 802245c:	2bff      	cmp	r3, #255	; 0xff
 802245e:	d01d      	beq.n	802249c <AL_ControlInd+0x38c>
            {
                /*Stop APPL Mbx handler if APPL Start Mbx handler was called before*/
                if(!bApplEsmPending)
 8022460:	4b06      	ldr	r3, [pc, #24]	; (802247c <AL_ControlInd+0x36c>)
 8022462:	781b      	ldrb	r3, [r3, #0]
 8022464:	f083 0301 	eor.w	r3, r3, #1
 8022468:	b2db      	uxtb	r3, r3
 802246a:	2b00      	cmp	r3, #0
 802246c:	d001      	beq.n	8022472 <AL_ControlInd+0x362>
                    APPL_StopMailboxHandler();
 802246e:	f7fd fe53 	bl	8020118 <APPL_StopMailboxHandler>

                 MBX_StopMailboxHandler();
 8022472:	f000 fef9 	bl	8023268 <MBX_StopMailboxHandler>
            }

            }
            break;
 8022476:	e0db      	b.n	8022630 <AL_ControlInd+0x520>
 8022478:	1fff2574 	.word	0x1fff2574
 802247c:	1fff2540 	.word	0x1fff2540
 8022480:	1fff2541 	.word	0x1fff2541
 8022484:	1fff256c 	.word	0x1fff256c
 8022488:	1fff2542 	.word	0x1fff2542
 802248c:	1fff2582 	.word	0x1fff2582
 8022490:	1fff253e 	.word	0x1fff253e
 8022494:	1fff146e 	.word	0x1fff146e
 8022498:	1fff27f6 	.word	0x1fff27f6
 802249c:	e0c8      	b.n	8022630 <AL_ControlInd+0x520>

        case PREOP_2_SAFEOP:
            /* start the input handler (function is defined above) */
            result = StartInputHandler();
 802249e:	f7ff f961 	bl	8021764 <StartInputHandler>
 80224a2:	4603      	mov	r3, r0
 80224a4:	81fb      	strh	r3, [r7, #14]
            if ( result == 0 )
 80224a6:	89fb      	ldrh	r3, [r7, #14]
 80224a8:	2b00      	cmp	r3, #0
 80224aa:	d112      	bne.n	80224d2 <AL_ControlInd+0x3c2>
            {
                bApplEsmPending = FALSE;
 80224ac:	4ba7      	ldr	r3, [pc, #668]	; (802274c <AL_ControlInd+0x63c>)
 80224ae:	2200      	movs	r2, #0
 80224b0:	701a      	strb	r2, [r3, #0]
                result = APPL_StartInputHandler(&u16ALEventMask);
 80224b2:	48a7      	ldr	r0, [pc, #668]	; (8022750 <AL_ControlInd+0x640>)
 80224b4:	f7fd fe38 	bl	8020128 <APPL_StartInputHandler>
 80224b8:	4603      	mov	r3, r0
 80224ba:	81fb      	strh	r3, [r7, #14]

                if(result == 0)
 80224bc:	89fb      	ldrh	r3, [r7, #14]
 80224be:	2b00      	cmp	r3, #0
 80224c0:	d107      	bne.n	80224d2 <AL_ControlInd+0x3c2>
                {
                    /* initialize the AL Event Mask register (0x204) */
/*ECATCHANGE_START(V5.11) HW1*/
                    SetALEventMask( u16ALEventMask );
 80224c2:	4ba3      	ldr	r3, [pc, #652]	; (8022750 <AL_ControlInd+0x640>)
 80224c4:	881b      	ldrh	r3, [r3, #0]
 80224c6:	4618      	mov	r0, r3
 80224c8:	f7fe fec6 	bl	8021258 <SetALEventMask>
/*ECATCHANGE_END(V5.11) HW1*/

                    bEcatInputUpdateRunning = TRUE;
 80224cc:	4ba1      	ldr	r3, [pc, #644]	; (8022754 <AL_ControlInd+0x644>)
 80224ce:	2201      	movs	r2, #1
 80224d0:	701a      	strb	r2, [r3, #0]
                }
            }

            /*if one start input handler returned an error stop the input handler*/
            if(result != 0 && result != NOERROR_INWORK)
 80224d2:	89fb      	ldrh	r3, [r7, #14]
 80224d4:	2b00      	cmp	r3, #0
 80224d6:	d00e      	beq.n	80224f6 <AL_ControlInd+0x3e6>
 80224d8:	89fb      	ldrh	r3, [r7, #14]
 80224da:	2bff      	cmp	r3, #255	; 0xff
 80224dc:	d00b      	beq.n	80224f6 <AL_ControlInd+0x3e6>
            {
                if(!bApplEsmPending)
 80224de:	4b9b      	ldr	r3, [pc, #620]	; (802274c <AL_ControlInd+0x63c>)
 80224e0:	781b      	ldrb	r3, [r3, #0]
 80224e2:	f083 0301 	eor.w	r3, r3, #1
 80224e6:	b2db      	uxtb	r3, r3
 80224e8:	2b00      	cmp	r3, #0
 80224ea:	d001      	beq.n	80224f0 <AL_ControlInd+0x3e0>
                {
                    /*Call only the APPL stop handler if the APPL start handler was called before*/
                    /*The application can react to the state transition in the function APPL_StopInputHandler */
                    APPL_StopInputHandler();
 80224ec:	f7fd fe28 	bl	8020140 <APPL_StopInputHandler>
                }

                StopInputHandler();
 80224f0:	f7ff fd20 	bl	8021f34 <StopInputHandler>
            }
            break;
 80224f4:	e09c      	b.n	8022630 <AL_ControlInd+0x520>
 80224f6:	e09b      	b.n	8022630 <AL_ControlInd+0x520>

        case SAFEOP_2_OP:
            /* start the output handler (function is defined above) */
            result = StartOutputHandler();
 80224f8:	f7ff fce4 	bl	8021ec4 <StartOutputHandler>
 80224fc:	4603      	mov	r3, r0
 80224fe:	81fb      	strh	r3, [r7, #14]
            if(result == 0)
 8022500:	89fb      	ldrh	r3, [r7, #14]
 8022502:	2b00      	cmp	r3, #0
 8022504:	d10c      	bne.n	8022520 <AL_ControlInd+0x410>
            {
                bApplEsmPending = FALSE;
 8022506:	4b91      	ldr	r3, [pc, #580]	; (802274c <AL_ControlInd+0x63c>)
 8022508:	2200      	movs	r2, #0
 802250a:	701a      	strb	r2, [r3, #0]
                result = APPL_StartOutputHandler();
 802250c:	f7fd fe20 	bl	8020150 <APPL_StartOutputHandler>
 8022510:	4603      	mov	r3, r0
 8022512:	81fb      	strh	r3, [r7, #14]

                if(result == 0)
 8022514:	89fb      	ldrh	r3, [r7, #14]
 8022516:	2b00      	cmp	r3, #0
 8022518:	d102      	bne.n	8022520 <AL_ControlInd+0x410>
                {
                    /*Device is in OPERATINAL*/
                    bEcatOutputUpdateRunning = TRUE;
 802251a:	4b8f      	ldr	r3, [pc, #572]	; (8022758 <AL_ControlInd+0x648>)
 802251c:	2201      	movs	r2, #1
 802251e:	701a      	strb	r2, [r3, #0]
                }

            }

            if ( result != 0 && result != NOERROR_INWORK)
 8022520:	89fb      	ldrh	r3, [r7, #14]
 8022522:	2b00      	cmp	r3, #0
 8022524:	d00e      	beq.n	8022544 <AL_ControlInd+0x434>
 8022526:	89fb      	ldrh	r3, [r7, #14]
 8022528:	2bff      	cmp	r3, #255	; 0xff
 802252a:	d00b      	beq.n	8022544 <AL_ControlInd+0x434>
            {
                if(!bApplEsmPending)
 802252c:	4b87      	ldr	r3, [pc, #540]	; (802274c <AL_ControlInd+0x63c>)
 802252e:	781b      	ldrb	r3, [r3, #0]
 8022530:	f083 0301 	eor.w	r3, r3, #1
 8022534:	b2db      	uxtb	r3, r3
 8022536:	2b00      	cmp	r3, #0
 8022538:	d001      	beq.n	802253e <AL_ControlInd+0x42e>
                    APPL_StopOutputHandler();
 802253a:	f7fd fe11 	bl	8020160 <APPL_StopOutputHandler>

                StopOutputHandler();
 802253e:	f7ff fce9 	bl	8021f14 <StopOutputHandler>
            }

            break;
 8022542:	e075      	b.n	8022630 <AL_ControlInd+0x520>
 8022544:	e074      	b.n	8022630 <AL_ControlInd+0x520>

        case OP_2_SAFEOP:
            /* stop the output handler (function is defined above) */
            APPL_StopOutputHandler();
 8022546:	f7fd fe0b 	bl	8020160 <APPL_StopOutputHandler>

            StopOutputHandler();
 802254a:	f7ff fce3 	bl	8021f14 <StopOutputHandler>

            bApplEsmPending = FALSE;
 802254e:	4b7f      	ldr	r3, [pc, #508]	; (802274c <AL_ControlInd+0x63c>)
 8022550:	2200      	movs	r2, #0
 8022552:	701a      	strb	r2, [r3, #0]

            break;
 8022554:	e06c      	b.n	8022630 <AL_ControlInd+0x520>

        case OP_2_PREOP:
            /* stop the output handler (function is defined above) */
            result = APPL_StopOutputHandler();
 8022556:	f7fd fe03 	bl	8020160 <APPL_StopOutputHandler>
 802255a:	4603      	mov	r3, r0
 802255c:	81fb      	strh	r3, [r7, #14]

            StopOutputHandler();
 802255e:	f7ff fcd9 	bl	8021f14 <StopOutputHandler>

            bApplEsmPending = FALSE;
 8022562:	4b7a      	ldr	r3, [pc, #488]	; (802274c <AL_ControlInd+0x63c>)
 8022564:	2200      	movs	r2, #0
 8022566:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 8022568:	89fb      	ldrh	r3, [r7, #14]
 802256a:	2b00      	cmp	r3, #0
 802256c:	d000      	beq.n	8022570 <AL_ControlInd+0x460>
                break;
 802256e:	e05f      	b.n	8022630 <AL_ControlInd+0x520>

            stateTrans = SAFEOP_2_PREOP;
 8022570:	2342      	movs	r3, #66	; 0x42
 8022572:	733b      	strb	r3, [r7, #12]

        case SAFEOP_2_PREOP:
            /* stop the input handler (function is defined above) */
            APPL_StopInputHandler();
 8022574:	f7fd fde4 	bl	8020140 <APPL_StopInputHandler>
           
            StopInputHandler();
 8022578:	f7ff fcdc 	bl	8021f34 <StopInputHandler>

            bApplEsmPending = FALSE;
 802257c:	4b73      	ldr	r3, [pc, #460]	; (802274c <AL_ControlInd+0x63c>)
 802257e:	2200      	movs	r2, #0
 8022580:	701a      	strb	r2, [r3, #0]

            break;
 8022582:	e055      	b.n	8022630 <AL_ControlInd+0x520>

        case OP_2_INIT:
            /* stop the output handler (function is defined above) */
            result = APPL_StopOutputHandler();
 8022584:	f7fd fdec 	bl	8020160 <APPL_StopOutputHandler>
 8022588:	4603      	mov	r3, r0
 802258a:	81fb      	strh	r3, [r7, #14]

            StopOutputHandler();
 802258c:	f7ff fcc2 	bl	8021f14 <StopOutputHandler>

            bApplEsmPending = FALSE;
 8022590:	4b6e      	ldr	r3, [pc, #440]	; (802274c <AL_ControlInd+0x63c>)
 8022592:	2200      	movs	r2, #0
 8022594:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 8022596:	89fb      	ldrh	r3, [r7, #14]
 8022598:	2b00      	cmp	r3, #0
 802259a:	d000      	beq.n	802259e <AL_ControlInd+0x48e>
                break;
 802259c:	e048      	b.n	8022630 <AL_ControlInd+0x520>
            
            stateTrans = SAFEOP_2_INIT;
 802259e:	2341      	movs	r3, #65	; 0x41
 80225a0:	733b      	strb	r3, [r7, #12]

        case SAFEOP_2_INIT:
            /* stop the input handler (function is defined above) */
            result = APPL_StopInputHandler();
 80225a2:	f7fd fdcd 	bl	8020140 <APPL_StopInputHandler>
 80225a6:	4603      	mov	r3, r0
 80225a8:	81fb      	strh	r3, [r7, #14]
            
            StopInputHandler();
 80225aa:	f7ff fcc3 	bl	8021f34 <StopInputHandler>

            bApplEsmPending = FALSE;
 80225ae:	4b67      	ldr	r3, [pc, #412]	; (802274c <AL_ControlInd+0x63c>)
 80225b0:	2200      	movs	r2, #0
 80225b2:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 80225b4:	89fb      	ldrh	r3, [r7, #14]
 80225b6:	2b00      	cmp	r3, #0
 80225b8:	d000      	beq.n	80225bc <AL_ControlInd+0x4ac>
                break;
 80225ba:	e039      	b.n	8022630 <AL_ControlInd+0x520>
            stateTrans = PREOP_2_INIT;
 80225bc:	2321      	movs	r3, #33	; 0x21
 80225be:	733b      	strb	r3, [r7, #12]

        case PREOP_2_INIT:
            MBX_StopMailboxHandler();
 80225c0:	f000 fe52 	bl	8023268 <MBX_StopMailboxHandler>
            result = APPL_StopMailboxHandler();
 80225c4:	f7fd fda8 	bl	8020118 <APPL_StopMailboxHandler>
 80225c8:	4603      	mov	r3, r0
 80225ca:	81fb      	strh	r3, [r7, #14]

            BackToInitTransition();
 80225cc:	f7ff fd36 	bl	802203c <BackToInitTransition>
            break;
 80225d0:	e02e      	b.n	8022630 <AL_ControlInd+0x520>

        case INIT_2_INIT:
            BackToInitTransition();
 80225d2:	f7ff fd33 	bl	802203c <BackToInitTransition>
        case PREOP_2_PREOP:
        case SAFEOP_2_SAFEOP:
        case OP_2_OP:
            if(bErrAck)
 80225d6:	7b7b      	ldrb	r3, [r7, #13]
 80225d8:	2b00      	cmp	r3, #0
 80225da:	d004      	beq.n	80225e6 <AL_ControlInd+0x4d6>
                APPL_AckErrorInd(stateTrans);
 80225dc:	7b3b      	ldrb	r3, [r7, #12]
 80225de:	b29b      	uxth	r3, r3
 80225e0:	4618      	mov	r0, r3
 80225e2:	f7fd fd87 	bl	80200f4 <APPL_AckErrorInd>

            if(!bLocalErrorFlag)
 80225e6:	4b5d      	ldr	r3, [pc, #372]	; (802275c <AL_ControlInd+0x64c>)
 80225e8:	781b      	ldrb	r3, [r3, #0]
 80225ea:	f083 0301 	eor.w	r3, r3, #1
 80225ee:	b2db      	uxtb	r3, r3
 80225f0:	2b00      	cmp	r3, #0
 80225f2:	d014      	beq.n	802261e <AL_ControlInd+0x50e>
            {
                /*no local error flag is currently active, enable SM*/
                if ( nAlStatus & (STATE_SAFEOP | STATE_OP))
 80225f4:	4b5a      	ldr	r3, [pc, #360]	; (8022760 <AL_ControlInd+0x650>)
 80225f6:	781b      	ldrb	r3, [r3, #0]
 80225f8:	f003 030c 	and.w	r3, r3, #12
 80225fc:	2b00      	cmp	r3, #0
 80225fe:	d00e      	beq.n	802261e <AL_ControlInd+0x50e>
                {
                    if(nPdOutputSize > 0)
 8022600:	4b58      	ldr	r3, [pc, #352]	; (8022764 <AL_ControlInd+0x654>)
 8022602:	881b      	ldrh	r3, [r3, #0]
 8022604:	2b00      	cmp	r3, #0
 8022606:	d003      	beq.n	8022610 <AL_ControlInd+0x500>
                    {
/*ECATCHANGE_START(V5.11) HW1*/
                        EnableSyncManChannel(PROCESS_DATA_OUT);
 8022608:	2002      	movs	r0, #2
 802260a:	f7fe fea1 	bl	8021350 <EnableSyncManChannel>
 802260e:	e006      	b.n	802261e <AL_ControlInd+0x50e>
/*ECATCHANGE_END(V5.11) HW1*/
                    }
                    else 
                    if(nPdInputSize > 0)
 8022610:	4b55      	ldr	r3, [pc, #340]	; (8022768 <AL_ControlInd+0x658>)
 8022612:	881b      	ldrh	r3, [r3, #0]
 8022614:	2b00      	cmp	r3, #0
 8022616:	d002      	beq.n	802261e <AL_ControlInd+0x50e>
                    {
/*ECATCHANGE_START(V5.11) HW1*/
                        EnableSyncManChannel(PROCESS_DATA_IN);
 8022618:	2003      	movs	r0, #3
 802261a:	f7fe fe99 	bl	8021350 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
                    }
                }
            }
            result = NOERROR_NOSTATECHANGE;
 802261e:	23fe      	movs	r3, #254	; 0xfe
 8022620:	81fb      	strh	r3, [r7, #14]
            break;
 8022622:	e005      	b.n	8022630 <AL_ControlInd+0x520>
        case SAFEOP_2_BOOT:
        case OP_2_BOOT:
        case BOOT_2_PREOP:
        case BOOT_2_SAFEOP:
        case BOOT_2_OP:
            result = ALSTATUSCODE_INVALIDALCONTROL;
 8022624:	2311      	movs	r3, #17
 8022626:	81fb      	strh	r3, [r7, #14]
            break;
 8022628:	e002      	b.n	8022630 <AL_ControlInd+0x520>

        default:
            result = ALSTATUSCODE_UNKNOWNALCONTROL;
 802262a:	2312      	movs	r3, #18
 802262c:	81fb      	strh	r3, [r7, #14]
            break;
 802262e:	bf00      	nop
 8022630:	e01e      	b.n	8022670 <AL_ControlInd+0x560>
    }
    else
    {
        /* the checking of the sync manager settings was not successful
            switch back the state to PREOP or INIT */
        switch (nAlStatus)
 8022632:	4b4b      	ldr	r3, [pc, #300]	; (8022760 <AL_ControlInd+0x650>)
 8022634:	781b      	ldrb	r3, [r3, #0]
 8022636:	2b04      	cmp	r3, #4
 8022638:	d008      	beq.n	802264c <AL_ControlInd+0x53c>
 802263a:	2b08      	cmp	r3, #8
 802263c:	d002      	beq.n	8022644 <AL_ControlInd+0x534>
 802263e:	2b02      	cmp	r3, #2
 8022640:	d008      	beq.n	8022654 <AL_ControlInd+0x544>
 8022642:	e015      	b.n	8022670 <AL_ControlInd+0x560>
        {
        case STATE_OP:
            /* stop the output handler (function is defined above) */
            APPL_StopOutputHandler();
 8022644:	f7fd fd8c 	bl	8020160 <APPL_StopOutputHandler>
            StopOutputHandler();
 8022648:	f7ff fc64 	bl	8021f14 <StopOutputHandler>
        case STATE_SAFEOP:
            /* stop the input handler (function is defined above) */
            APPL_StopInputHandler();
 802264c:	f7fd fd78 	bl	8020140 <APPL_StopInputHandler>

            StopInputHandler();
 8022650:	f7ff fc70 	bl	8021f34 <StopInputHandler>

        case STATE_PREOP:

            if ( result == ALSTATUSCODE_INVALIDMBXCFGINPREOP )
 8022654:	89fb      	ldrh	r3, [r7, #14]
 8022656:	2b16      	cmp	r3, #22
 8022658:	d107      	bne.n	802266a <AL_ControlInd+0x55a>
            {
                /* the mailbox sync manager settings were wrong, switch back to INIT */
                MBX_StopMailboxHandler();
 802265a:	f000 fe05 	bl	8023268 <MBX_StopMailboxHandler>
                APPL_StopMailboxHandler();
 802265e:	f7fd fd5b 	bl	8020118 <APPL_StopMailboxHandler>

                nAlStatus = STATE_INIT;
 8022662:	4b3f      	ldr	r3, [pc, #252]	; (8022760 <AL_ControlInd+0x650>)
 8022664:	2201      	movs	r2, #1
 8022666:	701a      	strb	r2, [r3, #0]
 8022668:	e002      	b.n	8022670 <AL_ControlInd+0x560>
            }
            else
                nAlStatus = STATE_PREOP;
 802266a:	4b3d      	ldr	r3, [pc, #244]	; (8022760 <AL_ControlInd+0x650>)
 802266c:	2202      	movs	r2, #2
 802266e:	701a      	strb	r2, [r3, #0]
        }
    }

    if ( result == NOERROR_INWORK )
 8022670:	89fb      	ldrh	r3, [r7, #14]
 8022672:	2bff      	cmp	r3, #255	; 0xff
 8022674:	d12a      	bne.n	80226cc <AL_ControlInd+0x5bc>
    {
        /* state transition is still in work
            ECAT_StateChange must be called from the application */
        bEcatWaitForAlControlRes = TRUE;
 8022676:	4b3d      	ldr	r3, [pc, #244]	; (802276c <AL_ControlInd+0x65c>)
 8022678:	2201      	movs	r2, #1
 802267a:	701a      	strb	r2, [r3, #0]
        /* state transition has to be stored */
        nEcatStateTrans = stateTrans;
 802267c:	7b3b      	ldrb	r3, [r7, #12]
 802267e:	b29a      	uxth	r2, r3
 8022680:	4b3b      	ldr	r3, [pc, #236]	; (8022770 <AL_ControlInd+0x660>)
 8022682:	801a      	strh	r2, [r3, #0]

        /*Init ESM timeout counter (will be decremented with the local 1ms timer)*/
        switch(nEcatStateTrans)
 8022684:	4b3a      	ldr	r3, [pc, #232]	; (8022770 <AL_ControlInd+0x660>)
 8022686:	881b      	ldrh	r3, [r3, #0]
 8022688:	2b24      	cmp	r3, #36	; 0x24
 802268a:	d00d      	beq.n	80226a8 <AL_ControlInd+0x598>
 802268c:	2b24      	cmp	r3, #36	; 0x24
 802268e:	dc03      	bgt.n	8022698 <AL_ControlInd+0x588>
 8022690:	3b12      	subs	r3, #18
 8022692:	2b01      	cmp	r3, #1
 8022694:	d80d      	bhi.n	80226b2 <AL_ControlInd+0x5a2>
 8022696:	e002      	b.n	802269e <AL_ControlInd+0x58e>
 8022698:	2b48      	cmp	r3, #72	; 0x48
 802269a:	d005      	beq.n	80226a8 <AL_ControlInd+0x598>
 802269c:	e009      	b.n	80226b2 <AL_ControlInd+0x5a2>
        {
            case INIT_2_PREOP:
            case INIT_2_BOOT:
                EsmTimeoutCounter = PREOPTIMEOUT;
 802269e:	4b35      	ldr	r3, [pc, #212]	; (8022774 <AL_ControlInd+0x664>)
 80226a0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80226a4:	801a      	strh	r2, [r3, #0]
            break;
 80226a6:	e008      	b.n	80226ba <AL_ControlInd+0x5aa>
            case PREOP_2_SAFEOP:
            case SAFEOP_2_OP:
                EsmTimeoutCounter = SAFEOP2OPTIMEOUT;
 80226a8:	4b32      	ldr	r3, [pc, #200]	; (8022774 <AL_ControlInd+0x664>)
 80226aa:	f242 3228 	movw	r2, #9000	; 0x2328
 80226ae:	801a      	strh	r2, [r3, #0]
                break;
 80226b0:	e003      	b.n	80226ba <AL_ControlInd+0x5aa>
           default:
                EsmTimeoutCounter = 200; //Set default timeout value to 200ms
 80226b2:	4b30      	ldr	r3, [pc, #192]	; (8022774 <AL_ControlInd+0x664>)
 80226b4:	22c8      	movs	r2, #200	; 0xc8
 80226b6:	801a      	strh	r2, [r3, #0]
                break;
 80226b8:	bf00      	nop
        }
        EsmTimeoutCounter -= 50; //subtract 50ms from the timeout to react before the master runs into a timeout.
 80226ba:	4b2e      	ldr	r3, [pc, #184]	; (8022774 <AL_ControlInd+0x664>)
 80226bc:	881b      	ldrh	r3, [r3, #0]
 80226be:	b29b      	uxth	r3, r3
 80226c0:	3b32      	subs	r3, #50	; 0x32
 80226c2:	b29b      	uxth	r3, r3
 80226c4:	b29a      	uxth	r2, r3
 80226c6:	4b2b      	ldr	r3, [pc, #172]	; (8022774 <AL_ControlInd+0x664>)
 80226c8:	801a      	strh	r2, [r3, #0]
 80226ca:	e075      	b.n	80227b8 <AL_ControlInd+0x6a8>

    }
    else if ( alControl != (nAlStatus & STATE_MASK) )
 80226cc:	79fa      	ldrb	r2, [r7, #7]
 80226ce:	4b24      	ldr	r3, [pc, #144]	; (8022760 <AL_ControlInd+0x650>)
 80226d0:	781b      	ldrb	r3, [r3, #0]
 80226d2:	f003 030f 	and.w	r3, r3, #15
 80226d6:	429a      	cmp	r2, r3
 80226d8:	d065      	beq.n	80227a6 <AL_ControlInd+0x696>
    {
        /* The slave state has changed */

        if ( (result != 0 || alStatusCode != 0) && ((alControl | nAlStatus) & STATE_OP) )
 80226da:	89fb      	ldrh	r3, [r7, #14]
 80226dc:	2b00      	cmp	r3, #0
 80226de:	d102      	bne.n	80226e6 <AL_ControlInd+0x5d6>
 80226e0:	88bb      	ldrh	r3, [r7, #4]
 80226e2:	2b00      	cmp	r3, #0
 80226e4:	d01f      	beq.n	8022726 <AL_ControlInd+0x616>
 80226e6:	4b1e      	ldr	r3, [pc, #120]	; (8022760 <AL_ControlInd+0x650>)
 80226e8:	781a      	ldrb	r2, [r3, #0]
 80226ea:	79fb      	ldrb	r3, [r7, #7]
 80226ec:	4313      	orrs	r3, r2
 80226ee:	b2db      	uxtb	r3, r3
 80226f0:	f003 0308 	and.w	r3, r3, #8
 80226f4:	2b00      	cmp	r3, #0
 80226f6:	d016      	beq.n	8022726 <AL_ControlInd+0x616>
        {
            /* the local application requested to leave the state OP so we have to disable the SM2
               and make the state change from OP to SAFEOP by calling StopOutputHandler */

            //only execute StopOutputHandler() if Output update is still running
            if(bEcatOutputUpdateRunning)
 80226f8:	4b17      	ldr	r3, [pc, #92]	; (8022758 <AL_ControlInd+0x648>)
 80226fa:	781b      	ldrb	r3, [r3, #0]
 80226fc:	2b00      	cmp	r3, #0
 80226fe:	d003      	beq.n	8022708 <AL_ControlInd+0x5f8>
            {
                APPL_StopOutputHandler();
 8022700:	f7fd fd2e 	bl	8020160 <APPL_StopOutputHandler>

                StopOutputHandler();
 8022704:	f7ff fc06 	bl	8021f14 <StopOutputHandler>
            }

            if(nPdOutputSize > 0)
 8022708:	4b16      	ldr	r3, [pc, #88]	; (8022764 <AL_ControlInd+0x654>)
 802270a:	881b      	ldrh	r3, [r3, #0]
 802270c:	2b00      	cmp	r3, #0
 802270e:	d003      	beq.n	8022718 <AL_ControlInd+0x608>
            {
                /* disable the Sync Manager Channel 2 (outputs) */
/*ECATCHANGE_START(V5.11) HW1*/
                DisableSyncManChannel(PROCESS_DATA_OUT);
 8022710:	2002      	movs	r0, #2
 8022712:	f7fe fdf3 	bl	80212fc <DisableSyncManChannel>
 8022716:	e006      	b.n	8022726 <AL_ControlInd+0x616>
/*ECATCHANGE_END(V5.11) HW1*/
            }
            else
                if(nPdInputSize > 0)
 8022718:	4b13      	ldr	r3, [pc, #76]	; (8022768 <AL_ControlInd+0x658>)
 802271a:	881b      	ldrh	r3, [r3, #0]
 802271c:	2b00      	cmp	r3, #0
 802271e:	d002      	beq.n	8022726 <AL_ControlInd+0x616>
            {
                /*disable Sync Manager 3 (inputs) if no outputs available*/
/*ECATCHANGE_START(V5.11) HW1*/
                DisableSyncManChannel(PROCESS_DATA_IN);
 8022720:	2003      	movs	r0, #3
 8022722:	f7fe fdeb 	bl	80212fc <DisableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
            }

        }
        if ( result != 0 )
 8022726:	89fb      	ldrh	r3, [r7, #14]
 8022728:	2b00      	cmp	r3, #0
 802272a:	d025      	beq.n	8022778 <AL_ControlInd+0x668>
        {
            if ( nAlStatus == STATE_OP )
 802272c:	4b0c      	ldr	r3, [pc, #48]	; (8022760 <AL_ControlInd+0x650>)
 802272e:	781b      	ldrb	r3, [r3, #0]
 8022730:	2b08      	cmp	r3, #8
 8022732:	d102      	bne.n	802273a <AL_ControlInd+0x62a>
                nAlStatus = STATE_SAFEOP;
 8022734:	4b0a      	ldr	r3, [pc, #40]	; (8022760 <AL_ControlInd+0x650>)
 8022736:	2204      	movs	r2, #4
 8022738:	701a      	strb	r2, [r3, #0]
            /* save the failed status to be able to decide, if the AL Status Code shall be
               reset in case of a coming successful state transition */
            nAlStatus |= STATE_CHANGE;
 802273a:	4b09      	ldr	r3, [pc, #36]	; (8022760 <AL_ControlInd+0x650>)
 802273c:	781b      	ldrb	r3, [r3, #0]
 802273e:	f043 0310 	orr.w	r3, r3, #16
 8022742:	b2da      	uxtb	r2, r3
 8022744:	4b06      	ldr	r3, [pc, #24]	; (8022760 <AL_ControlInd+0x650>)
 8022746:	701a      	strb	r2, [r3, #0]
 8022748:	e022      	b.n	8022790 <AL_ControlInd+0x680>
 802274a:	bf00      	nop
 802274c:	1fff2540 	.word	0x1fff2540
 8022750:	1fff255a 	.word	0x1fff255a
 8022754:	1fff257c 	.word	0x1fff257c
 8022758:	1fff2577 	.word	0x1fff2577
 802275c:	1fff2548 	.word	0x1fff2548
 8022760:	1fff2541 	.word	0x1fff2541
 8022764:	1fff2542 	.word	0x1fff2542
 8022768:	1fff256c 	.word	0x1fff256c
 802276c:	1fff256a 	.word	0x1fff256a
 8022770:	1fff253e 	.word	0x1fff253e
 8022774:	1fff2574 	.word	0x1fff2574
        }
        else
        {
            /* state transition was successful */
            if ( alStatusCode != 0 )
 8022778:	88bb      	ldrh	r3, [r7, #4]
 802277a:	2b00      	cmp	r3, #0
 802277c:	d005      	beq.n	802278a <AL_ControlInd+0x67a>
            {
                /* state change request from the user */
                result = alStatusCode;
 802277e:	88bb      	ldrh	r3, [r7, #4]
 8022780:	81fb      	strh	r3, [r7, #14]
                alControl |= STATE_CHANGE;
 8022782:	79fb      	ldrb	r3, [r7, #7]
 8022784:	f043 0310 	orr.w	r3, r3, #16
 8022788:	71fb      	strb	r3, [r7, #7]
            }
            /* acknowledge the new state */
            nAlStatus = alControl;
 802278a:	4a0d      	ldr	r2, [pc, #52]	; (80227c0 <AL_ControlInd+0x6b0>)
 802278c:	79fb      	ldrb	r3, [r7, #7]
 802278e:	7013      	strb	r3, [r2, #0]
        }

        bEcatWaitForAlControlRes = FALSE;
 8022790:	4b0c      	ldr	r3, [pc, #48]	; (80227c4 <AL_ControlInd+0x6b4>)
 8022792:	2200      	movs	r2, #0
 8022794:	701a      	strb	r2, [r3, #0]

        /* write the AL Status register */
        SetALStatus(nAlStatus, result);
 8022796:	4b0a      	ldr	r3, [pc, #40]	; (80227c0 <AL_ControlInd+0x6b0>)
 8022798:	781a      	ldrb	r2, [r3, #0]
 802279a:	89fb      	ldrh	r3, [r7, #14]
 802279c:	4610      	mov	r0, r2
 802279e:	4619      	mov	r1, r3
 80227a0:	f7ff fc58 	bl	8022054 <SetALStatus>
 80227a4:	e008      	b.n	80227b8 <AL_ControlInd+0x6a8>
    }
    else
    {
        /* Error acknowledgement without a state transition */

         bEcatWaitForAlControlRes = FALSE;
 80227a6:	4b07      	ldr	r3, [pc, #28]	; (80227c4 <AL_ControlInd+0x6b4>)
 80227a8:	2200      	movs	r2, #0
 80227aa:	701a      	strb	r2, [r3, #0]

        /* AL-Status has to be updated and AL-Status-Code has to be reset
           if the the error bit was acknowledged */
        SetALStatus(nAlStatus, 0);
 80227ac:	4b04      	ldr	r3, [pc, #16]	; (80227c0 <AL_ControlInd+0x6b0>)
 80227ae:	781b      	ldrb	r3, [r3, #0]
 80227b0:	4618      	mov	r0, r3
 80227b2:	2100      	movs	r1, #0
 80227b4:	f7ff fc4e 	bl	8022054 <SetALStatus>
    }

}
 80227b8:	3710      	adds	r7, #16
 80227ba:	46bd      	mov	sp, r7
 80227bc:	bd80      	pop	{r7, pc}
 80227be:	bf00      	nop
 80227c0:	1fff2541 	.word	0x1fff2541
 80227c4:	1fff256a 	.word	0x1fff256a

080227c8 <AL_ControlRes>:
 \brief    This function is called cyclic if a state transition is pending (bEcatWaitForAlControlRes == TRUE)
 \brief    If the ESM timeout is expired the state transition will be rejected. Otherwise the application specific state transition function is called.
 \brief    If the pending state transition is triggered by the application the transition need to be completed by the application (ECAT_StateChange())
  *////////////////////////////////////////////////////////////////////////////////////////
void AL_ControlRes(void)
{
 80227c8:	b580      	push	{r7, lr}
 80227ca:	b082      	sub	sp, #8
 80227cc:	af00      	add	r7, sp, #0
    if(bEcatWaitForAlControlRes)
 80227ce:	4b9e      	ldr	r3, [pc, #632]	; (8022a48 <AL_ControlRes+0x280>)
 80227d0:	781b      	ldrb	r3, [r3, #0]
 80227d2:	2b00      	cmp	r3, #0
 80227d4:	f000 8135 	beq.w	8022a42 <AL_ControlRes+0x27a>
    {
        UINT16 result = 0;
 80227d8:	2300      	movs	r3, #0
 80227da:	807b      	strh	r3, [r7, #2]
        UINT8 Status = 0;
 80227dc:	2300      	movs	r3, #0
 80227de:	71fb      	strb	r3, [r7, #7]
        UINT16 StatusCode = 0;
 80227e0:	2300      	movs	r3, #0
 80227e2:	80bb      	strh	r3, [r7, #4]

        if(EsmTimeoutCounter == 0)
 80227e4:	4b99      	ldr	r3, [pc, #612]	; (8022a4c <AL_ControlRes+0x284>)
 80227e6:	881b      	ldrh	r3, [r3, #0]
 80227e8:	2b00      	cmp	r3, #0
 80227ea:	d17c      	bne.n	80228e6 <AL_ControlRes+0x11e>
        {
            Status =  (UINT8)(nEcatStateTrans >> 4);
 80227ec:	4b98      	ldr	r3, [pc, #608]	; (8022a50 <AL_ControlRes+0x288>)
 80227ee:	881b      	ldrh	r3, [r3, #0]
 80227f0:	091b      	lsrs	r3, r3, #4
 80227f2:	b29b      	uxth	r3, r3
 80227f4:	71fb      	strb	r3, [r7, #7]

            /* ESM timeout expired*/
            switch(nEcatStateTrans)
 80227f6:	4b96      	ldr	r3, [pc, #600]	; (8022a50 <AL_ControlRes+0x288>)
 80227f8:	881b      	ldrh	r3, [r3, #0]
 80227fa:	2b24      	cmp	r3, #36	; 0x24
 80227fc:	d01f      	beq.n	802283e <AL_ControlRes+0x76>
 80227fe:	2b24      	cmp	r3, #36	; 0x24
 8022800:	dc04      	bgt.n	802280c <AL_ControlRes+0x44>
 8022802:	3b12      	subs	r3, #18
 8022804:	2b01      	cmp	r3, #1
 8022806:	f200 8109 	bhi.w	8022a1c <AL_ControlRes+0x254>
 802280a:	e002      	b.n	8022812 <AL_ControlRes+0x4a>
 802280c:	2b48      	cmp	r3, #72	; 0x48
 802280e:	d02c      	beq.n	802286a <AL_ControlRes+0xa2>
 8022810:	e104      	b.n	8022a1c <AL_ControlRes+0x254>
            {
                case INIT_2_PREOP:
                case INIT_2_BOOT:

                    if(!bApplEsmPending)
 8022812:	4b90      	ldr	r3, [pc, #576]	; (8022a54 <AL_ControlRes+0x28c>)
 8022814:	781b      	ldrb	r3, [r3, #0]
 8022816:	f083 0301 	eor.w	r3, r3, #1
 802281a:	b2db      	uxtb	r3, r3
 802281c:	2b00      	cmp	r3, #0
 802281e:	d001      	beq.n	8022824 <AL_ControlRes+0x5c>
                        APPL_StopMailboxHandler();
 8022820:	f7fd fc7a 	bl	8020118 <APPL_StopMailboxHandler>

                    MBX_StopMailboxHandler();
 8022824:	f000 fd20 	bl	8023268 <MBX_StopMailboxHandler>
                    if(bLocalErrorFlag)
 8022828:	4b8b      	ldr	r3, [pc, #556]	; (8022a58 <AL_ControlRes+0x290>)
 802282a:	781b      	ldrb	r3, [r3, #0]
 802282c:	2b00      	cmp	r3, #0
 802282e:	d003      	beq.n	8022838 <AL_ControlRes+0x70>
                    {
                        /*Set application specified error*/
                        StatusCode = u16LocalErrorCode;
 8022830:	4b8a      	ldr	r3, [pc, #552]	; (8022a5c <AL_ControlRes+0x294>)
 8022832:	881b      	ldrh	r3, [r3, #0]
 8022834:	80bb      	strh	r3, [r7, #4]
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
                    }
                break;
 8022836:	e055      	b.n	80228e4 <AL_ControlRes+0x11c>
                        StatusCode = u16LocalErrorCode;
                    }
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
 8022838:	2301      	movs	r3, #1
 802283a:	80bb      	strh	r3, [r7, #4]
                    }
                break;
 802283c:	e052      	b.n	80228e4 <AL_ControlRes+0x11c>
                case PREOP_2_SAFEOP:
                    if(!bApplEsmPending)
 802283e:	4b85      	ldr	r3, [pc, #532]	; (8022a54 <AL_ControlRes+0x28c>)
 8022840:	781b      	ldrb	r3, [r3, #0]
 8022842:	f083 0301 	eor.w	r3, r3, #1
 8022846:	b2db      	uxtb	r3, r3
 8022848:	2b00      	cmp	r3, #0
 802284a:	d001      	beq.n	8022850 <AL_ControlRes+0x88>
                        APPL_StopInputHandler();
 802284c:	f7fd fc78 	bl	8020140 <APPL_StopInputHandler>

                    StopInputHandler();
 8022850:	f7ff fb70 	bl	8021f34 <StopInputHandler>
                    
                    if(bLocalErrorFlag)
 8022854:	4b80      	ldr	r3, [pc, #512]	; (8022a58 <AL_ControlRes+0x290>)
 8022856:	781b      	ldrb	r3, [r3, #0]
 8022858:	2b00      	cmp	r3, #0
 802285a:	d003      	beq.n	8022864 <AL_ControlRes+0x9c>
                    {
                        /*Set application specified error*/
                        StatusCode = u16LocalErrorCode;
 802285c:	4b7f      	ldr	r3, [pc, #508]	; (8022a5c <AL_ControlRes+0x294>)
 802285e:	881b      	ldrh	r3, [r3, #0]
 8022860:	80bb      	strh	r3, [r7, #4]
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
                    }
                break;
 8022862:	e03f      	b.n	80228e4 <AL_ControlRes+0x11c>
                        StatusCode = u16LocalErrorCode;
                    }
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
 8022864:	2301      	movs	r3, #1
 8022866:	80bb      	strh	r3, [r7, #4]
                    }
                break;
 8022868:	e03c      	b.n	80228e4 <AL_ControlRes+0x11c>
                case SAFEOP_2_OP:
                    if(bDcSyncActive)
 802286a:	4b7d      	ldr	r3, [pc, #500]	; (8022a60 <AL_ControlRes+0x298>)
 802286c:	781b      	ldrb	r3, [r3, #0]
 802286e:	2b00      	cmp	r3, #0
 8022870:	d01a      	beq.n	80228a8 <AL_ControlRes+0xe0>
                    {
                        /*SafeOP to OP timeout expired check which AL status code need to be written*/
                        if(!bDcRunning)
 8022872:	4b7c      	ldr	r3, [pc, #496]	; (8022a64 <AL_ControlRes+0x29c>)
 8022874:	781b      	ldrb	r3, [r3, #0]
 8022876:	f083 0301 	eor.w	r3, r3, #1
 802287a:	b2db      	uxtb	r3, r3
 802287c:	2b00      	cmp	r3, #0
 802287e:	d002      	beq.n	8022886 <AL_ControlRes+0xbe>
                        {
                            /*no Sync0 signal received*/
                            StatusCode = ALSTATUSCODE_NOSYNCERROR;
 8022880:	232d      	movs	r3, #45	; 0x2d
 8022882:	80bb      	strh	r3, [r7, #4]
 8022884:	e01e      	b.n	80228c4 <AL_ControlRes+0xfc>
                        }
/*ECATCHANGE_START(V5.11) ECAT4*/
                        else if(!bEcatFirstOutputsReceived && (nPdOutputSize > 0))
 8022886:	4b78      	ldr	r3, [pc, #480]	; (8022a68 <AL_ControlRes+0x2a0>)
 8022888:	781b      	ldrb	r3, [r3, #0]
 802288a:	f083 0301 	eor.w	r3, r3, #1
 802288e:	b2db      	uxtb	r3, r3
 8022890:	2b00      	cmp	r3, #0
 8022892:	d006      	beq.n	80228a2 <AL_ControlRes+0xda>
 8022894:	4b75      	ldr	r3, [pc, #468]	; (8022a6c <AL_ControlRes+0x2a4>)
 8022896:	881b      	ldrh	r3, [r3, #0]
 8022898:	2b00      	cmp	r3, #0
 802289a:	d002      	beq.n	80228a2 <AL_ControlRes+0xda>
/*ECATCHANGE_END(V5.11) ECAT4*/
                        {
                            /*no process data received*/
                            StatusCode = ALSTATUSCODE_SMWATCHDOG;
 802289c:	231b      	movs	r3, #27
 802289e:	80bb      	strh	r3, [r7, #4]
 80228a0:	e010      	b.n	80228c4 <AL_ControlRes+0xfc>
                        }
                        else
                        {
                            /*SM/Sync Sequence is not valid*/
                            StatusCode = ALSTATUSCODE_SYNCERROR;
 80228a2:	231a      	movs	r3, #26
 80228a4:	80bb      	strh	r3, [r7, #4]
 80228a6:	e00d      	b.n	80228c4 <AL_ControlRes+0xfc>
                        }
                    }
                    else
                    {
/*ECATCHANGE_START(V5.11) ECAT4*/
                        if (nPdOutputSize > 0)
 80228a8:	4b70      	ldr	r3, [pc, #448]	; (8022a6c <AL_ControlRes+0x2a4>)
 80228aa:	881b      	ldrh	r3, [r3, #0]
 80228ac:	2b00      	cmp	r3, #0
 80228ae:	d002      	beq.n	80228b6 <AL_ControlRes+0xee>
                        {
                            StatusCode = ALSTATUSCODE_SMWATCHDOG;
 80228b0:	231b      	movs	r3, #27
 80228b2:	80bb      	strh	r3, [r7, #4]
 80228b4:	e006      	b.n	80228c4 <AL_ControlRes+0xfc>
                        }
                        else
/*ECATCHANGE_END(V5.11) ECAT4*/
                        {
                            /*Set valid state transition even if timeout expired*/
                            Status = STATE_OP;
 80228b6:	2308      	movs	r3, #8
 80228b8:	71fb      	strb	r3, [r7, #7]
                            StatusCode = 0;
 80228ba:	2300      	movs	r3, #0
 80228bc:	80bb      	strh	r3, [r7, #4]
                            /* Slave is OPERATIONAL */
                            bEcatOutputUpdateRunning = TRUE;
 80228be:	4b6c      	ldr	r3, [pc, #432]	; (8022a70 <AL_ControlRes+0x2a8>)
 80228c0:	2201      	movs	r2, #1
 80228c2:	701a      	strb	r2, [r3, #0]
                        }
                    }

                    /*Stop handler on failed transition*/
                    if(StatusCode != 0)
 80228c4:	88bb      	ldrh	r3, [r7, #4]
 80228c6:	2b00      	cmp	r3, #0
 80228c8:	d00b      	beq.n	80228e2 <AL_ControlRes+0x11a>
                    {
                        if(!bApplEsmPending)
 80228ca:	4b62      	ldr	r3, [pc, #392]	; (8022a54 <AL_ControlRes+0x28c>)
 80228cc:	781b      	ldrb	r3, [r3, #0]
 80228ce:	f083 0301 	eor.w	r3, r3, #1
 80228d2:	b2db      	uxtb	r3, r3
 80228d4:	2b00      	cmp	r3, #0
 80228d6:	d001      	beq.n	80228dc <AL_ControlRes+0x114>
                            APPL_StopOutputHandler();
 80228d8:	f7fd fc42 	bl	8020160 <APPL_StopOutputHandler>

                        StopOutputHandler();
 80228dc:	f7ff fb1a 	bl	8021f14 <StopOutputHandler>
                    }
                break;
 80228e0:	e7ff      	b.n	80228e2 <AL_ControlRes+0x11a>
 80228e2:	bf00      	nop
 80228e4:	e09a      	b.n	8022a1c <AL_ControlRes+0x254>
            }
        } //ESM timeout
        else
        {
            /*Call application specific transition function and complete transition it the function returns 0*/
            switch(nEcatStateTrans)
 80228e6:	4b5a      	ldr	r3, [pc, #360]	; (8022a50 <AL_ControlRes+0x288>)
 80228e8:	881b      	ldrh	r3, [r3, #0]
 80228ea:	2b24      	cmp	r3, #36	; 0x24
 80228ec:	d02a      	beq.n	8022944 <AL_ControlRes+0x17c>
 80228ee:	2b24      	cmp	r3, #36	; 0x24
 80228f0:	dc04      	bgt.n	80228fc <AL_ControlRes+0x134>
 80228f2:	3b12      	subs	r3, #18
 80228f4:	2b01      	cmp	r3, #1
 80228f6:	f200 8091 	bhi.w	8022a1c <AL_ControlRes+0x254>
 80228fa:	e002      	b.n	8022902 <AL_ControlRes+0x13a>
 80228fc:	2b48      	cmp	r3, #72	; 0x48
 80228fe:	d03f      	beq.n	8022980 <AL_ControlRes+0x1b8>
 8022900:	e08c      	b.n	8022a1c <AL_ControlRes+0x254>
            {
                case INIT_2_PREOP:
                case INIT_2_BOOT:
                    if(bApplEsmPending)
 8022902:	4b54      	ldr	r3, [pc, #336]	; (8022a54 <AL_ControlRes+0x28c>)
 8022904:	781b      	ldrb	r3, [r3, #0]
 8022906:	2b00      	cmp	r3, #0
 8022908:	d01b      	beq.n	8022942 <AL_ControlRes+0x17a>
                    {
                        bApplEsmPending = FALSE;
 802290a:	4b52      	ldr	r3, [pc, #328]	; (8022a54 <AL_ControlRes+0x28c>)
 802290c:	2200      	movs	r2, #0
 802290e:	701a      	strb	r2, [r3, #0]
                        /*APPL_StartMailboxHandler() need to be called*/
                        result = APPL_StartMailboxHandler();
 8022910:	f7fd fbfa 	bl	8020108 <APPL_StartMailboxHandler>
 8022914:	4603      	mov	r3, r0
 8022916:	807b      	strh	r3, [r7, #2]

                        if(result == 0)
 8022918:	887b      	ldrh	r3, [r7, #2]
 802291a:	2b00      	cmp	r3, #0
 802291c:	d109      	bne.n	8022932 <AL_ControlRes+0x16a>
                        {
                            /*The application specific transition was successful => set active mailbox handler indication*/
                            bMbxRunning = TRUE;
 802291e:	4b55      	ldr	r3, [pc, #340]	; (8022a74 <AL_ControlRes+0x2ac>)
 8022920:	2201      	movs	r2, #1
 8022922:	701a      	strb	r2, [r3, #0]
                            Status =  (UINT8)(nEcatStateTrans & STATE_MASK);
 8022924:	4b4a      	ldr	r3, [pc, #296]	; (8022a50 <AL_ControlRes+0x288>)
 8022926:	881b      	ldrh	r3, [r3, #0]
 8022928:	b2db      	uxtb	r3, r3
 802292a:	f003 030f 	and.w	r3, r3, #15
 802292e:	71fb      	strb	r3, [r7, #7]
 8022930:	e007      	b.n	8022942 <AL_ControlRes+0x17a>
                        else
                        {
                            /*The application specific transition failed.
                            (In pending case the application need to complete the transition)*/

                            if(result != NOERROR_INWORK)
 8022932:	887b      	ldrh	r3, [r7, #2]
 8022934:	2bff      	cmp	r3, #255	; 0xff
 8022936:	d004      	beq.n	8022942 <AL_ControlRes+0x17a>
                            {
                                APPL_StopMailboxHandler();
 8022938:	f7fd fbee 	bl	8020118 <APPL_StopMailboxHandler>
                                MBX_StopMailboxHandler();
 802293c:	f000 fc94 	bl	8023268 <MBX_StopMailboxHandler>
                            }
                        }
                    }
                break;
 8022940:	e06c      	b.n	8022a1c <AL_ControlRes+0x254>
 8022942:	e06b      	b.n	8022a1c <AL_ControlRes+0x254>
                case PREOP_2_SAFEOP:
                    if(bApplEsmPending)
 8022944:	4b43      	ldr	r3, [pc, #268]	; (8022a54 <AL_ControlRes+0x28c>)
 8022946:	781b      	ldrb	r3, [r3, #0]
 8022948:	2b00      	cmp	r3, #0
 802294a:	d018      	beq.n	802297e <AL_ControlRes+0x1b6>
                    {
                        bApplEsmPending = FALSE;
 802294c:	4b41      	ldr	r3, [pc, #260]	; (8022a54 <AL_ControlRes+0x28c>)
 802294e:	2200      	movs	r2, #0
 8022950:	701a      	strb	r2, [r3, #0]
                        result = APPL_StartInputHandler(&u16ALEventMask);
 8022952:	4849      	ldr	r0, [pc, #292]	; (8022a78 <AL_ControlRes+0x2b0>)
 8022954:	f7fd fbe8 	bl	8020128 <APPL_StartInputHandler>
 8022958:	4603      	mov	r3, r0
 802295a:	807b      	strh	r3, [r7, #2]

                        if(result == 0)
 802295c:	887b      	ldrh	r3, [r7, #2]
 802295e:	2b00      	cmp	r3, #0
 8022960:	d105      	bne.n	802296e <AL_ControlRes+0x1a6>
                        {
                            bEcatInputUpdateRunning = TRUE;
 8022962:	4b46      	ldr	r3, [pc, #280]	; (8022a7c <AL_ControlRes+0x2b4>)
 8022964:	2201      	movs	r2, #1
 8022966:	701a      	strb	r2, [r3, #0]
                            Status = STATE_SAFEOP;
 8022968:	2304      	movs	r3, #4
 802296a:	71fb      	strb	r3, [r7, #7]
 802296c:	e007      	b.n	802297e <AL_ControlRes+0x1b6>
                        else
                        {
                            /*The application specific transition failed.
                            (In pending case the application need to complete the transition)*/

                            if(result != NOERROR_INWORK)
 802296e:	887b      	ldrh	r3, [r7, #2]
 8022970:	2bff      	cmp	r3, #255	; 0xff
 8022972:	d004      	beq.n	802297e <AL_ControlRes+0x1b6>
                            {
                                APPL_StopInputHandler();
 8022974:	f7fd fbe4 	bl	8020140 <APPL_StopInputHandler>
                                StopInputHandler();
 8022978:	f7ff fadc 	bl	8021f34 <StopInputHandler>
                            }
                        }
                    }
                break;
 802297c:	e04e      	b.n	8022a1c <AL_ControlRes+0x254>
 802297e:	e04d      	b.n	8022a1c <AL_ControlRes+0x254>
                case SAFEOP_2_OP:
                   if(bApplEsmPending)
 8022980:	4b34      	ldr	r3, [pc, #208]	; (8022a54 <AL_ControlRes+0x28c>)
 8022982:	781b      	ldrb	r3, [r3, #0]
 8022984:	2b00      	cmp	r3, #0
 8022986:	d048      	beq.n	8022a1a <AL_ControlRes+0x252>
                    {
                        if(bDcSyncActive)
 8022988:	4b35      	ldr	r3, [pc, #212]	; (8022a60 <AL_ControlRes+0x298>)
 802298a:	781b      	ldrb	r3, [r3, #0]
 802298c:	2b00      	cmp	r3, #0
 802298e:	d027      	beq.n	80229e0 <AL_ControlRes+0x218>
                        {
                            if(i16WaitForPllRunningTimeout > 0 && i16WaitForPllRunningTimeout <= i16WaitForPllRunningCnt)
 8022990:	4b3b      	ldr	r3, [pc, #236]	; (8022a80 <AL_ControlRes+0x2b8>)
 8022992:	881b      	ldrh	r3, [r3, #0]
 8022994:	b21b      	sxth	r3, r3
 8022996:	2b00      	cmp	r3, #0
 8022998:	dd3f      	ble.n	8022a1a <AL_ControlRes+0x252>
 802299a:	4b39      	ldr	r3, [pc, #228]	; (8022a80 <AL_ControlRes+0x2b8>)
 802299c:	881a      	ldrh	r2, [r3, #0]
 802299e:	4b39      	ldr	r3, [pc, #228]	; (8022a84 <AL_ControlRes+0x2bc>)
 80229a0:	881b      	ldrh	r3, [r3, #0]
 80229a2:	b212      	sxth	r2, r2
 80229a4:	b21b      	sxth	r3, r3
 80229a6:	429a      	cmp	r2, r3
 80229a8:	dc37      	bgt.n	8022a1a <AL_ControlRes+0x252>
                            {
                                /*Pll sequence valid for 200ms (set in APPL_StartOutputHandler() )
                                acknowledge state transition to OP */

                                i16WaitForPllRunningTimeout = 0;
 80229aa:	4b35      	ldr	r3, [pc, #212]	; (8022a80 <AL_ControlRes+0x2b8>)
 80229ac:	2200      	movs	r2, #0
 80229ae:	801a      	strh	r2, [r3, #0]
                                i16WaitForPllRunningCnt = 0;
 80229b0:	4b34      	ldr	r3, [pc, #208]	; (8022a84 <AL_ControlRes+0x2bc>)
 80229b2:	2200      	movs	r2, #0
 80229b4:	801a      	strh	r2, [r3, #0]

                                result = APPL_StartOutputHandler();
 80229b6:	f7fd fbcb 	bl	8020150 <APPL_StartOutputHandler>
 80229ba:	4603      	mov	r3, r0
 80229bc:	807b      	strh	r3, [r7, #2]

                                if(result == 0)
 80229be:	887b      	ldrh	r3, [r7, #2]
 80229c0:	2b00      	cmp	r3, #0
 80229c2:	d105      	bne.n	80229d0 <AL_ControlRes+0x208>
                                {
                                    /* Slave is OPERATIONAL */
                                    bEcatOutputUpdateRunning = TRUE;
 80229c4:	4b2a      	ldr	r3, [pc, #168]	; (8022a70 <AL_ControlRes+0x2a8>)
 80229c6:	2201      	movs	r2, #1
 80229c8:	701a      	strb	r2, [r3, #0]
                                    Status = STATE_OP;
 80229ca:	2308      	movs	r3, #8
 80229cc:	71fb      	strb	r3, [r7, #7]
 80229ce:	e024      	b.n	8022a1a <AL_ControlRes+0x252>
                                }
                                else
                                {
                                    if(result != NOERROR_INWORK)
 80229d0:	887b      	ldrh	r3, [r7, #2]
 80229d2:	2bff      	cmp	r3, #255	; 0xff
 80229d4:	d021      	beq.n	8022a1a <AL_ControlRes+0x252>
                                    {
                                        APPL_StopOutputHandler();
 80229d6:	f7fd fbc3 	bl	8020160 <APPL_StopOutputHandler>
                                        StopOutputHandler();
 80229da:	f7ff fa9b 	bl	8021f14 <StopOutputHandler>
                                    }
                                }
                            }
                        }       
                    }             
                break;
 80229de:	e01c      	b.n	8022a1a <AL_ControlRes+0x252>
                                }
                            }
                        }
                        else
                        {
                            if(nPdOutputSize == 0 || bEcatFirstOutputsReceived)
 80229e0:	4b22      	ldr	r3, [pc, #136]	; (8022a6c <AL_ControlRes+0x2a4>)
 80229e2:	881b      	ldrh	r3, [r3, #0]
 80229e4:	2b00      	cmp	r3, #0
 80229e6:	d003      	beq.n	80229f0 <AL_ControlRes+0x228>
 80229e8:	4b1f      	ldr	r3, [pc, #124]	; (8022a68 <AL_ControlRes+0x2a0>)
 80229ea:	781b      	ldrb	r3, [r3, #0]
 80229ec:	2b00      	cmp	r3, #0
 80229ee:	d014      	beq.n	8022a1a <AL_ControlRes+0x252>
                            {
                                result = APPL_StartOutputHandler();
 80229f0:	f7fd fbae 	bl	8020150 <APPL_StartOutputHandler>
 80229f4:	4603      	mov	r3, r0
 80229f6:	807b      	strh	r3, [r7, #2]

                                if(result == 0)
 80229f8:	887b      	ldrh	r3, [r7, #2]
 80229fa:	2b00      	cmp	r3, #0
 80229fc:	d105      	bne.n	8022a0a <AL_ControlRes+0x242>
                                {
                                    /* Slave is OPERATIONAL */
                                    bEcatOutputUpdateRunning = TRUE;
 80229fe:	4b1c      	ldr	r3, [pc, #112]	; (8022a70 <AL_ControlRes+0x2a8>)
 8022a00:	2201      	movs	r2, #1
 8022a02:	701a      	strb	r2, [r3, #0]
                                    Status = STATE_OP;
 8022a04:	2308      	movs	r3, #8
 8022a06:	71fb      	strb	r3, [r7, #7]
 8022a08:	e007      	b.n	8022a1a <AL_ControlRes+0x252>
                                }
                                else
                                {
                                    if(result != NOERROR_INWORK)
 8022a0a:	887b      	ldrh	r3, [r7, #2]
 8022a0c:	2bff      	cmp	r3, #255	; 0xff
 8022a0e:	d004      	beq.n	8022a1a <AL_ControlRes+0x252>
                                    {
                                        APPL_StopOutputHandler();
 8022a10:	f7fd fba6 	bl	8020160 <APPL_StopOutputHandler>
                                        StopOutputHandler();
 8022a14:	f7ff fa7e 	bl	8021f14 <StopOutputHandler>
                                    }
                                }
                            }
                        }       
                    }             
                break;
 8022a18:	e7ff      	b.n	8022a1a <AL_ControlRes+0x252>
 8022a1a:	bf00      	nop
            }//Switch - transition
        }

        if(Status != 0)
 8022a1c:	79fb      	ldrb	r3, [r7, #7]
 8022a1e:	2b00      	cmp	r3, #0
 8022a20:	d00f      	beq.n	8022a42 <AL_ControlRes+0x27a>
        {
            /*Pending state transition finished => write AL Status and AL Status Code*/
            bEcatWaitForAlControlRes = FALSE;
 8022a22:	4b09      	ldr	r3, [pc, #36]	; (8022a48 <AL_ControlRes+0x280>)
 8022a24:	2200      	movs	r2, #0
 8022a26:	701a      	strb	r2, [r3, #0]

            if (StatusCode != 0)
 8022a28:	88bb      	ldrh	r3, [r7, #4]
 8022a2a:	2b00      	cmp	r3, #0
 8022a2c:	d003      	beq.n	8022a36 <AL_ControlRes+0x26e>
            {
                Status |= STATE_CHANGE;
 8022a2e:	79fb      	ldrb	r3, [r7, #7]
 8022a30:	f043 0310 	orr.w	r3, r3, #16
 8022a34:	71fb      	strb	r3, [r7, #7]
            }

            SetALStatus(Status,StatusCode);
 8022a36:	79fa      	ldrb	r2, [r7, #7]
 8022a38:	88bb      	ldrh	r3, [r7, #4]
 8022a3a:	4610      	mov	r0, r2
 8022a3c:	4619      	mov	r1, r3
 8022a3e:	f7ff fb09 	bl	8022054 <SetALStatus>
        }
    }// Pending state transition (bEcatWaitForAlControlRes == true)
}
 8022a42:	3708      	adds	r7, #8
 8022a44:	46bd      	mov	sp, r7
 8022a46:	bd80      	pop	{r7, pc}
 8022a48:	1fff256a 	.word	0x1fff256a
 8022a4c:	1fff2574 	.word	0x1fff2574
 8022a50:	1fff253e 	.word	0x1fff253e
 8022a54:	1fff2540 	.word	0x1fff2540
 8022a58:	1fff2548 	.word	0x1fff2548
 8022a5c:	1fff2544 	.word	0x1fff2544
 8022a60:	1fff2576 	.word	0x1fff2576
 8022a64:	1fff255c 	.word	0x1fff255c
 8022a68:	1fff2572 	.word	0x1fff2572
 8022a6c:	1fff2542 	.word	0x1fff2542
 8022a70:	1fff2577 	.word	0x1fff2577
 8022a74:	1fff27f6 	.word	0x1fff27f6
 8022a78:	1fff255a 	.word	0x1fff255a
 8022a7c:	1fff257c 	.word	0x1fff257c
 8022a80:	1fff2554 	.word	0x1fff2554
 8022a84:	1fff254c 	.word	0x1fff254c

08022a88 <DC_CheckWatchdog>:
 \brief    This function checks the current Sync state and set the local flags
 The analyse of the local flags is handled in "CheckIfEcatError"

*////////////////////////////////////////////////////////////////////////////////////////
void DC_CheckWatchdog(void)
{
 8022a88:	b580      	push	{r7, lr}
 8022a8a:	af00      	add	r7, sp, #0
    DISABLE_ESC_INT();
 8022a8c:	f7fe fbc6 	bl	802121c <DISABLE_ESC_INT>
    if(bDcSyncActive)
 8022a90:	4b39      	ldr	r3, [pc, #228]	; (8022b78 <DC_CheckWatchdog+0xf0>)
 8022a92:	781b      	ldrb	r3, [r3, #0]
 8022a94:	2b00      	cmp	r3, #0
 8022a96:	d06b      	beq.n	8022b70 <DC_CheckWatchdog+0xe8>
    {
/*ECATCHANGE_START(V5.11) ESM4*/
        /*If Sync0 watchdog is enabled and expired*/
        if((Sync0WdValue > 0) && (Sync0WdCounter >= Sync0WdValue))
 8022a98:	4b38      	ldr	r3, [pc, #224]	; (8022b7c <DC_CheckWatchdog+0xf4>)
 8022a9a:	881b      	ldrh	r3, [r3, #0]
 8022a9c:	2b00      	cmp	r3, #0
 8022a9e:	d009      	beq.n	8022ab4 <DC_CheckWatchdog+0x2c>
 8022aa0:	4b37      	ldr	r3, [pc, #220]	; (8022b80 <DC_CheckWatchdog+0xf8>)
 8022aa2:	881a      	ldrh	r2, [r3, #0]
 8022aa4:	4b35      	ldr	r3, [pc, #212]	; (8022b7c <DC_CheckWatchdog+0xf4>)
 8022aa6:	881b      	ldrh	r3, [r3, #0]
 8022aa8:	429a      	cmp	r2, r3
 8022aaa:	d303      	bcc.n	8022ab4 <DC_CheckWatchdog+0x2c>
        {
                /*Sync0 watchdog expired*/
                bDcRunning = FALSE;        
 8022aac:	4b35      	ldr	r3, [pc, #212]	; (8022b84 <DC_CheckWatchdog+0xfc>)
 8022aae:	2200      	movs	r2, #0
 8022ab0:	701a      	strb	r2, [r3, #0]
 8022ab2:	e00e      	b.n	8022ad2 <DC_CheckWatchdog+0x4a>
        }
        else
        {
            if(Sync0WdCounter < Sync0WdValue)
 8022ab4:	4b32      	ldr	r3, [pc, #200]	; (8022b80 <DC_CheckWatchdog+0xf8>)
 8022ab6:	881a      	ldrh	r2, [r3, #0]
 8022ab8:	4b30      	ldr	r3, [pc, #192]	; (8022b7c <DC_CheckWatchdog+0xf4>)
 8022aba:	881b      	ldrh	r3, [r3, #0]
 8022abc:	429a      	cmp	r2, r3
 8022abe:	d205      	bcs.n	8022acc <DC_CheckWatchdog+0x44>
            {
                Sync0WdCounter ++;
 8022ac0:	4b2f      	ldr	r3, [pc, #188]	; (8022b80 <DC_CheckWatchdog+0xf8>)
 8022ac2:	881b      	ldrh	r3, [r3, #0]
 8022ac4:	3301      	adds	r3, #1
 8022ac6:	b29a      	uxth	r2, r3
 8022ac8:	4b2d      	ldr	r3, [pc, #180]	; (8022b80 <DC_CheckWatchdog+0xf8>)
 8022aca:	801a      	strh	r2, [r3, #0]
            }

            bDcRunning = TRUE;
 8022acc:	4b2d      	ldr	r3, [pc, #180]	; (8022b84 <DC_CheckWatchdog+0xfc>)
 8022ace:	2201      	movs	r2, #1
 8022ad0:	701a      	strb	r2, [r3, #0]
        }

        if(bDcRunning)
 8022ad2:	4b2c      	ldr	r3, [pc, #176]	; (8022b84 <DC_CheckWatchdog+0xfc>)
 8022ad4:	781b      	ldrb	r3, [r3, #0]
 8022ad6:	2b00      	cmp	r3, #0
 8022ad8:	d013      	beq.n	8022b02 <DC_CheckWatchdog+0x7a>
        {
            /*Check the Sync1 cycle if Sync1 Wd is enabled*/
            if(Sync1WdValue > 0)
 8022ada:	4b2b      	ldr	r3, [pc, #172]	; (8022b88 <DC_CheckWatchdog+0x100>)
 8022adc:	881b      	ldrh	r3, [r3, #0]
 8022ade:	2b00      	cmp	r3, #0
 8022ae0:	d00f      	beq.n	8022b02 <DC_CheckWatchdog+0x7a>
            {
                if(Sync1WdCounter < Sync1WdValue)
 8022ae2:	4b2a      	ldr	r3, [pc, #168]	; (8022b8c <DC_CheckWatchdog+0x104>)
 8022ae4:	881a      	ldrh	r2, [r3, #0]
 8022ae6:	4b28      	ldr	r3, [pc, #160]	; (8022b88 <DC_CheckWatchdog+0x100>)
 8022ae8:	881b      	ldrh	r3, [r3, #0]
 8022aea:	429a      	cmp	r2, r3
 8022aec:	d206      	bcs.n	8022afc <DC_CheckWatchdog+0x74>
                {
                    Sync1WdCounter ++;
 8022aee:	4b27      	ldr	r3, [pc, #156]	; (8022b8c <DC_CheckWatchdog+0x104>)
 8022af0:	881b      	ldrh	r3, [r3, #0]
 8022af2:	3301      	adds	r3, #1
 8022af4:	b29a      	uxth	r2, r3
 8022af6:	4b25      	ldr	r3, [pc, #148]	; (8022b8c <DC_CheckWatchdog+0x104>)
 8022af8:	801a      	strh	r2, [r3, #0]
 8022afa:	e002      	b.n	8022b02 <DC_CheckWatchdog+0x7a>
                }
                else
                {
                    /*Sync1 watchdog expired*/
                    bDcRunning = FALSE;
 8022afc:	4b21      	ldr	r3, [pc, #132]	; (8022b84 <DC_CheckWatchdog+0xfc>)
 8022afe:	2200      	movs	r2, #0
 8022b00:	701a      	strb	r2, [r3, #0]
                }
            }
        }
/*ECATCHANGE_END(V5.11) ESM4*/

        if(bDcRunning)
 8022b02:	4b20      	ldr	r3, [pc, #128]	; (8022b84 <DC_CheckWatchdog+0xfc>)
 8022b04:	781b      	ldrb	r3, [r3, #0]
 8022b06:	2b00      	cmp	r3, #0
 8022b08:	d02b      	beq.n	8022b62 <DC_CheckWatchdog+0xda>
        {
/*ECATCHANGE_START(V5.11) COE3*/
           if(sSyncManOutPar.u16SmEventMissedCounter < sErrorSettings.u16SyncErrorCounterLimit)
 8022b0a:	4b21      	ldr	r3, [pc, #132]	; (8022b90 <DC_CheckWatchdog+0x108>)
 8022b0c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8022b0e:	4b21      	ldr	r3, [pc, #132]	; (8022b94 <DC_CheckWatchdog+0x10c>)
 8022b10:	891b      	ldrh	r3, [r3, #8]
 8022b12:	429a      	cmp	r2, r3
 8022b14:	d211      	bcs.n	8022b3a <DC_CheckWatchdog+0xb2>
/*ECATCHANGE_END(V5.11) COE3*/
            {
                bSmSyncSequenceValid = TRUE;
 8022b16:	4b20      	ldr	r3, [pc, #128]	; (8022b98 <DC_CheckWatchdog+0x110>)
 8022b18:	2201      	movs	r2, #1
 8022b1a:	701a      	strb	r2, [r3, #0]

                /*Wait for PLL is active increment the Pll valid counter*/
                if(i16WaitForPllRunningTimeout > 0)
 8022b1c:	4b1f      	ldr	r3, [pc, #124]	; (8022b9c <DC_CheckWatchdog+0x114>)
 8022b1e:	881b      	ldrh	r3, [r3, #0]
 8022b20:	b21b      	sxth	r3, r3
 8022b22:	2b00      	cmp	r3, #0
 8022b24:	dd24      	ble.n	8022b70 <DC_CheckWatchdog+0xe8>
                {
                    i16WaitForPllRunningCnt++;
 8022b26:	4b1e      	ldr	r3, [pc, #120]	; (8022ba0 <DC_CheckWatchdog+0x118>)
 8022b28:	881b      	ldrh	r3, [r3, #0]
 8022b2a:	b29b      	uxth	r3, r3
 8022b2c:	b29b      	uxth	r3, r3
 8022b2e:	3301      	adds	r3, #1
 8022b30:	b29b      	uxth	r3, r3
 8022b32:	b29a      	uxth	r2, r3
 8022b34:	4b1a      	ldr	r3, [pc, #104]	; (8022ba0 <DC_CheckWatchdog+0x118>)
 8022b36:	801a      	strh	r2, [r3, #0]
 8022b38:	e01a      	b.n	8022b70 <DC_CheckWatchdog+0xe8>
                }
            }
            else if(bSmSyncSequenceValid)
 8022b3a:	4b17      	ldr	r3, [pc, #92]	; (8022b98 <DC_CheckWatchdog+0x110>)
 8022b3c:	781b      	ldrb	r3, [r3, #0]
 8022b3e:	2b00      	cmp	r3, #0
 8022b40:	d016      	beq.n	8022b70 <DC_CheckWatchdog+0xe8>
            {
                bSmSyncSequenceValid = FALSE;
 8022b42:	4b15      	ldr	r3, [pc, #84]	; (8022b98 <DC_CheckWatchdog+0x110>)
 8022b44:	2200      	movs	r2, #0
 8022b46:	701a      	strb	r2, [r3, #0]
                sSyncManOutPar.u8SyncError = 1;
 8022b48:	4b11      	ldr	r3, [pc, #68]	; (8022b90 <DC_CheckWatchdog+0x108>)
 8022b4a:	2201      	movs	r2, #1
 8022b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

                /*Wait for PLL is active reset the Pll valid counter*/
                if(i16WaitForPllRunningTimeout > 0)
 8022b50:	4b12      	ldr	r3, [pc, #72]	; (8022b9c <DC_CheckWatchdog+0x114>)
 8022b52:	881b      	ldrh	r3, [r3, #0]
 8022b54:	b21b      	sxth	r3, r3
 8022b56:	2b00      	cmp	r3, #0
 8022b58:	dd0a      	ble.n	8022b70 <DC_CheckWatchdog+0xe8>
                {
                    i16WaitForPllRunningCnt = 0;
 8022b5a:	4b11      	ldr	r3, [pc, #68]	; (8022ba0 <DC_CheckWatchdog+0x118>)
 8022b5c:	2200      	movs	r2, #0
 8022b5e:	801a      	strh	r2, [r3, #0]
 8022b60:	e006      	b.n	8022b70 <DC_CheckWatchdog+0xe8>
                }
            }
        }
        else if(bSmSyncSequenceValid)
 8022b62:	4b0d      	ldr	r3, [pc, #52]	; (8022b98 <DC_CheckWatchdog+0x110>)
 8022b64:	781b      	ldrb	r3, [r3, #0]
 8022b66:	2b00      	cmp	r3, #0
 8022b68:	d002      	beq.n	8022b70 <DC_CheckWatchdog+0xe8>
        {
            bSmSyncSequenceValid = FALSE;
 8022b6a:	4b0b      	ldr	r3, [pc, #44]	; (8022b98 <DC_CheckWatchdog+0x110>)
 8022b6c:	2200      	movs	r2, #0
 8022b6e:	701a      	strb	r2, [r3, #0]
        }

    }
    ENABLE_ESC_INT();
 8022b70:	f7fe fb4e 	bl	8021210 <ENABLE_ESC_INT>
}
 8022b74:	bd80      	pop	{r7, pc}
 8022b76:	bf00      	nop
 8022b78:	1fff2576 	.word	0x1fff2576
 8022b7c:	1fff2550 	.word	0x1fff2550
 8022b80:	1fff2546 	.word	0x1fff2546
 8022b84:	1fff255c 	.word	0x1fff255c
 8022b88:	1fff2556 	.word	0x1fff2556
 8022b8c:	1fff2578 	.word	0x1fff2578
 8022b90:	1fff2860 	.word	0x1fff2860
 8022b94:	1fff1354 	.word	0x1fff1354
 8022b98:	1fff2573 	.word	0x1fff2573
 8022b9c:	1fff2554 	.word	0x1fff2554
 8022ba0:	1fff254c 	.word	0x1fff254c

08022ba4 <CheckIfEcatError>:

 \brief    Checks communication and synchronisation variables and update AL status / AL status code if an error has occurred

*////////////////////////////////////////////////////////////////////////////////////////
void CheckIfEcatError(void)
{
 8022ba4:	b580      	push	{r7, lr}
 8022ba6:	b082      	sub	sp, #8
 8022ba8:	af00      	add	r7, sp, #0
   /*if the watchdog is enabled check the the process data watchdog in the ESC
   and set the AL status code 0x1B if the watchdog expired*/
   if (EcatWdValue != 0)
 8022baa:	4b20      	ldr	r3, [pc, #128]	; (8022c2c <CheckIfEcatError+0x88>)
 8022bac:	881b      	ldrh	r3, [r3, #0]
 8022bae:	2b00      	cmp	r3, #0
 8022bb0:	d019      	beq.n	8022be6 <CheckIfEcatError+0x42>
   {
      /*watchdog time is set => watchdog is active*/
      UINT16 WdStatusOK = 0;
 8022bb2:	2300      	movs	r3, #0
 8022bb4:	80fb      	strh	r3, [r7, #6]

      HW_EscReadWord(WdStatusOK, ESC_PD_WD_STATE);
 8022bb6:	4b1e      	ldr	r3, [pc, #120]	; (8022c30 <CheckIfEcatError+0x8c>)
 8022bb8:	881b      	ldrh	r3, [r3, #0]
 8022bba:	80fb      	strh	r3, [r7, #6]
      WdStatusOK = SWAPWORD(WdStatusOK);

      /*ECATCHANGE_START(V5.11) ECAT4*/
      if (!(WdStatusOK & ESC_PD_WD_TRIGGER_MASK) && (nPdOutputSize > 0))
 8022bbc:	88fb      	ldrh	r3, [r7, #6]
 8022bbe:	f003 0301 	and.w	r3, r3, #1
 8022bc2:	2b00      	cmp	r3, #0
 8022bc4:	d10f      	bne.n	8022be6 <CheckIfEcatError+0x42>
 8022bc6:	4b1b      	ldr	r3, [pc, #108]	; (8022c34 <CheckIfEcatError+0x90>)
 8022bc8:	881b      	ldrh	r3, [r3, #0]
 8022bca:	2b00      	cmp	r3, #0
 8022bcc:	d00b      	beq.n	8022be6 <CheckIfEcatError+0x42>
      {
         /*The device is in OP state*/

         if (bEcatOutputUpdateRunning
 8022bce:	4b1a      	ldr	r3, [pc, #104]	; (8022c38 <CheckIfEcatError+0x94>)
 8022bd0:	781b      	ldrb	r3, [r3, #0]
 8022bd2:	2b00      	cmp	r3, #0
 8022bd4:	d004      	beq.n	8022be0 <CheckIfEcatError+0x3c>
            )
         {
            AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_SMWATCHDOG);
 8022bd6:	2004      	movs	r0, #4
 8022bd8:	211b      	movs	r1, #27
 8022bda:	f7ff fa99 	bl	8022110 <AL_ControlInd>
            return;
 8022bde:	e022      	b.n	8022c26 <CheckIfEcatError+0x82>
         }

         else
         {
            bEcatFirstOutputsReceived = FALSE;
 8022be0:	4b16      	ldr	r3, [pc, #88]	; (8022c3c <CheckIfEcatError+0x98>)
 8022be2:	2200      	movs	r2, #0
 8022be4:	701a      	strb	r2, [r3, #0]
         }
      }
      /*ECATCHANGE_END(V5.11) ECAT4*/
   }

   if(bDcSyncActive)
 8022be6:	4b16      	ldr	r3, [pc, #88]	; (8022c40 <CheckIfEcatError+0x9c>)
 8022be8:	781b      	ldrb	r3, [r3, #0]
 8022bea:	2b00      	cmp	r3, #0
 8022bec:	d01b      	beq.n	8022c26 <CheckIfEcatError+0x82>
   {
       if(bEcatOutputUpdateRunning)
 8022bee:	4b12      	ldr	r3, [pc, #72]	; (8022c38 <CheckIfEcatError+0x94>)
 8022bf0:	781b      	ldrb	r3, [r3, #0]
 8022bf2:	2b00      	cmp	r3, #0
 8022bf4:	d017      	beq.n	8022c26 <CheckIfEcatError+0x82>
       {
           /*Slave is in OP state*/
           if(!bDcRunning)
 8022bf6:	4b13      	ldr	r3, [pc, #76]	; (8022c44 <CheckIfEcatError+0xa0>)
 8022bf8:	781b      	ldrb	r3, [r3, #0]
 8022bfa:	f083 0301 	eor.w	r3, r3, #1
 8022bfe:	b2db      	uxtb	r3, r3
 8022c00:	2b00      	cmp	r3, #0
 8022c02:	d004      	beq.n	8022c0e <CheckIfEcatError+0x6a>
           {
               AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_FATALSYNCERROR);
 8022c04:	2004      	movs	r0, #4
 8022c06:	212c      	movs	r1, #44	; 0x2c
 8022c08:	f7ff fa82 	bl	8022110 <AL_ControlInd>
               return;
 8022c0c:	e00b      	b.n	8022c26 <CheckIfEcatError+0x82>
           }
           else if(!bSmSyncSequenceValid)
 8022c0e:	4b0e      	ldr	r3, [pc, #56]	; (8022c48 <CheckIfEcatError+0xa4>)
 8022c10:	781b      	ldrb	r3, [r3, #0]
 8022c12:	f083 0301 	eor.w	r3, r3, #1
 8022c16:	b2db      	uxtb	r3, r3
 8022c18:	2b00      	cmp	r3, #0
 8022c1a:	d004      	beq.n	8022c26 <CheckIfEcatError+0x82>
           {
               AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_SYNCERROR);
 8022c1c:	2004      	movs	r0, #4
 8022c1e:	211a      	movs	r1, #26
 8022c20:	f7ff fa76 	bl	8022110 <AL_ControlInd>
               return;
 8022c24:	bf00      	nop
           }
        
       }
   }
}
 8022c26:	3708      	adds	r7, #8
 8022c28:	46bd      	mov	sp, r7
 8022c2a:	bd80      	pop	{r7, pc}
 8022c2c:	1fff257a 	.word	0x1fff257a
 8022c30:	54010440 	.word	0x54010440
 8022c34:	1fff2542 	.word	0x1fff2542
 8022c38:	1fff2577 	.word	0x1fff2577
 8022c3c:	1fff2572 	.word	0x1fff2572
 8022c40:	1fff2576 	.word	0x1fff2576
 8022c44:	1fff255c 	.word	0x1fff255c
 8022c48:	1fff2573 	.word	0x1fff2573

08022c4c <ECAT_Init>:

 \brief    This function initialize the EtherCAT Slave Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void ECAT_Init(void)
{
 8022c4c:	b580      	push	{r7, lr}
 8022c4e:	b082      	sub	sp, #8
 8022c50:	af00      	add	r7, sp, #0
    UINT8 i;

    /*Get Maximum Number of SyncManagers and supported DPRAM size*/
    HW_EscReadByte(nMaxSyncMan, ESC_SM_CHANNELS_OFFSET);
 8022c52:	4b38      	ldr	r3, [pc, #224]	; (8022d34 <ECAT_Init+0xe8>)
 8022c54:	781b      	ldrb	r3, [r3, #0]
 8022c56:	b2da      	uxtb	r2, r3
 8022c58:	4b37      	ldr	r3, [pc, #220]	; (8022d38 <ECAT_Init+0xec>)
 8022c5a:	701a      	strb	r2, [r3, #0]

    HW_EscReadWord(nMaxEscAddress, ESC_DPRAM_SIZE_OFFSET);
 8022c5c:	4b37      	ldr	r3, [pc, #220]	; (8022d3c <ECAT_Init+0xf0>)
 8022c5e:	881b      	ldrh	r3, [r3, #0]
 8022c60:	b29a      	uxth	r2, r3
 8022c62:	4b37      	ldr	r3, [pc, #220]	; (8022d40 <ECAT_Init+0xf4>)
 8022c64:	801a      	strh	r2, [r3, #0]
    //get max address (register + DPRAM size in Byte (in the register it is stored in KB))
    /* ECATCHANGE_START(V5.11) ESC1*/
    nMaxEscAddress = (nMaxEscAddress << 10) + 0xFFF;
 8022c66:	4b36      	ldr	r3, [pc, #216]	; (8022d40 <ECAT_Init+0xf4>)
 8022c68:	881b      	ldrh	r3, [r3, #0]
 8022c6a:	029b      	lsls	r3, r3, #10
 8022c6c:	b29b      	uxth	r3, r3
 8022c6e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8022c72:	b29a      	uxth	r2, r3
 8022c74:	4b32      	ldr	r3, [pc, #200]	; (8022d40 <ECAT_Init+0xf4>)
 8022c76:	801a      	strh	r2, [r3, #0]
    /* ECATCHANGE_END(V5.11) ESC1*/

    /* Get EEPROM loaded information */
    UpdateEEPROMLoadedState();
 8022c78:	f7fe fb06 	bl	8021288 <UpdateEEPROMLoadedState>

    /* disable all Sync Manager channels */
    for (i = 0; i < nMaxSyncMan; i++)
 8022c7c:	2300      	movs	r3, #0
 8022c7e:	71fb      	strb	r3, [r7, #7]
 8022c80:	e006      	b.n	8022c90 <ECAT_Init+0x44>
    {
/*ECATCHANGE_START(V5.11) HW1*/
        DisableSyncManChannel(i);
 8022c82:	79fb      	ldrb	r3, [r7, #7]
 8022c84:	4618      	mov	r0, r3
 8022c86:	f7fe fb39 	bl	80212fc <DisableSyncManChannel>

    /* Get EEPROM loaded information */
    UpdateEEPROMLoadedState();

    /* disable all Sync Manager channels */
    for (i = 0; i < nMaxSyncMan; i++)
 8022c8a:	79fb      	ldrb	r3, [r7, #7]
 8022c8c:	3301      	adds	r3, #1
 8022c8e:	71fb      	strb	r3, [r7, #7]
 8022c90:	4b29      	ldr	r3, [pc, #164]	; (8022d38 <ECAT_Init+0xec>)
 8022c92:	781b      	ldrb	r3, [r3, #0]
 8022c94:	79fa      	ldrb	r2, [r7, #7]
 8022c96:	429a      	cmp	r2, r3
 8022c98:	d3f3      	bcc.n	8022c82 <ECAT_Init+0x36>
        DisableSyncManChannel(i);
/*ECATCHANGE_END(V5.11) HW1*/
    }

    /* initialize the mailbox handler */
    MBX_Init();
 8022c9a:	f000 f9f1 	bl	8023080 <MBX_Init>

    /* initialize variables */
    bApplEsmPending = FALSE;
 8022c9e:	4b29      	ldr	r3, [pc, #164]	; (8022d44 <ECAT_Init+0xf8>)
 8022ca0:	2200      	movs	r2, #0
 8022ca2:	701a      	strb	r2, [r3, #0]
    bEcatWaitForAlControlRes = FALSE;
 8022ca4:	4b28      	ldr	r3, [pc, #160]	; (8022d48 <ECAT_Init+0xfc>)
 8022ca6:	2200      	movs	r2, #0
 8022ca8:	701a      	strb	r2, [r3, #0]
    bEcatFirstOutputsReceived = FALSE;
 8022caa:	4b28      	ldr	r3, [pc, #160]	; (8022d4c <ECAT_Init+0x100>)
 8022cac:	2200      	movs	r2, #0
 8022cae:	701a      	strb	r2, [r3, #0]
     bEcatOutputUpdateRunning = FALSE;
 8022cb0:	4b27      	ldr	r3, [pc, #156]	; (8022d50 <ECAT_Init+0x104>)
 8022cb2:	2200      	movs	r2, #0
 8022cb4:	701a      	strb	r2, [r3, #0]
     bEcatInputUpdateRunning = FALSE;
 8022cb6:	4b27      	ldr	r3, [pc, #156]	; (8022d54 <ECAT_Init+0x108>)
 8022cb8:	2200      	movs	r2, #0
 8022cba:	701a      	strb	r2, [r3, #0]
    bWdTrigger = FALSE;
 8022cbc:	4b26      	ldr	r3, [pc, #152]	; (8022d58 <ECAT_Init+0x10c>)
 8022cbe:	2200      	movs	r2, #0
 8022cc0:	701a      	strb	r2, [r3, #0]
    EcatWdValue = 0;
 8022cc2:	4b26      	ldr	r3, [pc, #152]	; (8022d5c <ECAT_Init+0x110>)
 8022cc4:	2200      	movs	r2, #0
 8022cc6:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8022cc8:	4b25      	ldr	r3, [pc, #148]	; (8022d60 <ECAT_Init+0x114>)
 8022cca:	2200      	movs	r2, #0
 8022ccc:	801a      	strh	r2, [r3, #0]
    Sync0WdValue = 0;
 8022cce:	4b25      	ldr	r3, [pc, #148]	; (8022d64 <ECAT_Init+0x118>)
 8022cd0:	2200      	movs	r2, #0
 8022cd2:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 8022cd4:	4b24      	ldr	r3, [pc, #144]	; (8022d68 <ECAT_Init+0x11c>)
 8022cd6:	2200      	movs	r2, #0
 8022cd8:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 8022cda:	4b24      	ldr	r3, [pc, #144]	; (8022d6c <ECAT_Init+0x120>)
 8022cdc:	2200      	movs	r2, #0
 8022cde:	801a      	strh	r2, [r3, #0]
    bDcSyncActive = FALSE;
 8022ce0:	4b23      	ldr	r3, [pc, #140]	; (8022d70 <ECAT_Init+0x124>)
 8022ce2:	2200      	movs	r2, #0
 8022ce4:	701a      	strb	r2, [r3, #0]
    bLocalErrorFlag = FALSE;
 8022ce6:	4b23      	ldr	r3, [pc, #140]	; (8022d74 <ECAT_Init+0x128>)
 8022ce8:	2200      	movs	r2, #0
 8022cea:	701a      	strb	r2, [r3, #0]
    u16LocalErrorCode = 0x00;
 8022cec:	4b22      	ldr	r3, [pc, #136]	; (8022d78 <ECAT_Init+0x12c>)
 8022cee:	2200      	movs	r2, #0
 8022cf0:	801a      	strh	r2, [r3, #0]

    u16ALEventMask = 0;
 8022cf2:	4b22      	ldr	r3, [pc, #136]	; (8022d7c <ECAT_Init+0x130>)
 8022cf4:	2200      	movs	r2, #0
 8022cf6:	801a      	strh	r2, [r3, #0]
    nPdOutputSize = 0;
 8022cf8:	4b21      	ldr	r3, [pc, #132]	; (8022d80 <ECAT_Init+0x134>)
 8022cfa:	2200      	movs	r2, #0
 8022cfc:	801a      	strh	r2, [r3, #0]
    nPdInputSize = 0;
 8022cfe:	4b21      	ldr	r3, [pc, #132]	; (8022d84 <ECAT_Init+0x138>)
 8022d00:	2200      	movs	r2, #0
 8022d02:	801a      	strh	r2, [r3, #0]

    /* initialize the AL Status register */
    nAlStatus    = STATE_INIT;
 8022d04:	4b20      	ldr	r3, [pc, #128]	; (8022d88 <ECAT_Init+0x13c>)
 8022d06:	2201      	movs	r2, #1
 8022d08:	701a      	strb	r2, [r3, #0]
    SetALStatus(nAlStatus, 0);
 8022d0a:	4b1f      	ldr	r3, [pc, #124]	; (8022d88 <ECAT_Init+0x13c>)
 8022d0c:	781b      	ldrb	r3, [r3, #0]
 8022d0e:	4618      	mov	r0, r3
 8022d10:	2100      	movs	r1, #0
 8022d12:	f7ff f99f 	bl	8022054 <SetALStatus>
    nEcatStateTrans = 0;
 8022d16:	4b1d      	ldr	r3, [pc, #116]	; (8022d8c <ECAT_Init+0x140>)
 8022d18:	2200      	movs	r2, #0
 8022d1a:	801a      	strh	r2, [r3, #0]
    u8EcatErrorLed = LED_OFF;
 8022d1c:	4b1c      	ldr	r3, [pc, #112]	; (8022d90 <ECAT_Init+0x144>)
 8022d1e:	2200      	movs	r2, #0
 8022d20:	701a      	strb	r2, [r3, #0]

/* ECATCHANGE_START(V5.11) ECAT5*/
    bEscIntEnabled = FALSE;
 8022d22:	4b1c      	ldr	r3, [pc, #112]	; (8022d94 <ECAT_Init+0x148>)
 8022d24:	2200      	movs	r2, #0
 8022d26:	701a      	strb	r2, [r3, #0]
/* ECATCHANGE_END(V5.11) ECAT5*/

    /* initialize the COE part */
    COE_Init();
 8022d28:	f7fe f99e 	bl	8021068 <COE_Init>
}
 8022d2c:	3708      	adds	r7, #8
 8022d2e:	46bd      	mov	sp, r7
 8022d30:	bd80      	pop	{r7, pc}
 8022d32:	bf00      	nop
 8022d34:	54010005 	.word	0x54010005
 8022d38:	1fff2582 	.word	0x1fff2582
 8022d3c:	54010006 	.word	0x54010006
 8022d40:	1fff2570 	.word	0x1fff2570
 8022d44:	1fff2540 	.word	0x1fff2540
 8022d48:	1fff256a 	.word	0x1fff256a
 8022d4c:	1fff2572 	.word	0x1fff2572
 8022d50:	1fff2577 	.word	0x1fff2577
 8022d54:	1fff257c 	.word	0x1fff257c
 8022d58:	1fff257e 	.word	0x1fff257e
 8022d5c:	1fff257a 	.word	0x1fff257a
 8022d60:	1fff2546 	.word	0x1fff2546
 8022d64:	1fff2550 	.word	0x1fff2550
 8022d68:	1fff2578 	.word	0x1fff2578
 8022d6c:	1fff2556 	.word	0x1fff2556
 8022d70:	1fff2576 	.word	0x1fff2576
 8022d74:	1fff2548 	.word	0x1fff2548
 8022d78:	1fff2544 	.word	0x1fff2544
 8022d7c:	1fff255a 	.word	0x1fff255a
 8022d80:	1fff2542 	.word	0x1fff2542
 8022d84:	1fff256c 	.word	0x1fff256c
 8022d88:	1fff2541 	.word	0x1fff2541
 8022d8c:	1fff253e 	.word	0x1fff253e
 8022d90:	1fff2583 	.word	0x1fff2583
 8022d94:	1fff257d 	.word	0x1fff257d

08022d98 <ECAT_Main>:
/**
 \brief        This function has to be called cyclically.
*////////////////////////////////////////////////////////////////////////////////////////

void ECAT_Main(void)
{
 8022d98:	b580      	push	{r7, lr}
 8022d9a:	b082      	sub	sp, #8
 8022d9c:	af00      	add	r7, sp, #0
    UINT16 ALEventReg;
    UINT16 EscAlControl = 0x0000;
 8022d9e:	2300      	movs	r3, #0
 8022da0:	807b      	strh	r3, [r7, #2]
    UINT8 sm1Activate = SM_SETTING_ENABLE_VALUE;
 8022da2:	2301      	movs	r3, #1
 8022da4:	717b      	strb	r3, [r7, #5]

    /* check if services are stored in the mailbox */
    MBX_Main();
 8022da6:	f000 fd99 	bl	80238dc <MBX_Main>


    if ( bMbxRunning )
 8022daa:	4b58      	ldr	r3, [pc, #352]	; (8022f0c <ECAT_Main+0x174>)
 8022dac:	781b      	ldrb	r3, [r3, #0]
 8022dae:	2b00      	cmp	r3, #0
 8022db0:	d002      	beq.n	8022db8 <ECAT_Main+0x20>
    {
        /* Slave is at least in PREOP, Mailbox is running */
        /* get the Activate-Byte of SM 1 (Register 0x80E) to check if a mailbox repeat request was received */
        HW_EscReadByte(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 8022db2:	4b57      	ldr	r3, [pc, #348]	; (8022f10 <ECAT_Main+0x178>)
 8022db4:	781b      	ldrb	r3, [r3, #0]
 8022db6:	717b      	strb	r3, [r7, #5]
    }

    /* Read AL Event-Register from ESC */
    ALEventReg = HW_GetALEventRegister();
 8022db8:	f7fe fa22 	bl	8021200 <HW_GetALEventRegister>
 8022dbc:	4603      	mov	r3, r0
 8022dbe:	80fb      	strh	r3, [r7, #6]
    ALEventReg = SWAPWORD(ALEventReg);

    if ((ALEventReg & EEPROM_CMD_PENDING)) 
 8022dc0:	88fb      	ldrh	r3, [r7, #6]
 8022dc2:	f003 0320 	and.w	r3, r3, #32
 8022dc6:	2b00      	cmp	r3, #0
 8022dc8:	d001      	beq.n	8022dce <ECAT_Main+0x36>
    {
        EEPROM_CommandHandler();
 8022dca:	f7fe f885 	bl	8020ed8 <EEPROM_CommandHandler>
    }

    if ((ALEventReg & AL_CONTROL_EVENT) && !bEcatWaitForAlControlRes)
 8022dce:	88fb      	ldrh	r3, [r7, #6]
 8022dd0:	f003 0301 	and.w	r3, r3, #1
 8022dd4:	2b00      	cmp	r3, #0
 8022dd6:	d014      	beq.n	8022e02 <ECAT_Main+0x6a>
 8022dd8:	4b4e      	ldr	r3, [pc, #312]	; (8022f14 <ECAT_Main+0x17c>)
 8022dda:	781b      	ldrb	r3, [r3, #0]
 8022ddc:	f083 0301 	eor.w	r3, r3, #1
 8022de0:	b2db      	uxtb	r3, r3
 8022de2:	2b00      	cmp	r3, #0
 8022de4:	d00d      	beq.n	8022e02 <ECAT_Main+0x6a>
    {
        /* AL Control event is set, get the AL Control register sent by the Master to acknowledge the event
          (that the corresponding bit in the AL Event register will be reset) */
        HW_EscReadByte( EscAlControl, ESC_AL_CONTROL_OFFSET);
 8022de6:	4b4c      	ldr	r3, [pc, #304]	; (8022f18 <ECAT_Main+0x180>)
 8022de8:	781b      	ldrb	r3, [r3, #0]
 8022dea:	b2db      	uxtb	r3, r3
 8022dec:	807b      	strh	r3, [r7, #2]
        EscAlControl = SWAPWORD(EscAlControl);


        /* reset AL Control event and the SM Change event (because the Sync Manager settings will be checked
           in AL_ControlInd, too)*/
        ALEventReg &= ~((AL_CONTROL_EVENT) | (SM_CHANGE_EVENT));
 8022dee:	88fb      	ldrh	r3, [r7, #6]
 8022df0:	f023 0311 	bic.w	r3, r3, #17
 8022df4:	80fb      	strh	r3, [r7, #6]

        AL_ControlInd((UINT8)EscAlControl, 0); /* in AL_ControlInd the state transition will be checked and done */
 8022df6:	887b      	ldrh	r3, [r7, #2]
 8022df8:	b2db      	uxtb	r3, r3
 8022dfa:	4618      	mov	r0, r3
 8022dfc:	2100      	movs	r1, #0
 8022dfe:	f7ff f987 	bl	8022110 <AL_ControlInd>
        
        /* SM-Change-Event was handled too */
    }

    if ( (ALEventReg & SM_CHANGE_EVENT) && !bEcatWaitForAlControlRes && (nAlStatus & STATE_CHANGE) == 0 && (nAlStatus & ~STATE_CHANGE) != STATE_INIT )
 8022e02:	88fb      	ldrh	r3, [r7, #6]
 8022e04:	f003 0310 	and.w	r3, r3, #16
 8022e08:	2b00      	cmp	r3, #0
 8022e0a:	d01f      	beq.n	8022e4c <ECAT_Main+0xb4>
 8022e0c:	4b41      	ldr	r3, [pc, #260]	; (8022f14 <ECAT_Main+0x17c>)
 8022e0e:	781b      	ldrb	r3, [r3, #0]
 8022e10:	f083 0301 	eor.w	r3, r3, #1
 8022e14:	b2db      	uxtb	r3, r3
 8022e16:	2b00      	cmp	r3, #0
 8022e18:	d018      	beq.n	8022e4c <ECAT_Main+0xb4>
 8022e1a:	4b40      	ldr	r3, [pc, #256]	; (8022f1c <ECAT_Main+0x184>)
 8022e1c:	781b      	ldrb	r3, [r3, #0]
 8022e1e:	f003 0310 	and.w	r3, r3, #16
 8022e22:	2b00      	cmp	r3, #0
 8022e24:	d112      	bne.n	8022e4c <ECAT_Main+0xb4>
 8022e26:	4b3d      	ldr	r3, [pc, #244]	; (8022f1c <ECAT_Main+0x184>)
 8022e28:	781b      	ldrb	r3, [r3, #0]
 8022e2a:	f023 0310 	bic.w	r3, r3, #16
 8022e2e:	2b01      	cmp	r3, #1
 8022e30:	d00c      	beq.n	8022e4c <ECAT_Main+0xb4>
    {
        /* the SM Change event is set (Bit 4 of Register 0x220), when the Byte 6 (Enable, Lo-Byte of Register 0x806, 0x80E, 0x816,...)
           of a Sync Manager channel was written */
        ALEventReg &= ~(SM_CHANGE_EVENT);
 8022e32:	88fb      	ldrh	r3, [r7, #6]
 8022e34:	f023 0310 	bic.w	r3, r3, #16
 8022e38:	80fb      	strh	r3, [r7, #6]

        /* AL_ControlInd is called with the actual state, so that the correct SM settings will be checked */
        AL_ControlInd(nAlStatus & STATE_MASK, 0);
 8022e3a:	4b38      	ldr	r3, [pc, #224]	; (8022f1c <ECAT_Main+0x184>)
 8022e3c:	781b      	ldrb	r3, [r3, #0]
 8022e3e:	f003 030f 	and.w	r3, r3, #15
 8022e42:	b2db      	uxtb	r3, r3
 8022e44:	4618      	mov	r0, r3
 8022e46:	2100      	movs	r1, #0
 8022e48:	f7ff f962 	bl	8022110 <AL_ControlInd>
    }

    if(bEcatWaitForAlControlRes)
 8022e4c:	4b31      	ldr	r3, [pc, #196]	; (8022f14 <ECAT_Main+0x17c>)
 8022e4e:	781b      	ldrb	r3, [r3, #0]
 8022e50:	2b00      	cmp	r3, #0
 8022e52:	d001      	beq.n	8022e58 <ECAT_Main+0xc0>
    {
        AL_ControlRes();
 8022e54:	f7ff fcb8 	bl	80227c8 <AL_ControlRes>
        The SM1 activate Byte (Register 0x80E) was read before reading AL Event register.
        1. Handle Mailbox Read event
        2. Handle repeat toggle request
        3. Handle Mailbox write event
    */
    if ( bMbxRunning )
 8022e58:	4b2c      	ldr	r3, [pc, #176]	; (8022f0c <ECAT_Main+0x174>)
 8022e5a:	781b      	ldrb	r3, [r3, #0]
 8022e5c:	2b00      	cmp	r3, #0
 8022e5e:	d052      	beq.n	8022f06 <ECAT_Main+0x16e>
    {
        /*SnycManger change event (0x220:4) could be acknowledged by reading the SM1 control register without notification to the local application
        => check if the SyncManger 1 is still enabled*/
        if(!(sm1Activate & SM_SETTING_ENABLE_VALUE))
 8022e60:	797b      	ldrb	r3, [r7, #5]
 8022e62:	f003 0301 	and.w	r3, r3, #1
 8022e66:	2b00      	cmp	r3, #0
 8022e68:	d108      	bne.n	8022e7c <ECAT_Main+0xe4>
            AL_ControlInd(nAlStatus & STATE_MASK, 0);
 8022e6a:	4b2c      	ldr	r3, [pc, #176]	; (8022f1c <ECAT_Main+0x184>)
 8022e6c:	781b      	ldrb	r3, [r3, #0]
 8022e6e:	f003 030f 	and.w	r3, r3, #15
 8022e72:	b2db      	uxtb	r3, r3
 8022e74:	4618      	mov	r0, r3
 8022e76:	2100      	movs	r1, #0
 8022e78:	f7ff f94a 	bl	8022110 <AL_ControlInd>

        if ( ALEventReg & (MAILBOX_READ_EVENT) )
 8022e7c:	88fb      	ldrh	r3, [r7, #6]
 8022e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8022e82:	2b00      	cmp	r3, #0
 8022e84:	d012      	beq.n	8022eac <ECAT_Main+0x114>
        {
            /* SM 1 (Mailbox Read) event is set, when the mailbox was read from the master,
               to acknowledge the event the first byte of the mailbox has to be written,
               by writing the first byte the mailbox is locked, too */
            u8dummy = 0;
 8022e86:	4b26      	ldr	r3, [pc, #152]	; (8022f20 <ECAT_Main+0x188>)
 8022e88:	2200      	movs	r2, #0
 8022e8a:	701a      	strb	r2, [r3, #0]
            HW_EscWriteByte(u8dummy,u16EscAddrSendMbx);
 8022e8c:	4b25      	ldr	r3, [pc, #148]	; (8022f24 <ECAT_Main+0x18c>)
 8022e8e:	881b      	ldrh	r3, [r3, #0]
 8022e90:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8022e94:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8022e98:	4a21      	ldr	r2, [pc, #132]	; (8022f20 <ECAT_Main+0x188>)
 8022e9a:	7812      	ldrb	r2, [r2, #0]
 8022e9c:	b2d2      	uxtb	r2, r2
 8022e9e:	701a      	strb	r2, [r3, #0]

            /* the Mailbox Read event in the variable ALEventReg shall be reset before calling
               MBX_MailboxReadInd, where a new mailbox datagram (if available) could be stored in the send mailbox */
            ALEventReg &= ~(MAILBOX_READ_EVENT);
 8022ea0:	88fb      	ldrh	r3, [r7, #6]
 8022ea2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8022ea6:	80fb      	strh	r3, [r7, #6]
            MBX_MailboxReadInd();
 8022ea8:	f000 faf0 	bl	802348c <MBX_MailboxReadInd>
        }

        DISABLE_MBX_INT;
        /* bMbxRepeatToggle holds the last state of the Repeat Bit (Bit 1) */

        if ( ( (sm1Activate & SM_SETTING_REPAET_REQ_MASK) && !bMbxRepeatToggle )
 8022eac:	797b      	ldrb	r3, [r7, #5]
 8022eae:	f003 0302 	and.w	r3, r3, #2
 8022eb2:	2b00      	cmp	r3, #0
 8022eb4:	d006      	beq.n	8022ec4 <ECAT_Main+0x12c>
 8022eb6:	4b1c      	ldr	r3, [pc, #112]	; (8022f28 <ECAT_Main+0x190>)
 8022eb8:	781b      	ldrb	r3, [r3, #0]
 8022eba:	f083 0301 	eor.w	r3, r3, #1
 8022ebe:	b2db      	uxtb	r3, r3
 8022ec0:	2b00      	cmp	r3, #0
 8022ec2:	d108      	bne.n	8022ed6 <ECAT_Main+0x13e>
            ||( !(sm1Activate & SM_SETTING_REPAET_REQ_MASK) && bMbxRepeatToggle ))
 8022ec4:	797b      	ldrb	r3, [r7, #5]
 8022ec6:	f003 0302 	and.w	r3, r3, #2
 8022eca:	2b00      	cmp	r3, #0
 8022ecc:	d10c      	bne.n	8022ee8 <ECAT_Main+0x150>
 8022ece:	4b16      	ldr	r3, [pc, #88]	; (8022f28 <ECAT_Main+0x190>)
 8022ed0:	781b      	ldrb	r3, [r3, #0]
 8022ed2:	2b00      	cmp	r3, #0
 8022ed4:	d008      	beq.n	8022ee8 <ECAT_Main+0x150>
        {
            /* Repeat Bit (Bit 1) has toggled, there is a repeat request, in MBX_MailboxRepeatReq the correct
               response will put in the send mailbox again */
            MBX_MailboxRepeatReq();
 8022ed6:	f000 fb41 	bl	802355c <MBX_MailboxRepeatReq>
            /* acknowledge the repeat request after the send mailbox was updated by writing the Repeat Bit
               in the Repeat Ack Bit (Bit 1) of the PDI Ctrl-Byte of SM 1 (Register 0x80F) */
            sm1Activate &= SM_SETTING_REPEAT_ACK;
 8022eda:	797b      	ldrb	r3, [r7, #5]
 8022edc:	f003 0302 	and.w	r3, r3, #2
 8022ee0:	717b      	strb	r3, [r7, #5]
            HW_EscWriteByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 8022ee2:	4a12      	ldr	r2, [pc, #72]	; (8022f2c <ECAT_Main+0x194>)
 8022ee4:	797b      	ldrb	r3, [r7, #5]
 8022ee6:	7013      	strb	r3, [r2, #0]
        }
        ENABLE_MBX_INT;

        /* Reload the AlEvent because it may be changed due to a SM disable, enable in case of an repeat request */
        ALEventReg = HW_GetALEventRegister();
 8022ee8:	f7fe f98a 	bl	8021200 <HW_GetALEventRegister>
 8022eec:	4603      	mov	r3, r0
 8022eee:	80fb      	strh	r3, [r7, #6]
        ALEventReg = SWAPWORD(ALEventReg);

        if ( ALEventReg & (MAILBOX_WRITE_EVENT) )
 8022ef0:	88fb      	ldrh	r3, [r7, #6]
 8022ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022ef6:	2b00      	cmp	r3, #0
 8022ef8:	d005      	beq.n	8022f06 <ECAT_Main+0x16e>
            /* SM 0 (Mailbox Write) event is set, when the mailbox was written from the master,
               to acknowledge the event the first byte of the mailbox has to be read,
               which will be done in MBX_CheckAndCopyMailbox */
            /* the Mailbox Write event in the variable ALEventReg shall be reset before calling
               MBX_CheckAndCopyMailbox, where the received mailbox datagram will be processed */
            ALEventReg &= ~(MAILBOX_WRITE_EVENT);
 8022efa:	88fb      	ldrh	r3, [r7, #6]
 8022efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8022f00:	80fb      	strh	r3, [r7, #6]
            MBX_CheckAndCopyMailbox();
 8022f02:	f000 fbd7 	bl	80236b4 <MBX_CheckAndCopyMailbox>

        }
    }
}
 8022f06:	3708      	adds	r7, #8
 8022f08:	46bd      	mov	sp, r7
 8022f0a:	bd80      	pop	{r7, pc}
 8022f0c:	1fff27f6 	.word	0x1fff27f6
 8022f10:	5401080e 	.word	0x5401080e
 8022f14:	1fff256a 	.word	0x1fff256a
 8022f18:	54010120 	.word	0x54010120
 8022f1c:	1fff2541 	.word	0x1fff2541
 8022f20:	1fff2558 	.word	0x1fff2558
 8022f24:	1fff280a 	.word	0x1fff280a
 8022f28:	1fff2814 	.word	0x1fff2814
 8022f2c:	5401080f 	.word	0x5401080f

08022f30 <HW_EscRead>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscRead(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8022f30:	b580      	push	{r7, lr}
 8022f32:	b082      	sub	sp, #8
 8022f34:	af00      	add	r7, sp, #0
 8022f36:	6078      	str	r0, [r7, #4]
 8022f38:	460b      	mov	r3, r1
 8022f3a:	807b      	strh	r3, [r7, #2]
 8022f3c:	4613      	mov	r3, r2
 8022f3e:	803b      	strh	r3, [r7, #0]
  memcpy(pData, &pEsc[Address], Len);
 8022f40:	887b      	ldrh	r3, [r7, #2]
 8022f42:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8022f46:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8022f4a:	883a      	ldrh	r2, [r7, #0]
 8022f4c:	6878      	ldr	r0, [r7, #4]
 8022f4e:	4619      	mov	r1, r3
 8022f50:	f005 f988 	bl	8028264 <memcpy>
}
 8022f54:	3708      	adds	r7, #8
 8022f56:	46bd      	mov	sp, r7
 8022f58:	bd80      	pop	{r7, pc}
 8022f5a:	bf00      	nop

08022f5c <HW_EscReadMbxMem>:
 * Reads data from the ESC and copies to slave mailbox memory. If the local mailbox memory is also located in the
 * application memory this function is equal to HW_EscRead.
 *
 */
__STATIC_INLINE void HW_EscReadMbxMem(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8022f5c:	b580      	push	{r7, lr}
 8022f5e:	b082      	sub	sp, #8
 8022f60:	af00      	add	r7, sp, #0
 8022f62:	6078      	str	r0, [r7, #4]
 8022f64:	460b      	mov	r3, r1
 8022f66:	807b      	strh	r3, [r7, #2]
 8022f68:	4613      	mov	r3, r2
 8022f6a:	803b      	strh	r3, [r7, #0]
  HW_EscRead(pData, Address, Len);
 8022f6c:	887a      	ldrh	r2, [r7, #2]
 8022f6e:	883b      	ldrh	r3, [r7, #0]
 8022f70:	6878      	ldr	r0, [r7, #4]
 8022f72:	4611      	mov	r1, r2
 8022f74:	461a      	mov	r2, r3
 8022f76:	f7ff ffdb 	bl	8022f30 <HW_EscRead>
}
 8022f7a:	3708      	adds	r7, #8
 8022f7c:	46bd      	mov	sp, r7
 8022f7e:	bd80      	pop	{r7, pc}

08022f80 <HW_EscWrite>:
 * \par<b>Description:</b><br>
 * Writes from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscWrite(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8022f80:	b580      	push	{r7, lr}
 8022f82:	b082      	sub	sp, #8
 8022f84:	af00      	add	r7, sp, #0
 8022f86:	6078      	str	r0, [r7, #4]
 8022f88:	460b      	mov	r3, r1
 8022f8a:	807b      	strh	r3, [r7, #2]
 8022f8c:	4613      	mov	r3, r2
 8022f8e:	803b      	strh	r3, [r7, #0]
  memcpy(&pEsc[Address], pData, Len);
 8022f90:	887b      	ldrh	r3, [r7, #2]
 8022f92:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8022f96:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8022f9a:	883a      	ldrh	r2, [r7, #0]
 8022f9c:	4618      	mov	r0, r3
 8022f9e:	6879      	ldr	r1, [r7, #4]
 8022fa0:	f005 f960 	bl	8028264 <memcpy>
}
 8022fa4:	3708      	adds	r7, #8
 8022fa6:	46bd      	mov	sp, r7
 8022fa8:	bd80      	pop	{r7, pc}
 8022faa:	bf00      	nop

08022fac <HW_EscWriteMbxMem>:
 * Writes data from the slave mailbox memory to ESC memory. If the local mailbox memory is also located in the
 * application memory this function is equal to HW_EscWrite.
 *
 */
__STATIC_INLINE void HW_EscWriteMbxMem(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8022fac:	b580      	push	{r7, lr}
 8022fae:	b082      	sub	sp, #8
 8022fb0:	af00      	add	r7, sp, #0
 8022fb2:	6078      	str	r0, [r7, #4]
 8022fb4:	460b      	mov	r3, r1
 8022fb6:	807b      	strh	r3, [r7, #2]
 8022fb8:	4613      	mov	r3, r2
 8022fba:	803b      	strh	r3, [r7, #0]
  HW_EscWrite(pData, Address, Len);
 8022fbc:	887a      	ldrh	r2, [r7, #2]
 8022fbe:	883b      	ldrh	r3, [r7, #0]
 8022fc0:	6878      	ldr	r0, [r7, #4]
 8022fc2:	4611      	mov	r1, r2
 8022fc4:	461a      	mov	r2, r3
 8022fc6:	f7ff ffdb 	bl	8022f80 <HW_EscWrite>
}
 8022fca:	3708      	adds	r7, #8
 8022fcc:	46bd      	mov	sp, r7
 8022fce:	bd80      	pop	{r7, pc}

08022fd0 <PutInMbxQueue>:
//
//    PutInMbxQueue
//

UINT8 PutInMbxQueue(TMBX MBXMEM * pMbx, TMBXQUEUE MBXMEM * pQueue)
{
 8022fd0:	b480      	push	{r7}
 8022fd2:	b085      	sub	sp, #20
 8022fd4:	af00      	add	r7, sp, #0
 8022fd6:	6078      	str	r0, [r7, #4]
 8022fd8:	6039      	str	r1, [r7, #0]
    UINT16 lastInQueue;
    ENTER_MBX_CRITICAL;


    lastInQueue = pQueue->lastInQueue+1;
 8022fda:	683b      	ldr	r3, [r7, #0]
 8022fdc:	885b      	ldrh	r3, [r3, #2]
 8022fde:	3301      	adds	r3, #1
 8022fe0:	81fb      	strh	r3, [r7, #14]
    if (lastInQueue == pQueue->maxQueueSize)
 8022fe2:	683b      	ldr	r3, [r7, #0]
 8022fe4:	889b      	ldrh	r3, [r3, #4]
 8022fe6:	89fa      	ldrh	r2, [r7, #14]
 8022fe8:	429a      	cmp	r2, r3
 8022fea:	d101      	bne.n	8022ff0 <PutInMbxQueue+0x20>
    {
        // Umbruch der Queue
        lastInQueue = 0;
 8022fec:	2300      	movs	r3, #0
 8022fee:	81fb      	strh	r3, [r7, #14]
    }

    if (pQueue->firstInQueue == lastInQueue)
 8022ff0:	683b      	ldr	r3, [r7, #0]
 8022ff2:	881b      	ldrh	r3, [r3, #0]
 8022ff4:	89fa      	ldrh	r2, [r7, #14]
 8022ff6:	429a      	cmp	r2, r3
 8022ff8:	d101      	bne.n	8022ffe <PutInMbxQueue+0x2e>
    {
        // Ueberlauf der Queue -> letztes Element wieder herausnehmen
        LEAVE_MBX_CRITICAL;
        return MBXERR_NOMOREMEMORY;
 8022ffa:	2307      	movs	r3, #7
 8022ffc:	e00b      	b.n	8023016 <PutInMbxQueue+0x46>
    }

    pQueue->queue[pQueue->lastInQueue] = pMbx;
 8022ffe:	683b      	ldr	r3, [r7, #0]
 8023000:	885b      	ldrh	r3, [r3, #2]
 8023002:	461a      	mov	r2, r3
 8023004:	683b      	ldr	r3, [r7, #0]
 8023006:	3202      	adds	r2, #2
 8023008:	6879      	ldr	r1, [r7, #4]
 802300a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pQueue->lastInQueue = lastInQueue;
 802300e:	683b      	ldr	r3, [r7, #0]
 8023010:	89fa      	ldrh	r2, [r7, #14]
 8023012:	805a      	strh	r2, [r3, #2]

    LEAVE_MBX_CRITICAL;

    return 0;
 8023014:	2300      	movs	r3, #0
}
 8023016:	4618      	mov	r0, r3
 8023018:	3714      	adds	r7, #20
 802301a:	46bd      	mov	sp, r7
 802301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023020:	4770      	bx	lr
 8023022:	bf00      	nop

08023024 <GetOutOfMbxQueue>:
//
//    GetOutOfMbxQueue
//

TMBX MBXMEM * GetOutOfMbxQueue(TMBXQUEUE MBXMEM * pQueue)
{
 8023024:	b480      	push	{r7}
 8023026:	b085      	sub	sp, #20
 8023028:	af00      	add	r7, sp, #0
 802302a:	6078      	str	r0, [r7, #4]
    TMBX MBXMEM * pMbx;
    ENTER_MBX_CRITICAL;

    if (pQueue->firstInQueue != pQueue->lastInQueue)
 802302c:	687b      	ldr	r3, [r7, #4]
 802302e:	881a      	ldrh	r2, [r3, #0]
 8023030:	687b      	ldr	r3, [r7, #4]
 8023032:	885b      	ldrh	r3, [r3, #2]
 8023034:	429a      	cmp	r2, r3
 8023036:	d019      	beq.n	802306c <GetOutOfMbxQueue+0x48>
    {
        // Queue ist nicht leer
        UINT16 firstInQueue = pQueue->firstInQueue;
 8023038:	687b      	ldr	r3, [r7, #4]
 802303a:	881b      	ldrh	r3, [r3, #0]
 802303c:	817b      	strh	r3, [r7, #10]
        pMbx = pQueue->queue[firstInQueue];
 802303e:	897a      	ldrh	r2, [r7, #10]
 8023040:	687b      	ldr	r3, [r7, #4]
 8023042:	3202      	adds	r2, #2
 8023044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023048:	60fb      	str	r3, [r7, #12]
        firstInQueue++;
 802304a:	897b      	ldrh	r3, [r7, #10]
 802304c:	3301      	adds	r3, #1
 802304e:	817b      	strh	r3, [r7, #10]
        pQueue->firstInQueue = firstInQueue;
 8023050:	687b      	ldr	r3, [r7, #4]
 8023052:	897a      	ldrh	r2, [r7, #10]
 8023054:	801a      	strh	r2, [r3, #0]
        if (pQueue->firstInQueue == pQueue->maxQueueSize)
 8023056:	687b      	ldr	r3, [r7, #4]
 8023058:	881a      	ldrh	r2, [r3, #0]
 802305a:	687b      	ldr	r3, [r7, #4]
 802305c:	889b      	ldrh	r3, [r3, #4]
 802305e:	429a      	cmp	r2, r3
 8023060:	d103      	bne.n	802306a <GetOutOfMbxQueue+0x46>
        {
            // Umbruch der Queue
            pQueue->firstInQueue = 0;
 8023062:	687b      	ldr	r3, [r7, #4]
 8023064:	2200      	movs	r2, #0
 8023066:	801a      	strh	r2, [r3, #0]
 8023068:	e002      	b.n	8023070 <GetOutOfMbxQueue+0x4c>
 802306a:	e001      	b.n	8023070 <GetOutOfMbxQueue+0x4c>
        }
    }
    else
        pMbx = 0;
 802306c:	2300      	movs	r3, #0
 802306e:	60fb      	str	r3, [r7, #12]


    LEAVE_MBX_CRITICAL;

    return pMbx;
 8023070:	68fb      	ldr	r3, [r7, #12]
}
 8023072:	4618      	mov	r0, r3
 8023074:	3714      	adds	r7, #20
 8023076:	46bd      	mov	sp, r7
 8023078:	f85d 7b04 	ldr.w	r7, [sp], #4
 802307c:	4770      	bx	lr
 802307e:	bf00      	nop

08023080 <MBX_Init>:
/**
 \brief    This function intialize the Mailbox Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_Init(void)
{
 8023080:	b480      	push	{r7}
 8023082:	b083      	sub	sp, #12
 8023084:	af00      	add	r7, sp, #0
    u16ReceiveMbxSize = MIN_MBX_SIZE;
 8023086:	4b29      	ldr	r3, [pc, #164]	; (802312c <MBX_Init+0xac>)
 8023088:	2222      	movs	r2, #34	; 0x22
 802308a:	801a      	strh	r2, [r3, #0]
    u16SendMbxSize = MAX_MBX_SIZE;
 802308c:	4b28      	ldr	r3, [pc, #160]	; (8023130 <MBX_Init+0xb0>)
 802308e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8023092:	801a      	strh	r2, [r3, #0]
    u16EscAddrReceiveMbx = MIN_MBX_WRITE_ADDRESS;
 8023094:	4b27      	ldr	r3, [pc, #156]	; (8023134 <MBX_Init+0xb4>)
 8023096:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802309a:	801a      	strh	r2, [r3, #0]
    u16EscAddrSendMbx = MIN_MBX_READ_ADDRESS;
 802309c:	4b26      	ldr	r3, [pc, #152]	; (8023138 <MBX_Init+0xb8>)
 802309e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80230a2:	801a      	strh	r2, [r3, #0]

    sMbxReceiveQueue.firstInQueue    = 0;
 80230a4:	4b25      	ldr	r3, [pc, #148]	; (802313c <MBX_Init+0xbc>)
 80230a6:	2200      	movs	r2, #0
 80230a8:	801a      	strh	r2, [r3, #0]
    sMbxReceiveQueue.lastInQueue     = 0;
 80230aa:	4b24      	ldr	r3, [pc, #144]	; (802313c <MBX_Init+0xbc>)
 80230ac:	2200      	movs	r2, #0
 80230ae:	805a      	strh	r2, [r3, #2]
    sMbxReceiveQueue.maxQueueSize = MAX_MBX_QUEUE_SIZE;
 80230b0:	4b22      	ldr	r3, [pc, #136]	; (802313c <MBX_Init+0xbc>)
 80230b2:	220a      	movs	r2, #10
 80230b4:	809a      	strh	r2, [r3, #4]
    sMbxSendQueue.firstInQueue        = 0;
 80230b6:	4b22      	ldr	r3, [pc, #136]	; (8023140 <MBX_Init+0xc0>)
 80230b8:	2200      	movs	r2, #0
 80230ba:	801a      	strh	r2, [r3, #0]
    sMbxSendQueue.lastInQueue         = 0;
 80230bc:	4b20      	ldr	r3, [pc, #128]	; (8023140 <MBX_Init+0xc0>)
 80230be:	2200      	movs	r2, #0
 80230c0:	805a      	strh	r2, [r3, #2]
    sMbxSendQueue.maxQueueSize     = MAX_MBX_QUEUE_SIZE;
 80230c2:	4b1f      	ldr	r3, [pc, #124]	; (8023140 <MBX_Init+0xc0>)
 80230c4:	220a      	movs	r2, #10
 80230c6:	809a      	strh	r2, [r3, #4]
    psWriteMbx  = NULL;
 80230c8:	4b1e      	ldr	r3, [pc, #120]	; (8023144 <MBX_Init+0xc4>)
 80230ca:	2200      	movs	r2, #0
 80230cc:	601a      	str	r2, [r3, #0]


    psRepeatMbx = NULL;
 80230ce:	4b1e      	ldr	r3, [pc, #120]	; (8023148 <MBX_Init+0xc8>)
 80230d0:	2200      	movs	r2, #0
 80230d2:	601a      	str	r2, [r3, #0]
    psReadMbx    = NULL;
 80230d4:	4b1d      	ldr	r3, [pc, #116]	; (802314c <MBX_Init+0xcc>)
 80230d6:	2200      	movs	r2, #0
 80230d8:	601a      	str	r2, [r3, #0]
    psStoreMbx    = NULL;
 80230da:	4b1d      	ldr	r3, [pc, #116]	; (8023150 <MBX_Init+0xd0>)
 80230dc:	2200      	movs	r2, #0
 80230de:	601a      	str	r2, [r3, #0]

    bMbxRepeatToggle    = FALSE;
 80230e0:	4b1c      	ldr	r3, [pc, #112]	; (8023154 <MBX_Init+0xd4>)
 80230e2:	2200      	movs	r2, #0
 80230e4:	701a      	strb	r2, [r3, #0]
    /*Reset Repeat acknowledge bit of SyncManager1 (0x80F bit 2)*/
    {
        UINT8 sm1Activate = 0;
 80230e6:	2300      	movs	r3, #0
 80230e8:	71fb      	strb	r3, [r7, #7]
        HW_EscReadByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 80230ea:	4b1b      	ldr	r3, [pc, #108]	; (8023158 <MBX_Init+0xd8>)
 80230ec:	781b      	ldrb	r3, [r3, #0]
 80230ee:	71fb      	strb	r3, [r7, #7]
        sm1Activate &= ~0x02;
 80230f0:	79fb      	ldrb	r3, [r7, #7]
 80230f2:	f023 0302 	bic.w	r3, r3, #2
 80230f6:	71fb      	strb	r3, [r7, #7]
        HW_EscWriteByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 80230f8:	4a17      	ldr	r2, [pc, #92]	; (8023158 <MBX_Init+0xd8>)
 80230fa:	79fb      	ldrb	r3, [r7, #7]
 80230fc:	7013      	strb	r3, [r2, #0]
    }
    bMbxRunning = FALSE;
 80230fe:	4b17      	ldr	r3, [pc, #92]	; (802315c <MBX_Init+0xdc>)
 8023100:	2200      	movs	r2, #0
 8023102:	701a      	strb	r2, [r3, #0]
    bSendMbxIsFull = FALSE;
 8023104:	4b16      	ldr	r3, [pc, #88]	; (8023160 <MBX_Init+0xe0>)
 8023106:	2200      	movs	r2, #0
 8023108:	701a      	strb	r2, [r3, #0]
    bReceiveMbxIsLocked = FALSE;
 802310a:	4b16      	ldr	r3, [pc, #88]	; (8023164 <MBX_Init+0xe4>)
 802310c:	2200      	movs	r2, #0
 802310e:	701a      	strb	r2, [r3, #0]
    u8MailboxSendReqStored    = 0;
 8023110:	4b15      	ldr	r3, [pc, #84]	; (8023168 <MBX_Init+0xe8>)
 8023112:	2200      	movs	r2, #0
 8023114:	701a      	strb	r2, [r3, #0]
    u8MbxWriteCounter = 0;
 8023116:	4b15      	ldr	r3, [pc, #84]	; (802316c <MBX_Init+0xec>)
 8023118:	2200      	movs	r2, #0
 802311a:	701a      	strb	r2, [r3, #0]
    u8MbxReadCounter    = 0;
 802311c:	4b14      	ldr	r3, [pc, #80]	; (8023170 <MBX_Init+0xf0>)
 802311e:	2200      	movs	r2, #0
 8023120:	701a      	strb	r2, [r3, #0]
}
 8023122:	370c      	adds	r7, #12
 8023124:	46bd      	mov	sp, r7
 8023126:	f85d 7b04 	ldr.w	r7, [sp], #4
 802312a:	4770      	bx	lr
 802312c:	1fff2812 	.word	0x1fff2812
 8023130:	1fff2800 	.word	0x1fff2800
 8023134:	1fff27f8 	.word	0x1fff27f8
 8023138:	1fff280a 	.word	0x1fff280a
 802313c:	1fff27c0 	.word	0x1fff27c0
 8023140:	1fff278c 	.word	0x1fff278c
 8023144:	1fff280c 	.word	0x1fff280c
 8023148:	1fff2818 	.word	0x1fff2818
 802314c:	1fff2804 	.word	0x1fff2804
 8023150:	1fff27fc 	.word	0x1fff27fc
 8023154:	1fff2814 	.word	0x1fff2814
 8023158:	5401080f 	.word	0x5401080f
 802315c:	1fff27f6 	.word	0x1fff27f6
 8023160:	1fff27f5 	.word	0x1fff27f5
 8023164:	1fff2808 	.word	0x1fff2808
 8023168:	1fff2811 	.word	0x1fff2811
 802316c:	1fff2810 	.word	0x1fff2810
 8023170:	1fff2788 	.word	0x1fff2788

08023174 <MBX_StartMailboxHandler>:
 \brief     it is checked if the mailbox areas overlaps each other
 \brief     and the Sync Manager channels 0 and 1 are enabled.
 \brief     This function shall only be called if mailbox is supported.
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 MBX_StartMailboxHandler(void)
{
 8023174:	b580      	push	{r7, lr}
 8023176:	b082      	sub	sp, #8
 8023178:	af00      	add	r7, sp, #0
    UINT16 result = 0;
 802317a:	2300      	movs	r3, #0
 802317c:	80fb      	strh	r3, [r7, #6]
    /* get address of the receive mailbox sync manager (SM0) */
/*ECATCHANGE_START(V5.11) HW1*/
    TSYNCMAN ESCMEM * pSyncMan = (TSYNCMAN ESCMEM *)GetSyncMan(MAILBOX_WRITE);
 802317e:	2000      	movs	r0, #0
 8023180:	f7fe f8a4 	bl	80212cc <GetSyncMan>
 8023184:	6038      	str	r0, [r7, #0]
/*ECATCHANGE_END(V5.11) HW1*/
    /* store size of the receive mailbox */
    u16ReceiveMbxSize     = pSyncMan->Length;
 8023186:	683b      	ldr	r3, [r7, #0]
 8023188:	885b      	ldrh	r3, [r3, #2]
 802318a:	b29a      	uxth	r2, r3
 802318c:	4b30      	ldr	r3, [pc, #192]	; (8023250 <MBX_StartMailboxHandler+0xdc>)
 802318e:	801a      	strh	r2, [r3, #0]
    /* store the address of the receive mailbox */
    u16EscAddrReceiveMbx = pSyncMan->PhysicalStartAddress;
 8023190:	683b      	ldr	r3, [r7, #0]
 8023192:	881b      	ldrh	r3, [r3, #0]
 8023194:	b29a      	uxth	r2, r3
 8023196:	4b2f      	ldr	r3, [pc, #188]	; (8023254 <MBX_StartMailboxHandler+0xe0>)
 8023198:	801a      	strh	r2, [r3, #0]

    /* get address of the send mailbox sync manager (SM1) */
/*ECATCHANGE_START(V5.11) HW1*/
    pSyncMan =(TSYNCMAN ESCMEM *) GetSyncMan(MAILBOX_READ);
 802319a:	2001      	movs	r0, #1
 802319c:	f7fe f896 	bl	80212cc <GetSyncMan>
 80231a0:	6038      	str	r0, [r7, #0]
/*ECATCHANGE_END(V5.11) HW1*/

    /* store the size of the send mailbox */
    u16SendMbxSize = pSyncMan->Length;
 80231a2:	683b      	ldr	r3, [r7, #0]
 80231a4:	885b      	ldrh	r3, [r3, #2]
 80231a6:	b29a      	uxth	r2, r3
 80231a8:	4b2b      	ldr	r3, [pc, #172]	; (8023258 <MBX_StartMailboxHandler+0xe4>)
 80231aa:	801a      	strh	r2, [r3, #0]
    /* store the address of the send mailbox */
    u16EscAddrSendMbx = pSyncMan->PhysicalStartAddress;
 80231ac:	683b      	ldr	r3, [r7, #0]
 80231ae:	881b      	ldrh	r3, [r3, #0]
 80231b0:	b29a      	uxth	r2, r3
 80231b2:	4b2a      	ldr	r3, [pc, #168]	; (802325c <MBX_StartMailboxHandler+0xe8>)
 80231b4:	801a      	strh	r2, [r3, #0]

    // HBu 02.05.06: it should be checked if there are overlaps in the sync manager areas
    if ((u16EscAddrReceiveMbx + u16ReceiveMbxSize) > u16EscAddrSendMbx && (u16EscAddrReceiveMbx < (u16EscAddrSendMbx + u16SendMbxSize)))
 80231b6:	4b27      	ldr	r3, [pc, #156]	; (8023254 <MBX_StartMailboxHandler+0xe0>)
 80231b8:	881b      	ldrh	r3, [r3, #0]
 80231ba:	461a      	mov	r2, r3
 80231bc:	4b24      	ldr	r3, [pc, #144]	; (8023250 <MBX_StartMailboxHandler+0xdc>)
 80231be:	881b      	ldrh	r3, [r3, #0]
 80231c0:	4413      	add	r3, r2
 80231c2:	4a26      	ldr	r2, [pc, #152]	; (802325c <MBX_StartMailboxHandler+0xe8>)
 80231c4:	8812      	ldrh	r2, [r2, #0]
 80231c6:	4293      	cmp	r3, r2
 80231c8:	dd0c      	ble.n	80231e4 <MBX_StartMailboxHandler+0x70>
 80231ca:	4b22      	ldr	r3, [pc, #136]	; (8023254 <MBX_StartMailboxHandler+0xe0>)
 80231cc:	881b      	ldrh	r3, [r3, #0]
 80231ce:	461a      	mov	r2, r3
 80231d0:	4b22      	ldr	r3, [pc, #136]	; (802325c <MBX_StartMailboxHandler+0xe8>)
 80231d2:	881b      	ldrh	r3, [r3, #0]
 80231d4:	4619      	mov	r1, r3
 80231d6:	4b20      	ldr	r3, [pc, #128]	; (8023258 <MBX_StartMailboxHandler+0xe4>)
 80231d8:	881b      	ldrh	r3, [r3, #0]
 80231da:	440b      	add	r3, r1
 80231dc:	429a      	cmp	r2, r3
 80231de:	da01      	bge.n	80231e4 <MBX_StartMailboxHandler+0x70>
    {
        return ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80231e0:	2316      	movs	r3, #22
 80231e2:	e031      	b.n	8023248 <MBX_StartMailboxHandler+0xd4>
    }

    /* enable the receive mailbox sync manager channel */
/*ECATCHANGE_START(V5.11) HW1*/
    EnableSyncManChannel(MAILBOX_WRITE);
 80231e4:	2000      	movs	r0, #0
 80231e6:	f7fe f8b3 	bl	8021350 <EnableSyncManChannel>
    /* enable the send mailbox sync manager channel */
    EnableSyncManChannel(MAILBOX_READ);
 80231ea:	2001      	movs	r0, #1
 80231ec:	f7fe f8b0 	bl	8021350 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/

/* ECATCHANGE_START(V5.11) MBX2*/
        psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(u16ReceiveMbxSize);
 80231f0:	4b17      	ldr	r3, [pc, #92]	; (8023250 <MBX_StartMailboxHandler+0xdc>)
 80231f2:	881b      	ldrh	r3, [r3, #0]
 80231f4:	4618      	mov	r0, r3
 80231f6:	f005 f825 	bl	8028244 <malloc>
 80231fa:	4603      	mov	r3, r0
 80231fc:	461a      	mov	r2, r3
 80231fe:	4b18      	ldr	r3, [pc, #96]	; (8023260 <MBX_StartMailboxHandler+0xec>)
 8023200:	601a      	str	r2, [r3, #0]
        if(psWriteMbx == NULL)
 8023202:	4b17      	ldr	r3, [pc, #92]	; (8023260 <MBX_StartMailboxHandler+0xec>)
 8023204:	681b      	ldr	r3, [r3, #0]
 8023206:	2b00      	cmp	r3, #0
 8023208:	d115      	bne.n	8023236 <MBX_StartMailboxHandler+0xc2>
        {
            bNoMbxMemoryAvailable = TRUE;
 802320a:	4b16      	ldr	r3, [pc, #88]	; (8023264 <MBX_StartMailboxHandler+0xf0>)
 802320c:	2201      	movs	r2, #1
 802320e:	701a      	strb	r2, [r3, #0]

            //check if at least enough memory for an mailbox error is available (other wise stop the state transition)
            psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(10); /* a mailbox error datagram length*/
 8023210:	200a      	movs	r0, #10
 8023212:	f005 f817 	bl	8028244 <malloc>
 8023216:	4603      	mov	r3, r0
 8023218:	461a      	mov	r2, r3
 802321a:	4b11      	ldr	r3, [pc, #68]	; (8023260 <MBX_StartMailboxHandler+0xec>)
 802321c:	601a      	str	r2, [r3, #0]
            if(psWriteMbx == NULL)
 802321e:	4b10      	ldr	r3, [pc, #64]	; (8023260 <MBX_StartMailboxHandler+0xec>)
 8023220:	681b      	ldr	r3, [r3, #0]
 8023222:	2b00      	cmp	r3, #0
 8023224:	d101      	bne.n	802322a <MBX_StartMailboxHandler+0xb6>
            {
                result = ALSTATUSCODE_NOMEMORY;
 8023226:	2302      	movs	r3, #2
 8023228:	80fb      	strh	r3, [r7, #6]
            }
           
            APPL_FreeMailboxBuffer(psWriteMbx);
 802322a:	4b0d      	ldr	r3, [pc, #52]	; (8023260 <MBX_StartMailboxHandler+0xec>)
 802322c:	681b      	ldr	r3, [r3, #0]
 802322e:	4618      	mov	r0, r3
 8023230:	f005 f810 	bl	8028254 <free>
 8023234:	e007      	b.n	8023246 <MBX_StartMailboxHandler+0xd2>
        }
        else
        {
            bNoMbxMemoryAvailable = FALSE;
 8023236:	4b0b      	ldr	r3, [pc, #44]	; (8023264 <MBX_StartMailboxHandler+0xf0>)
 8023238:	2200      	movs	r2, #0
 802323a:	701a      	strb	r2, [r3, #0]
            APPL_FreeMailboxBuffer(psWriteMbx);
 802323c:	4b08      	ldr	r3, [pc, #32]	; (8023260 <MBX_StartMailboxHandler+0xec>)
 802323e:	681b      	ldr	r3, [r3, #0]
 8023240:	4618      	mov	r0, r3
 8023242:	f005 f807 	bl	8028254 <free>
        }
/* ECATCHANGE_END(V5.11) MBX2*/

    return result;
 8023246:	88fb      	ldrh	r3, [r7, #6]
}
 8023248:	4618      	mov	r0, r3
 802324a:	3708      	adds	r7, #8
 802324c:	46bd      	mov	sp, r7
 802324e:	bd80      	pop	{r7, pc}
 8023250:	1fff2812 	.word	0x1fff2812
 8023254:	1fff27f8 	.word	0x1fff27f8
 8023258:	1fff2800 	.word	0x1fff2800
 802325c:	1fff280a 	.word	0x1fff280a
 8023260:	1fff280c 	.word	0x1fff280c
 8023264:	1fff27f4 	.word	0x1fff27f4

08023268 <MBX_StopMailboxHandler>:
 \brief  local management service Stop Mailbox Handler
 \brief  the Sync Manager channels 0 and 1 are disabled
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_StopMailboxHandler(void)
{
 8023268:	b580      	push	{r7, lr}
 802326a:	b082      	sub	sp, #8
 802326c:	af00      	add	r7, sp, #0
    TMBX MBXMEM * pMbx;

    /* mailbox handler is stopped */
    bMbxRunning = FALSE;
 802326e:	4b3f      	ldr	r3, [pc, #252]	; (802336c <MBX_StopMailboxHandler+0x104>)
 8023270:	2200      	movs	r2, #0
 8023272:	701a      	strb	r2, [r3, #0]
    /* disable the receive mailbox sync manager channel */
/*ECATCHANGE_START(V5.11) HW1*/
    DisableSyncManChannel(MAILBOX_WRITE);
 8023274:	2000      	movs	r0, #0
 8023276:	f7fe f841 	bl	80212fc <DisableSyncManChannel>
    /* disable the send mailbox sync manager channel */
    DisableSyncManChannel(MAILBOX_READ);
 802327a:	2001      	movs	r0, #1
 802327c:	f7fe f83e 	bl	80212fc <DisableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    /* initialize variables again */


    if (psRepeatMbx != NULL)
 8023280:	4b3b      	ldr	r3, [pc, #236]	; (8023370 <MBX_StopMailboxHandler+0x108>)
 8023282:	681b      	ldr	r3, [r3, #0]
 8023284:	2b00      	cmp	r3, #0
 8023286:	d004      	beq.n	8023292 <MBX_StopMailboxHandler+0x2a>
        APPL_FreeMailboxBuffer(psRepeatMbx);
 8023288:	4b39      	ldr	r3, [pc, #228]	; (8023370 <MBX_StopMailboxHandler+0x108>)
 802328a:	681b      	ldr	r3, [r3, #0]
 802328c:	4618      	mov	r0, r3
 802328e:	f004 ffe1 	bl	8028254 <free>

    if (psStoreMbx != NULL && psStoreMbx != psRepeatMbx)
 8023292:	4b38      	ldr	r3, [pc, #224]	; (8023374 <MBX_StopMailboxHandler+0x10c>)
 8023294:	681b      	ldr	r3, [r3, #0]
 8023296:	2b00      	cmp	r3, #0
 8023298:	d00a      	beq.n	80232b0 <MBX_StopMailboxHandler+0x48>
 802329a:	4b36      	ldr	r3, [pc, #216]	; (8023374 <MBX_StopMailboxHandler+0x10c>)
 802329c:	681a      	ldr	r2, [r3, #0]
 802329e:	4b34      	ldr	r3, [pc, #208]	; (8023370 <MBX_StopMailboxHandler+0x108>)
 80232a0:	681b      	ldr	r3, [r3, #0]
 80232a2:	429a      	cmp	r2, r3
 80232a4:	d004      	beq.n	80232b0 <MBX_StopMailboxHandler+0x48>
        APPL_FreeMailboxBuffer(psStoreMbx);
 80232a6:	4b33      	ldr	r3, [pc, #204]	; (8023374 <MBX_StopMailboxHandler+0x10c>)
 80232a8:	681b      	ldr	r3, [r3, #0]
 80232aa:	4618      	mov	r0, r3
 80232ac:	f004 ffd2 	bl	8028254 <free>

    if (psReadMbx != NULL && psReadMbx != psRepeatMbx && psReadMbx != psStoreMbx)
 80232b0:	4b31      	ldr	r3, [pc, #196]	; (8023378 <MBX_StopMailboxHandler+0x110>)
 80232b2:	681b      	ldr	r3, [r3, #0]
 80232b4:	2b00      	cmp	r3, #0
 80232b6:	d010      	beq.n	80232da <MBX_StopMailboxHandler+0x72>
 80232b8:	4b2f      	ldr	r3, [pc, #188]	; (8023378 <MBX_StopMailboxHandler+0x110>)
 80232ba:	681a      	ldr	r2, [r3, #0]
 80232bc:	4b2c      	ldr	r3, [pc, #176]	; (8023370 <MBX_StopMailboxHandler+0x108>)
 80232be:	681b      	ldr	r3, [r3, #0]
 80232c0:	429a      	cmp	r2, r3
 80232c2:	d00a      	beq.n	80232da <MBX_StopMailboxHandler+0x72>
 80232c4:	4b2c      	ldr	r3, [pc, #176]	; (8023378 <MBX_StopMailboxHandler+0x110>)
 80232c6:	681a      	ldr	r2, [r3, #0]
 80232c8:	4b2a      	ldr	r3, [pc, #168]	; (8023374 <MBX_StopMailboxHandler+0x10c>)
 80232ca:	681b      	ldr	r3, [r3, #0]
 80232cc:	429a      	cmp	r2, r3
 80232ce:	d004      	beq.n	80232da <MBX_StopMailboxHandler+0x72>
        APPL_FreeMailboxBuffer(psReadMbx);
 80232d0:	4b29      	ldr	r3, [pc, #164]	; (8023378 <MBX_StopMailboxHandler+0x110>)
 80232d2:	681b      	ldr	r3, [r3, #0]
 80232d4:	4618      	mov	r0, r3
 80232d6:	f004 ffbd 	bl	8028254 <free>


    psRepeatMbx = NULL;
 80232da:	4b25      	ldr	r3, [pc, #148]	; (8023370 <MBX_StopMailboxHandler+0x108>)
 80232dc:	2200      	movs	r2, #0
 80232de:	601a      	str	r2, [r3, #0]
    psReadMbx = NULL;
 80232e0:	4b25      	ldr	r3, [pc, #148]	; (8023378 <MBX_StopMailboxHandler+0x110>)
 80232e2:	2200      	movs	r2, #0
 80232e4:	601a      	str	r2, [r3, #0]
    psStoreMbx = NULL;
 80232e6:	4b23      	ldr	r3, [pc, #140]	; (8023374 <MBX_StopMailboxHandler+0x10c>)
 80232e8:	2200      	movs	r2, #0
 80232ea:	601a      	str	r2, [r3, #0]

    bMbxRepeatToggle    = FALSE;
 80232ec:	4b23      	ldr	r3, [pc, #140]	; (802337c <MBX_StopMailboxHandler+0x114>)
 80232ee:	2200      	movs	r2, #0
 80232f0:	701a      	strb	r2, [r3, #0]
    /*Reset Repeat acknowledge bit of SyncManager1 (0x080F bit 2)*/
    {
        UINT8 sm1Activate = 0;
 80232f2:	2300      	movs	r3, #0
 80232f4:	70fb      	strb	r3, [r7, #3]
        HW_EscReadByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 80232f6:	4b22      	ldr	r3, [pc, #136]	; (8023380 <MBX_StopMailboxHandler+0x118>)
 80232f8:	781b      	ldrb	r3, [r3, #0]
 80232fa:	70fb      	strb	r3, [r7, #3]
        sm1Activate &= ~0x02;
 80232fc:	78fb      	ldrb	r3, [r7, #3]
 80232fe:	f023 0302 	bic.w	r3, r3, #2
 8023302:	70fb      	strb	r3, [r7, #3]
        HW_EscWriteByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 8023304:	4a1e      	ldr	r2, [pc, #120]	; (8023380 <MBX_StopMailboxHandler+0x118>)
 8023306:	78fb      	ldrb	r3, [r7, #3]
 8023308:	7013      	strb	r3, [r2, #0]
    }
    bSendMbxIsFull         = FALSE;
 802330a:	4b1e      	ldr	r3, [pc, #120]	; (8023384 <MBX_StopMailboxHandler+0x11c>)
 802330c:	2200      	movs	r2, #0
 802330e:	701a      	strb	r2, [r3, #0]
    bReceiveMbxIsLocked = FALSE;
 8023310:	4b1d      	ldr	r3, [pc, #116]	; (8023388 <MBX_StopMailboxHandler+0x120>)
 8023312:	2200      	movs	r2, #0
 8023314:	701a      	strb	r2, [r3, #0]
    u8MailboxSendReqStored    = 0;
 8023316:	4b1d      	ldr	r3, [pc, #116]	; (802338c <MBX_StopMailboxHandler+0x124>)
 8023318:	2200      	movs	r2, #0
 802331a:	701a      	strb	r2, [r3, #0]
    u8MbxWriteCounter         = 0;
 802331c:	4b1c      	ldr	r3, [pc, #112]	; (8023390 <MBX_StopMailboxHandler+0x128>)
 802331e:	2200      	movs	r2, #0
 8023320:	701a      	strb	r2, [r3, #0]
    u8MbxReadCounter        = 0;
 8023322:	4b1c      	ldr	r3, [pc, #112]	; (8023394 <MBX_StopMailboxHandler+0x12c>)
 8023324:	2200      	movs	r2, #0
 8023326:	701a      	strb	r2, [r3, #0]

    do
    {
        pMbx = GetOutOfMbxQueue(&sMbxReceiveQueue);
 8023328:	481b      	ldr	r0, [pc, #108]	; (8023398 <MBX_StopMailboxHandler+0x130>)
 802332a:	f7ff fe7b 	bl	8023024 <GetOutOfMbxQueue>
 802332e:	6078      	str	r0, [r7, #4]
        if (pMbx)
 8023330:	687b      	ldr	r3, [r7, #4]
 8023332:	2b00      	cmp	r3, #0
 8023334:	d004      	beq.n	8023340 <MBX_StopMailboxHandler+0xd8>
        {
            APPL_FreeMailboxBuffer(pMbx);
 8023336:	6878      	ldr	r0, [r7, #4]
 8023338:	f004 ff8c 	bl	8028254 <free>
            pMbx = NULL;
 802333c:	2300      	movs	r3, #0
 802333e:	607b      	str	r3, [r7, #4]
        }
    } while (pMbx != NULL);
 8023340:	687b      	ldr	r3, [r7, #4]
 8023342:	2b00      	cmp	r3, #0
 8023344:	d1f0      	bne.n	8023328 <MBX_StopMailboxHandler+0xc0>
    do
    {
        pMbx = GetOutOfMbxQueue(&sMbxSendQueue);
 8023346:	4815      	ldr	r0, [pc, #84]	; (802339c <MBX_StopMailboxHandler+0x134>)
 8023348:	f7ff fe6c 	bl	8023024 <GetOutOfMbxQueue>
 802334c:	6078      	str	r0, [r7, #4]
        if (pMbx)
 802334e:	687b      	ldr	r3, [r7, #4]
 8023350:	2b00      	cmp	r3, #0
 8023352:	d004      	beq.n	802335e <MBX_StopMailboxHandler+0xf6>
        {
            APPL_FreeMailboxBuffer(pMbx);
 8023354:	6878      	ldr	r0, [r7, #4]
 8023356:	f004 ff7d 	bl	8028254 <free>
            pMbx = NULL;
 802335a:	2300      	movs	r3, #0
 802335c:	607b      	str	r3, [r7, #4]
        }
    } while (pMbx != NULL);
 802335e:	687b      	ldr	r3, [r7, #4]
 8023360:	2b00      	cmp	r3, #0
 8023362:	d1f0      	bne.n	8023346 <MBX_StopMailboxHandler+0xde>

}
 8023364:	3708      	adds	r7, #8
 8023366:	46bd      	mov	sp, r7
 8023368:	bd80      	pop	{r7, pc}
 802336a:	bf00      	nop
 802336c:	1fff27f6 	.word	0x1fff27f6
 8023370:	1fff2818 	.word	0x1fff2818
 8023374:	1fff27fc 	.word	0x1fff27fc
 8023378:	1fff2804 	.word	0x1fff2804
 802337c:	1fff2814 	.word	0x1fff2814
 8023380:	5401080f 	.word	0x5401080f
 8023384:	1fff27f5 	.word	0x1fff27f5
 8023388:	1fff2808 	.word	0x1fff2808
 802338c:	1fff2811 	.word	0x1fff2811
 8023390:	1fff2810 	.word	0x1fff2810
 8023394:	1fff2788 	.word	0x1fff2788
 8023398:	1fff27c0 	.word	0x1fff27c0
 802339c:	1fff278c 	.word	0x1fff278c

080233a0 <MailboxServiceInd>:
 \brief    The function checks the mailbox header for the requested service and calls the
 \brief    corresponding XXXX_ServiceInd-function
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MailboxServiceInd(TMBX MBXMEM *pMbx)
{
 80233a0:	b580      	push	{r7, lr}
 80233a2:	b084      	sub	sp, #16
 80233a4:	af00      	add	r7, sp, #0
 80233a6:	6078      	str	r0, [r7, #4]
    UINT8 result;


    switch ( (pMbx->MbxHeader.Flags[MBX_OFFS_TYPE] & MBX_MASK_TYPE) >> MBX_SHIFT_TYPE )
 80233a8:	687b      	ldr	r3, [r7, #4]
 80233aa:	795b      	ldrb	r3, [r3, #5]
 80233ac:	f003 030f 	and.w	r3, r3, #15
 80233b0:	2b03      	cmp	r3, #3
 80233b2:	d105      	bne.n	80233c0 <MailboxServiceInd+0x20>
    {
    case MBX_TYPE_COE:
        /* CoE datagram received */
        result = COE_ServiceInd((TCOEMBX MBXMEM *) pMbx);
 80233b4:	6878      	ldr	r0, [r7, #4]
 80233b6:	f7fd fe67 	bl	8021088 <COE_ServiceInd>
 80233ba:	4603      	mov	r3, r0
 80233bc:	73fb      	strb	r3, [r7, #15]
        break;
 80233be:	e002      	b.n	80233c6 <MailboxServiceInd+0x26>

    default:

        result = MBXERR_UNSUPPORTEDPROTOCOL;
 80233c0:	2302      	movs	r3, #2
 80233c2:	73fb      	strb	r3, [r7, #15]
        break;
 80233c4:	bf00      	nop
    }

    return result;
 80233c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80233c8:	4618      	mov	r0, r3
 80233ca:	3710      	adds	r7, #16
 80233cc:	46bd      	mov	sp, r7
 80233ce:	bd80      	pop	{r7, pc}

080233d0 <MBX_MailboxWriteInd>:
 \brief    The function checks the mailbox header for the requested service and calls the
 \brief    corresponding XXXX_ServiceInd-function
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxWriteInd(TMBX MBXMEM *pMbx)
{
 80233d0:	b580      	push	{r7, lr}
 80233d2:	b084      	sub	sp, #16
 80233d4:	af00      	add	r7, sp, #0
 80233d6:	6078      	str	r0, [r7, #4]
    UINT8 result = 0;
 80233d8:	2300      	movs	r3, #0
 80233da:	73fb      	strb	r3, [r7, #15]
    UINT8 mbxCounter = pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] >> MBX_SHIFT_COUNTER;
 80233dc:	687b      	ldr	r3, [r7, #4]
 80233de:	795b      	ldrb	r3, [r3, #5]
 80233e0:	091b      	lsrs	r3, r3, #4
 80233e2:	73bb      	strb	r3, [r7, #14]
    UINT16 MbxLen = SWAPWORD(pMbx->MbxHeader.Length);
 80233e4:	687b      	ldr	r3, [r7, #4]
 80233e6:	881b      	ldrh	r3, [r3, #0]
 80233e8:	81bb      	strh	r3, [r7, #12]

    if(MbxLen > MAX_MBX_SIZE)
 80233ea:	89bb      	ldrh	r3, [r7, #12]
 80233ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80233f0:	d914      	bls.n	802341c <MBX_MailboxWriteInd+0x4c>
    {
        /* Mailbox error response: size specified in mailbox header too large*/
        pMbx->MbxHeader.Length     = 4;
 80233f2:	687b      	ldr	r3, [r7, #4]
 80233f4:	2204      	movs	r2, #4
 80233f6:	801a      	strh	r2, [r3, #0]
        pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~MBX_MASK_TYPE;
 80233f8:	687b      	ldr	r3, [r7, #4]
 80233fa:	795b      	ldrb	r3, [r3, #5]
 80233fc:	f023 030f 	bic.w	r3, r3, #15
 8023400:	b2da      	uxtb	r2, r3
 8023402:	687b      	ldr	r3, [r7, #4]
 8023404:	715a      	strb	r2, [r3, #5]
        pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 8023406:	687b      	ldr	r3, [r7, #4]
 8023408:	2201      	movs	r2, #1
 802340a:	80da      	strh	r2, [r3, #6]
        pMbx->Data[1]                        = SWAPWORD(MBXERR_INVALIDSIZE);
 802340c:	687b      	ldr	r3, [r7, #4]
 802340e:	2208      	movs	r2, #8
 8023410:	811a      	strh	r2, [r3, #8]
        MBX_MailboxSendReq(pMbx, 0);
 8023412:	6878      	ldr	r0, [r7, #4]
 8023414:	2100      	movs	r1, #0
 8023416:	f000 f8e3 	bl	80235e0 <MBX_MailboxSendReq>
 802341a:	e02f      	b.n	802347c <MBX_MailboxWriteInd+0xac>
    else
    /* if the mailbox datagram counter (Bit 4-6 of Byte 5 of the mailbox header) is unequal zero,
       the master supports the mailbox data link layer,
        in that case a repeated mailbox write request will be detected, if the counter is unequal zero
        and unchanged */
    if ( mbxCounter == 0 || mbxCounter != u8MbxWriteCounter )
 802341c:	7bbb      	ldrb	r3, [r7, #14]
 802341e:	2b00      	cmp	r3, #0
 8023420:	d004      	beq.n	802342c <MBX_MailboxWriteInd+0x5c>
 8023422:	4b18      	ldr	r3, [pc, #96]	; (8023484 <MBX_MailboxWriteInd+0xb4>)
 8023424:	781b      	ldrb	r3, [r3, #0]
 8023426:	7bba      	ldrb	r2, [r7, #14]
 8023428:	429a      	cmp	r2, r3
 802342a:	d022      	beq.n	8023472 <MBX_MailboxWriteInd+0xa2>
    {
        /* new mailbox service received */
        /* mbxCounter = 0: old EtherCAT master */
        /* new MBX service received, store the new mailbox counter */
        u8MbxWriteCounter = mbxCounter;
 802342c:	4a15      	ldr	r2, [pc, #84]	; (8023484 <MBX_MailboxWriteInd+0xb4>)
 802342e:	7bbb      	ldrb	r3, [r7, #14]
 8023430:	7013      	strb	r3, [r2, #0]

        {
            /* check the protocol type and call the XXXX_ServiceInd-function */

            result = PutInMbxQueue(pMbx, &sMbxReceiveQueue);
 8023432:	6878      	ldr	r0, [r7, #4]
 8023434:	4914      	ldr	r1, [pc, #80]	; (8023488 <MBX_MailboxWriteInd+0xb8>)
 8023436:	f7ff fdcb 	bl	8022fd0 <PutInMbxQueue>
 802343a:	4603      	mov	r3, r0
 802343c:	73fb      	strb	r3, [r7, #15]
        }

        if ( result != 0 )
 802343e:	7bfb      	ldrb	r3, [r7, #15]
 8023440:	2b00      	cmp	r3, #0
 8023442:	d015      	beq.n	8023470 <MBX_MailboxWriteInd+0xa0>
        {
            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 8023444:	687b      	ldr	r3, [r7, #4]
 8023446:	2204      	movs	r2, #4
 8023448:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~MBX_MASK_TYPE;
 802344a:	687b      	ldr	r3, [r7, #4]
 802344c:	795b      	ldrb	r3, [r3, #5]
 802344e:	f023 030f 	bic.w	r3, r3, #15
 8023452:	b2da      	uxtb	r2, r3
 8023454:	687b      	ldr	r3, [r7, #4]
 8023456:	715a      	strb	r2, [r3, #5]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 8023458:	687b      	ldr	r3, [r7, #4]
 802345a:	2201      	movs	r2, #1
 802345c:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(result);
 802345e:	7bfb      	ldrb	r3, [r7, #15]
 8023460:	b29a      	uxth	r2, r3
 8023462:	687b      	ldr	r3, [r7, #4]
 8023464:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 8023466:	6878      	ldr	r0, [r7, #4]
 8023468:	2100      	movs	r1, #0
 802346a:	f000 f8b9 	bl	80235e0 <MBX_MailboxSendReq>
            /* check the protocol type and call the XXXX_ServiceInd-function */

            result = PutInMbxQueue(pMbx, &sMbxReceiveQueue);
        }

        if ( result != 0 )
 802346e:	e005      	b.n	802347c <MBX_MailboxWriteInd+0xac>
 8023470:	e004      	b.n	802347c <MBX_MailboxWriteInd+0xac>
        }
    }
    // the mailbox buffer has to be freed here
    else
    {
        APPL_FreeMailboxBuffer(pMbx);
 8023472:	6878      	ldr	r0, [r7, #4]
 8023474:	f004 feee 	bl	8028254 <free>
        pMbx = NULL;
 8023478:	2300      	movs	r3, #0
 802347a:	607b      	str	r3, [r7, #4]
    }
}
 802347c:	3710      	adds	r7, #16
 802347e:	46bd      	mov	sp, r7
 8023480:	bd80      	pop	{r7, pc}
 8023482:	bf00      	nop
 8023484:	1fff2810 	.word	0x1fff2810
 8023488:	1fff27c0 	.word	0x1fff27c0

0802348c <MBX_MailboxReadInd>:
/**
 \brief This function is called when the Master has read the Send-Mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxReadInd(void)
{
 802348c:	b580      	push	{r7, lr}
 802348e:	b082      	sub	sp, #8
 8023490:	af00      	add	r7, sp, #0
    bSendMbxIsFull = FALSE;
 8023492:	4b2b      	ldr	r3, [pc, #172]	; (8023540 <MBX_MailboxReadInd+0xb4>)
 8023494:	2200      	movs	r2, #0
 8023496:	701a      	strb	r2, [r3, #0]
    // HBu 02.05.06: the pointer psRepeatMbx is only free if there is no stored
    //               mailbox service from the last repeat
    if ( psRepeatMbx && psStoreMbx == NULL )
 8023498:	4b2a      	ldr	r3, [pc, #168]	; (8023544 <MBX_MailboxReadInd+0xb8>)
 802349a:	681b      	ldr	r3, [r3, #0]
 802349c:	2b00      	cmp	r3, #0
 802349e:	d00b      	beq.n	80234b8 <MBX_MailboxReadInd+0x2c>
 80234a0:	4b29      	ldr	r3, [pc, #164]	; (8023548 <MBX_MailboxReadInd+0xbc>)
 80234a2:	681b      	ldr	r3, [r3, #0]
 80234a4:	2b00      	cmp	r3, #0
 80234a6:	d107      	bne.n	80234b8 <MBX_MailboxReadInd+0x2c>
    {
    /* the last sent service is not stored for repeat any longer */
        APPL_FreeMailboxBuffer(psRepeatMbx);
 80234a8:	4b26      	ldr	r3, [pc, #152]	; (8023544 <MBX_MailboxReadInd+0xb8>)
 80234aa:	681b      	ldr	r3, [r3, #0]
 80234ac:	4618      	mov	r0, r3
 80234ae:	f004 fed1 	bl	8028254 <free>
        psRepeatMbx = NULL;
 80234b2:	4b24      	ldr	r3, [pc, #144]	; (8023544 <MBX_MailboxReadInd+0xb8>)
 80234b4:	2200      	movs	r2, #0
 80234b6:	601a      	str	r2, [r3, #0]
    }

    /* the actual sent service has to be stored for repeat */
    psRepeatMbx = psReadMbx;
 80234b8:	4b24      	ldr	r3, [pc, #144]	; (802354c <MBX_MailboxReadInd+0xc0>)
 80234ba:	681b      	ldr	r3, [r3, #0]
 80234bc:	4a21      	ldr	r2, [pc, #132]	; (8023544 <MBX_MailboxReadInd+0xb8>)
 80234be:	6013      	str	r3, [r2, #0]

      if ( psStoreMbx )
 80234c0:	4b21      	ldr	r3, [pc, #132]	; (8023548 <MBX_MailboxReadInd+0xbc>)
 80234c2:	681b      	ldr	r3, [r3, #0]
 80234c4:	2b00      	cmp	r3, #0
 80234c6:	d008      	beq.n	80234da <MBX_MailboxReadInd+0x4e>
      {
        /* there was a buffer stored */
        MBX_CopyToSendMailbox(psStoreMbx);
 80234c8:	4b1f      	ldr	r3, [pc, #124]	; (8023548 <MBX_MailboxReadInd+0xbc>)
 80234ca:	681b      	ldr	r3, [r3, #0]
 80234cc:	4618      	mov	r0, r3
 80234ce:	f000 f995 	bl	80237fc <MBX_CopyToSendMailbox>
        /* no more buffer to be stored any more */
        psStoreMbx = NULL;
 80234d2:	4b1d      	ldr	r3, [pc, #116]	; (8023548 <MBX_MailboxReadInd+0xbc>)
 80234d4:	2200      	movs	r2, #0
 80234d6:	601a      	str	r2, [r3, #0]
 80234d8:	e009      	b.n	80234ee <MBX_MailboxReadInd+0x62>
      }
      else
    {
        TMBX MBXMEM *pMbx = GetOutOfMbxQueue(&sMbxSendQueue);
 80234da:	481d      	ldr	r0, [pc, #116]	; (8023550 <MBX_MailboxReadInd+0xc4>)
 80234dc:	f7ff fda2 	bl	8023024 <GetOutOfMbxQueue>
 80234e0:	6078      	str	r0, [r7, #4]
        if (pMbx)
 80234e2:	687b      	ldr	r3, [r7, #4]
 80234e4:	2b00      	cmp	r3, #0
 80234e6:	d002      	beq.n	80234ee <MBX_MailboxReadInd+0x62>
        {
            MBX_CopyToSendMailbox(pMbx);
 80234e8:	6878      	ldr	r0, [r7, #4]
 80234ea:	f000 f987 	bl	80237fc <MBX_CopyToSendMailbox>
        }
    }

      if ( u8MailboxSendReqStored )
 80234ee:	4b19      	ldr	r3, [pc, #100]	; (8023554 <MBX_MailboxReadInd+0xc8>)
 80234f0:	781b      	ldrb	r3, [r3, #0]
 80234f2:	2b00      	cmp	r3, #0
 80234f4:	d020      	beq.n	8023538 <MBX_MailboxReadInd+0xac>
    {
        /* there are mailbox services stored to be sent */
        if ( u8MailboxSendReqStored & COE_SERVICE )
 80234f6:	4b17      	ldr	r3, [pc, #92]	; (8023554 <MBX_MailboxReadInd+0xc8>)
 80234f8:	781b      	ldrb	r3, [r3, #0]
 80234fa:	f003 0302 	and.w	r3, r3, #2
 80234fe:	2b00      	cmp	r3, #0
 8023500:	d01a      	beq.n	8023538 <MBX_MailboxReadInd+0xac>
        {
           UINT8 result = 0;
 8023502:	2300      	movs	r3, #0
 8023504:	70fb      	strb	r3, [r7, #3]
            /* reset the flag indicating that CoE service to be sent was stored */
            u8MailboxSendReqStored &= ~COE_SERVICE;
 8023506:	4b13      	ldr	r3, [pc, #76]	; (8023554 <MBX_MailboxReadInd+0xc8>)
 8023508:	781b      	ldrb	r3, [r3, #0]
 802350a:	f023 0302 	bic.w	r3, r3, #2
 802350e:	b2da      	uxtb	r2, r3
 8023510:	4b10      	ldr	r3, [pc, #64]	; (8023554 <MBX_MailboxReadInd+0xc8>)
 8023512:	701a      	strb	r2, [r3, #0]

            /* call CoE function that will send the stored CoE service */
            result = COE_ContinueInd(psWriteMbx);
 8023514:	4b10      	ldr	r3, [pc, #64]	; (8023558 <MBX_MailboxReadInd+0xcc>)
 8023516:	681b      	ldr	r3, [r3, #0]
 8023518:	4618      	mov	r0, r3
 802351a:	f7fd fded 	bl	80210f8 <COE_ContinueInd>
 802351e:	4603      	mov	r3, r0
 8023520:	70fb      	strb	r3, [r7, #3]

            if (result != 0)
 8023522:	78fb      	ldrb	r3, [r7, #3]
 8023524:	2b00      	cmp	r3, #0
 8023526:	d007      	beq.n	8023538 <MBX_MailboxReadInd+0xac>
            {
                /*Set the pending CoE indication is an error occurred during the continue indication*/
                u8MailboxSendReqStored |= COE_SERVICE;
 8023528:	4b0a      	ldr	r3, [pc, #40]	; (8023554 <MBX_MailboxReadInd+0xc8>)
 802352a:	781b      	ldrb	r3, [r3, #0]
 802352c:	f043 0302 	orr.w	r3, r3, #2
 8023530:	b2da      	uxtb	r2, r3
 8023532:	4b08      	ldr	r3, [pc, #32]	; (8023554 <MBX_MailboxReadInd+0xc8>)
 8023534:	701a      	strb	r2, [r3, #0]
 8023536:	e7ff      	b.n	8023538 <MBX_MailboxReadInd+0xac>
        }
        else
        {
        }
    }
}
 8023538:	3708      	adds	r7, #8
 802353a:	46bd      	mov	sp, r7
 802353c:	bd80      	pop	{r7, pc}
 802353e:	bf00      	nop
 8023540:	1fff27f5 	.word	0x1fff27f5
 8023544:	1fff2818 	.word	0x1fff2818
 8023548:	1fff27fc 	.word	0x1fff27fc
 802354c:	1fff2804 	.word	0x1fff2804
 8023550:	1fff278c 	.word	0x1fff278c
 8023554:	1fff2811 	.word	0x1fff2811
 8023558:	1fff280c 	.word	0x1fff280c

0802355c <MBX_MailboxRepeatReq>:
 \brief This function is called if the Master has requested a resending of the last
 \brief sent mailbox
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxRepeatReq(void)
{
 802355c:	b580      	push	{r7, lr}
 802355e:	b082      	sub	sp, #8
 8023560:	af00      	add	r7, sp, #0
    if (psRepeatMbx)
 8023562:	4b1a      	ldr	r3, [pc, #104]	; (80235cc <MBX_MailboxRepeatReq+0x70>)
 8023564:	681b      	ldr	r3, [r3, #0]
 8023566:	2b00      	cmp	r3, #0
 8023568:	d01d      	beq.n	80235a6 <MBX_MailboxRepeatReq+0x4a>
    {
        TMBX MBXMEM *pMbx = psRepeatMbx;
 802356a:	4b18      	ldr	r3, [pc, #96]	; (80235cc <MBX_MailboxRepeatReq+0x70>)
 802356c:	681b      	ldr	r3, [r3, #0]
 802356e:	607b      	str	r3, [r7, #4]
        /* HBu 13.10.06: if a repeat request is received (again) before the previously repeated mailbox telegram
           was read from the master (psStoreMbx != NULL) the next mailbox telegram to be sent is still in the
            read mailbox so it has not to updated exchanged */
        ENTER_MBX_CRITICAL;

       if (bSendMbxIsFull && psStoreMbx == NULL)
 8023570:	4b17      	ldr	r3, [pc, #92]	; (80235d0 <MBX_MailboxRepeatReq+0x74>)
 8023572:	781b      	ldrb	r3, [r3, #0]
 8023574:	2b00      	cmp	r3, #0
 8023576:	d010      	beq.n	802359a <MBX_MailboxRepeatReq+0x3e>
 8023578:	4b16      	ldr	r3, [pc, #88]	; (80235d4 <MBX_MailboxRepeatReq+0x78>)
 802357a:	681b      	ldr	r3, [r3, #0]
 802357c:	2b00      	cmp	r3, #0
 802357e:	d10c      	bne.n	802359a <MBX_MailboxRepeatReq+0x3e>
        {
            /* mailbox is full, take the buffer off */
/*ECATCHANGE_START(V5.11) HW1*/
            DisableSyncManChannel(MAILBOX_READ);
 8023580:	2001      	movs	r0, #1
 8023582:	f7fd febb 	bl	80212fc <DisableSyncManChannel>

            /* store the buffer to be sent next */
            psStoreMbx = psReadMbx;
 8023586:	4b14      	ldr	r3, [pc, #80]	; (80235d8 <MBX_MailboxRepeatReq+0x7c>)
 8023588:	681b      	ldr	r3, [r3, #0]
 802358a:	4a12      	ldr	r2, [pc, #72]	; (80235d4 <MBX_MailboxRepeatReq+0x78>)
 802358c:	6013      	str	r3, [r2, #0]
            /* enable the mailbox again */
            EnableSyncManChannel(MAILBOX_READ);
 802358e:	2001      	movs	r0, #1
 8023590:	f7fd fede 	bl	8021350 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/

            /* HBu 15.02.06: flag has to be reset otherwise the mailbox service
                             will not be copied by MBX_CopyToSendMailbox */
            bSendMbxIsFull = FALSE;
 8023594:	4b0e      	ldr	r3, [pc, #56]	; (80235d0 <MBX_MailboxRepeatReq+0x74>)
 8023596:	2200      	movs	r2, #0
 8023598:	701a      	strb	r2, [r3, #0]
        }


        MBX_CopyToSendMailbox(pMbx);
 802359a:	6878      	ldr	r0, [r7, #4]
 802359c:	f000 f92e 	bl	80237fc <MBX_CopyToSendMailbox>
        // HBu 17.06.06: psRepeatMbx has to be set to 0, when it was repeated, otherwise it would be returned twice
        // to the empty queue (MAILBOX_QUEUE=1) or a buffer get lost, if the the next repeat request will happen before
        // the repeated buffer was read
        psRepeatMbx = NULL;
 80235a0:	4b0a      	ldr	r3, [pc, #40]	; (80235cc <MBX_MailboxRepeatReq+0x70>)
 80235a2:	2200      	movs	r2, #0
 80235a4:	601a      	str	r2, [r3, #0]
        LEAVE_MBX_CRITICAL;
    }

    // Repeat was finished, toggle the acknowledge bit
    bMbxRepeatToggle = !bMbxRepeatToggle;
 80235a6:	4b0d      	ldr	r3, [pc, #52]	; (80235dc <MBX_MailboxRepeatReq+0x80>)
 80235a8:	781b      	ldrb	r3, [r3, #0]
 80235aa:	2b00      	cmp	r3, #0
 80235ac:	bf14      	ite	ne
 80235ae:	2301      	movne	r3, #1
 80235b0:	2300      	moveq	r3, #0
 80235b2:	b2db      	uxtb	r3, r3
 80235b4:	f083 0301 	eor.w	r3, r3, #1
 80235b8:	b2db      	uxtb	r3, r3
 80235ba:	f003 0301 	and.w	r3, r3, #1
 80235be:	b2da      	uxtb	r2, r3
 80235c0:	4b06      	ldr	r3, [pc, #24]	; (80235dc <MBX_MailboxRepeatReq+0x80>)
 80235c2:	701a      	strb	r2, [r3, #0]
}
 80235c4:	3708      	adds	r7, #8
 80235c6:	46bd      	mov	sp, r7
 80235c8:	bd80      	pop	{r7, pc}
 80235ca:	bf00      	nop
 80235cc:	1fff2818 	.word	0x1fff2818
 80235d0:	1fff27f5 	.word	0x1fff27f5
 80235d4:	1fff27fc 	.word	0x1fff27fc
 80235d8:	1fff2804 	.word	0x1fff2804
 80235dc:	1fff2814 	.word	0x1fff2814

080235e0 <MBX_MailboxSendReq>:

 \brief        This function puts a new Mailbox service in the Send Mailbox
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MBX_MailboxSendReq( TMBX MBXMEM * pMbx, UINT8 flags )
{
 80235e0:	b580      	push	{r7, lr}
 80235e2:	b084      	sub	sp, #16
 80235e4:	af00      	add	r7, sp, #0
 80235e6:	6078      	str	r0, [r7, #4]
 80235e8:	460b      	mov	r3, r1
 80235ea:	70fb      	strb	r3, [r7, #3]
    UINT8 result = 0;
 80235ec:	2300      	movs	r3, #0
 80235ee:	73fb      	strb	r3, [r7, #15]

    /* HBu 06.02.06: in INIT-state a mailbox send request shall be refused */
    if ( (nAlStatus & STATE_MASK) == STATE_INIT )
 80235f0:	4b2c      	ldr	r3, [pc, #176]	; (80236a4 <MBX_MailboxSendReq+0xc4>)
 80235f2:	781b      	ldrb	r3, [r3, #0]
 80235f4:	f003 030f 	and.w	r3, r3, #15
 80235f8:	2b01      	cmp	r3, #1
 80235fa:	d101      	bne.n	8023600 <MBX_MailboxSendReq+0x20>
        return ERROR_INVALIDSTATE;
 80235fc:	23f0      	movs	r3, #240	; 0xf0
 80235fe:	e04d      	b.n	802369c <MBX_MailboxSendReq+0xbc>
    ENTER_MBX_CRITICAL;
    DISABLE_MBX_INT;

    /* the counter in the mailbox header has to be incremented with every new mailbox service to be sent
       if the mailbox data link layer is supported (software switch MAILBOX_REPEAT_SUPPORTED set)*/
    pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] &= ~MBX_MASK_COUNTER;
 8023600:	687b      	ldr	r3, [r7, #4]
 8023602:	795b      	ldrb	r3, [r3, #5]
 8023604:	f003 030f 	and.w	r3, r3, #15
 8023608:	b2da      	uxtb	r2, r3
 802360a:	687b      	ldr	r3, [r7, #4]
 802360c:	715a      	strb	r2, [r3, #5]
    /* HBu 13.02.06: Repeat-Counter was incremented too much if the mailbox service could not be sent */
    /* u8MbxCounter holds the actual counter for the mailbox header, only the values
       1-7 are allowed if the mailbox data link layer is supported  */
    if ( (u8MbxReadCounter & 0x07) == 0 )
 802360e:	4b26      	ldr	r3, [pc, #152]	; (80236a8 <MBX_MailboxSendReq+0xc8>)
 8023610:	781b      	ldrb	r3, [r3, #0]
 8023612:	f003 0307 	and.w	r3, r3, #7
 8023616:	2b00      	cmp	r3, #0
 8023618:	d102      	bne.n	8023620 <MBX_MailboxSendReq+0x40>
        u8MbxReadCounter = 1;
 802361a:	4b23      	ldr	r3, [pc, #140]	; (80236a8 <MBX_MailboxSendReq+0xc8>)
 802361c:	2201      	movs	r2, #1
 802361e:	701a      	strb	r2, [r3, #0]

    pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] |= u8MbxReadCounter << MBX_SHIFT_COUNTER;
 8023620:	687b      	ldr	r3, [r7, #4]
 8023622:	795b      	ldrb	r3, [r3, #5]
 8023624:	b2da      	uxtb	r2, r3
 8023626:	4b20      	ldr	r3, [pc, #128]	; (80236a8 <MBX_MailboxSendReq+0xc8>)
 8023628:	781b      	ldrb	r3, [r3, #0]
 802362a:	011b      	lsls	r3, r3, #4
 802362c:	b2db      	uxtb	r3, r3
 802362e:	4313      	orrs	r3, r2
 8023630:	b2db      	uxtb	r3, r3
 8023632:	b2da      	uxtb	r2, r3
 8023634:	687b      	ldr	r3, [r7, #4]
 8023636:	715a      	strb	r2, [r3, #5]

    /* try to copy the mailbox command in the ESC */
    if ( MBX_CopyToSendMailbox(pMbx) != 0 )
 8023638:	6878      	ldr	r0, [r7, #4]
 802363a:	f000 f8df 	bl	80237fc <MBX_CopyToSendMailbox>
 802363e:	4603      	mov	r3, r0
 8023640:	2b00      	cmp	r3, #0
 8023642:	d014      	beq.n	802366e <MBX_MailboxSendReq+0x8e>
    {
        /* no success, send mailbox was full, set flag  */
        result = PutInMbxQueue(pMbx, &sMbxSendQueue);
 8023644:	6878      	ldr	r0, [r7, #4]
 8023646:	4919      	ldr	r1, [pc, #100]	; (80236ac <MBX_MailboxSendReq+0xcc>)
 8023648:	f7ff fcc2 	bl	8022fd0 <PutInMbxQueue>
 802364c:	4603      	mov	r3, r0
 802364e:	73fb      	strb	r3, [r7, #15]
        if (result != 0)
 8023650:	7bfb      	ldrb	r3, [r7, #15]
 8023652:	2b00      	cmp	r3, #0
 8023654:	d004      	beq.n	8023660 <MBX_MailboxSendReq+0x80>
            flags |= FRAGMENTS_FOLLOW;
 8023656:	78fb      	ldrb	r3, [r7, #3]
 8023658:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802365c:	70fb      	strb	r3, [r7, #3]
 802365e:	e00c      	b.n	802367a <MBX_MailboxSendReq+0x9a>
        else
            u8MbxReadCounter++;
 8023660:	4b11      	ldr	r3, [pc, #68]	; (80236a8 <MBX_MailboxSendReq+0xc8>)
 8023662:	781b      	ldrb	r3, [r3, #0]
 8023664:	3301      	adds	r3, #1
 8023666:	b2da      	uxtb	r2, r3
 8023668:	4b0f      	ldr	r3, [pc, #60]	; (80236a8 <MBX_MailboxSendReq+0xc8>)
 802366a:	701a      	strb	r2, [r3, #0]
 802366c:	e005      	b.n	802367a <MBX_MailboxSendReq+0x9a>
    }
    /* HBu 13.02.06: Repeat-Counter was incremented too much if the mailbox service could not be sent */
    else
    {
        u8MbxReadCounter++;
 802366e:	4b0e      	ldr	r3, [pc, #56]	; (80236a8 <MBX_MailboxSendReq+0xc8>)
 8023670:	781b      	ldrb	r3, [r3, #0]
 8023672:	3301      	adds	r3, #1
 8023674:	b2da      	uxtb	r2, r3
 8023676:	4b0c      	ldr	r3, [pc, #48]	; (80236a8 <MBX_MailboxSendReq+0xc8>)
 8023678:	701a      	strb	r2, [r3, #0]
    }

    if ( flags & FRAGMENTS_FOLLOW )
 802367a:	78fb      	ldrb	r3, [r7, #3]
 802367c:	b25b      	sxtb	r3, r3
 802367e:	2b00      	cmp	r3, #0
 8023680:	da0b      	bge.n	802369a <MBX_MailboxSendReq+0xba>
    {
        /* store the mailbox service that the corresponding XXX_ContinueInd function will
           be called when the send mailbox will have been read by the master because there
           are mailbox commands to be sent for this service */
        u8MailboxSendReqStored |= (flags & ((UINT8) ~FRAGMENTS_FOLLOW));
 8023682:	78fb      	ldrb	r3, [r7, #3]
 8023684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8023688:	b2da      	uxtb	r2, r3
 802368a:	4b09      	ldr	r3, [pc, #36]	; (80236b0 <MBX_MailboxSendReq+0xd0>)
 802368c:	781b      	ldrb	r3, [r3, #0]
 802368e:	b2db      	uxtb	r3, r3
 8023690:	4313      	orrs	r3, r2
 8023692:	b2db      	uxtb	r3, r3
 8023694:	b2da      	uxtb	r2, r3
 8023696:	4b06      	ldr	r3, [pc, #24]	; (80236b0 <MBX_MailboxSendReq+0xd0>)
 8023698:	701a      	strb	r2, [r3, #0]
    }

    ENABLE_MBX_INT;
    LEAVE_MBX_CRITICAL;

    return result;
 802369a:	7bfb      	ldrb	r3, [r7, #15]
}
 802369c:	4618      	mov	r0, r3
 802369e:	3710      	adds	r7, #16
 80236a0:	46bd      	mov	sp, r7
 80236a2:	bd80      	pop	{r7, pc}
 80236a4:	1fff2541 	.word	0x1fff2541
 80236a8:	1fff2788 	.word	0x1fff2788
 80236ac:	1fff278c 	.word	0x1fff278c
 80236b0:	1fff2811 	.word	0x1fff2811

080236b4 <MBX_CheckAndCopyMailbox>:

        Also the contents of the Receive Mailbox will be copied in the variable sMbx.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_CheckAndCopyMailbox( void )
{
 80236b4:	b580      	push	{r7, lr}
 80236b6:	b084      	sub	sp, #16
 80236b8:	af00      	add	r7, sp, #0
    UINT16 mbxLen;

    /* get the size of the received mailbox command and acknowledge the event*/
    HW_EscReadWord(mbxLen,u16EscAddrReceiveMbx);
 80236ba:	4b46      	ldr	r3, [pc, #280]	; (80237d4 <MBX_CheckAndCopyMailbox+0x120>)
 80236bc:	881b      	ldrh	r3, [r3, #0]
 80236be:	085b      	lsrs	r3, r3, #1
 80236c0:	b29b      	uxth	r3, r3
 80236c2:	005b      	lsls	r3, r3, #1
 80236c4:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 80236c8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80236cc:	881b      	ldrh	r3, [r3, #0]
 80236ce:	81fb      	strh	r3, [r7, #14]
    
    /* the size has to be swapped here, all other bytes of the mailbox service will be swapped later */
    mbxLen = SWAPWORD(mbxLen);

/* ECATCHANGE_START(V5.11) MBX2*/
    if(bNoMbxMemoryAvailable == TRUE)
 80236d0:	4b41      	ldr	r3, [pc, #260]	; (80237d8 <MBX_CheckAndCopyMailbox+0x124>)
 80236d2:	781b      	ldrb	r3, [r3, #0]
 80236d4:	2b00      	cmp	r3, #0
 80236d6:	d023      	beq.n	8023720 <MBX_CheckAndCopyMailbox+0x6c>
    {
        /* Return a no memory error in case of any mailbox request*/
        TMBX MBXMEM *pMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(10); /* a mailbox error datagram length*/
 80236d8:	200a      	movs	r0, #10
 80236da:	f004 fdb3 	bl	8028244 <malloc>
 80236de:	4603      	mov	r3, r0
 80236e0:	60bb      	str	r3, [r7, #8]

        if(pMbx != NULL)
 80236e2:	68bb      	ldr	r3, [r7, #8]
 80236e4:	2b00      	cmp	r3, #0
 80236e6:	d01b      	beq.n	8023720 <MBX_CheckAndCopyMailbox+0x6c>
        {
            HMEMSET(pMbx,0x00,10);
 80236e8:	68b8      	ldr	r0, [r7, #8]
 80236ea:	2100      	movs	r1, #0
 80236ec:	220a      	movs	r2, #10
 80236ee:	f004 fdc4 	bl	802827a <memset>

            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 80236f2:	68bb      	ldr	r3, [r7, #8]
 80236f4:	2204      	movs	r2, #4
 80236f6:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~(MBX_MASK_TYPE);
 80236f8:	68bb      	ldr	r3, [r7, #8]
 80236fa:	795b      	ldrb	r3, [r3, #5]
 80236fc:	f023 030f 	bic.w	r3, r3, #15
 8023700:	b2da      	uxtb	r2, r3
 8023702:	68bb      	ldr	r3, [r7, #8]
 8023704:	715a      	strb	r2, [r3, #5]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 8023706:	68bb      	ldr	r3, [r7, #8]
 8023708:	2201      	movs	r2, #1
 802370a:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(MBXERR_NOMOREMEMORY);
 802370c:	68bb      	ldr	r3, [r7, #8]
 802370e:	2207      	movs	r2, #7
 8023710:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 8023712:	68b8      	ldr	r0, [r7, #8]
 8023714:	2100      	movs	r1, #0
 8023716:	f7ff ff63 	bl	80235e0 <MBX_MailboxSendReq>

            APPL_FreeMailboxBuffer(pMbx);
 802371a:	68b8      	ldr	r0, [r7, #8]
 802371c:	f004 fd9a 	bl	8028254 <free>
        }
    }
/* ECATCHANGE_END(V5.11) MBX2*/
    /* the length of the mailbox data is in the first two bytes of the mailbox,
       so the length of the mailbox header has to be added */
    mbxLen += MBX_HEADER_SIZE;
 8023720:	89fb      	ldrh	r3, [r7, #14]
 8023722:	3306      	adds	r3, #6
 8023724:	81fb      	strh	r3, [r7, #14]

    /* in this example there are only two mailbox buffers available in the firmware (one for processing and
       one to stored the last sent response for a possible repeat request), so a
       received mailbox service can only be processed if a free buffer is available */
    if ( ( bSendMbxIsFull )                /* a received mailbox service will not be processed
 8023726:	4b2d      	ldr	r3, [pc, #180]	; (80237dc <MBX_CheckAndCopyMailbox+0x128>)
 8023728:	781b      	ldrb	r3, [r3, #0]
 802372a:	2b00      	cmp	r3, #0
 802372c:	d103      	bne.n	8023736 <MBX_CheckAndCopyMailbox+0x82>
                                                    as long as the send mailbox is still full
                                                    (waits to be read from the master) */
        ||( u8MailboxSendReqStored )    /* a mailbox service to be sent is still stored
 802372e:	4b2c      	ldr	r3, [pc, #176]	; (80237e0 <MBX_CheckAndCopyMailbox+0x12c>)
 8023730:	781b      	ldrb	r3, [r3, #0]
 8023732:	2b00      	cmp	r3, #0
 8023734:	d003      	beq.n	802373e <MBX_CheckAndCopyMailbox+0x8a>
                                                    until all stored mailbox services are sent */
        )
    {
        /* set flag that the processing of the mailbox service will be checked in the
            function MBX_Main (called from ECAT_Main) */
        bReceiveMbxIsLocked = TRUE;
 8023736:	4b2b      	ldr	r3, [pc, #172]	; (80237e4 <MBX_CheckAndCopyMailbox+0x130>)
 8023738:	2201      	movs	r2, #1
 802373a:	701a      	strb	r2, [r3, #0]
 802373c:	e046      	b.n	80237cc <MBX_CheckAndCopyMailbox+0x118>
    }
    else
    {
        /* received mailbox command can be processed, reset flag */
        bReceiveMbxIsLocked = FALSE;
 802373e:	4b29      	ldr	r3, [pc, #164]	; (80237e4 <MBX_CheckAndCopyMailbox+0x130>)
 8023740:	2200      	movs	r2, #0
 8023742:	701a      	strb	r2, [r3, #0]

        /* if the read mailbox size is too big for the buffer, set the copy size to the maximum buffer size, otherwise
           memory could be overwritten,
           the evaluation of the mailbox size will be done in the mailbox protocols called from MBX_WriteMailboxInd */

        if (mbxLen > u16ReceiveMbxSize)
 8023744:	4b28      	ldr	r3, [pc, #160]	; (80237e8 <MBX_CheckAndCopyMailbox+0x134>)
 8023746:	881b      	ldrh	r3, [r3, #0]
 8023748:	89fa      	ldrh	r2, [r7, #14]
 802374a:	429a      	cmp	r2, r3
 802374c:	d902      	bls.n	8023754 <MBX_CheckAndCopyMailbox+0xa0>
            mbxLen = u16ReceiveMbxSize;
 802374e:	4b26      	ldr	r3, [pc, #152]	; (80237e8 <MBX_CheckAndCopyMailbox+0x134>)
 8023750:	881b      	ldrh	r3, [r3, #0]
 8023752:	81fb      	strh	r3, [r7, #14]

        psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(u16ReceiveMbxSize);
 8023754:	4b24      	ldr	r3, [pc, #144]	; (80237e8 <MBX_CheckAndCopyMailbox+0x134>)
 8023756:	881b      	ldrh	r3, [r3, #0]
 8023758:	4618      	mov	r0, r3
 802375a:	f004 fd73 	bl	8028244 <malloc>
 802375e:	4603      	mov	r3, r0
 8023760:	461a      	mov	r2, r3
 8023762:	4b22      	ldr	r3, [pc, #136]	; (80237ec <MBX_CheckAndCopyMailbox+0x138>)
 8023764:	601a      	str	r2, [r3, #0]

        /* if there is no more memory for mailbox buffer, the mailbox should not be read */
        if (psWriteMbx == NULL)
 8023766:	4b21      	ldr	r3, [pc, #132]	; (80237ec <MBX_CheckAndCopyMailbox+0x138>)
 8023768:	681b      	ldr	r3, [r3, #0]
 802376a:	2b00      	cmp	r3, #0
 802376c:	d103      	bne.n	8023776 <MBX_CheckAndCopyMailbox+0xc2>
        {
            /* set flag that the processing of the mailbox service will be checked in the
                function MBX_Main (called from ECAT_Main) */
            bReceiveMbxIsLocked = TRUE;
 802376e:	4b1d      	ldr	r3, [pc, #116]	; (80237e4 <MBX_CheckAndCopyMailbox+0x130>)
 8023770:	2201      	movs	r2, #1
 8023772:	701a      	strb	r2, [r3, #0]
            return;
 8023774:	e02a      	b.n	80237cc <MBX_CheckAndCopyMailbox+0x118>
        }
        /* copy the mailbox header and data*/
        HW_EscReadMbxMem((MEM_ADDR MBXMEM *) psWriteMbx,u16EscAddrReceiveMbx,mbxLen);
 8023776:	4b1d      	ldr	r3, [pc, #116]	; (80237ec <MBX_CheckAndCopyMailbox+0x138>)
 8023778:	6819      	ldr	r1, [r3, #0]
 802377a:	4b16      	ldr	r3, [pc, #88]	; (80237d4 <MBX_CheckAndCopyMailbox+0x120>)
 802377c:	881a      	ldrh	r2, [r3, #0]
 802377e:	89fb      	ldrh	r3, [r7, #14]
 8023780:	4608      	mov	r0, r1
 8023782:	4611      	mov	r1, r2
 8023784:	461a      	mov	r2, r3
 8023786:	f7ff fbe9 	bl	8022f5c <HW_EscReadMbxMem>


        {
        /*Read Control and Status of SyncManager 0 to check if the buffer is unlocked*/
        VARVOLATILE UINT8 smstate = 0x00;
 802378a:	2300      	movs	r3, #0
 802378c:	71fb      	strb	r3, [r7, #7]
        HW_EscReadByte(smstate,ESC_SYNCMAN_STATUS_OFFSET);
 802378e:	4b18      	ldr	r3, [pc, #96]	; (80237f0 <MBX_CheckAndCopyMailbox+0x13c>)
 8023790:	781b      	ldrb	r3, [r3, #0]
 8023792:	b2db      	uxtb	r3, r3
 8023794:	71fb      	strb	r3, [r7, #7]

        if(smstate & SM_STATUS_MBX_BUFFER_FULL)
 8023796:	79fb      	ldrb	r3, [r7, #7]
 8023798:	b2db      	uxtb	r3, r3
 802379a:	f003 0308 	and.w	r3, r3, #8
 802379e:	2b00      	cmp	r3, #0
 80237a0:	d00f      	beq.n	80237c2 <MBX_CheckAndCopyMailbox+0x10e>
        {
            /*Unlock the mailbox SyncManger buffer*/
            u8dummy = 0;
 80237a2:	4b14      	ldr	r3, [pc, #80]	; (80237f4 <MBX_CheckAndCopyMailbox+0x140>)
 80237a4:	2200      	movs	r2, #0
 80237a6:	701a      	strb	r2, [r3, #0]
            HW_EscReadByte(u8dummy,(u16EscAddrReceiveMbx + u16ReceiveMbxSize - 1));
 80237a8:	4b0a      	ldr	r3, [pc, #40]	; (80237d4 <MBX_CheckAndCopyMailbox+0x120>)
 80237aa:	881b      	ldrh	r3, [r3, #0]
 80237ac:	461a      	mov	r2, r3
 80237ae:	4b0e      	ldr	r3, [pc, #56]	; (80237e8 <MBX_CheckAndCopyMailbox+0x134>)
 80237b0:	881b      	ldrh	r3, [r3, #0]
 80237b2:	4413      	add	r3, r2
 80237b4:	461a      	mov	r2, r3
 80237b6:	4b10      	ldr	r3, [pc, #64]	; (80237f8 <MBX_CheckAndCopyMailbox+0x144>)
 80237b8:	4413      	add	r3, r2
 80237ba:	781b      	ldrb	r3, [r3, #0]
 80237bc:	b2da      	uxtb	r2, r3
 80237be:	4b0d      	ldr	r3, [pc, #52]	; (80237f4 <MBX_CheckAndCopyMailbox+0x140>)
 80237c0:	701a      	strb	r2, [r3, #0]
        }

        }

        /* in MBX_MailboxWriteInd the mailbox protocol will be processed */
        MBX_MailboxWriteInd( psWriteMbx );
 80237c2:	4b0a      	ldr	r3, [pc, #40]	; (80237ec <MBX_CheckAndCopyMailbox+0x138>)
 80237c4:	681b      	ldr	r3, [r3, #0]
 80237c6:	4618      	mov	r0, r3
 80237c8:	f7ff fe02 	bl	80233d0 <MBX_MailboxWriteInd>

    }
}
 80237cc:	3710      	adds	r7, #16
 80237ce:	46bd      	mov	sp, r7
 80237d0:	bd80      	pop	{r7, pc}
 80237d2:	bf00      	nop
 80237d4:	1fff27f8 	.word	0x1fff27f8
 80237d8:	1fff27f4 	.word	0x1fff27f4
 80237dc:	1fff27f5 	.word	0x1fff27f5
 80237e0:	1fff2811 	.word	0x1fff2811
 80237e4:	1fff2808 	.word	0x1fff2808
 80237e8:	1fff2812 	.word	0x1fff2812
 80237ec:	1fff280c 	.word	0x1fff280c
 80237f0:	54010805 	.word	0x54010805
 80237f4:	1fff2558 	.word	0x1fff2558
 80237f8:	5400ffff 	.word	0x5400ffff

080237fc <MBX_CopyToSendMailbox>:

 \brief    This function copies data to the Send Mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MBX_CopyToSendMailbox( TMBX MBXMEM *pMbx )
{
 80237fc:	b580      	push	{r7, lr}
 80237fe:	b084      	sub	sp, #16
 8023800:	af00      	add	r7, sp, #0
 8023802:	6078      	str	r0, [r7, #4]
    if ( (nAlStatus & STATE_MASK) == STATE_INIT)
 8023804:	4b2a      	ldr	r3, [pc, #168]	; (80238b0 <MBX_CopyToSendMailbox+0xb4>)
 8023806:	781b      	ldrb	r3, [r3, #0]
 8023808:	f003 030f 	and.w	r3, r3, #15
 802380c:	2b01      	cmp	r3, #1
 802380e:	d101      	bne.n	8023814 <MBX_CopyToSendMailbox+0x18>
    {
        /* the mailbox is disabled if the slave is in the INIT state */
        return( ERROR_INVALIDSTATE );
 8023810:	23f0      	movs	r3, #240	; 0xf0
 8023812:	e049      	b.n	80238a8 <MBX_CopyToSendMailbox+0xac>
    }


    if ( !bMbxRunning )
 8023814:	4b27      	ldr	r3, [pc, #156]	; (80238b4 <MBX_CopyToSendMailbox+0xb8>)
 8023816:	781b      	ldrb	r3, [r3, #0]
 8023818:	f083 0301 	eor.w	r3, r3, #1
 802381c:	b2db      	uxtb	r3, r3
 802381e:	2b00      	cmp	r3, #0
 8023820:	d001      	beq.n	8023826 <MBX_CopyToSendMailbox+0x2a>
    {
        /* the mailbox is disabled if the slave is in the INIT state */
        return( ERROR_INVALIDSTATE );
 8023822:	23f0      	movs	r3, #240	; 0xf0
 8023824:	e040      	b.n	80238a8 <MBX_CopyToSendMailbox+0xac>
    }

    if ( bSendMbxIsFull )
 8023826:	4b24      	ldr	r3, [pc, #144]	; (80238b8 <MBX_CopyToSendMailbox+0xbc>)
 8023828:	781b      	ldrb	r3, [r3, #0]
 802382a:	2b00      	cmp	r3, #0
 802382c:	d001      	beq.n	8023832 <MBX_CopyToSendMailbox+0x36>
    {
        /* mailbox service cannot be sent because the send mailbox is still full */
        return MBXERR_NOMOREMEMORY;
 802382e:	2307      	movs	r3, #7
 8023830:	e03a      	b.n	80238a8 <MBX_CopyToSendMailbox+0xac>
    }
    else
    {
        /* the variable mbxSize contains the size of the mailbox data to be sent */
        UINT16 mbxSize = pMbx->MbxHeader.Length;
 8023832:	687b      	ldr	r3, [r7, #4]
 8023834:	881b      	ldrh	r3, [r3, #0]
 8023836:	81fb      	strh	r3, [r7, #14]
        HW_EscWriteMbxMem((MEM_ADDR *)pMbx, u16EscAddrSendMbx, (mbxSize + MBX_HEADER_SIZE));
 8023838:	4b20      	ldr	r3, [pc, #128]	; (80238bc <MBX_CopyToSendMailbox+0xc0>)
 802383a:	881a      	ldrh	r2, [r3, #0]
 802383c:	89fb      	ldrh	r3, [r7, #14]
 802383e:	3306      	adds	r3, #6
 8023840:	b29b      	uxth	r3, r3
 8023842:	6878      	ldr	r0, [r7, #4]
 8023844:	4611      	mov	r1, r2
 8023846:	461a      	mov	r2, r3
 8023848:	f7ff fbb0 	bl	8022fac <HW_EscWriteMbxMem>
/* ECATCHANGE_HW(V5.10) HW1*/

        {
        /*Read Control and Status of SyncManager 1 to check if the buffer is still marked as empty*/
        VARVOLATILE UINT8 smstate = 0x00;
 802384c:	2300      	movs	r3, #0
 802384e:	737b      	strb	r3, [r7, #13]
        HW_EscReadByte(smstate,(ESC_SYNCMAN_STATUS_OFFSET + SIZEOF_SM_REGISTER));
 8023850:	4b1b      	ldr	r3, [pc, #108]	; (80238c0 <MBX_CopyToSendMailbox+0xc4>)
 8023852:	781b      	ldrb	r3, [r3, #0]
 8023854:	b2db      	uxtb	r3, r3
 8023856:	737b      	strb	r3, [r7, #13]

        if(!(smstate & SM_STATUS_MBX_BUFFER_FULL))
 8023858:	7b7b      	ldrb	r3, [r7, #13]
 802385a:	b2db      	uxtb	r3, r3
 802385c:	f003 0308 	and.w	r3, r3, #8
 8023860:	2b00      	cmp	r3, #0
 8023862:	d10f      	bne.n	8023884 <MBX_CopyToSendMailbox+0x88>
        {

            /*Write last Byte to trigger mailbox full flag*/
            u8dummy = 0;
 8023864:	4b17      	ldr	r3, [pc, #92]	; (80238c4 <MBX_CopyToSendMailbox+0xc8>)
 8023866:	2200      	movs	r2, #0
 8023868:	701a      	strb	r2, [r3, #0]
            HW_EscWriteByte(u8dummy,(u16EscAddrSendMbx + u16SendMbxSize - 1));
 802386a:	4b14      	ldr	r3, [pc, #80]	; (80238bc <MBX_CopyToSendMailbox+0xc0>)
 802386c:	881b      	ldrh	r3, [r3, #0]
 802386e:	461a      	mov	r2, r3
 8023870:	4b15      	ldr	r3, [pc, #84]	; (80238c8 <MBX_CopyToSendMailbox+0xcc>)
 8023872:	881b      	ldrh	r3, [r3, #0]
 8023874:	4413      	add	r3, r2
 8023876:	461a      	mov	r2, r3
 8023878:	4b14      	ldr	r3, [pc, #80]	; (80238cc <MBX_CopyToSendMailbox+0xd0>)
 802387a:	4413      	add	r3, r2
 802387c:	4a11      	ldr	r2, [pc, #68]	; (80238c4 <MBX_CopyToSendMailbox+0xc8>)
 802387e:	7812      	ldrb	r2, [r2, #0]
 8023880:	b2d2      	uxtb	r2, r2
 8023882:	701a      	strb	r2, [r3, #0]
            the other one the actual service to be sent (psReadMbx),
            there is no buffer available for a mailbox receive service
            until the last sent buffer was read from the master
            the exception is after the INIT2PREOP transition, in that
            case there is no last sent service (psReadMbx = 0) */
        if ( psReadMbx )
 8023884:	4b12      	ldr	r3, [pc, #72]	; (80238d0 <MBX_CopyToSendMailbox+0xd4>)
 8023886:	681b      	ldr	r3, [r3, #0]
 8023888:	2b00      	cmp	r3, #0
 802388a:	d003      	beq.n	8023894 <MBX_CopyToSendMailbox+0x98>
            psWriteMbx = NULL;
 802388c:	4b11      	ldr	r3, [pc, #68]	; (80238d4 <MBX_CopyToSendMailbox+0xd8>)
 802388e:	2200      	movs	r2, #0
 8023890:	601a      	str	r2, [r3, #0]
 8023892:	e002      	b.n	802389a <MBX_CopyToSendMailbox+0x9e>
        else
        {
            /* only the first time after the INIT2PREOP-transition */
            psWriteMbx = &asMbx[1];
 8023894:	4b0f      	ldr	r3, [pc, #60]	; (80238d4 <MBX_CopyToSendMailbox+0xd8>)
 8023896:	4a10      	ldr	r2, [pc, #64]	; (80238d8 <MBX_CopyToSendMailbox+0xdc>)
 8023898:	601a      	str	r2, [r3, #0]
        }
        // HBu 17.06.06: psRepeatMbx was already updated in MBX_MailboxReadInd
        // psRepeatMbx = psReadMbx;
        psReadMbx = pMbx;
 802389a:	4a0d      	ldr	r2, [pc, #52]	; (80238d0 <MBX_CopyToSendMailbox+0xd4>)
 802389c:	687b      	ldr	r3, [r7, #4]
 802389e:	6013      	str	r3, [r2, #0]

        /* set flag that send mailbox is full now */
        bSendMbxIsFull = TRUE;
 80238a0:	4b05      	ldr	r3, [pc, #20]	; (80238b8 <MBX_CopyToSendMailbox+0xbc>)
 80238a2:	2201      	movs	r2, #1
 80238a4:	701a      	strb	r2, [r3, #0]


        return 0;
 80238a6:	2300      	movs	r3, #0
    }
}
 80238a8:	4618      	mov	r0, r3
 80238aa:	3710      	adds	r7, #16
 80238ac:	46bd      	mov	sp, r7
 80238ae:	bd80      	pop	{r7, pc}
 80238b0:	1fff2541 	.word	0x1fff2541
 80238b4:	1fff27f6 	.word	0x1fff27f6
 80238b8:	1fff27f5 	.word	0x1fff27f5
 80238bc:	1fff280a 	.word	0x1fff280a
 80238c0:	5401080d 	.word	0x5401080d
 80238c4:	1fff2558 	.word	0x1fff2558
 80238c8:	1fff2800 	.word	0x1fff2800
 80238cc:	5400ffff 	.word	0x5400ffff
 80238d0:	1fff2804 	.word	0x1fff2804
 80238d4:	1fff280c 	.word	0x1fff280c
 80238d8:	1fff2688 	.word	0x1fff2688

080238dc <MBX_Main>:
 \brief    This function is called cyclically to check if a received Mailbox service was
             stored.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_Main(void)
{
 80238dc:	b580      	push	{r7, lr}
 80238de:	b082      	sub	sp, #8
 80238e0:	af00      	add	r7, sp, #0
    TMBX MBXMEM *pMbx = NULL;
 80238e2:	2300      	movs	r3, #0
 80238e4:	603b      	str	r3, [r7, #0]

    do
    {
        UINT8 result = 0;
 80238e6:	2300      	movs	r3, #0
 80238e8:	71fb      	strb	r3, [r7, #7]

        pMbx = GetOutOfMbxQueue(&sMbxReceiveQueue);
 80238ea:	4818      	ldr	r0, [pc, #96]	; (802394c <MBX_Main+0x70>)
 80238ec:	f7ff fb9a 	bl	8023024 <GetOutOfMbxQueue>
 80238f0:	6038      	str	r0, [r7, #0]
        if ( pMbx )
 80238f2:	683b      	ldr	r3, [r7, #0]
 80238f4:	2b00      	cmp	r3, #0
 80238f6:	d004      	beq.n	8023902 <MBX_Main+0x26>
            result = MailboxServiceInd(pMbx);
 80238f8:	6838      	ldr	r0, [r7, #0]
 80238fa:	f7ff fd51 	bl	80233a0 <MailboxServiceInd>
 80238fe:	4603      	mov	r3, r0
 8023900:	71fb      	strb	r3, [r7, #7]

        if ( result != 0 )
 8023902:	79fb      	ldrb	r3, [r7, #7]
 8023904:	2b00      	cmp	r3, #0
 8023906:	d014      	beq.n	8023932 <MBX_Main+0x56>
        {
            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 8023908:	683b      	ldr	r3, [r7, #0]
 802390a:	2204      	movs	r2, #4
 802390c:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~(MBX_MASK_TYPE);
 802390e:	683b      	ldr	r3, [r7, #0]
 8023910:	795b      	ldrb	r3, [r3, #5]
 8023912:	f023 030f 	bic.w	r3, r3, #15
 8023916:	b2da      	uxtb	r2, r3
 8023918:	683b      	ldr	r3, [r7, #0]
 802391a:	715a      	strb	r2, [r3, #5]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 802391c:	683b      	ldr	r3, [r7, #0]
 802391e:	2201      	movs	r2, #1
 8023920:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(result);
 8023922:	79fb      	ldrb	r3, [r7, #7]
 8023924:	b29a      	uxth	r2, r3
 8023926:	683b      	ldr	r3, [r7, #0]
 8023928:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 802392a:	6838      	ldr	r0, [r7, #0]
 802392c:	2100      	movs	r1, #0
 802392e:	f7ff fe57 	bl	80235e0 <MBX_MailboxSendReq>
        }
    }
    while ( pMbx != NULL );
 8023932:	683b      	ldr	r3, [r7, #0]
 8023934:	2b00      	cmp	r3, #0
 8023936:	d1d6      	bne.n	80238e6 <MBX_Main+0xa>



      if ( bReceiveMbxIsLocked )
 8023938:	4b05      	ldr	r3, [pc, #20]	; (8023950 <MBX_Main+0x74>)
 802393a:	781b      	ldrb	r3, [r3, #0]
 802393c:	2b00      	cmp	r3, #0
 802393e:	d001      	beq.n	8023944 <MBX_Main+0x68>
      {
          /* the work on the receive mailbox is locked, check if it can be unlocked (if all
             mailbox commands has been sent */
          MBX_CheckAndCopyMailbox();
 8023940:	f7ff feb8 	bl	80236b4 <MBX_CheckAndCopyMailbox>
      }
}
 8023944:	3708      	adds	r7, #8
 8023946:	46bd      	mov	sp, r7
 8023948:	bd80      	pop	{r7, pc}
 802394a:	bf00      	nop
 802394c:	1fff27c0 	.word	0x1fff27c0
 8023950:	1fff2808 	.word	0x1fff2808

08023954 <OBJ_GetObjectHandle>:
             and returns a handle if found.

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TOBJECT OBJMEM *  OBJ_GetObjectHandle( UINT16 index )
{
 8023954:	b580      	push	{r7, lr}
 8023956:	b084      	sub	sp, #16
 8023958:	af00      	add	r7, sp, #0
 802395a:	4603      	mov	r3, r0
 802395c:	80fb      	strh	r3, [r7, #6]
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 802395e:	f7fc fd19 	bl	8020394 <COE_GetObjectDictionary>
 8023962:	60f8      	str	r0, [r7, #12]

    while (pObjEntry!= NULL)
 8023964:	e009      	b.n	802397a <OBJ_GetObjectHandle+0x26>
    {
        if (pObjEntry->Index == index)
 8023966:	68fb      	ldr	r3, [r7, #12]
 8023968:	891b      	ldrh	r3, [r3, #8]
 802396a:	88fa      	ldrh	r2, [r7, #6]
 802396c:	429a      	cmp	r2, r3
 802396e:	d101      	bne.n	8023974 <OBJ_GetObjectHandle+0x20>
            return pObjEntry;
 8023970:	68fb      	ldr	r3, [r7, #12]
 8023972:	e006      	b.n	8023982 <OBJ_GetObjectHandle+0x2e>
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 8023974:	68fb      	ldr	r3, [r7, #12]
 8023976:	685b      	ldr	r3, [r3, #4]
 8023978:	60fb      	str	r3, [r7, #12]

OBJCONST TOBJECT OBJMEM *  OBJ_GetObjectHandle( UINT16 index )
{
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();

    while (pObjEntry!= NULL)
 802397a:	68fb      	ldr	r3, [r7, #12]
 802397c:	2b00      	cmp	r3, #0
 802397e:	d1f2      	bne.n	8023966 <OBJ_GetObjectHandle+0x12>
    {
        if (pObjEntry->Index == index)
            return pObjEntry;
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
    }
    return 0;
 8023980:	2300      	movs	r3, #0
}
 8023982:	4618      	mov	r0, r3
 8023984:	3710      	adds	r7, #16
 8023986:	46bd      	mov	sp, r7
 8023988:	bd80      	pop	{r7, pc}
 802398a:	bf00      	nop

0802398c <OBJ_GetObjectLength>:

 \brief     This function returns the size of the requested entry. If bCompleteaccess is set the size of the complete object is returned (the returned size is byte packed, gaps based on the used platform/compiler are not taken into account)

*////////////////////////////////////////////////////////////////////////////////////////
UINT32 OBJ_GetObjectLength( UINT16 index, UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT8 bCompleteAccess)
{
 802398c:	b480      	push	{r7}
 802398e:	b085      	sub	sp, #20
 8023990:	af00      	add	r7, sp, #0
 8023992:	603a      	str	r2, [r7, #0]
 8023994:	461a      	mov	r2, r3
 8023996:	4603      	mov	r3, r0
 8023998:	80fb      	strh	r3, [r7, #6]
 802399a:	460b      	mov	r3, r1
 802399c:	717b      	strb	r3, [r7, #5]
 802399e:	4613      	mov	r3, r2
 80239a0:	713b      	strb	r3, [r7, #4]
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 80239a2:	683b      	ldr	r3, [r7, #0]
 80239a4:	899b      	ldrh	r3, [r3, #12]
 80239a6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80239aa:	121b      	asrs	r3, r3, #8
 80239ac:	72bb      	strb	r3, [r7, #10]
    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 80239ae:	683b      	ldr	r3, [r7, #0]
 80239b0:	899b      	ldrh	r3, [r3, #12]
 80239b2:	727b      	strb	r3, [r7, #9]
    UINT32 size = 0;
 80239b4:	2300      	movs	r3, #0
 80239b6:	60fb      	str	r3, [r7, #12]

    if ( bCompleteAccess )
 80239b8:	793b      	ldrb	r3, [r7, #4]
 80239ba:	2b00      	cmp	r3, #0
 80239bc:	d043      	beq.n	8023a46 <OBJ_GetObjectLength+0xba>
    {
        if ( objCode == OBJCODE_VAR )
 80239be:	7abb      	ldrb	r3, [r7, #10]
 80239c0:	2b07      	cmp	r3, #7
 80239c2:	d101      	bne.n	80239c8 <OBJ_GetObjectLength+0x3c>
            return 0;
 80239c4:	2300      	movs	r3, #0
 80239c6:	e061      	b.n	8023a8c <OBJ_GetObjectLength+0x100>
        else if ((objCode == OBJCODE_ARR)
 80239c8:	7abb      	ldrb	r3, [r7, #10]
 80239ca:	2b08      	cmp	r3, #8
 80239cc:	d118      	bne.n	8023a00 <OBJ_GetObjectLength+0x74>
            )
        {

            /* we have to get the maxSubindex from the actual value of subindex 0,
                which is stored as UINT16 at the beginning of the object's variable */
            maxSubindex = (UINT8) ((UINT16 MBXMEM *) (pObjEntry->pVarPtr))[0];
 80239ce:	683b      	ldr	r3, [r7, #0]
 80239d0:	699b      	ldr	r3, [r3, #24]
 80239d2:	881b      	ldrh	r3, [r3, #0]
 80239d4:	727b      	strb	r3, [r7, #9]


            size = pObjEntry->pEntryDesc[1].BitLength *maxSubindex;
 80239d6:	683b      	ldr	r3, [r7, #0]
 80239d8:	691b      	ldr	r3, [r3, #16]
 80239da:	3306      	adds	r3, #6
 80239dc:	885b      	ldrh	r3, [r3, #2]
 80239de:	461a      	mov	r2, r3
 80239e0:	7a7b      	ldrb	r3, [r7, #9]
 80239e2:	fb03 f302 	mul.w	r3, r3, r2
 80239e6:	60fb      	str	r3, [r7, #12]

/* no padding required: Bit entries within an array object may overlap byte borders*/

            /* we have to convert the size in bytes */
            size = BIT2BYTE(size);
 80239e8:	68fb      	ldr	r3, [r7, #12]
 80239ea:	3307      	adds	r3, #7
 80239ec:	08db      	lsrs	r3, r3, #3
 80239ee:	60fb      	str	r3, [r7, #12]

            if ( subindex == 0 )
 80239f0:	797b      	ldrb	r3, [r7, #5]
 80239f2:	2b00      	cmp	r3, #0
 80239f4:	d102      	bne.n	80239fc <OBJ_GetObjectLength+0x70>
            {
                /* add size for subindex 0 (is transmitted as UINT16) */
                size += 2;
 80239f6:	68fb      	ldr	r3, [r7, #12]
 80239f8:	3302      	adds	r3, #2
 80239fa:	60fb      	str	r3, [r7, #12]
            }
            return size;
 80239fc:	68fb      	ldr	r3, [r7, #12]
 80239fe:	e045      	b.n	8023a8c <OBJ_GetObjectLength+0x100>
        else
        {
            UINT8 i;

            /* add the sizes of all entries */
            for (i = 1; i <= maxSubindex; i++)
 8023a00:	2301      	movs	r3, #1
 8023a02:	72fb      	strb	r3, [r7, #11]
 8023a04:	e00f      	b.n	8023a26 <OBJ_GetObjectLength+0x9a>
            {
                size += pObjEntry->pEntryDesc[i].BitLength;
 8023a06:	683b      	ldr	r3, [r7, #0]
 8023a08:	6919      	ldr	r1, [r3, #16]
 8023a0a:	7afa      	ldrb	r2, [r7, #11]
 8023a0c:	4613      	mov	r3, r2
 8023a0e:	005b      	lsls	r3, r3, #1
 8023a10:	4413      	add	r3, r2
 8023a12:	005b      	lsls	r3, r3, #1
 8023a14:	440b      	add	r3, r1
 8023a16:	885b      	ldrh	r3, [r3, #2]
 8023a18:	461a      	mov	r2, r3
 8023a1a:	68fb      	ldr	r3, [r7, #12]
 8023a1c:	4413      	add	r3, r2
 8023a1e:	60fb      	str	r3, [r7, #12]
        else
        {
            UINT8 i;

            /* add the sizes of all entries */
            for (i = 1; i <= maxSubindex; i++)
 8023a20:	7afb      	ldrb	r3, [r7, #11]
 8023a22:	3301      	adds	r3, #1
 8023a24:	72fb      	strb	r3, [r7, #11]
 8023a26:	7afa      	ldrb	r2, [r7, #11]
 8023a28:	7a7b      	ldrb	r3, [r7, #9]
 8023a2a:	429a      	cmp	r2, r3
 8023a2c:	d9eb      	bls.n	8023a06 <OBJ_GetObjectLength+0x7a>
            {
                size += pObjEntry->pEntryDesc[i].BitLength;
            }
            /* we have to convert the size in bytes */
            size = BIT2BYTE(size);
 8023a2e:	68fb      	ldr	r3, [r7, #12]
 8023a30:	3307      	adds	r3, #7
 8023a32:	08db      	lsrs	r3, r3, #3
 8023a34:	60fb      	str	r3, [r7, #12]

            if ( subindex == 0 )
 8023a36:	797b      	ldrb	r3, [r7, #5]
 8023a38:	2b00      	cmp	r3, #0
 8023a3a:	d102      	bne.n	8023a42 <OBJ_GetObjectLength+0xb6>
            {
                /* add size for subindex 0 (is transmitted as UINT16) */
                size += 2;
 8023a3c:	68fb      	ldr	r3, [r7, #12]
 8023a3e:	3302      	adds	r3, #2
 8023a40:	60fb      	str	r3, [r7, #12]
            }
            return size;
 8023a42:	68fb      	ldr	r3, [r7, #12]
 8023a44:	e022      	b.n	8023a8c <OBJ_GetObjectLength+0x100>
        }
    }
    else
    {
        if ( objCode == OBJCODE_VAR )
 8023a46:	7abb      	ldrb	r3, [r7, #10]
 8023a48:	2b07      	cmp	r3, #7
 8023a4a:	d105      	bne.n	8023a58 <OBJ_GetObjectLength+0xcc>
        {
            return (BIT2BYTE(pObjEntry->pEntryDesc->BitLength));
 8023a4c:	683b      	ldr	r3, [r7, #0]
 8023a4e:	691b      	ldr	r3, [r3, #16]
 8023a50:	885b      	ldrh	r3, [r3, #2]
 8023a52:	3307      	adds	r3, #7
 8023a54:	10db      	asrs	r3, r3, #3
 8023a56:	e019      	b.n	8023a8c <OBJ_GetObjectLength+0x100>

        }
        else if ( subindex == 0 )
 8023a58:	797b      	ldrb	r3, [r7, #5]
 8023a5a:	2b00      	cmp	r3, #0
 8023a5c:	d101      	bne.n	8023a62 <OBJ_GetObjectLength+0xd6>
        {
            /* for single access subindex 0 is transmitted as UINT8 */
            return 1;
 8023a5e:	2301      	movs	r3, #1
 8023a60:	e014      	b.n	8023a8c <OBJ_GetObjectLength+0x100>
        }
        else if((objCode == OBJCODE_ARR)
 8023a62:	7abb      	ldrb	r3, [r7, #10]
 8023a64:	2b08      	cmp	r3, #8
 8023a66:	d106      	bne.n	8023a76 <OBJ_GetObjectLength+0xea>
            )
        {
            return (BIT2BYTE(pObjEntry->pEntryDesc[1].BitLength));
 8023a68:	683b      	ldr	r3, [r7, #0]
 8023a6a:	691b      	ldr	r3, [r3, #16]
 8023a6c:	3306      	adds	r3, #6
 8023a6e:	885b      	ldrh	r3, [r3, #2]
 8023a70:	3307      	adds	r3, #7
 8023a72:	10db      	asrs	r3, r3, #3
 8023a74:	e00a      	b.n	8023a8c <OBJ_GetObjectLength+0x100>
        }
        else
        {
                return (BIT2BYTE(pObjEntry->pEntryDesc[subindex].BitLength));
 8023a76:	683b      	ldr	r3, [r7, #0]
 8023a78:	6919      	ldr	r1, [r3, #16]
 8023a7a:	797a      	ldrb	r2, [r7, #5]
 8023a7c:	4613      	mov	r3, r2
 8023a7e:	005b      	lsls	r3, r3, #1
 8023a80:	4413      	add	r3, r2
 8023a82:	005b      	lsls	r3, r3, #1
 8023a84:	440b      	add	r3, r1
 8023a86:	885b      	ldrh	r3, [r3, #2]
 8023a88:	3307      	adds	r3, #7
 8023a8a:	10db      	asrs	r3, r3, #3
        }
    }
}
 8023a8c:	4618      	mov	r0, r3
 8023a8e:	3714      	adds	r7, #20
 8023a90:	46bd      	mov	sp, r7
 8023a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a96:	4770      	bx	lr

08023a98 <OBJ_CopyNumberToString>:
         which shall be initialized with 000

*////////////////////////////////////////////////////////////////////////////////////////

void OBJ_CopyNumberToString(UCHAR MBXMEM *pStr, UINT8 Number)
{
 8023a98:	b490      	push	{r4, r7}
 8023a9a:	b084      	sub	sp, #16
 8023a9c:	af00      	add	r7, sp, #0
 8023a9e:	6078      	str	r0, [r7, #4]
 8023aa0:	460b      	mov	r3, r1
 8023aa2:	70fb      	strb	r3, [r7, #3]
    UINT8 Modulo;

    pStr[2] = '0';
 8023aa4:	687b      	ldr	r3, [r7, #4]
 8023aa6:	3302      	adds	r3, #2
 8023aa8:	2230      	movs	r2, #48	; 0x30
 8023aaa:	701a      	strb	r2, [r3, #0]
    pStr[0] += (Number / 100);
 8023aac:	687b      	ldr	r3, [r7, #4]
 8023aae:	781a      	ldrb	r2, [r3, #0]
 8023ab0:	78fb      	ldrb	r3, [r7, #3]
 8023ab2:	491c      	ldr	r1, [pc, #112]	; (8023b24 <OBJ_CopyNumberToString+0x8c>)
 8023ab4:	fba1 1303 	umull	r1, r3, r1, r3
 8023ab8:	095b      	lsrs	r3, r3, #5
 8023aba:	b2db      	uxtb	r3, r3
 8023abc:	4413      	add	r3, r2
 8023abe:	b2da      	uxtb	r2, r3
 8023ac0:	687b      	ldr	r3, [r7, #4]
 8023ac2:	701a      	strb	r2, [r3, #0]
    Modulo = Number % 100;
 8023ac4:	78fb      	ldrb	r3, [r7, #3]
 8023ac6:	4a17      	ldr	r2, [pc, #92]	; (8023b24 <OBJ_CopyNumberToString+0x8c>)
 8023ac8:	fba2 1203 	umull	r1, r2, r2, r3
 8023acc:	0952      	lsrs	r2, r2, #5
 8023ace:	2164      	movs	r1, #100	; 0x64
 8023ad0:	fb01 f202 	mul.w	r2, r1, r2
 8023ad4:	1a9b      	subs	r3, r3, r2
 8023ad6:	73fb      	strb	r3, [r7, #15]
    pStr[1] += (Modulo / 10);
 8023ad8:	687b      	ldr	r3, [r7, #4]
 8023ada:	3301      	adds	r3, #1
 8023adc:	687a      	ldr	r2, [r7, #4]
 8023ade:	3201      	adds	r2, #1
 8023ae0:	7811      	ldrb	r1, [r2, #0]
 8023ae2:	7bfa      	ldrb	r2, [r7, #15]
 8023ae4:	4810      	ldr	r0, [pc, #64]	; (8023b28 <OBJ_CopyNumberToString+0x90>)
 8023ae6:	fba0 0202 	umull	r0, r2, r0, r2
 8023aea:	08d2      	lsrs	r2, r2, #3
 8023aec:	b2d2      	uxtb	r2, r2
 8023aee:	440a      	add	r2, r1
 8023af0:	b2d2      	uxtb	r2, r2
 8023af2:	701a      	strb	r2, [r3, #0]
    pStr[2] += (Modulo % 10);
 8023af4:	687b      	ldr	r3, [r7, #4]
 8023af6:	1c98      	adds	r0, r3, #2
 8023af8:	687b      	ldr	r3, [r7, #4]
 8023afa:	3302      	adds	r3, #2
 8023afc:	781c      	ldrb	r4, [r3, #0]
 8023afe:	7bfa      	ldrb	r2, [r7, #15]
 8023b00:	4b09      	ldr	r3, [pc, #36]	; (8023b28 <OBJ_CopyNumberToString+0x90>)
 8023b02:	fba3 1302 	umull	r1, r3, r3, r2
 8023b06:	08d9      	lsrs	r1, r3, #3
 8023b08:	460b      	mov	r3, r1
 8023b0a:	009b      	lsls	r3, r3, #2
 8023b0c:	440b      	add	r3, r1
 8023b0e:	005b      	lsls	r3, r3, #1
 8023b10:	1ad3      	subs	r3, r2, r3
 8023b12:	b2db      	uxtb	r3, r3
 8023b14:	4423      	add	r3, r4
 8023b16:	b2db      	uxtb	r3, r3
 8023b18:	7003      	strb	r3, [r0, #0]
}
 8023b1a:	3710      	adds	r7, #16
 8023b1c:	46bd      	mov	sp, r7
 8023b1e:	bc90      	pop	{r4, r7}
 8023b20:	4770      	bx	lr
 8023b22:	bf00      	nop
 8023b24:	51eb851f 	.word	0x51eb851f
 8023b28:	cccccccd 	.word	0xcccccccd

08023b2c <OBJ_GetNoOfObjects>:
 \brief    The function counts the number of objects of the requested list type

*////////////////////////////////////////////////////////////////////////////////////////

UINT16    OBJ_GetNoOfObjects(UINT8 listType)
{
 8023b2c:	b580      	push	{r7, lr}
 8023b2e:	b086      	sub	sp, #24
 8023b30:	af00      	add	r7, sp, #0
 8023b32:	4603      	mov	r3, r0
 8023b34:	71fb      	strb	r3, [r7, #7]
    /* the variable listFlags contains the mask used for the ObjAccess in the Entry-Desc
       see the structure TSDOINFOENTRYDESC in sdoserv.h, listType = 0 indicates that
       all objects has to be counted */
    
    UINT16 listFlags = 0x0020 << listType;
 8023b36:	79fb      	ldrb	r3, [r7, #7]
 8023b38:	2220      	movs	r2, #32
 8023b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8023b3e:	81bb      	strh	r3, [r7, #12]
    
    /* set pObjEntry to the beginning of the object dictionary */
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 8023b40:	f7fc fc28 	bl	8020394 <COE_GetObjectDictionary>
 8023b44:	6178      	str	r0, [r7, #20]
    UINT16 n = 0;
 8023b46:	2300      	movs	r3, #0
 8023b48:	827b      	strh	r3, [r7, #18]


    while (pObjEntry != NULL)
 8023b4a:	e032      	b.n	8023bb2 <OBJ_GetNoOfObjects+0x86>
    {
        /* count the objects of the requested list type */
        if ( pObjEntry->Index >= 0x1000 )
 8023b4c:	697b      	ldr	r3, [r7, #20]
 8023b4e:	891b      	ldrh	r3, [r3, #8]
 8023b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023b54:	d32a      	bcc.n	8023bac <OBJ_GetNoOfObjects+0x80>
        {
            UINT8 t = listType;
 8023b56:	79fb      	ldrb	r3, [r7, #7]
 8023b58:	747b      	strb	r3, [r7, #17]
            if ( t )
 8023b5a:	7c7b      	ldrb	r3, [r7, #17]
 8023b5c:	2b00      	cmp	r3, #0
 8023b5e:	d01f      	beq.n	8023ba0 <OBJ_GetNoOfObjects+0x74>
            {
                UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8023b60:	697b      	ldr	r3, [r7, #20]
 8023b62:	899b      	ldrh	r3, [r3, #12]
 8023b64:	72fb      	strb	r3, [r7, #11]
                UINT16 i = 0;
 8023b66:	2300      	movs	r3, #0
 8023b68:	81fb      	strh	r3, [r7, #14]

                while ( t && i <= maxSubindex )
 8023b6a:	e011      	b.n	8023b90 <OBJ_GetNoOfObjects+0x64>
                {
                    if ( OBJ_GetEntryDesc(pObjEntry,(UINT8) i)->ObjAccess & listFlags )
 8023b6c:	89fb      	ldrh	r3, [r7, #14]
 8023b6e:	b2db      	uxtb	r3, r3
 8023b70:	6978      	ldr	r0, [r7, #20]
 8023b72:	4619      	mov	r1, r3
 8023b74:	f000 f934 	bl	8023de0 <OBJ_GetEntryDesc>
 8023b78:	4603      	mov	r3, r0
 8023b7a:	889a      	ldrh	r2, [r3, #4]
 8023b7c:	89bb      	ldrh	r3, [r7, #12]
 8023b7e:	4013      	ands	r3, r2
 8023b80:	b29b      	uxth	r3, r3
 8023b82:	2b00      	cmp	r3, #0
 8023b84:	d001      	beq.n	8023b8a <OBJ_GetNoOfObjects+0x5e>
                        t = 0;
 8023b86:	2300      	movs	r3, #0
 8023b88:	747b      	strb	r3, [r7, #17]
                    i++;
 8023b8a:	89fb      	ldrh	r3, [r7, #14]
 8023b8c:	3301      	adds	r3, #1
 8023b8e:	81fb      	strh	r3, [r7, #14]
            if ( t )
            {
                UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
                UINT16 i = 0;

                while ( t && i <= maxSubindex )
 8023b90:	7c7b      	ldrb	r3, [r7, #17]
 8023b92:	2b00      	cmp	r3, #0
 8023b94:	d004      	beq.n	8023ba0 <OBJ_GetNoOfObjects+0x74>
 8023b96:	7afb      	ldrb	r3, [r7, #11]
 8023b98:	b29b      	uxth	r3, r3
 8023b9a:	89fa      	ldrh	r2, [r7, #14]
 8023b9c:	429a      	cmp	r2, r3
 8023b9e:	d9e5      	bls.n	8023b6c <OBJ_GetNoOfObjects+0x40>
                    if ( OBJ_GetEntryDesc(pObjEntry,(UINT8) i)->ObjAccess & listFlags )
                        t = 0;
                    i++;
                }
            }
            if ( !t )
 8023ba0:	7c7b      	ldrb	r3, [r7, #17]
 8023ba2:	2b00      	cmp	r3, #0
 8023ba4:	d102      	bne.n	8023bac <OBJ_GetNoOfObjects+0x80>
            {
                /* object from listType found */
                n++;
 8023ba6:	8a7b      	ldrh	r3, [r7, #18]
 8023ba8:	3301      	adds	r3, #1
 8023baa:	827b      	strh	r3, [r7, #18]
            }
        }
        /* next object in object dictionary */
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 8023bac:	697b      	ldr	r3, [r7, #20]
 8023bae:	685b      	ldr	r3, [r3, #4]
 8023bb0:	617b      	str	r3, [r7, #20]
    /* set pObjEntry to the beginning of the object dictionary */
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
    UINT16 n = 0;


    while (pObjEntry != NULL)
 8023bb2:	697b      	ldr	r3, [r7, #20]
 8023bb4:	2b00      	cmp	r3, #0
 8023bb6:	d1c9      	bne.n	8023b4c <OBJ_GetNoOfObjects+0x20>
        }
        /* next object in object dictionary */
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
    }

    return n;
 8023bb8:	8a7b      	ldrh	r3, [r7, #18]
}
 8023bba:	4618      	mov	r0, r3
 8023bbc:	3718      	adds	r7, #24
 8023bbe:	46bd      	mov	sp, r7
 8023bc0:	bd80      	pop	{r7, pc}
 8023bc2:	bf00      	nop

08023bc4 <OBJ_GetObjectList>:

 \brief    The function copies (the part of) the object list in the mailbox buffer

*////////////////////////////////////////////////////////////////////////////////////////
UINT16    OBJ_GetObjectList(UINT16 listType, UINT16 *pIndex, UINT16 size, UINT16 MBXMEM *pData,UINT8 *pAbort)
{
 8023bc4:	b580      	push	{r7, lr}
 8023bc6:	b088      	sub	sp, #32
 8023bc8:	af00      	add	r7, sp, #0
 8023bca:	60b9      	str	r1, [r7, #8]
 8023bcc:	607b      	str	r3, [r7, #4]
 8023bce:	4603      	mov	r3, r0
 8023bd0:	81fb      	strh	r3, [r7, #14]
 8023bd2:	4613      	mov	r3, r2
 8023bd4:	81bb      	strh	r3, [r7, #12]
    /* the variable listFlags contains the mask used for the ObjAccess in the Entry-Desc
       see the structure TSDOINFOENTRYDESC in sdoserv.h, listType = 0 indicates that
       all objects has to be counted */
    UINT16 listFlags = 0x0020 << listType;
 8023bd6:	89fb      	ldrh	r3, [r7, #14]
 8023bd8:	2220      	movs	r2, #32
 8023bda:	fa02 f303 	lsl.w	r3, r2, r3
 8023bde:	82fb      	strh	r3, [r7, #22]
    OBJCONST TOBJECT OBJMEM * pObjEntry;


    if ( pIndex[0] == 0x1000 )
 8023be0:	68bb      	ldr	r3, [r7, #8]
 8023be2:	881b      	ldrh	r3, [r3, #0]
 8023be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023be8:	d10c      	bne.n	8023c04 <OBJ_GetObjectList+0x40>
    {
        /* beginning of object list, set pObjEntry to the beginning of the object dictionary */
       pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 8023bea:	f7fc fbd3 	bl	8020394 <COE_GetObjectDictionary>
 8023bee:	61f8      	str	r0, [r7, #28]
        // set abort code if no object dictionary is available
        if((pObjEntry == NULL) && (pAbort != NULL))
 8023bf0:	69fb      	ldr	r3, [r7, #28]
 8023bf2:	2b00      	cmp	r3, #0
 8023bf4:	d109      	bne.n	8023c0a <OBJ_GetObjectList+0x46>
 8023bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023bf8:	2b00      	cmp	r3, #0
 8023bfa:	d006      	beq.n	8023c0a <OBJ_GetObjectList+0x46>
        {
            *pAbort = ABORTIDX_NO_OBJECT_DICTIONARY_IS_PRESENT;
 8023bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023bfe:	221b      	movs	r2, #27
 8023c00:	701a      	strb	r2, [r3, #0]
 8023c02:	e002      	b.n	8023c0a <OBJ_GetObjectList+0x46>
        }
    }
    else
    {
        /* next fragment, the next object to be handled was stored in pSdoInfoObjEntry */
        pObjEntry = pSdoInfoObjEntry;
 8023c04:	4b2c      	ldr	r3, [pc, #176]	; (8023cb8 <OBJ_GetObjectList+0xf4>)
 8023c06:	681b      	ldr	r3, [r3, #0]
 8023c08:	61fb      	str	r3, [r7, #28]
    }

    if ( pObjEntry != NULL )
 8023c0a:	69fb      	ldr	r3, [r7, #28]
 8023c0c:	2b00      	cmp	r3, #0
 8023c0e:	d03e      	beq.n	8023c8e <OBJ_GetObjectList+0xca>
    {
        while (pObjEntry != NULL && size > 1 )
 8023c10:	e037      	b.n	8023c82 <OBJ_GetObjectList+0xbe>
        {
            /* get the next index of the requested object list if there is enough space in the mailbox buffer */
            if ( pObjEntry->Index >= 0x1000 )
 8023c12:	69fb      	ldr	r3, [r7, #28]
 8023c14:	891b      	ldrh	r3, [r3, #8]
 8023c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023c1a:	d32f      	bcc.n	8023c7c <OBJ_GetObjectList+0xb8>
            {
                /* UINT8 was changed to UINT16 */
                UINT16 t = listType;
 8023c1c:	89fb      	ldrh	r3, [r7, #14]
 8023c1e:	837b      	strh	r3, [r7, #26]
                if ( t )
 8023c20:	8b7b      	ldrh	r3, [r7, #26]
 8023c22:	2b00      	cmp	r3, #0
 8023c24:	d01d      	beq.n	8023c62 <OBJ_GetObjectList+0x9e>
                {
                    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8023c26:	69fb      	ldr	r3, [r7, #28]
 8023c28:	899b      	ldrh	r3, [r3, #12]
 8023c2a:	757b      	strb	r3, [r7, #21]
                    UINT8 i = 0;
 8023c2c:	2300      	movs	r3, #0
 8023c2e:	767b      	strb	r3, [r7, #25]

                    while ( t && i <= maxSubindex )
 8023c30:	e010      	b.n	8023c54 <OBJ_GetObjectList+0x90>
                    {
                        if ( OBJ_GetEntryDesc(pObjEntry, i)->ObjAccess & listFlags )
 8023c32:	7e7b      	ldrb	r3, [r7, #25]
 8023c34:	69f8      	ldr	r0, [r7, #28]
 8023c36:	4619      	mov	r1, r3
 8023c38:	f000 f8d2 	bl	8023de0 <OBJ_GetEntryDesc>
 8023c3c:	4603      	mov	r3, r0
 8023c3e:	889a      	ldrh	r2, [r3, #4]
 8023c40:	8afb      	ldrh	r3, [r7, #22]
 8023c42:	4013      	ands	r3, r2
 8023c44:	b29b      	uxth	r3, r3
 8023c46:	2b00      	cmp	r3, #0
 8023c48:	d001      	beq.n	8023c4e <OBJ_GetObjectList+0x8a>
                            t = 0;
 8023c4a:	2300      	movs	r3, #0
 8023c4c:	837b      	strh	r3, [r7, #26]
                        i++;
 8023c4e:	7e7b      	ldrb	r3, [r7, #25]
 8023c50:	3301      	adds	r3, #1
 8023c52:	767b      	strb	r3, [r7, #25]
                if ( t )
                {
                    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
                    UINT8 i = 0;

                    while ( t && i <= maxSubindex )
 8023c54:	8b7b      	ldrh	r3, [r7, #26]
 8023c56:	2b00      	cmp	r3, #0
 8023c58:	d003      	beq.n	8023c62 <OBJ_GetObjectList+0x9e>
 8023c5a:	7e7a      	ldrb	r2, [r7, #25]
 8023c5c:	7d7b      	ldrb	r3, [r7, #21]
 8023c5e:	429a      	cmp	r2, r3
 8023c60:	d9e7      	bls.n	8023c32 <OBJ_GetObjectList+0x6e>
                        if ( OBJ_GetEntryDesc(pObjEntry, i)->ObjAccess & listFlags )
                            t = 0;
                        i++;
                    }
                }
                if ( !t )
 8023c62:	8b7b      	ldrh	r3, [r7, #26]
 8023c64:	2b00      	cmp	r3, #0
 8023c66:	d109      	bne.n	8023c7c <OBJ_GetObjectList+0xb8>
                {
                    /* store the index in the mailbox buffer */
                    *pData = SWAPWORD(pObjEntry->Index);
 8023c68:	69fb      	ldr	r3, [r7, #28]
 8023c6a:	891a      	ldrh	r2, [r3, #8]
 8023c6c:	687b      	ldr	r3, [r7, #4]
 8023c6e:	801a      	strh	r2, [r3, #0]
                    pData++;
 8023c70:	687b      	ldr	r3, [r7, #4]
 8023c72:	3302      	adds	r3, #2
 8023c74:	607b      	str	r3, [r7, #4]
                    size -= 2;
 8023c76:	89bb      	ldrh	r3, [r7, #12]
 8023c78:	3b02      	subs	r3, #2
 8023c7a:	81bb      	strh	r3, [r7, #12]
                }
            }
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 8023c7c:	69fb      	ldr	r3, [r7, #28]
 8023c7e:	685b      	ldr	r3, [r3, #4]
 8023c80:	61fb      	str	r3, [r7, #28]
        pObjEntry = pSdoInfoObjEntry;
    }

    if ( pObjEntry != NULL )
    {
        while (pObjEntry != NULL && size > 1 )
 8023c82:	69fb      	ldr	r3, [r7, #28]
 8023c84:	2b00      	cmp	r3, #0
 8023c86:	d002      	beq.n	8023c8e <OBJ_GetObjectList+0xca>
 8023c88:	89bb      	ldrh	r3, [r7, #12]
 8023c8a:	2b01      	cmp	r3, #1
 8023c8c:	d8c1      	bhi.n	8023c12 <OBJ_GetObjectList+0x4e>
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
        }
    }

        /* return the next Index to be handled */
        if(pObjEntry != NULL)
 8023c8e:	69fb      	ldr	r3, [r7, #28]
 8023c90:	2b00      	cmp	r3, #0
 8023c92:	d004      	beq.n	8023c9e <OBJ_GetObjectList+0xda>
        {
            pIndex[0] = pObjEntry->Index;
 8023c94:	69fb      	ldr	r3, [r7, #28]
 8023c96:	891a      	ldrh	r2, [r3, #8]
 8023c98:	68bb      	ldr	r3, [r7, #8]
 8023c9a:	801a      	strh	r2, [r3, #0]
 8023c9c:	e003      	b.n	8023ca6 <OBJ_GetObjectList+0xe2>
        }
        else
        {
            /*last entry reached*/
            pIndex[0] = 0xFFFF;
 8023c9e:	68bb      	ldr	r3, [r7, #8]
 8023ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023ca4:	801a      	strh	r2, [r3, #0]
        }

    /* store object description pointer and index for next fragment */
    pSdoInfoObjEntry = pObjEntry;
 8023ca6:	4a04      	ldr	r2, [pc, #16]	; (8023cb8 <OBJ_GetObjectList+0xf4>)
 8023ca8:	69fb      	ldr	r3, [r7, #28]
 8023caa:	6013      	str	r3, [r2, #0]

    /* return the size of the available mailbox buffer which was not copied to */
    return size;
 8023cac:	89bb      	ldrh	r3, [r7, #12]
}
 8023cae:	4618      	mov	r0, r3
 8023cb0:	3720      	adds	r7, #32
 8023cb2:	46bd      	mov	sp, r7
 8023cb4:	bd80      	pop	{r7, pc}
 8023cb6:	bf00      	nop
 8023cb8:	1fff28c8 	.word	0x1fff28c8

08023cbc <OBJ_GetDesc>:
                0xFF                                            <br>
            }
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 OBJ_GetDesc( UINT16 index, UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData )
{
 8023cbc:	b590      	push	{r4, r7, lr}
 8023cbe:	b08d      	sub	sp, #52	; 0x34
 8023cc0:	af00      	add	r7, sp, #0
 8023cc2:	60ba      	str	r2, [r7, #8]
 8023cc4:	607b      	str	r3, [r7, #4]
 8023cc6:	4603      	mov	r3, r0
 8023cc8:	81fb      	strh	r3, [r7, #14]
 8023cca:	460b      	mov	r3, r1
 8023ccc:	737b      	strb	r3, [r7, #13]
    UINT16 strSize = 0;
 8023cce:	2300      	movs	r3, #0
 8023cd0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    OBJCONST UCHAR OBJMEM * pDesc = (OBJCONST UCHAR OBJMEM *) pObjEntry->pName;
 8023cd2:	68bb      	ldr	r3, [r7, #8]
 8023cd4:	695b      	ldr	r3, [r3, #20]
 8023cd6:	627b      	str	r3, [r7, #36]	; 0x24
/* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8023cd8:	68bb      	ldr	r3, [r7, #8]
 8023cda:	899b      	ldrh	r3, [r3, #12]
 8023cdc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8023ce0:	121b      	asrs	r3, r3, #8
 8023ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if ( (subindex == 0) || (objCode == OBJCODE_VAR) )
 8023ce6:	7b7b      	ldrb	r3, [r7, #13]
 8023ce8:	2b00      	cmp	r3, #0
 8023cea:	d003      	beq.n	8023cf4 <OBJ_GetDesc+0x38>
 8023cec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8023cf0:	2b07      	cmp	r3, #7
 8023cf2:	d10f      	bne.n	8023d14 <OBJ_GetDesc+0x58>
    {
        // Get object description length
        strSize = OBJSTRLEN( (OBJCONST CHAR OBJMEM *) pDesc );
 8023cf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8023cf6:	f004 fb73 	bl	80283e0 <strlen>
 8023cfa:	4603      	mov	r3, r0
 8023cfc:	85fb      	strh	r3, [r7, #46]	; 0x2e

        // If there is a pointer given, copy data:
        if ( pData )
 8023cfe:	687b      	ldr	r3, [r7, #4]
 8023d00:	2b00      	cmp	r3, #0
 8023d02:	d006      	beq.n	8023d12 <OBJ_GetDesc+0x56>
        {
            OBJTOMBXSTRCPY( pData, pDesc, strSize );
 8023d04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8023d06:	6878      	ldr	r0, [r7, #4]
 8023d08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8023d0a:	461a      	mov	r2, r3
 8023d0c:	f004 faaa 	bl	8028264 <memcpy>
    {
        // Get object description length
        strSize = OBJSTRLEN( (OBJCONST CHAR OBJMEM *) pDesc );

        // If there is a pointer given, copy data:
        if ( pData )
 8023d10:	e05f      	b.n	8023dd2 <OBJ_GetDesc+0x116>
 8023d12:	e05e      	b.n	8023dd2 <OBJ_GetDesc+0x116>
            OBJTOMBXSTRCPY( pData, pDesc, strSize );
        }
    }
    else
    {
        if ( objCode == OBJCODE_REC )
 8023d14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8023d18:	2b09      	cmp	r3, #9
 8023d1a:	d13c      	bne.n	8023d96 <OBJ_GetDesc+0xda>
        {
            {
            // get pointer to description of subindex 1 :
            // 16bit variable to avoid overflow if subindex 0xFF is read
            UINT16 i = 1;
 8023d1c:	2301      	movs	r3, #1
 8023d1e:	85bb      	strh	r3, [r7, #44]	; 0x2c
            UINT16 tmpSubindex = subindex;
 8023d20:	7b7b      	ldrb	r3, [r7, #13]
 8023d22:	843b      	strh	r3, [r7, #32]

            {

            OBJCONST UCHAR OBJMEM * pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pDesc );
 8023d24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8023d26:	f004 fb5b 	bl	80283e0 <strlen>
 8023d2a:	4603      	mov	r3, r0
 8023d2c:	3301      	adds	r3, #1
 8023d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023d30:	4413      	add	r3, r2
 8023d32:	62bb      	str	r3, [r7, #40]	; 0x28
            while (( i <= tmpSubindex )
 8023d34:	e023      	b.n	8023d7e <OBJ_GetDesc+0xc2>
                &&( pSubDesc[0] != 0xFF && pSubDesc[0] != 0xFE ))
            {
                if ( i == tmpSubindex )
 8023d36:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8023d38:	8c3b      	ldrh	r3, [r7, #32]
 8023d3a:	429a      	cmp	r2, r3
 8023d3c:	d114      	bne.n	8023d68 <OBJ_GetDesc+0xac>
                {
                    strSize = OBJSTRLEN( (OBJCONST CHAR OBJMEM *) pSubDesc );
 8023d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8023d40:	f004 fb4e 	bl	80283e0 <strlen>
 8023d44:	4603      	mov	r3, r0
 8023d46:	85fb      	strh	r3, [r7, #46]	; 0x2e
                    if ( pData && strSize )
 8023d48:	687b      	ldr	r3, [r7, #4]
 8023d4a:	2b00      	cmp	r3, #0
 8023d4c:	d009      	beq.n	8023d62 <OBJ_GetDesc+0xa6>
 8023d4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8023d50:	2b00      	cmp	r3, #0
 8023d52:	d006      	beq.n	8023d62 <OBJ_GetDesc+0xa6>
                        OBJTOMBXSTRCPY( pData, pSubDesc, strSize );
 8023d54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8023d56:	6878      	ldr	r0, [r7, #4]
 8023d58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8023d5a:	461a      	mov	r2, r3
 8023d5c:	f004 fa82 	bl	8028264 <memcpy>
/* ECATCHANGE_START(V5.11) SDO6*/
                    else
                        strSize = 0;
/* ECATCHANGE_END(V5.11) SDO6*/

                    break;
 8023d60:	e019      	b.n	8023d96 <OBJ_GetDesc+0xda>
                    strSize = OBJSTRLEN( (OBJCONST CHAR OBJMEM *) pSubDesc );
                    if ( pData && strSize )
                        OBJTOMBXSTRCPY( pData, pSubDesc, strSize );
/* ECATCHANGE_START(V5.11) SDO6*/
                    else
                        strSize = 0;
 8023d62:	2300      	movs	r3, #0
 8023d64:	85fb      	strh	r3, [r7, #46]	; 0x2e
/* ECATCHANGE_END(V5.11) SDO6*/

                    break;
 8023d66:	e016      	b.n	8023d96 <OBJ_GetDesc+0xda>
                }
                else
                {
                    i++;
 8023d68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8023d6a:	3301      	adds	r3, #1
 8023d6c:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pSubDesc );
 8023d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8023d70:	f004 fb36 	bl	80283e0 <strlen>
 8023d74:	4603      	mov	r3, r0
 8023d76:	3301      	adds	r3, #1
 8023d78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023d7a:	4413      	add	r3, r2
 8023d7c:	62bb      	str	r3, [r7, #40]	; 0x28
            UINT16 tmpSubindex = subindex;

            {

            OBJCONST UCHAR OBJMEM * pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pDesc );
            while (( i <= tmpSubindex )
 8023d7e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8023d80:	8c3b      	ldrh	r3, [r7, #32]
 8023d82:	429a      	cmp	r2, r3
 8023d84:	d807      	bhi.n	8023d96 <OBJ_GetDesc+0xda>
                &&( pSubDesc[0] != 0xFF && pSubDesc[0] != 0xFE ))
 8023d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023d88:	781b      	ldrb	r3, [r3, #0]
 8023d8a:	2bff      	cmp	r3, #255	; 0xff
 8023d8c:	d003      	beq.n	8023d96 <OBJ_GetDesc+0xda>
 8023d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023d90:	781b      	ldrb	r3, [r3, #0]
 8023d92:	2bfe      	cmp	r3, #254	; 0xfe
 8023d94:	d1cf      	bne.n	8023d36 <OBJ_GetDesc+0x7a>
            }
            }
            }
        }

        if ( strSize == 0 )
 8023d96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8023d98:	2b00      	cmp	r3, #0
 8023d9a:	d11a      	bne.n	8023dd2 <OBJ_GetDesc+0x116>
        {
            // no string found for subindex x -> name is Subindex x
            strSize =    12;
 8023d9c:	230c      	movs	r3, #12
 8023d9e:	85fb      	strh	r3, [r7, #46]	; 0x2e

            if ( pData )
 8023da0:	687b      	ldr	r3, [r7, #4]
 8023da2:	2b00      	cmp	r3, #0
 8023da4:	d015      	beq.n	8023dd2 <OBJ_GetDesc+0x116>
            {
                UCHAR OBJMEM         TmpDescr[13];
                OBJSTRCPY(TmpDescr,aSubindexDesc,SIZEOF(TmpDescr));
 8023da6:	4b0d      	ldr	r3, [pc, #52]	; (8023ddc <OBJ_GetDesc+0x120>)
 8023da8:	f107 0410 	add.w	r4, r7, #16
 8023dac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8023dae:	c407      	stmia	r4!, {r0, r1, r2}
 8023db0:	7023      	strb	r3, [r4, #0]
                
                OBJ_CopyNumberToString( &TmpDescr[9], subindex );
 8023db2:	f107 0310 	add.w	r3, r7, #16
 8023db6:	f103 0209 	add.w	r2, r3, #9
 8023dba:	7b7b      	ldrb	r3, [r7, #13]
 8023dbc:	4610      	mov	r0, r2
 8023dbe:	4619      	mov	r1, r3
 8023dc0:	f7ff fe6a 	bl	8023a98 <OBJ_CopyNumberToString>
                MBXSTRCPY( pData, TmpDescr, SIZEOF(TmpDescr) );
 8023dc4:	f107 0310 	add.w	r3, r7, #16
 8023dc8:	6878      	ldr	r0, [r7, #4]
 8023dca:	4619      	mov	r1, r3
 8023dcc:	220d      	movs	r2, #13
 8023dce:	f004 fa49 	bl	8028264 <memcpy>
            }
        }
    }

    return strSize;
 8023dd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8023dd4:	4618      	mov	r0, r3
 8023dd6:	3734      	adds	r7, #52	; 0x34
 8023dd8:	46bd      	mov	sp, r7
 8023dda:	bd90      	pop	{r4, r7, pc}
 8023ddc:	1fff1360 	.word	0x1fff1360

08023de0 <OBJ_GetEntryDesc>:
         to define the object dictionary independent of the sdoserv-files

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TSDOINFOENTRYDESC OBJMEM * OBJ_GetEntryDesc(OBJCONST TOBJECT OBJMEM * pObjEntry, UINT8 Subindex)
{
 8023de0:	b480      	push	{r7}
 8023de2:	b085      	sub	sp, #20
 8023de4:	af00      	add	r7, sp, #0
 8023de6:	6078      	str	r0, [r7, #4]
 8023de8:	460b      	mov	r3, r1
 8023dea:	70fb      	strb	r3, [r7, #3]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8023dec:	687b      	ldr	r3, [r7, #4]
 8023dee:	899b      	ldrh	r3, [r3, #12]
 8023df0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8023df4:	121b      	asrs	r3, r3, #8
 8023df6:	72fb      	strb	r3, [r7, #11]

    if ((objCode == OBJCODE_ARR)
 8023df8:	7afb      	ldrb	r3, [r7, #11]
 8023dfa:	2b08      	cmp	r3, #8
 8023dfc:	d10b      	bne.n	8023e16 <OBJ_GetEntryDesc+0x36>
        )
    {
        /* object is an array */
        if ( Subindex == 0 )
 8023dfe:	78fb      	ldrb	r3, [r7, #3]
 8023e00:	2b00      	cmp	r3, #0
 8023e02:	d103      	bne.n	8023e0c <OBJ_GetEntryDesc+0x2c>
            /* subindex 0 has a description */
            pEntry = &pObjEntry->pEntryDesc[0];
 8023e04:	687b      	ldr	r3, [r7, #4]
 8023e06:	691b      	ldr	r3, [r3, #16]
 8023e08:	60fb      	str	r3, [r7, #12]
 8023e0a:	e00d      	b.n	8023e28 <OBJ_GetEntryDesc+0x48>
        else
            /* and all other elements have the same description */
            pEntry = &pObjEntry->pEntryDesc[1];
 8023e0c:	687b      	ldr	r3, [r7, #4]
 8023e0e:	691b      	ldr	r3, [r3, #16]
 8023e10:	3306      	adds	r3, #6
 8023e12:	60fb      	str	r3, [r7, #12]
 8023e14:	e008      	b.n	8023e28 <OBJ_GetEntryDesc+0x48>
    }
    else
    {
        {
            /* object is a variable or a record return the corresponding entry */
            pEntry = &pObjEntry->pEntryDesc[Subindex];
 8023e16:	687b      	ldr	r3, [r7, #4]
 8023e18:	6919      	ldr	r1, [r3, #16]
 8023e1a:	78fa      	ldrb	r2, [r7, #3]
 8023e1c:	4613      	mov	r3, r2
 8023e1e:	005b      	lsls	r3, r3, #1
 8023e20:	4413      	add	r3, r2
 8023e22:	005b      	lsls	r3, r3, #1
 8023e24:	440b      	add	r3, r1
 8023e26:	60fb      	str	r3, [r7, #12]
        }
    }

    return pEntry;
 8023e28:	68fb      	ldr	r3, [r7, #12]
}
 8023e2a:	4618      	mov	r0, r3
 8023e2c:	3714      	adds	r7, #20
 8023e2e:	46bd      	mov	sp, r7
 8023e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e34:	4770      	bx	lr
 8023e36:	bf00      	nop

08023e38 <OBJ_GetObjDesc>:
         to define the object dictionary independent of the sdoserv-files

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TSDOINFOOBJDESC OBJMEM * OBJ_GetObjDesc(OBJCONST TOBJECT OBJMEM * pObjEntry)
{
 8023e38:	b480      	push	{r7}
 8023e3a:	b083      	sub	sp, #12
 8023e3c:	af00      	add	r7, sp, #0
 8023e3e:	6078      	str	r0, [r7, #4]
    return &pObjEntry->ObjDesc;
 8023e40:	687b      	ldr	r3, [r7, #4]
 8023e42:	330a      	adds	r3, #10
}
 8023e44:	4618      	mov	r0, r3
 8023e46:	370c      	adds	r7, #12
 8023e48:	46bd      	mov	sp, r7
 8023e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e4e:	4770      	bx	lr

08023e50 <OBJ_GetEntryOffset>:

 \brief    This function calculates the bit offset of the entry in the object's variable
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 OBJ_GetEntryOffset(UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry)
{
 8023e50:	b480      	push	{r7}
 8023e52:	b087      	sub	sp, #28
 8023e54:	af00      	add	r7, sp, #0
 8023e56:	4603      	mov	r3, r0
 8023e58:	6039      	str	r1, [r7, #0]
 8023e5a:	71fb      	strb	r3, [r7, #7]
    UINT16 i;
    /* bitOffset will be initialized with the bit offset of subindex 1 */
/*ECATCHANGE_START(V5.11) OBJ1*/
    UINT16 bitOffset = 0;
 8023e5c:	2300      	movs	r3, #0
 8023e5e:	82bb      	strh	r3, [r7, #20]
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8023e60:	683b      	ldr	r3, [r7, #0]
 8023e62:	899b      	ldrh	r3, [r3, #12]
 8023e64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8023e68:	121b      	asrs	r3, r3, #8
 8023e6a:	73fb      	strb	r3, [r7, #15]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;

    if(subindex > 0)
 8023e6c:	79fb      	ldrb	r3, [r7, #7]
 8023e6e:	2b00      	cmp	r3, #0
 8023e70:	d002      	beq.n	8023e78 <OBJ_GetEntryOffset+0x28>
    {
        /*subindex 1 has an offset of 16Bit (even if Si0 is only an UINT8) */
        bitOffset +=16;
 8023e72:	8abb      	ldrh	r3, [r7, #20]
 8023e74:	3310      	adds	r3, #16
 8023e76:	82bb      	strh	r3, [r7, #20]
    }
/*ECATCHANGE_END(V5.11) OBJ1*/

    if (objCode == OBJCODE_VAR)
 8023e78:	7bfb      	ldrb	r3, [r7, #15]
 8023e7a:	2b07      	cmp	r3, #7
 8023e7c:	d101      	bne.n	8023e82 <OBJ_GetEntryOffset+0x32>
        return 0;
 8023e7e:	2300      	movs	r3, #0
 8023e80:	e091      	b.n	8023fa6 <OBJ_GetEntryOffset+0x156>

    for (i = 1; i <= subindex; i++)
 8023e82:	2301      	movs	r3, #1
 8023e84:	82fb      	strh	r3, [r7, #22]
 8023e86:	e087      	b.n	8023f98 <OBJ_GetEntryOffset+0x148>
    {
        /* get the entry description */
        if ((objCode == OBJCODE_ARR)
 8023e88:	7bfb      	ldrb	r3, [r7, #15]
 8023e8a:	2b08      	cmp	r3, #8
 8023e8c:	d104      	bne.n	8023e98 <OBJ_GetEntryOffset+0x48>
           )
            pEntry = &pObjEntry->pEntryDesc[1];
 8023e8e:	683b      	ldr	r3, [r7, #0]
 8023e90:	691b      	ldr	r3, [r3, #16]
 8023e92:	3306      	adds	r3, #6
 8023e94:	613b      	str	r3, [r7, #16]
 8023e96:	e008      	b.n	8023eaa <OBJ_GetEntryOffset+0x5a>
        else
        {
            pEntry = &pObjEntry->pEntryDesc[i];
 8023e98:	683b      	ldr	r3, [r7, #0]
 8023e9a:	6919      	ldr	r1, [r3, #16]
 8023e9c:	8afa      	ldrh	r2, [r7, #22]
 8023e9e:	4613      	mov	r3, r2
 8023ea0:	005b      	lsls	r3, r3, #1
 8023ea2:	4413      	add	r3, r2
 8023ea4:	005b      	lsls	r3, r3, #1
 8023ea6:	440b      	add	r3, r1
 8023ea8:	613b      	str	r3, [r7, #16]
        }

        switch (pEntry->DataType)
 8023eaa:	693b      	ldr	r3, [r7, #16]
 8023eac:	881b      	ldrh	r3, [r3, #0]
 8023eae:	2b1f      	cmp	r3, #31
 8023eb0:	d023      	beq.n	8023efa <OBJ_GetEntryOffset+0xaa>
 8023eb2:	2b1f      	cmp	r3, #31
 8023eb4:	dc0d      	bgt.n	8023ed2 <OBJ_GetEntryOffset+0x82>
 8023eb6:	2b06      	cmp	r3, #6
 8023eb8:	d01f      	beq.n	8023efa <OBJ_GetEntryOffset+0xaa>
 8023eba:	2b06      	cmp	r3, #6
 8023ebc:	dc04      	bgt.n	8023ec8 <OBJ_GetEntryOffset+0x78>
 8023ebe:	2b03      	cmp	r3, #3
 8023ec0:	d01b      	beq.n	8023efa <OBJ_GetEntryOffset+0xaa>
 8023ec2:	2b04      	cmp	r3, #4
 8023ec4:	d037      	beq.n	8023f36 <OBJ_GetEntryOffset+0xe6>
 8023ec6:	e058      	b.n	8023f7a <OBJ_GetEntryOffset+0x12a>
 8023ec8:	2b08      	cmp	r3, #8
 8023eca:	dd34      	ble.n	8023f36 <OBJ_GetEntryOffset+0xe6>
 8023ecc:	2b0b      	cmp	r3, #11
 8023ece:	d014      	beq.n	8023efa <OBJ_GetEntryOffset+0xaa>
 8023ed0:	e053      	b.n	8023f7a <OBJ_GetEntryOffset+0x12a>
 8023ed2:	2b2f      	cmp	r3, #47	; 0x2f
 8023ed4:	d02f      	beq.n	8023f36 <OBJ_GetEntryOffset+0xe6>
 8023ed6:	2b2f      	cmp	r3, #47	; 0x2f
 8023ed8:	dc04      	bgt.n	8023ee4 <OBJ_GetEntryOffset+0x94>
 8023eda:	2b20      	cmp	r3, #32
 8023edc:	d02b      	beq.n	8023f36 <OBJ_GetEntryOffset+0xe6>
 8023ede:	2b2e      	cmp	r3, #46	; 0x2e
 8023ee0:	d00b      	beq.n	8023efa <OBJ_GetEntryOffset+0xaa>
 8023ee2:	e04a      	b.n	8023f7a <OBJ_GetEntryOffset+0x12a>
 8023ee4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8023ee8:	d007      	beq.n	8023efa <OBJ_GetEntryOffset+0xaa>
 8023eea:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8023eee:	db44      	blt.n	8023f7a <OBJ_GetEntryOffset+0x12a>
 8023ef0:	f2a3 2362 	subw	r3, r3, #610	; 0x262
 8023ef4:	2b01      	cmp	r3, #1
 8023ef6:	d840      	bhi.n	8023f7a <OBJ_GetEntryOffset+0x12a>
 8023ef8:	e01d      	b.n	8023f36 <OBJ_GetEntryOffset+0xe6>
/*ECATCHANGE_END(V5.11) SDO9*/

#if OBJ_WORD_ALIGN    || OBJ_DWORD_ALIGN
            /* the 16-bit variables in the structure are word-aligned,
               align the actual bitOffset to a word */
            bitOffset = (bitOffset+15) & 0xFFF0;
 8023efa:	8abb      	ldrh	r3, [r7, #20]
 8023efc:	330f      	adds	r3, #15
 8023efe:	b29b      	uxth	r3, r3
 8023f00:	f023 030f 	bic.w	r3, r3, #15
 8023f04:	82bb      	strh	r3, [r7, #20]
#endif


/*ECATCHANGE_START(V5.11) SDO9*/
            if (i < subindex)
 8023f06:	79fb      	ldrb	r3, [r7, #7]
 8023f08:	b29b      	uxth	r3, r3
 8023f0a:	8afa      	ldrh	r2, [r7, #22]
 8023f0c:	429a      	cmp	r2, r3
 8023f0e:	d211      	bcs.n	8023f34 <OBJ_GetEntryOffset+0xe4>
            {
                if((pEntry->DataType == DEFTYPE_UNICODE_STRING)
 8023f10:	693b      	ldr	r3, [r7, #16]
 8023f12:	881b      	ldrh	r3, [r3, #0]
 8023f14:	2b0b      	cmp	r3, #11
 8023f16:	d004      	beq.n	8023f22 <OBJ_GetEntryOffset+0xd2>
                    ||(pEntry->DataType == DEFTYPE_ARRAY_OF_INT))
 8023f18:	693b      	ldr	r3, [r7, #16]
 8023f1a:	881b      	ldrh	r3, [r3, #0]
 8023f1c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8023f20:	d104      	bne.n	8023f2c <OBJ_GetEntryOffset+0xdc>
                {
                    bitOffset += pEntry->BitLength;
 8023f22:	693b      	ldr	r3, [r7, #16]
 8023f24:	885a      	ldrh	r2, [r3, #2]
 8023f26:	8abb      	ldrh	r3, [r7, #20]
 8023f28:	4413      	add	r3, r2
 8023f2a:	82bb      	strh	r3, [r7, #20]
                }

                bitOffset += 16;
 8023f2c:	8abb      	ldrh	r3, [r7, #20]
 8023f2e:	3310      	adds	r3, #16
 8023f30:	82bb      	strh	r3, [r7, #20]
            }
/*ECATCHANGE_END(V5.11) SDO9*/
            break;
 8023f32:	e02e      	b.n	8023f92 <OBJ_GetEntryOffset+0x142>
 8023f34:	e02d      	b.n	8023f92 <OBJ_GetEntryOffset+0x142>
        case    DEFTYPE_ARRAY_OF_UDINT:
/*ECATCHANGE_END(V5.11) SDO9*/
#if OBJ_DWORD_ALIGN
            /* the 32-bit variables in the structure are dword-aligned,
               align the actual bitOffset to a dword */
            bitOffset = (bitOffset+31) & 0xFFE0;
 8023f36:	8abb      	ldrh	r3, [r7, #20]
 8023f38:	331f      	adds	r3, #31
 8023f3a:	b29b      	uxth	r3, r3
 8023f3c:	f023 031f 	bic.w	r3, r3, #31
 8023f40:	82bb      	strh	r3, [r7, #20]
               align the actual bitOffset to a word */
            bitOffset = (bitOffset+15) & 0xFFF0;
#endif

/*ECATCHANGE_START(V5.11) SDO9*/
            if (i < subindex)
 8023f42:	79fb      	ldrb	r3, [r7, #7]
 8023f44:	b29b      	uxth	r3, r3
 8023f46:	8afa      	ldrh	r2, [r7, #22]
 8023f48:	429a      	cmp	r2, r3
 8023f4a:	d215      	bcs.n	8023f78 <OBJ_GetEntryOffset+0x128>
            {
                if((pEntry->DataType == DEFTYPE_ARRAY_OF_DINT)
 8023f4c:	693b      	ldr	r3, [r7, #16]
 8023f4e:	881b      	ldrh	r3, [r3, #0]
 8023f50:	f240 2262 	movw	r2, #610	; 0x262
 8023f54:	4293      	cmp	r3, r2
 8023f56:	d005      	beq.n	8023f64 <OBJ_GetEntryOffset+0x114>
                    ||(pEntry->DataType == DEFTYPE_ARRAY_OF_UDINT))
 8023f58:	693b      	ldr	r3, [r7, #16]
 8023f5a:	881b      	ldrh	r3, [r3, #0]
 8023f5c:	f240 2263 	movw	r2, #611	; 0x263
 8023f60:	4293      	cmp	r3, r2
 8023f62:	d105      	bne.n	8023f70 <OBJ_GetEntryOffset+0x120>
                {
                    bitOffset += pEntry->BitLength;
 8023f64:	693b      	ldr	r3, [r7, #16]
 8023f66:	885a      	ldrh	r2, [r3, #2]
 8023f68:	8abb      	ldrh	r3, [r7, #20]
 8023f6a:	4413      	add	r3, r2
 8023f6c:	82bb      	strh	r3, [r7, #20]
 8023f6e:	e003      	b.n	8023f78 <OBJ_GetEntryOffset+0x128>
                }
                else
                   bitOffset += 32;
 8023f70:	8abb      	ldrh	r3, [r7, #20]
 8023f72:	3320      	adds	r3, #32
 8023f74:	82bb      	strh	r3, [r7, #20]
            }
/*ECATCHANGE_END(V5.11) SDO9*/
            break;
 8023f76:	e00c      	b.n	8023f92 <OBJ_GetEntryOffset+0x142>
 8023f78:	e00b      	b.n	8023f92 <OBJ_GetEntryOffset+0x142>
        default:
            /* align the actual bitOffset to a byte */
            if (i < subindex)
 8023f7a:	79fb      	ldrb	r3, [r7, #7]
 8023f7c:	b29b      	uxth	r3, r3
 8023f7e:	8afa      	ldrh	r2, [r7, #22]
 8023f80:	429a      	cmp	r2, r3
 8023f82:	d205      	bcs.n	8023f90 <OBJ_GetEntryOffset+0x140>
                bitOffset += pEntry->BitLength;
 8023f84:	693b      	ldr	r3, [r7, #16]
 8023f86:	885a      	ldrh	r2, [r3, #2]
 8023f88:	8abb      	ldrh	r3, [r7, #20]
 8023f8a:	4413      	add	r3, r2
 8023f8c:	82bb      	strh	r3, [r7, #20]
            break;
 8023f8e:	e7ff      	b.n	8023f90 <OBJ_GetEntryOffset+0x140>
 8023f90:	bf00      	nop
/*ECATCHANGE_END(V5.11) OBJ1*/

    if (objCode == OBJCODE_VAR)
        return 0;

    for (i = 1; i <= subindex; i++)
 8023f92:	8afb      	ldrh	r3, [r7, #22]
 8023f94:	3301      	adds	r3, #1
 8023f96:	82fb      	strh	r3, [r7, #22]
 8023f98:	79fb      	ldrb	r3, [r7, #7]
 8023f9a:	b29b      	uxth	r3, r3
 8023f9c:	8afa      	ldrh	r2, [r7, #22]
 8023f9e:	429a      	cmp	r2, r3
 8023fa0:	f67f af72 	bls.w	8023e88 <OBJ_GetEntryOffset+0x38>
                bitOffset += pEntry->BitLength;
            break;
        }
    }

    return bitOffset;
 8023fa4:	8abb      	ldrh	r3, [r7, #20]
}
 8023fa6:	4618      	mov	r0, r3
 8023fa8:	371c      	adds	r7, #28
 8023faa:	46bd      	mov	sp, r7
 8023fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fb0:	4770      	bx	lr
 8023fb2:	bf00      	nop

08023fb4 <CheckSyncTypeValue>:
 \return    result                Result of the value validation

 \brief    Checks if the new Sync type value is valid
*////////////////////////////////////////////////////////////////////////////////////////
UINT8 CheckSyncTypeValue(UINT16 index, UINT16 NewSyncType)
{
 8023fb4:	b480      	push	{r7}
 8023fb6:	b083      	sub	sp, #12
 8023fb8:	af00      	add	r7, sp, #0
 8023fba:	4603      	mov	r3, r0
 8023fbc:	460a      	mov	r2, r1
 8023fbe:	80fb      	strh	r3, [r7, #6]
 8023fc0:	4613      	mov	r3, r2
 8023fc2:	80bb      	strh	r3, [r7, #4]
    /*ECATCHANGE_START(V5.11) ESM7*/
    switch (NewSyncType)
 8023fc4:	88bb      	ldrh	r3, [r7, #4]
 8023fc6:	2b22      	cmp	r3, #34	; 0x22
 8023fc8:	f200 80bb 	bhi.w	8024142 <CheckSyncTypeValue+0x18e>
 8023fcc:	a201      	add	r2, pc, #4	; (adr r2, 8023fd4 <CheckSyncTypeValue+0x20>)
 8023fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023fd2:	bf00      	nop
 8023fd4:	08024061 	.word	0x08024061
 8023fd8:	08024065 	.word	0x08024065
 8023fdc:	080240d7 	.word	0x080240d7
 8023fe0:	0802410d 	.word	0x0802410d
 8023fe4:	08024143 	.word	0x08024143
 8023fe8:	08024143 	.word	0x08024143
 8023fec:	08024143 	.word	0x08024143
 8023ff0:	08024143 	.word	0x08024143
 8023ff4:	08024143 	.word	0x08024143
 8023ff8:	08024143 	.word	0x08024143
 8023ffc:	08024143 	.word	0x08024143
 8024000:	08024143 	.word	0x08024143
 8024004:	08024143 	.word	0x08024143
 8024008:	08024143 	.word	0x08024143
 802400c:	08024143 	.word	0x08024143
 8024010:	08024143 	.word	0x08024143
 8024014:	08024143 	.word	0x08024143
 8024018:	08024143 	.word	0x08024143
 802401c:	08024143 	.word	0x08024143
 8024020:	08024143 	.word	0x08024143
 8024024:	08024143 	.word	0x08024143
 8024028:	08024143 	.word	0x08024143
 802402c:	08024143 	.word	0x08024143
 8024030:	08024143 	.word	0x08024143
 8024034:	08024143 	.word	0x08024143
 8024038:	08024143 	.word	0x08024143
 802403c:	08024143 	.word	0x08024143
 8024040:	08024143 	.word	0x08024143
 8024044:	08024143 	.word	0x08024143
 8024048:	08024143 	.word	0x08024143
 802404c:	08024143 	.word	0x08024143
 8024050:	08024143 	.word	0x08024143
 8024054:	08024143 	.word	0x08024143
 8024058:	08024143 	.word	0x08024143
 802405c:	080240b3 	.word	0x080240b3
    {
    case SYNCTYPE_FREERUN:
        return 0; //free run sync mode is always accepted
 8024060:	2300      	movs	r3, #0
 8024062:	e06f      	b.n	8024144 <CheckSyncTypeValue+0x190>
        break;

    case SYNCTYPE_SM_SYNCHRON:
        if ((index == 0x1C32) 
 8024064:	88fb      	ldrh	r3, [r7, #6]
 8024066:	f641 4232 	movw	r2, #7218	; 0x1c32
 802406a:	4293      	cmp	r3, r2
 802406c:	d10b      	bne.n	8024086 <CheckSyncTypeValue+0xd2>
            && (nPdOutputSize > 0) 
 802406e:	4b38      	ldr	r3, [pc, #224]	; (8024150 <CheckSyncTypeValue+0x19c>)
 8024070:	881b      	ldrh	r3, [r3, #0]
 8024072:	2b00      	cmp	r3, #0
 8024074:	d007      	beq.n	8024086 <CheckSyncTypeValue+0xd2>
            && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0))
 8024076:	4b37      	ldr	r3, [pc, #220]	; (8024154 <CheckSyncTypeValue+0x1a0>)
 8024078:	899b      	ldrh	r3, [r3, #12]
 802407a:	f003 0302 	and.w	r3, r3, #2
 802407e:	2b00      	cmp	r3, #0
 8024080:	dd01      	ble.n	8024086 <CheckSyncTypeValue+0xd2>
        {
            /*SyncManager sync mode is supported and output process data is configured*/
            return 0;
 8024082:	2300      	movs	r3, #0
 8024084:	e05e      	b.n	8024144 <CheckSyncTypeValue+0x190>
        }
        else
        if ((index == 0x1C33) 
 8024086:	88fb      	ldrh	r3, [r7, #6]
 8024088:	f641 4233 	movw	r2, #7219	; 0x1c33
 802408c:	4293      	cmp	r3, r2
 802408e:	d10f      	bne.n	80240b0 <CheckSyncTypeValue+0xfc>
            && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0)
 8024090:	4b31      	ldr	r3, [pc, #196]	; (8024158 <CheckSyncTypeValue+0x1a4>)
 8024092:	899b      	ldrh	r3, [r3, #12]
 8024094:	f003 0302 	and.w	r3, r3, #2
 8024098:	2b00      	cmp	r3, #0
 802409a:	dd09      	ble.n	80240b0 <CheckSyncTypeValue+0xfc>
            && (nPdOutputSize == 0) 
 802409c:	4b2c      	ldr	r3, [pc, #176]	; (8024150 <CheckSyncTypeValue+0x19c>)
 802409e:	881b      	ldrh	r3, [r3, #0]
 80240a0:	2b00      	cmp	r3, #0
 80240a2:	d105      	bne.n	80240b0 <CheckSyncTypeValue+0xfc>
            && (nPdInputSize > 0))
 80240a4:	4b2d      	ldr	r3, [pc, #180]	; (802415c <CheckSyncTypeValue+0x1a8>)
 80240a6:	881b      	ldrh	r3, [r3, #0]
 80240a8:	2b00      	cmp	r3, #0
 80240aa:	d001      	beq.n	80240b0 <CheckSyncTypeValue+0xfc>
            {
                /*SyncManager sync mode is supported and input only shall be configured*/
                return 0;
 80240ac:	2300      	movs	r3, #0
 80240ae:	e049      	b.n	8024144 <CheckSyncTypeValue+0x190>
            }
        break;
 80240b0:	e047      	b.n	8024142 <CheckSyncTypeValue+0x18e>

    case SYNCTYPE_SM2_SYNCHRON:
        if ((index == 0x1C33) 
 80240b2:	88fb      	ldrh	r3, [r7, #6]
 80240b4:	f641 4233 	movw	r2, #7219	; 0x1c33
 80240b8:	4293      	cmp	r3, r2
 80240ba:	d10b      	bne.n	80240d4 <CheckSyncTypeValue+0x120>
            && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0)
 80240bc:	4b26      	ldr	r3, [pc, #152]	; (8024158 <CheckSyncTypeValue+0x1a4>)
 80240be:	899b      	ldrh	r3, [r3, #12]
 80240c0:	f003 0302 	and.w	r3, r3, #2
 80240c4:	2b00      	cmp	r3, #0
 80240c6:	dd05      	ble.n	80240d4 <CheckSyncTypeValue+0x120>
            && (nPdOutputSize > 0))
 80240c8:	4b21      	ldr	r3, [pc, #132]	; (8024150 <CheckSyncTypeValue+0x19c>)
 80240ca:	881b      	ldrh	r3, [r3, #0]
 80240cc:	2b00      	cmp	r3, #0
 80240ce:	d001      	beq.n	80240d4 <CheckSyncTypeValue+0x120>
            {
                /*SyncManager sync mode is supported and outputs are defined*/
                return 0;
 80240d0:	2300      	movs	r3, #0
 80240d2:	e037      	b.n	8024144 <CheckSyncTypeValue+0x190>
            }
        break;
 80240d4:	e035      	b.n	8024142 <CheckSyncTypeValue+0x18e>

    case SYNCTYPE_DCSYNC0:
        if ((index == 0x1C32) && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC0SUPP) > 0))
 80240d6:	88fb      	ldrh	r3, [r7, #6]
 80240d8:	f641 4232 	movw	r2, #7218	; 0x1c32
 80240dc:	4293      	cmp	r3, r2
 80240de:	d107      	bne.n	80240f0 <CheckSyncTypeValue+0x13c>
 80240e0:	4b1c      	ldr	r3, [pc, #112]	; (8024154 <CheckSyncTypeValue+0x1a0>)
 80240e2:	899b      	ldrh	r3, [r3, #12]
 80240e4:	f003 0304 	and.w	r3, r3, #4
 80240e8:	2b00      	cmp	r3, #0
 80240ea:	dd01      	ble.n	80240f0 <CheckSyncTypeValue+0x13c>
        {
            return 0;
 80240ec:	2300      	movs	r3, #0
 80240ee:	e029      	b.n	8024144 <CheckSyncTypeValue+0x190>
        }
        else
        if ((index == 0x1C33) && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC0SUPP) > 0))
 80240f0:	88fb      	ldrh	r3, [r7, #6]
 80240f2:	f641 4233 	movw	r2, #7219	; 0x1c33
 80240f6:	4293      	cmp	r3, r2
 80240f8:	d107      	bne.n	802410a <CheckSyncTypeValue+0x156>
 80240fa:	4b17      	ldr	r3, [pc, #92]	; (8024158 <CheckSyncTypeValue+0x1a4>)
 80240fc:	899b      	ldrh	r3, [r3, #12]
 80240fe:	f003 0304 	and.w	r3, r3, #4
 8024102:	2b00      	cmp	r3, #0
 8024104:	dd01      	ble.n	802410a <CheckSyncTypeValue+0x156>
        {
            return 0;
 8024106:	2300      	movs	r3, #0
 8024108:	e01c      	b.n	8024144 <CheckSyncTypeValue+0x190>
        }
        break;
 802410a:	e01a      	b.n	8024142 <CheckSyncTypeValue+0x18e>

    case SYNCTYPE_DCSYNC1:
        if ((index == 0x1C32) && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC1SUPP) > 0))
 802410c:	88fb      	ldrh	r3, [r7, #6]
 802410e:	f641 4232 	movw	r2, #7218	; 0x1c32
 8024112:	4293      	cmp	r3, r2
 8024114:	d107      	bne.n	8024126 <CheckSyncTypeValue+0x172>
 8024116:	4b0f      	ldr	r3, [pc, #60]	; (8024154 <CheckSyncTypeValue+0x1a0>)
 8024118:	899b      	ldrh	r3, [r3, #12]
 802411a:	f003 0308 	and.w	r3, r3, #8
 802411e:	2b00      	cmp	r3, #0
 8024120:	dd01      	ble.n	8024126 <CheckSyncTypeValue+0x172>
        {
            return 0;
 8024122:	2300      	movs	r3, #0
 8024124:	e00e      	b.n	8024144 <CheckSyncTypeValue+0x190>
        }
        else
        if ((index == 0x1C33) && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC1SUPP) > 0))
 8024126:	88fb      	ldrh	r3, [r7, #6]
 8024128:	f641 4233 	movw	r2, #7219	; 0x1c33
 802412c:	4293      	cmp	r3, r2
 802412e:	d107      	bne.n	8024140 <CheckSyncTypeValue+0x18c>
 8024130:	4b09      	ldr	r3, [pc, #36]	; (8024158 <CheckSyncTypeValue+0x1a4>)
 8024132:	899b      	ldrh	r3, [r3, #12]
 8024134:	f003 0308 	and.w	r3, r3, #8
 8024138:	2b00      	cmp	r3, #0
 802413a:	dd01      	ble.n	8024140 <CheckSyncTypeValue+0x18c>
        {
            return 0;
 802413c:	2300      	movs	r3, #0
 802413e:	e001      	b.n	8024144 <CheckSyncTypeValue+0x190>
        }
        break;
 8024140:	bf00      	nop
    } //switch 
/*ECATCHANGE_END(V5.11) ESM7*/
    return ABORTIDX_VALUE_EXCEEDED;
 8024142:	2312      	movs	r3, #18

}
 8024144:	4618      	mov	r0, r3
 8024146:	370c      	adds	r7, #12
 8024148:	46bd      	mov	sp, r7
 802414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802414e:	4770      	bx	lr
 8024150:	1fff2542 	.word	0x1fff2542
 8024154:	1fff2860 	.word	0x1fff2860
 8024158:	1fff281c 	.word	0x1fff281c
 802415c:	1fff256c 	.word	0x1fff256c

08024160 <OBJ_Read>:

 \brief    This function reads the requested object
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 OBJ_Read( UINT16 index, UINT8 subindex, UINT32 objSize, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData, UINT8 bCompleteAccess )
{
 8024160:	b590      	push	{r4, r7, lr}
 8024162:	b091      	sub	sp, #68	; 0x44
 8024164:	af02      	add	r7, sp, #8
 8024166:	60ba      	str	r2, [r7, #8]
 8024168:	607b      	str	r3, [r7, #4]
 802416a:	4603      	mov	r3, r0
 802416c:	81fb      	strh	r3, [r7, #14]
 802416e:	460b      	mov	r3, r1
 8024170:	737b      	strb	r3, [r7, #13]
    UINT16 i = subindex;
 8024172:	7b7b      	ldrb	r3, [r7, #13]
 8024174:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8024176:	687b      	ldr	r3, [r7, #4]
 8024178:	899b      	ldrh	r3, [r3, #12]
 802417a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 802417e:	121b      	asrs	r3, r3, #8
 8024180:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    UINT16 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8024184:	687b      	ldr	r3, [r7, #4]
 8024186:	899b      	ldrh	r3, [r3, #12]
 8024188:	b2db      	uxtb	r3, r3
 802418a:	86bb      	strh	r3, [r7, #52]	; 0x34
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    /* lastSubindex is used for complete access to make loop over the requested entries
    to be read, we initialize this variable with the requested subindex that only
    one loop will be done for a single access */
    UINT16 lastSubindex = subindex;
 802418c:	7b7b      	ldrb	r3, [r7, #13]
 802418e:	867b      	strh	r3, [r7, #50]	; 0x32

    if ( objCode != OBJCODE_VAR && index >= 0x1000 )
 8024190:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8024194:	2b07      	cmp	r3, #7
 8024196:	d008      	beq.n	80241aa <OBJ_Read+0x4a>
 8024198:	89fb      	ldrh	r3, [r7, #14]
 802419a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802419e:	d304      	bcc.n	80241aa <OBJ_Read+0x4a>
    {
        /* if the object is an array or record we have to get the maxSubindex from the
        actual value of subindex 0, which is stored as UINT16 at the beginning of the
        object's variable */
        maxSubindex = (*((UINT16 *) (pObjEntry->pVarPtr))) & 0x00FF;
 80241a0:	687b      	ldr	r3, [r7, #4]
 80241a2:	699b      	ldr	r3, [r3, #24]
 80241a4:	881b      	ldrh	r3, [r3, #0]
 80241a6:	b2db      	uxtb	r3, r3
 80241a8:	86bb      	strh	r3, [r7, #52]	; 0x34

    }

    if ( bCompleteAccess )
 80241aa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80241ae:	2b00      	cmp	r3, #0
 80241b0:	d00c      	beq.n	80241cc <OBJ_Read+0x6c>
    {
        if ( objCode == OBJCODE_VAR || index < 0x1000 )
 80241b2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80241b6:	2b07      	cmp	r3, #7
 80241b8:	d003      	beq.n	80241c2 <OBJ_Read+0x62>
 80241ba:	89fb      	ldrh	r3, [r7, #14]
 80241bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80241c0:	d201      	bcs.n	80241c6 <OBJ_Read+0x66>
        {
            /* complete access is not supported with simple objects or ENUM descriptions */
            return ABORTIDX_UNSUPPORTED_ACCESS;
 80241c2:	2305      	movs	r3, #5
 80241c4:	e29a      	b.n	80246fc <OBJ_Read+0x59c>
        }

        /* we read until the maximum subindex */
        lastSubindex = maxSubindex;
 80241c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80241c8:	867b      	strh	r3, [r7, #50]	; 0x32
 80241ca:	e02a      	b.n	8024222 <OBJ_Read+0xc2>
    }
    else
        if ( subindex > maxSubindex )
 80241cc:	7b7b      	ldrb	r3, [r7, #13]
 80241ce:	b29b      	uxth	r3, r3
 80241d0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80241d2:	429a      	cmp	r2, r3
 80241d4:	d201      	bcs.n	80241da <OBJ_Read+0x7a>
        {
            /* the maximum subindex is reached */
            return ABORTIDX_SUBINDEX_NOT_EXISTING;
 80241d6:	2311      	movs	r3, #17
 80241d8:	e290      	b.n	80246fc <OBJ_Read+0x59c>
        }
        else
        {
            /* get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry, (UINT8)i);
 80241da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80241dc:	b2db      	uxtb	r3, r3
 80241de:	6878      	ldr	r0, [r7, #4]
 80241e0:	4619      	mov	r1, r3
 80241e2:	f7ff fdfd 	bl	8023de0 <OBJ_GetEntryDesc>
 80241e6:	6278      	str	r0, [r7, #36]	; 0x24

            /*Check access only for non-align entries*/
            if(pEntry->ObjAccess != 0x0)
 80241e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80241ea:	889b      	ldrh	r3, [r3, #4]
 80241ec:	2b00      	cmp	r3, #0
 80241ee:	d018      	beq.n	8024222 <OBJ_Read+0xc2>
            {
                /* check if we have read access (bits 0-2 (PREOP, SAFEOP, OP) of ObjAccess)
                by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
                if ( ((UINT8) ((pEntry->ObjAccess & ACCESS_READ)<<1)) < (nAlStatus & STATE_MASK) )
 80241f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80241f2:	889b      	ldrh	r3, [r3, #4]
 80241f4:	b2db      	uxtb	r3, r3
 80241f6:	f003 0307 	and.w	r3, r3, #7
 80241fa:	b2db      	uxtb	r3, r3
 80241fc:	005b      	lsls	r3, r3, #1
 80241fe:	b2db      	uxtb	r3, r3
 8024200:	461a      	mov	r2, r3
 8024202:	4b9e      	ldr	r3, [pc, #632]	; (802447c <OBJ_Read+0x31c>)
 8024204:	781b      	ldrb	r3, [r3, #0]
 8024206:	f003 030f 	and.w	r3, r3, #15
 802420a:	429a      	cmp	r2, r3
 802420c:	da09      	bge.n	8024222 <OBJ_Read+0xc2>
                {
                    /* we don't have read access */
                    if ( (pEntry->ObjAccess & ACCESS_READ) == 0 )
 802420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024210:	889b      	ldrh	r3, [r3, #4]
 8024212:	f003 0307 	and.w	r3, r3, #7
 8024216:	2b00      	cmp	r3, #0
 8024218:	d101      	bne.n	802421e <OBJ_Read+0xbe>
                    {
                        /* it is a write only entry */
                        return ABORTIDX_WRITE_ONLY_ENTRY;
 802421a:	2306      	movs	r3, #6
 802421c:	e26e      	b.n	80246fc <OBJ_Read+0x59c>
                    }
                    else
                    {
                        /* we don't have read access in this state */
                        return ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 802421e:	231a      	movs	r3, #26
 8024220:	e26c      	b.n	80246fc <OBJ_Read+0x59c>
                    }
                }
            }
        }
        if ( pObjEntry->Read != NULL )
 8024222:	687b      	ldr	r3, [r7, #4]
 8024224:	69db      	ldr	r3, [r3, #28]
 8024226:	2b00      	cmp	r3, #0
 8024228:	d00d      	beq.n	8024246 <OBJ_Read+0xe6>
        {
            /* Read function is defined, we call the object specific read function */
            return pObjEntry->Read(index, subindex, objSize, pData, bCompleteAccess);
 802422a:	687b      	ldr	r3, [r7, #4]
 802422c:	69dc      	ldr	r4, [r3, #28]
 802422e:	89f9      	ldrh	r1, [r7, #14]
 8024230:	7b7a      	ldrb	r2, [r7, #13]
 8024232:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8024236:	9300      	str	r3, [sp, #0]
 8024238:	4608      	mov	r0, r1
 802423a:	4611      	mov	r1, r2
 802423c:	68ba      	ldr	r2, [r7, #8]
 802423e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024240:	47a0      	blx	r4
 8024242:	4603      	mov	r3, r0
 8024244:	e25a      	b.n	80246fc <OBJ_Read+0x59c>
        }
        else if ( index < 0x1000 && subindex != 0 )
 8024246:	89fb      	ldrh	r3, [r7, #14]
 8024248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802424c:	d232      	bcs.n	80242b4 <OBJ_Read+0x154>
 802424e:	7b7b      	ldrb	r3, [r7, #13]
 8024250:	2b00      	cmp	r3, #0
 8024252:	d02f      	beq.n	80242b4 <OBJ_Read+0x154>
        {
            /* an ENUM description is read */
            UINT16 size;
            UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 8024254:	687b      	ldr	r3, [r7, #4]
 8024256:	699b      	ldr	r3, [r3, #24]
 8024258:	623b      	str	r3, [r7, #32]
            CHAR **p;

            /* we get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry, subindex);
 802425a:	7b7b      	ldrb	r3, [r7, #13]
 802425c:	6878      	ldr	r0, [r7, #4]
 802425e:	4619      	mov	r1, r3
 8024260:	f7ff fdbe 	bl	8023de0 <OBJ_GetEntryDesc>
 8024264:	6278      	str	r0, [r7, #36]	; 0x24
            size = BIT2BYTE(pEntry->BitLength);
 8024266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024268:	885b      	ldrh	r3, [r3, #2]
 802426a:	3307      	adds	r3, #7
 802426c:	10db      	asrs	r3, r3, #3
 802426e:	83fb      	strh	r3, [r7, #30]

            p = (CHAR **) pVarPtr;
 8024270:	6a3b      	ldr	r3, [r7, #32]
 8024272:	61bb      	str	r3, [r7, #24]
            pVarPtr = (UINT16 MBXMEM *)p[subindex-1];
 8024274:	7b7b      	ldrb	r3, [r7, #13]
 8024276:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802427a:	3b01      	subs	r3, #1
 802427c:	009b      	lsls	r3, r3, #2
 802427e:	69ba      	ldr	r2, [r7, #24]
 8024280:	4413      	add	r3, r2
 8024282:	681b      	ldr	r3, [r3, #0]
 8024284:	623b      	str	r3, [r7, #32]

            {
            // Get enum value (first 32Bit)
            pData[0] = pVarPtr[0];
 8024286:	6a3b      	ldr	r3, [r7, #32]
 8024288:	881a      	ldrh	r2, [r3, #0]
 802428a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802428c:	801a      	strh	r2, [r3, #0]
            pData[1] = pVarPtr[1];
 802428e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024290:	3302      	adds	r3, #2
 8024292:	6a3a      	ldr	r2, [r7, #32]
 8024294:	8852      	ldrh	r2, [r2, #2]
 8024296:	801a      	strh	r2, [r3, #0]
            pData += 2;
 8024298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802429a:	3304      	adds	r3, #4
 802429c:	64bb      	str	r3, [r7, #72]	; 0x48
            pVarPtr += 2;
 802429e:	6a3b      	ldr	r3, [r7, #32]
 80242a0:	3304      	adds	r3, #4
 80242a2:	623b      	str	r3, [r7, #32]

            // Get enum description
            OBJTOMBXSTRCPY(pData,pVarPtr,size-4);
 80242a4:	8bfb      	ldrh	r3, [r7, #30]
 80242a6:	3b04      	subs	r3, #4
 80242a8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80242aa:	6a39      	ldr	r1, [r7, #32]
 80242ac:	461a      	mov	r2, r3
 80242ae:	f003 ffd9 	bl	8028264 <memcpy>
        {
            /* Read function is defined, we call the object specific read function */
            return pObjEntry->Read(index, subindex, objSize, pData, bCompleteAccess);
        }
        else if ( index < 0x1000 && subindex != 0 )
        {
 80242b2:	e222      	b.n	80246fa <OBJ_Read+0x59a>
            OBJTOMBXSTRCPY(pData,pVarPtr,size-4);
            }
        }
        else
        {
            UINT8 bRead = 0x0;
 80242b4:	2300      	movs	r3, #0
 80242b6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            UINT8 result = 0;
 80242ba:	2300      	movs	r3, #0
 80242bc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30


            /* a variable object is read */
            for (i = subindex; i <= lastSubindex; i++)
 80242c0:	7b7b      	ldrb	r3, [r7, #13]
 80242c2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80242c4:	e20d      	b.n	80246e2 <OBJ_Read+0x582>
            {
                /* if only a single entry is requested, this loop will only be done once */
                UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 80242c6:	687b      	ldr	r3, [r7, #4]
 80242c8:	699b      	ldr	r3, [r3, #24]
 80242ca:	617b      	str	r3, [r7, #20]
                UINT16 bitOffset = 0;
 80242cc:	2300      	movs	r3, #0
 80242ce:	85fb      	strh	r3, [r7, #46]	; 0x2e

                if (i == 0)
 80242d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80242d2:	2b00      	cmp	r3, #0
 80242d4:	d00b      	beq.n	80242ee <OBJ_Read+0x18e>
                {
                    /* subindex 0 is requested, the entry's data is at the beginning of the object's variable */
                }
                else if ( index >= 0x1000 )
 80242d6:	89fb      	ldrh	r3, [r7, #14]
 80242d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80242dc:	d307      	bcc.n	80242ee <OBJ_Read+0x18e>
                {
                    /* subindex 1-n of an variable object is requested, we get the offset of the variable here */
                    bitOffset = OBJ_GetEntryOffset((UINT8)i, pObjEntry);
 80242de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80242e0:	b2db      	uxtb	r3, r3
 80242e2:	4618      	mov	r0, r3
 80242e4:	6879      	ldr	r1, [r7, #4]
 80242e6:	f7ff fdb3 	bl	8023e50 <OBJ_GetEntryOffset>
 80242ea:	4603      	mov	r3, r0
 80242ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }

                /* we increment the variable pointer to the corresponding word address */
                pVarPtr += (bitOffset >> 4);
 80242ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80242f0:	091b      	lsrs	r3, r3, #4
 80242f2:	b29b      	uxth	r3, r3
 80242f4:	005b      	lsls	r3, r3, #1
 80242f6:	697a      	ldr	r2, [r7, #20]
 80242f8:	4413      	add	r3, r2
 80242fa:	617b      	str	r3, [r7, #20]

                /* get the corresponding entry description */
                pEntry = OBJ_GetEntryDesc(pObjEntry, (UINT8)i);
 80242fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80242fe:	b2db      	uxtb	r3, r3
 8024300:	6878      	ldr	r0, [r7, #4]
 8024302:	4619      	mov	r1, r3
 8024304:	f7ff fd6c 	bl	8023de0 <OBJ_GetEntryDesc>
 8024308:	6278      	str	r0, [r7, #36]	; 0x24

                if ( ((UINT8) ((pEntry->ObjAccess & ACCESS_READ)<<1)) >= (nAlStatus & STATE_MASK) )
 802430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802430c:	889b      	ldrh	r3, [r3, #4]
 802430e:	b2db      	uxtb	r3, r3
 8024310:	f003 0307 	and.w	r3, r3, #7
 8024314:	b2db      	uxtb	r3, r3
 8024316:	005b      	lsls	r3, r3, #1
 8024318:	b2db      	uxtb	r3, r3
 802431a:	461a      	mov	r2, r3
 802431c:	4b57      	ldr	r3, [pc, #348]	; (802447c <OBJ_Read+0x31c>)
 802431e:	781b      	ldrb	r3, [r3, #0]
 8024320:	f003 030f 	and.w	r3, r3, #15
 8024324:	429a      	cmp	r2, r3
 8024326:	f2c0 8195 	blt.w	8024654 <OBJ_Read+0x4f4>
                {
                    if ( i == subindex                                     /* requested entry */
 802432a:	7b7b      	ldrb	r3, [r7, #13]
 802432c:	b29b      	uxth	r3, r3
 802432e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8024330:	429a      	cmp	r2, r3
 8024332:	d00a      	beq.n	802434a <OBJ_Read+0x1ea>
                        || (bCompleteAccess && i >= subindex) )       /* complete access and entry should be read */
 8024334:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8024338:	2b00      	cmp	r3, #0
 802433a:	f000 818a 	beq.w	8024652 <OBJ_Read+0x4f2>
 802433e:	7b7b      	ldrb	r3, [r7, #13]
 8024340:	b29b      	uxth	r3, r3
 8024342:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8024344:	429a      	cmp	r2, r3
 8024346:	f0c0 8184 	bcc.w	8024652 <OBJ_Read+0x4f2>
                    {
                        UINT16 bitMask;

                        /* we have to copy the entry */
                        if ( i == 0 && objCode != OBJCODE_VAR )
 802434a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802434c:	2b00      	cmp	r3, #0
 802434e:	d10a      	bne.n	8024366 <OBJ_Read+0x206>
 8024350:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8024354:	2b07      	cmp	r3, #7
 8024356:	d006      	beq.n	8024366 <OBJ_Read+0x206>
                        {
                            /* we read subindex 0 of an array or record */
                            {
                                pData[0] = SWAPWORD((UINT16)maxSubindex);
 8024358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802435a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 802435c:	801a      	strh	r2, [r3, #0]
                            }

                            /* we increment the destination pointer by 2 because the subindex 0 will be
                            transmitted as UINT16 for a complete access */
                            pData++;
 802435e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024360:	3302      	adds	r3, #2
 8024362:	64bb      	str	r3, [r7, #72]	; 0x48
 8024364:	e175      	b.n	8024652 <OBJ_Read+0x4f2>
                        }
                        else
                        {
                            UINT16 dataType = pEntry->DataType;
 8024366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024368:	881b      	ldrh	r3, [r3, #0]
 802436a:	85bb      	strh	r3, [r7, #44]	; 0x2c
                            if (pEntry->DataType >= 0x700)
 802436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802436e:	881b      	ldrh	r3, [r3, #0]
 8024370:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8024374:	d315      	bcc.n	80243a2 <OBJ_Read+0x242>
                            {
                                /* the ENUM data types are defined from index 0x700 in this example
                                convert in standard data type for the read access */
                                if ( pEntry->BitLength <= 8 )
 8024376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024378:	885b      	ldrh	r3, [r3, #2]
 802437a:	2b08      	cmp	r3, #8
 802437c:	d804      	bhi.n	8024388 <OBJ_Read+0x228>
                                    dataType = DEFTYPE_BIT1-1+pEntry->BitLength;
 802437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024380:	885b      	ldrh	r3, [r3, #2]
 8024382:	332f      	adds	r3, #47	; 0x2f
 8024384:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8024386:	e00c      	b.n	80243a2 <OBJ_Read+0x242>
                                else if ( pEntry->BitLength == 16 )
 8024388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802438a:	885b      	ldrh	r3, [r3, #2]
 802438c:	2b10      	cmp	r3, #16
 802438e:	d102      	bne.n	8024396 <OBJ_Read+0x236>
                                    dataType = DEFTYPE_UNSIGNED16;
 8024390:	2306      	movs	r3, #6
 8024392:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8024394:	e005      	b.n	80243a2 <OBJ_Read+0x242>
                                else if ( pEntry->BitLength == 32 )
 8024396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024398:	885b      	ldrh	r3, [r3, #2]
 802439a:	2b20      	cmp	r3, #32
 802439c:	d101      	bne.n	80243a2 <OBJ_Read+0x242>
                                    dataType = DEFTYPE_UNSIGNED32;
 802439e:	2307      	movs	r3, #7
 80243a0:	85bb      	strh	r3, [r7, #44]	; 0x2c
                            }

                            switch (dataType)
 80243a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80243a4:	2b11      	cmp	r3, #17
 80243a6:	f000 80e0 	beq.w	802456a <OBJ_Read+0x40a>
 80243aa:	2b11      	cmp	r3, #17
 80243ac:	dc1e      	bgt.n	80243ec <OBJ_Read+0x28c>
 80243ae:	2b05      	cmp	r3, #5
 80243b0:	d066      	beq.n	8024480 <OBJ_Read+0x320>
 80243b2:	2b05      	cmp	r3, #5
 80243b4:	dc0d      	bgt.n	80243d2 <OBJ_Read+0x272>
 80243b6:	2b02      	cmp	r3, #2
 80243b8:	dc04      	bgt.n	80243c4 <OBJ_Read+0x264>
 80243ba:	2b01      	cmp	r3, #1
 80243bc:	da60      	bge.n	8024480 <OBJ_Read+0x320>
 80243be:	2b00      	cmp	r3, #0
 80243c0:	d03a      	beq.n	8024438 <OBJ_Read+0x2d8>
 80243c2:	e140      	b.n	8024646 <OBJ_Read+0x4e6>
 80243c4:	2b03      	cmp	r3, #3
 80243c6:	f000 80ad 	beq.w	8024524 <OBJ_Read+0x3c4>
 80243ca:	2b04      	cmp	r3, #4
 80243cc:	f000 80b9 	beq.w	8024542 <OBJ_Read+0x3e2>
 80243d0:	e139      	b.n	8024646 <OBJ_Read+0x4e6>
 80243d2:	2b08      	cmp	r3, #8
 80243d4:	dc03      	bgt.n	80243de <OBJ_Read+0x27e>
 80243d6:	2b07      	cmp	r3, #7
 80243d8:	f280 80b3 	bge.w	8024542 <OBJ_Read+0x3e2>
 80243dc:	e0a2      	b.n	8024524 <OBJ_Read+0x3c4>
 80243de:	2b09      	cmp	r3, #9
 80243e0:	f000 8109 	beq.w	80245f6 <OBJ_Read+0x496>
 80243e4:	2b0b      	cmp	r3, #11
 80243e6:	f300 812e 	bgt.w	8024646 <OBJ_Read+0x4e6>
 80243ea:	e0dc      	b.n	80245a6 <OBJ_Read+0x446>
 80243ec:	2b2d      	cmp	r3, #45	; 0x2d
 80243ee:	d047      	beq.n	8024480 <OBJ_Read+0x320>
 80243f0:	2b2d      	cmp	r3, #45	; 0x2d
 80243f2:	dc11      	bgt.n	8024418 <OBJ_Read+0x2b8>
 80243f4:	2b1e      	cmp	r3, #30
 80243f6:	d043      	beq.n	8024480 <OBJ_Read+0x320>
 80243f8:	2b1e      	cmp	r3, #30
 80243fa:	dc06      	bgt.n	802440a <OBJ_Read+0x2aa>
 80243fc:	2b15      	cmp	r3, #21
 80243fe:	f000 80b4 	beq.w	802456a <OBJ_Read+0x40a>
 8024402:	2b1b      	cmp	r3, #27
 8024404:	f000 80b1 	beq.w	802456a <OBJ_Read+0x40a>
 8024408:	e11d      	b.n	8024646 <OBJ_Read+0x4e6>
 802440a:	2b1f      	cmp	r3, #31
 802440c:	f000 808a 	beq.w	8024524 <OBJ_Read+0x3c4>
 8024410:	2b20      	cmp	r3, #32
 8024412:	f000 8096 	beq.w	8024542 <OBJ_Read+0x3e2>
 8024416:	e116      	b.n	8024646 <OBJ_Read+0x4e6>
 8024418:	2b37      	cmp	r3, #55	; 0x37
 802441a:	dc07      	bgt.n	802442c <OBJ_Read+0x2cc>
 802441c:	2b30      	cmp	r3, #48	; 0x30
 802441e:	da2f      	bge.n	8024480 <OBJ_Read+0x320>
 8024420:	2b2e      	cmp	r3, #46	; 0x2e
 8024422:	d07f      	beq.n	8024524 <OBJ_Read+0x3c4>
 8024424:	2b2f      	cmp	r3, #47	; 0x2f
 8024426:	f000 808c 	beq.w	8024542 <OBJ_Read+0x3e2>
 802442a:	e10c      	b.n	8024646 <OBJ_Read+0x4e6>
 802442c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8024430:	2b03      	cmp	r3, #3
 8024432:	f200 8108 	bhi.w	8024646 <OBJ_Read+0x4e6>
 8024436:	e0b6      	b.n	80245a6 <OBJ_Read+0x446>
                            {
                            case DEFTYPE_NULL:
                                if(bCompleteAccess)
 8024438:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 802443c:	2b00      	cmp	r3, #0
 802443e:	d01a      	beq.n	8024476 <OBJ_Read+0x316>
                                {
                                    /*Handle alignment entry*/
                                    if (((pEntry->BitLength & 0xF) > 0)
 8024440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024442:	885b      	ldrh	r3, [r3, #2]
 8024444:	f003 030f 	and.w	r3, r3, #15
 8024448:	2b00      	cmp	r3, #0
 802444a:	dd0a      	ble.n	8024462 <OBJ_Read+0x302>
                                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 802444c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802444e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024450:	8852      	ldrh	r2, [r2, #2]
 8024452:	4413      	add	r3, r2
 8024454:	f003 030f 	and.w	r3, r3, #15
 8024458:	2b00      	cmp	r3, #0
 802445a:	d102      	bne.n	8024462 <OBJ_Read+0x302>
                                    {
                                        /* we have reached the UINT16 border */
                                        pData++;
 802445c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802445e:	3302      	adds	r3, #2
 8024460:	64bb      	str	r3, [r7, #72]	; 0x48
                                    }

                                    /*increment WORD offset*/
                                    pData += ((pEntry->BitLength & 0xF0) >> 4);
 8024462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024464:	885b      	ldrh	r3, [r3, #2]
 8024466:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802446a:	111b      	asrs	r3, r3, #4
 802446c:	005b      	lsls	r3, r3, #1
 802446e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024470:	4413      	add	r3, r2
 8024472:	64bb      	str	r3, [r7, #72]	; 0x48
                                }
                                else
                                {
                                    return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
                                }
                                break;
 8024474:	e0e9      	b.n	802464a <OBJ_Read+0x4ea>
                                    /*increment WORD offset*/
                                    pData += ((pEntry->BitLength & 0xF0) >> 4);
                                }
                                else
                                {
                                    return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8024476:	2318      	movs	r3, #24
 8024478:	e140      	b.n	80246fc <OBJ_Read+0x59c>
 802447a:	bf00      	nop
 802447c:	1fff2541 	.word	0x1fff2541
/*ECATCHANGE_START(V5.11) SDO9*/
                            case    DEFTYPE_BYTE :
/*ECATCHANGE_END(V5.11) SDO9*/
                                {
                                    /* depending on the bitOffset we have to copy the Hi or the Lo-Byte */
                                    UINT16 TmpValue = 0x0000;
 8024480:	2300      	movs	r3, #0
 8024482:	827b      	strh	r3, [r7, #18]

                                    bitMask = cBitMask[pEntry->BitLength] << (bitOffset & 0x0F);
 8024484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024486:	885b      	ldrh	r3, [r3, #2]
 8024488:	461a      	mov	r2, r3
 802448a:	4b9e      	ldr	r3, [pc, #632]	; (8024704 <OBJ_Read+0x5a4>)
 802448c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8024490:	461a      	mov	r2, r3
 8024492:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024494:	f003 030f 	and.w	r3, r3, #15
 8024498:	fa02 f303 	lsl.w	r3, r2, r3
 802449c:	823b      	strh	r3, [r7, #16]

                                    /*Swap object data (if required); all masks and offsets are defined for little endian format*/
                                    TmpValue = SWAPWORD(pVarPtr[0]);
 802449e:	697b      	ldr	r3, [r7, #20]
 80244a0:	881b      	ldrh	r3, [r3, #0]
 80244a2:	827b      	strh	r3, [r7, #18]

                                    /*Clear pData if the first bits within the WORD memory will be copied*/
                                    if ((bitOffset & 0x0F) == 0) 
 80244a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80244a6:	f003 030f 	and.w	r3, r3, #15
 80244aa:	2b00      	cmp	r3, #0
 80244ac:	d102      	bne.n	80244b4 <OBJ_Read+0x354>
                                    {
                                        pData[0] = 0;
 80244ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80244b0:	2200      	movs	r2, #0
 80244b2:	801a      	strh	r2, [r3, #0]
                                    }

/* ECATCHANGE_START(V5.11) SDO7*/
                                    pData[0] = SWAPWORD(pData[0]);
 80244b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80244b6:	881a      	ldrh	r2, [r3, #0]
 80244b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80244ba:	801a      	strh	r2, [r3, #0]

                                    if (bCompleteAccess) 
 80244bc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80244c0:	2b00      	cmp	r3, #0
 80244c2:	d00a      	beq.n	80244da <OBJ_Read+0x37a>
                                    {
                                        /*shifting is not required for Complete access because the bits are set to the correct offset by the master*/
                                        pData[0] |= TmpValue & bitMask;
 80244c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80244c6:	881a      	ldrh	r2, [r3, #0]
 80244c8:	8a79      	ldrh	r1, [r7, #18]
 80244ca:	8a3b      	ldrh	r3, [r7, #16]
 80244cc:	400b      	ands	r3, r1
 80244ce:	b29b      	uxth	r3, r3
 80244d0:	4313      	orrs	r3, r2
 80244d2:	b29a      	uxth	r2, r3
 80244d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80244d6:	801a      	strh	r2, [r3, #0]
 80244d8:	e013      	b.n	8024502 <OBJ_Read+0x3a2>
                                    }
                                    else
                                    {
                                        /*Shift Bits to the beginning of the mailbox memory*/
                                        pData[0] |= ((TmpValue & bitMask) >> (bitOffset & 0x0F));
 80244da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80244dc:	881b      	ldrh	r3, [r3, #0]
 80244de:	b299      	uxth	r1, r3
 80244e0:	8a7a      	ldrh	r2, [r7, #18]
 80244e2:	8a3b      	ldrh	r3, [r7, #16]
 80244e4:	4013      	ands	r3, r2
 80244e6:	b29b      	uxth	r3, r3
 80244e8:	461a      	mov	r2, r3
 80244ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80244ec:	f003 030f 	and.w	r3, r3, #15
 80244f0:	fa42 f303 	asr.w	r3, r2, r3
 80244f4:	b29b      	uxth	r3, r3
 80244f6:	460a      	mov	r2, r1
 80244f8:	4313      	orrs	r3, r2
 80244fa:	b29b      	uxth	r3, r3
 80244fc:	b29a      	uxth	r2, r3
 80244fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024500:	801a      	strh	r2, [r3, #0]
                                    }

                                    pData[0] = SWAPWORD(pData[0]);
 8024502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024504:	881a      	ldrh	r2, [r3, #0]
 8024506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024508:	801a      	strh	r2, [r3, #0]
/* ECATCHANGE_END(V5.11) SDO7*/
                                    if ( ((bitOffset + pEntry->BitLength) & 0x0F) == 0 )
 802450a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802450c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802450e:	8852      	ldrh	r2, [r2, #2]
 8024510:	4413      	add	r3, r2
 8024512:	f003 030f 	and.w	r3, r3, #15
 8024516:	2b00      	cmp	r3, #0
 8024518:	d103      	bne.n	8024522 <OBJ_Read+0x3c2>
                                    {
                                        /* we have reached the UINT16 border */
                                        pData++;
 802451a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802451c:	3302      	adds	r3, #2
 802451e:	64bb      	str	r3, [r7, #72]	; 0x48
                                    }

                                }
                                break;
 8024520:	e093      	b.n	802464a <OBJ_Read+0x4ea>
 8024522:	e092      	b.n	802464a <OBJ_Read+0x4ea>
                            case    DEFTYPE_BITARR16:
/*ECATCHANGE_START(V5.11) SDO9*/
                            case    DEFTYPE_WORD:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 8024524:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024526:	f003 030f 	and.w	r3, r3, #15
 802452a:	2b00      	cmp	r3, #0
 802452c:	d001      	beq.n	8024532 <OBJ_Read+0x3d2>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 802452e:	2305      	movs	r3, #5
 8024530:	e0e4      	b.n	80246fc <OBJ_Read+0x59c>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/
                                /* in this example the objects are defined in that way,
                                that the 16 bit type are always starting at an exact WORD offset */
                                pData[0] = SWAPWORD(pVarPtr[0]);
 8024532:	697b      	ldr	r3, [r7, #20]
 8024534:	881a      	ldrh	r2, [r3, #0]
 8024536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024538:	801a      	strh	r2, [r3, #0]
                                pData++;
 802453a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802453c:	3302      	adds	r3, #2
 802453e:	64bb      	str	r3, [r7, #72]	; 0x48
                                break;
 8024540:	e083      	b.n	802464a <OBJ_Read+0x4ea>
                            case    DEFTYPE_BITARR32:
/*ECATCHANGE_START(V5.11) SDO9*/
                            case    DEFTYPE_DWORD:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 8024542:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024544:	f003 030f 	and.w	r3, r3, #15
 8024548:	2b00      	cmp	r3, #0
 802454a:	d001      	beq.n	8024550 <OBJ_Read+0x3f0>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 802454c:	2305      	movs	r3, #5
 802454e:	e0d5      	b.n	80246fc <OBJ_Read+0x59c>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/

                                /* in this example the objects are defined in that way,
                                that the 32 bit type are always starting at an exact WORD offset */
                                pData[0] = pVarPtr[0];
 8024550:	697b      	ldr	r3, [r7, #20]
 8024552:	881a      	ldrh	r2, [r3, #0]
 8024554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024556:	801a      	strh	r2, [r3, #0]
                                pData[1] = pVarPtr[1];
 8024558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802455a:	3302      	adds	r3, #2
 802455c:	697a      	ldr	r2, [r7, #20]
 802455e:	8852      	ldrh	r2, [r2, #2]
 8024560:	801a      	strh	r2, [r3, #0]
                                pData += 2;
 8024562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024564:	3304      	adds	r3, #4
 8024566:	64bb      	str	r3, [r7, #72]	; 0x48
                                break;
 8024568:	e06f      	b.n	802464a <OBJ_Read+0x4ea>
                            case    DEFTYPE_REAL64:
                            case 	DEFTYPE_INTEGER64:
                            case    DEFTYPE_UNSIGNED64:
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 802456a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802456c:	f003 030f 	and.w	r3, r3, #15
 8024570:	2b00      	cmp	r3, #0
 8024572:	d001      	beq.n	8024578 <OBJ_Read+0x418>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8024574:	2305      	movs	r3, #5
 8024576:	e0c1      	b.n	80246fc <OBJ_Read+0x59c>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/

                                /* in this example the objects are defined in that way,
                                that the 64 bit type are always starting at an exact WORD offset */
                                pData[0] = pVarPtr[0];
 8024578:	697b      	ldr	r3, [r7, #20]
 802457a:	881a      	ldrh	r2, [r3, #0]
 802457c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802457e:	801a      	strh	r2, [r3, #0]
                                pData[1] = pVarPtr[1];
 8024580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024582:	3302      	adds	r3, #2
 8024584:	697a      	ldr	r2, [r7, #20]
 8024586:	8852      	ldrh	r2, [r2, #2]
 8024588:	801a      	strh	r2, [r3, #0]
                                pData[2] = pVarPtr[2];
 802458a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802458c:	3304      	adds	r3, #4
 802458e:	697a      	ldr	r2, [r7, #20]
 8024590:	8892      	ldrh	r2, [r2, #4]
 8024592:	801a      	strh	r2, [r3, #0]
                                pData[3] = pVarPtr[3];
 8024594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024596:	3306      	adds	r3, #6
 8024598:	697a      	ldr	r2, [r7, #20]
 802459a:	88d2      	ldrh	r2, [r2, #6]
 802459c:	801a      	strh	r2, [r3, #0]
                                pData += 4;
 802459e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80245a0:	3308      	adds	r3, #8
 80245a2:	64bb      	str	r3, [r7, #72]	; 0x48
                                break;
 80245a4:	e051      	b.n	802464a <OBJ_Read+0x4ea>
                            case DEFTYPE_ARRAY_OF_SINT :
                            case DEFTYPE_ARRAY_OF_DINT :
                            case DEFTYPE_ARRAY_OF_UDINT:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 80245a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80245a8:	f003 030f 	and.w	r3, r3, #15
 80245ac:	2b00      	cmp	r3, #0
 80245ae:	d001      	beq.n	80245b4 <OBJ_Read+0x454>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 80245b0:	2305      	movs	r3, #5
 80245b2:	e0a3      	b.n	80246fc <OBJ_Read+0x59c>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/

                                OBJTOMBXMEMCPY(pData, pVarPtr, BIT2BYTE(pEntry->BitLength));
 80245b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80245b6:	885b      	ldrh	r3, [r3, #2]
 80245b8:	3307      	adds	r3, #7
 80245ba:	10db      	asrs	r3, r3, #3
 80245bc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80245be:	6979      	ldr	r1, [r7, #20]
 80245c0:	461a      	mov	r2, r3
 80245c2:	f003 fe4f 	bl	8028264 <memcpy>

/*ECATCHANGE_START(V5.11) SDO2*/
                                pData += BIT2WORD((pEntry->BitLength & ~0xF));
 80245c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80245c8:	885b      	ldrh	r3, [r3, #2]
 80245ca:	f023 030f 	bic.w	r3, r3, #15
 80245ce:	330f      	adds	r3, #15
 80245d0:	111b      	asrs	r3, r3, #4
 80245d2:	005b      	lsls	r3, r3, #1
 80245d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80245d6:	4413      	add	r3, r2
 80245d8:	64bb      	str	r3, [r7, #72]	; 0x48
                                
                                if((pEntry->BitLength & 0xF) != 0)
 80245da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80245dc:	885b      	ldrh	r3, [r3, #2]
 80245de:	f003 030f 	and.w	r3, r3, #15
 80245e2:	2b00      	cmp	r3, #0
 80245e4:	d006      	beq.n	80245f4 <OBJ_Read+0x494>
                                {
                                    /*current entry has an odd word length => clear last byte of next word*/
                                    *pData &= 0xFF;
 80245e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80245e8:	881b      	ldrh	r3, [r3, #0]
 80245ea:	b2db      	uxtb	r3, r3
 80245ec:	b29a      	uxth	r2, r3
 80245ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80245f0:	801a      	strh	r2, [r3, #0]
                                }
/*ECATCHANGE_END(V5.11) SDO2*/

                                break;
 80245f2:	e02a      	b.n	802464a <OBJ_Read+0x4ea>
 80245f4:	e029      	b.n	802464a <OBJ_Read+0x4ea>
                            case    DEFTYPE_VISIBLESTRING:
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 80245f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80245f8:	f003 030f 	and.w	r3, r3, #15
 80245fc:	2b00      	cmp	r3, #0
 80245fe:	d001      	beq.n	8024604 <OBJ_Read+0x4a4>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8024600:	2305      	movs	r3, #5
 8024602:	e07b      	b.n	80246fc <OBJ_Read+0x59c>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/

                                /* in this example the objects are defined in that way,
                                that these types are always starting at an even WORD offset */
                                OBJTOMBXSTRCPY(pData, pVarPtr, BIT2BYTE(pEntry->BitLength));
 8024604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024606:	885b      	ldrh	r3, [r3, #2]
 8024608:	3307      	adds	r3, #7
 802460a:	10db      	asrs	r3, r3, #3
 802460c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 802460e:	6979      	ldr	r1, [r7, #20]
 8024610:	461a      	mov	r2, r3
 8024612:	f003 fe27 	bl	8028264 <memcpy>
/*ECATCHANGE_START(V5.11) SDO2*/
                                pData += BIT2WORD((pEntry->BitLength & ~0xF));
 8024616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024618:	885b      	ldrh	r3, [r3, #2]
 802461a:	f023 030f 	bic.w	r3, r3, #15
 802461e:	330f      	adds	r3, #15
 8024620:	111b      	asrs	r3, r3, #4
 8024622:	005b      	lsls	r3, r3, #1
 8024624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024626:	4413      	add	r3, r2
 8024628:	64bb      	str	r3, [r7, #72]	; 0x48

                                if((pEntry->BitLength & 0xF) != 0)
 802462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802462c:	885b      	ldrh	r3, [r3, #2]
 802462e:	f003 030f 	and.w	r3, r3, #15
 8024632:	2b00      	cmp	r3, #0
 8024634:	d006      	beq.n	8024644 <OBJ_Read+0x4e4>
                                {
                                    /*current entry has an odd word length => clear last byte of next word*/
                                    *pData &= 0xFF;
 8024636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024638:	881b      	ldrh	r3, [r3, #0]
 802463a:	b2db      	uxtb	r3, r3
 802463c:	b29a      	uxth	r2, r3
 802463e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024640:	801a      	strh	r2, [r3, #0]
                                }
/*ECATCHANGE_END(V5.11) SDO2*/
                                
                                break;
 8024642:	e002      	b.n	802464a <OBJ_Read+0x4ea>
 8024644:	e001      	b.n	802464a <OBJ_Read+0x4ea>
                            default:
                                /* other data types are not supported from this example */
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8024646:	2318      	movs	r3, #24
 8024648:	e058      	b.n	80246fc <OBJ_Read+0x59c>
                            } //switch (deftype)

                            bRead = 1;
 802464a:	2301      	movs	r3, #1
 802464c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8024650:	e044      	b.n	80246dc <OBJ_Read+0x57c>
 8024652:	e043      	b.n	80246dc <OBJ_Read+0x57c>
                    }
                }
                else
                {
                    /*No access to current object entry => shift pData if required*/
                    UINT8 cnt = 0;
 8024654:	2300      	movs	r3, #0
 8024656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                    /*If this entry is the first in the 16Bit block clear the memory*/
                    if ((bitOffset & 0x0F) == 0) 
 802465a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802465c:	f003 030f 	and.w	r3, r3, #15
 8024660:	2b00      	cmp	r3, #0
 8024662:	d102      	bne.n	802466a <OBJ_Read+0x50a>
                    {
                        *pData = 0;
 8024664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024666:	2200      	movs	r2, #0
 8024668:	801a      	strh	r2, [r3, #0]
                    }

                    /*Handle Bit/Byte Offset*/
                    if (((pEntry->BitLength & 0xF) > 0)
 802466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802466c:	885b      	ldrh	r3, [r3, #2]
 802466e:	f003 030f 	and.w	r3, r3, #15
 8024672:	2b00      	cmp	r3, #0
 8024674:	dd0d      	ble.n	8024692 <OBJ_Read+0x532>
                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 8024676:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802467a:	8852      	ldrh	r2, [r2, #2]
 802467c:	4413      	add	r3, r2
 802467e:	f003 030f 	and.w	r3, r3, #15
 8024682:	2b00      	cmp	r3, #0
 8024684:	d105      	bne.n	8024692 <OBJ_Read+0x532>
                    {
                        /* we have reached the UINT16 border */
                        pData++;
 8024686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024688:	3302      	adds	r3, #2
 802468a:	64bb      	str	r3, [r7, #72]	; 0x48
                        
                        /*Clear new buffer*/
                        *pData = 0;
 802468c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802468e:	2200      	movs	r2, #0
 8024690:	801a      	strh	r2, [r3, #0]
                    }

                    /*increment WORD offset*/
                    for(cnt = 0; cnt <((pEntry->BitLength & 0xF0) >> 4); cnt++)
 8024692:	2300      	movs	r3, #0
 8024694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8024698:	e00a      	b.n	80246b0 <OBJ_Read+0x550>
                    {
                        /*current 16Bit are skipped => clear current buffer */
                        pData++;
 802469a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802469c:	3302      	adds	r3, #2
 802469e:	64bb      	str	r3, [r7, #72]	; 0x48

                        /*Clear new buffer*/
                        *pData = 0;
 80246a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80246a2:	2200      	movs	r2, #0
 80246a4:	801a      	strh	r2, [r3, #0]
                        /*Clear new buffer*/
                        *pData = 0;
                    }

                    /*increment WORD offset*/
                    for(cnt = 0; cnt <((pEntry->BitLength & 0xF0) >> 4); cnt++)
 80246a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80246aa:	3301      	adds	r3, #1
 80246ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80246b0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80246b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80246b6:	885b      	ldrh	r3, [r3, #2]
 80246b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80246bc:	111b      	asrs	r3, r3, #4
 80246be:	429a      	cmp	r2, r3
 80246c0:	dbeb      	blt.n	802469a <OBJ_Read+0x53a>


                    

                    /* we don't have read access */
                    if ( (pEntry->ObjAccess & ACCESS_READ) == 0 )
 80246c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80246c4:	889b      	ldrh	r3, [r3, #4]
 80246c6:	f003 0307 	and.w	r3, r3, #7
 80246ca:	2b00      	cmp	r3, #0
 80246cc:	d103      	bne.n	80246d6 <OBJ_Read+0x576>
                    {
                        /* it is a write only entry */
                        result = ABORTIDX_WRITE_ONLY_ENTRY;
 80246ce:	2306      	movs	r3, #6
 80246d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80246d4:	e002      	b.n	80246dc <OBJ_Read+0x57c>
                    }
                    else
                    {
                        /* we don't have read access in this state */
                        result = ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 80246d6:	231a      	movs	r3, #26
 80246d8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            UINT8 bRead = 0x0;
            UINT8 result = 0;


            /* a variable object is read */
            for (i = subindex; i <= lastSubindex; i++)
 80246dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80246de:	3301      	adds	r3, #1
 80246e0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80246e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80246e4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80246e6:	429a      	cmp	r2, r3
 80246e8:	f67f aded 	bls.w	80242c6 <OBJ_Read+0x166>
                        result = ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
                    }
                }
            }

            if(bRead == 0)
 80246ec:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80246f0:	2b00      	cmp	r3, #0
 80246f2:	d102      	bne.n	80246fa <OBJ_Read+0x59a>
                return result;
 80246f4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80246f8:	e000      	b.n	80246fc <OBJ_Read+0x59c>
        }

    return 0;
 80246fa:	2300      	movs	r3, #0
}
 80246fc:	4618      	mov	r0, r3
 80246fe:	373c      	adds	r7, #60	; 0x3c
 8024700:	46bd      	mov	sp, r7
 8024702:	bd90      	pop	{r4, r7, pc}
 8024704:	080289b4 	.word	0x080289b4

08024708 <OBJ_Write>:

 \brief    This function writes the requested object
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 OBJ_Write( UINT16 index, UINT8 subindex, UINT32 dataSize, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData, UINT8 bCompleteAccess )
{
 8024708:	b590      	push	{r4, r7, lr}
 802470a:	b091      	sub	sp, #68	; 0x44
 802470c:	af02      	add	r7, sp, #8
 802470e:	60ba      	str	r2, [r7, #8]
 8024710:	607b      	str	r3, [r7, #4]
 8024712:	4603      	mov	r3, r0
 8024714:	81fb      	strh	r3, [r7, #14]
 8024716:	460b      	mov	r3, r1
 8024718:	737b      	strb	r3, [r7, #13]
    UINT16 i = subindex;
 802471a:	7b7b      	ldrb	r3, [r7, #13]
 802471c:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 802471e:	687b      	ldr	r3, [r7, #4]
 8024720:	899b      	ldrh	r3, [r3, #12]
 8024722:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8024726:	121b      	asrs	r3, r3, #8
 8024728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    UINT16 maxSubindex = 0;
 802472c:	2300      	movs	r3, #0
 802472e:	86bb      	strh	r3, [r7, #52]	; 0x34
    UINT16 maxConfiguredSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT; //required to check if value for Subindex0 is valid
 8024730:	687b      	ldr	r3, [r7, #4]
 8024732:	899b      	ldrh	r3, [r3, #12]
 8024734:	b2db      	uxtb	r3, r3
 8024736:	843b      	strh	r3, [r7, #32]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    BOOL bClearSubindex0Required = FALSE;
 8024738:	2300      	movs	r3, #0
 802473a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    /* lastSubindex is used for complete access to make loop over the requested entries
       to be read, we initialize this variable with the requested subindex that only
       one loop will be done for a single access */
    UINT16 lastSubindex = subindex;
 802473e:	7b7b      	ldrb	r3, [r7, #13]
 8024740:	863b      	strh	r3, [r7, #48]	; 0x30

    /* if subindex 0 is writable, the maximum subindex should be checked in an object specific function,
        because for the PDO mapping and PDO assign the object shall only be written if subindex 0 is 0. */
    if ( objCode != OBJCODE_VAR )
 8024742:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8024746:	2b07      	cmp	r3, #7
 8024748:	d023      	beq.n	8024792 <OBJ_Write+0x8a>
    {
        /* if the object is an array or record we have to get the maxSubindex from the
           actual value of subindex 0, which is stored as UINT16 at the beginning of the
            object's variable */
        maxSubindex = (UINT8) ((UINT16 MBXMEM *) (pObjEntry->pVarPtr))[0];
 802474a:	687b      	ldr	r3, [r7, #4]
 802474c:	699b      	ldr	r3, [r3, #24]
 802474e:	881b      	ldrh	r3, [r3, #0]
 8024750:	b2db      	uxtb	r3, r3
 8024752:	86bb      	strh	r3, [r7, #52]	; 0x34

        /*If the subindex0 of a PDO assign or PDO mapping object is 0 the maximum subindex is specified by the object description*/
        if(maxSubindex == 0 && (IS_PDO_ASSIGN(index) || IS_RX_PDO(index) || IS_TX_PDO(index)))
 8024754:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8024756:	2b00      	cmp	r3, #0
 8024758:	d11b      	bne.n	8024792 <OBJ_Write+0x8a>
 802475a:	89fb      	ldrh	r3, [r7, #14]
 802475c:	f641 420f 	movw	r2, #7183	; 0x1c0f
 8024760:	4293      	cmp	r3, r2
 8024762:	d904      	bls.n	802476e <OBJ_Write+0x66>
 8024764:	89fb      	ldrh	r3, [r7, #14]
 8024766:	f641 422f 	movw	r2, #7215	; 0x1c2f
 802476a:	4293      	cmp	r3, r2
 802476c:	d90f      	bls.n	802478e <OBJ_Write+0x86>
 802476e:	89fb      	ldrh	r3, [r7, #14]
 8024770:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8024774:	d303      	bcc.n	802477e <OBJ_Write+0x76>
 8024776:	89fb      	ldrh	r3, [r7, #14]
 8024778:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 802477c:	d307      	bcc.n	802478e <OBJ_Write+0x86>
 802477e:	89fb      	ldrh	r3, [r7, #14]
 8024780:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8024784:	d305      	bcc.n	8024792 <OBJ_Write+0x8a>
 8024786:	89fb      	ldrh	r3, [r7, #14]
 8024788:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 802478c:	d201      	bcs.n	8024792 <OBJ_Write+0x8a>
        {
            maxSubindex = maxConfiguredSubindex;
 802478e:	8c3b      	ldrh	r3, [r7, #32]
 8024790:	86bb      	strh	r3, [r7, #52]	; 0x34
        }
    }


    if ( bCompleteAccess )
 8024792:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8024796:	2b00      	cmp	r3, #0
 8024798:	d012      	beq.n	80247c0 <OBJ_Write+0xb8>
    {
        if ( objCode == OBJCODE_VAR )
 802479a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802479e:	2b07      	cmp	r3, #7
 80247a0:	d101      	bne.n	80247a6 <OBJ_Write+0x9e>
            /* complete access is not supported with simple objects */
            return ABORTIDX_UNSUPPORTED_ACCESS;
 80247a2:	2305      	movs	r3, #5
 80247a4:	e2ce      	b.n	8024d44 <OBJ_Write+0x63c>

        if ((subindex == 0) && (dataSize > 0))
 80247a6:	7b7b      	ldrb	r3, [r7, #13]
 80247a8:	2b00      	cmp	r3, #0
 80247aa:	d106      	bne.n	80247ba <OBJ_Write+0xb2>
 80247ac:	68bb      	ldr	r3, [r7, #8]
 80247ae:	2b00      	cmp	r3, #0
 80247b0:	d003      	beq.n	80247ba <OBJ_Write+0xb2>
        {
            /* we change the subindex 0 */
            maxSubindex = (UINT8) SWAPWORD(pData[0]);
 80247b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80247b4:	881b      	ldrh	r3, [r3, #0]
 80247b6:	b2db      	uxtb	r3, r3
 80247b8:	86bb      	strh	r3, [r7, #52]	; 0x34
        }

        /* we write until the maximum subindex */
        lastSubindex = maxSubindex;
 80247ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80247bc:	863b      	strh	r3, [r7, #48]	; 0x30
 80247be:	e023      	b.n	8024808 <OBJ_Write+0x100>
    }
    else
    if (subindex > maxSubindex)
 80247c0:	7b7b      	ldrb	r3, [r7, #13]
 80247c2:	b29b      	uxth	r3, r3
 80247c4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80247c6:	429a      	cmp	r2, r3
 80247c8:	d201      	bcs.n	80247ce <OBJ_Write+0xc6>
    {
        /* the maximum subindex is reached */
        return ABORTIDX_SUBINDEX_NOT_EXISTING;
 80247ca:	2311      	movs	r3, #17
 80247cc:	e2ba      	b.n	8024d44 <OBJ_Write+0x63c>
    {
        /* we check the write access for single accesses here, a complete write access
           is allowed if at least one entry is writable (in this case the values for the
            read only entries shall be ignored) */
        /* we get the corresponding entry description */
        pEntry = OBJ_GetEntryDesc(pObjEntry, subindex);
 80247ce:	7b7b      	ldrb	r3, [r7, #13]
 80247d0:	6878      	ldr	r0, [r7, #4]
 80247d2:	4619      	mov	r1, r3
 80247d4:	f7ff fb04 	bl	8023de0 <OBJ_GetEntryDesc>
 80247d8:	61f8      	str	r0, [r7, #28]

        /* check if we have write access (bits 3-5 (PREOP, SAFEOP, OP) of ObjAccess)
           by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
        if ( ((UINT8) ((pEntry->ObjAccess & ACCESS_WRITE) >> 2)) < (nAlStatus & STATE_MASK) )
 80247da:	69fb      	ldr	r3, [r7, #28]
 80247dc:	889b      	ldrh	r3, [r3, #4]
 80247de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80247e2:	109b      	asrs	r3, r3, #2
 80247e4:	b2db      	uxtb	r3, r3
 80247e6:	461a      	mov	r2, r3
 80247e8:	4b9b      	ldr	r3, [pc, #620]	; (8024a58 <OBJ_Write+0x350>)
 80247ea:	781b      	ldrb	r3, [r3, #0]
 80247ec:	f003 030f 	and.w	r3, r3, #15
 80247f0:	429a      	cmp	r2, r3
 80247f2:	da09      	bge.n	8024808 <OBJ_Write+0x100>
        {
            /* we don't have write access */
            if ( (pEntry->ObjAccess & ACCESS_WRITE) == 0 )
 80247f4:	69fb      	ldr	r3, [r7, #28]
 80247f6:	889b      	ldrh	r3, [r3, #4]
 80247f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80247fc:	2b00      	cmp	r3, #0
 80247fe:	d101      	bne.n	8024804 <OBJ_Write+0xfc>
            {
                /* it is a read only entry */
                return ABORTIDX_READ_ONLY_ENTRY;
 8024800:	2307      	movs	r3, #7
 8024802:	e29f      	b.n	8024d44 <OBJ_Write+0x63c>
            }
            else
            {
                /* we don't have write access in this state */
                return ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 8024804:	231a      	movs	r3, #26
 8024806:	e29d      	b.n	8024d44 <OBJ_Write+0x63c>
        }
    }

    /* Subindex 0 shall be set to zero if a single PDO / PDO assign entry is written
    or a complete access without subindex0 is requested */
    if((subindex > 0) &&
 8024808:	7b7b      	ldrb	r3, [r7, #13]
 802480a:	2b00      	cmp	r3, #0
 802480c:	d024      	beq.n	8024858 <OBJ_Write+0x150>
 802480e:	89fb      	ldrh	r3, [r7, #14]
 8024810:	f641 420f 	movw	r2, #7183	; 0x1c0f
 8024814:	4293      	cmp	r3, r2
 8024816:	d904      	bls.n	8024822 <OBJ_Write+0x11a>
        (IS_PDO_ASSIGN(index) || IS_RX_PDO(index)|| IS_TX_PDO(index))
 8024818:	89fb      	ldrh	r3, [r7, #14]
 802481a:	f641 422f 	movw	r2, #7215	; 0x1c2f
 802481e:	4293      	cmp	r3, r2
 8024820:	d90f      	bls.n	8024842 <OBJ_Write+0x13a>
 8024822:	89fb      	ldrh	r3, [r7, #14]
 8024824:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8024828:	d303      	bcc.n	8024832 <OBJ_Write+0x12a>
 802482a:	89fb      	ldrh	r3, [r7, #14]
 802482c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8024830:	d307      	bcc.n	8024842 <OBJ_Write+0x13a>
 8024832:	89fb      	ldrh	r3, [r7, #14]
 8024834:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8024838:	d30e      	bcc.n	8024858 <OBJ_Write+0x150>
 802483a:	89fb      	ldrh	r3, [r7, #14]
 802483c:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8024840:	d20a      	bcs.n	8024858 <OBJ_Write+0x150>
        )
    {
        /*Check if Subindex0 was cleared before*/
        UINT16 Subindex0 = (*(UINT16 *)pObjEntry->pVarPtr) & 0x00FF;
 8024842:	687b      	ldr	r3, [r7, #4]
 8024844:	699b      	ldr	r3, [r3, #24]
 8024846:	881b      	ldrh	r3, [r3, #0]
 8024848:	b2db      	uxtb	r3, r3
 802484a:	837b      	strh	r3, [r7, #26]
        if(Subindex0 != 0x00)
 802484c:	8b7b      	ldrh	r3, [r7, #26]
 802484e:	2b00      	cmp	r3, #0
 8024850:	d002      	beq.n	8024858 <OBJ_Write+0x150>
            bClearSubindex0Required = TRUE;
 8024852:	2301      	movs	r3, #1
 8024854:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }

    if ( pObjEntry->Write != NULL )
 8024858:	687b      	ldr	r3, [r7, #4]
 802485a:	6a1b      	ldr	r3, [r3, #32]
 802485c:	2b00      	cmp	r3, #0
 802485e:	d00d      	beq.n	802487c <OBJ_Write+0x174>
    {
        /* Write function is defined, we call the object specific write function */
        return pObjEntry->Write(index, subindex, dataSize, pData, bCompleteAccess);
 8024860:	687b      	ldr	r3, [r7, #4]
 8024862:	6a1c      	ldr	r4, [r3, #32]
 8024864:	89f9      	ldrh	r1, [r7, #14]
 8024866:	7b7a      	ldrb	r2, [r7, #13]
 8024868:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 802486c:	9300      	str	r3, [sp, #0]
 802486e:	4608      	mov	r0, r1
 8024870:	4611      	mov	r1, r2
 8024872:	68ba      	ldr	r2, [r7, #8]
 8024874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024876:	47a0      	blx	r4
 8024878:	4603      	mov	r3, r0
 802487a:	e263      	b.n	8024d44 <OBJ_Write+0x63c>
    }
    else
    {
        UINT8 bWritten = 0;
 802487c:	2300      	movs	r3, #0
 802487e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        UINT8 result = ABORTIDX_READ_ONLY_ENTRY;
 8024882:	2307      	movs	r3, #7
 8024884:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

/*ECATCHANGE_START(V5.11) ECAT*/
        if (dataSize == 0)
 8024888:	68bb      	ldr	r3, [r7, #8]
 802488a:	2b00      	cmp	r3, #0
 802488c:	d101      	bne.n	8024892 <OBJ_Write+0x18a>
        {
           return 0; //no error
 802488e:	2300      	movs	r3, #0
 8024890:	e258      	b.n	8024d44 <OBJ_Write+0x63c>
        }
/*ECATCHANGE_END(V5.11) ECAT*/

        /* we use the standard write function */
        for (i = subindex; i <= lastSubindex; i++)
 8024892:	7b7b      	ldrb	r3, [r7, #13]
 8024894:	86fb      	strh	r3, [r7, #54]	; 0x36
 8024896:	e248      	b.n	8024d2a <OBJ_Write+0x622>
        {
            /* if only a single entry is requested, this loop will only be done once */
            UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 8024898:	687b      	ldr	r3, [r7, #4]
 802489a:	699b      	ldr	r3, [r3, #24]
 802489c:	62bb      	str	r3, [r7, #40]	; 0x28
            UINT16 bitOffset = 0;
 802489e:	2300      	movs	r3, #0
 80248a0:	833b      	strh	r3, [r7, #24]

            /* we get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry,(UINT8) i);
 80248a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80248a4:	b2db      	uxtb	r3, r3
 80248a6:	6878      	ldr	r0, [r7, #4]
 80248a8:	4619      	mov	r1, r3
 80248aa:	f7ff fa99 	bl	8023de0 <OBJ_GetEntryDesc>
 80248ae:	61f8      	str	r0, [r7, #28]

            /*Get the bitOffset before check the access rights to calculate pData offset*/
            bitOffset = OBJ_GetEntryOffset((UINT8)i, pObjEntry);
 80248b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80248b2:	b2db      	uxtb	r3, r3
 80248b4:	4618      	mov	r0, r3
 80248b6:	6879      	ldr	r1, [r7, #4]
 80248b8:	f7ff faca 	bl	8023e50 <OBJ_GetEntryOffset>
 80248bc:	4603      	mov	r3, r0
 80248be:	833b      	strh	r3, [r7, #24]

            /* we check if we have write access (bits 3-5 (PREOP, SAFEOP, OP) of ObjAccess)
               by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
            if ( ((UINT8)((pEntry->ObjAccess & ACCESS_WRITE) >> 2)) >= (nAlStatus & STATE_MASK) )
 80248c0:	69fb      	ldr	r3, [r7, #28]
 80248c2:	889b      	ldrh	r3, [r3, #4]
 80248c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80248c8:	109b      	asrs	r3, r3, #2
 80248ca:	b2db      	uxtb	r3, r3
 80248cc:	461a      	mov	r2, r3
 80248ce:	4b62      	ldr	r3, [pc, #392]	; (8024a58 <OBJ_Write+0x350>)
 80248d0:	781b      	ldrb	r3, [r3, #0]
 80248d2:	f003 030f 	and.w	r3, r3, #15
 80248d6:	429a      	cmp	r2, r3
 80248d8:	f2c0 81fc 	blt.w	8024cd4 <OBJ_Write+0x5cc>
            {
                /* we have write access for this entry */
                if (i != 0)
 80248dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80248de:	2b00      	cmp	r3, #0
 80248e0:	d006      	beq.n	80248f0 <OBJ_Write+0x1e8>
                {
                    /* we increment the variable pointer to the corresponding word address */
                    pVarPtr += (bitOffset >> 4);
 80248e2:	8b3b      	ldrh	r3, [r7, #24]
 80248e4:	091b      	lsrs	r3, r3, #4
 80248e6:	b29b      	uxth	r3, r3
 80248e8:	005b      	lsls	r3, r3, #1
 80248ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80248ec:	4413      	add	r3, r2
 80248ee:	62bb      	str	r3, [r7, #40]	; 0x28
                }


                if ( i == subindex                                     /* requested entry */
 80248f0:	7b7b      	ldrb	r3, [r7, #13]
 80248f2:	b29b      	uxth	r3, r3
 80248f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80248f6:	429a      	cmp	r2, r3
 80248f8:	d00a      	beq.n	8024910 <OBJ_Write+0x208>
                  || (bCompleteAccess && i >= subindex) )       /* complete access and entry should be read */
 80248fa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80248fe:	2b00      	cmp	r3, #0
 8024900:	f000 8210 	beq.w	8024d24 <OBJ_Write+0x61c>
 8024904:	7b7b      	ldrb	r3, [r7, #13]
 8024906:	b29b      	uxth	r3, r3
 8024908:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 802490a:	429a      	cmp	r2, r3
 802490c:	f0c0 820a 	bcc.w	8024d24 <OBJ_Write+0x61c>
                {
                    UINT16 bitMask;

                    /* we have to copy the entry */
                    if (i == 0 && objCode != OBJCODE_VAR)
 8024910:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024912:	2b00      	cmp	r3, #0
 8024914:	d115      	bne.n	8024942 <OBJ_Write+0x23a>
 8024916:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802491a:	2b07      	cmp	r3, #7
 802491c:	d011      	beq.n	8024942 <OBJ_Write+0x23a>
                    {
                        /*check if the value for subindex0 is valid */
                        UINT8 NewSubindex0 = (UINT8) SWAPWORD(pData[0]);
 802491e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024920:	881b      	ldrh	r3, [r3, #0]
 8024922:	74fb      	strb	r3, [r7, #19]
                        if(maxConfiguredSubindex < NewSubindex0)
 8024924:	7cfb      	ldrb	r3, [r7, #19]
 8024926:	b29b      	uxth	r3, r3
 8024928:	8c3a      	ldrh	r2, [r7, #32]
 802492a:	429a      	cmp	r2, r3
 802492c:	d201      	bcs.n	8024932 <OBJ_Write+0x22a>
                        {
                            return ABORTIDX_VALUE_TOO_GREAT;
 802492e:	2313      	movs	r3, #19
 8024930:	e208      	b.n	8024d44 <OBJ_Write+0x63c>
                        }

                        /* subindex 0 of an array or record shall be written */
/* ECATCHANGE_START(V5.11) SDO5*/
                        pVarPtr[0] = SWAPWORD(pData[0]);
 8024932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024934:	881a      	ldrh	r2, [r3, #0]
 8024936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024938:	801a      	strh	r2, [r3, #0]
/* ECATCHANGE_END(V5.11) SDO5*/
                        /* we increment the destination pointer by 2 because the subindex 0 will be
                           transmitted as UINT16 for a complete access */
                        pData++;
 802493a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802493c:	3302      	adds	r3, #2
 802493e:	64bb      	str	r3, [r7, #72]	; 0x48
                {
                    UINT16 bitMask;

                    /* we have to copy the entry */
                    if (i == 0 && objCode != OBJCODE_VAR)
                    {
 8024940:	e1c4      	b.n	8024ccc <OBJ_Write+0x5c4>
                           transmitted as UINT16 for a complete access */
                        pData++;
                    }
                    else
                    {
                        UINT16 dataType = pEntry->DataType;
 8024942:	69fb      	ldr	r3, [r7, #28]
 8024944:	881b      	ldrh	r3, [r3, #0]
 8024946:	84fb      	strh	r3, [r7, #38]	; 0x26
                        if (pEntry->DataType >= 0x700)
 8024948:	69fb      	ldr	r3, [r7, #28]
 802494a:	881b      	ldrh	r3, [r3, #0]
 802494c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8024950:	d315      	bcc.n	802497e <OBJ_Write+0x276>
                        {
                            /* the ENUM data types are defined from index 0x700 in this example
                               convert in standard data type for the write access */
                            if ( pEntry->BitLength <= 8 )
 8024952:	69fb      	ldr	r3, [r7, #28]
 8024954:	885b      	ldrh	r3, [r3, #2]
 8024956:	2b08      	cmp	r3, #8
 8024958:	d804      	bhi.n	8024964 <OBJ_Write+0x25c>
                                dataType = DEFTYPE_BIT1-1+pEntry->BitLength;
 802495a:	69fb      	ldr	r3, [r7, #28]
 802495c:	885b      	ldrh	r3, [r3, #2]
 802495e:	332f      	adds	r3, #47	; 0x2f
 8024960:	84fb      	strh	r3, [r7, #38]	; 0x26
 8024962:	e00c      	b.n	802497e <OBJ_Write+0x276>
                            else if ( pEntry->BitLength == 16 )
 8024964:	69fb      	ldr	r3, [r7, #28]
 8024966:	885b      	ldrh	r3, [r3, #2]
 8024968:	2b10      	cmp	r3, #16
 802496a:	d102      	bne.n	8024972 <OBJ_Write+0x26a>
                                dataType = DEFTYPE_UNSIGNED16;
 802496c:	2306      	movs	r3, #6
 802496e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8024970:	e005      	b.n	802497e <OBJ_Write+0x276>
                            else if ( pEntry->BitLength == 32 )
 8024972:	69fb      	ldr	r3, [r7, #28]
 8024974:	885b      	ldrh	r3, [r3, #2]
 8024976:	2b20      	cmp	r3, #32
 8024978:	d101      	bne.n	802497e <OBJ_Write+0x276>
                                dataType = DEFTYPE_UNSIGNED32;
 802497a:	2307      	movs	r3, #7
 802497c:	84fb      	strh	r3, [r7, #38]	; 0x26
                        }

                        switch (dataType)
 802497e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8024980:	2b11      	cmp	r3, #17
 8024982:	f000 814d 	beq.w	8024c20 <OBJ_Write+0x518>
 8024986:	2b11      	cmp	r3, #17
 8024988:	dc1e      	bgt.n	80249c8 <OBJ_Write+0x2c0>
 802498a:	2b05      	cmp	r3, #5
 802498c:	d066      	beq.n	8024a5c <OBJ_Write+0x354>
 802498e:	2b05      	cmp	r3, #5
 8024990:	dc0d      	bgt.n	80249ae <OBJ_Write+0x2a6>
 8024992:	2b02      	cmp	r3, #2
 8024994:	dc04      	bgt.n	80249a0 <OBJ_Write+0x298>
 8024996:	2b01      	cmp	r3, #1
 8024998:	da60      	bge.n	8024a5c <OBJ_Write+0x354>
 802499a:	2b00      	cmp	r3, #0
 802499c:	d03b      	beq.n	8024a16 <OBJ_Write+0x30e>
 802499e:	e193      	b.n	8024cc8 <OBJ_Write+0x5c0>
 80249a0:	2b03      	cmp	r3, #3
 80249a2:	f000 80b5 	beq.w	8024b10 <OBJ_Write+0x408>
 80249a6:	2b04      	cmp	r3, #4
 80249a8:	f000 8112 	beq.w	8024bd0 <OBJ_Write+0x4c8>
 80249ac:	e18c      	b.n	8024cc8 <OBJ_Write+0x5c0>
 80249ae:	2b08      	cmp	r3, #8
 80249b0:	dc03      	bgt.n	80249ba <OBJ_Write+0x2b2>
 80249b2:	2b07      	cmp	r3, #7
 80249b4:	f280 810c 	bge.w	8024bd0 <OBJ_Write+0x4c8>
 80249b8:	e0aa      	b.n	8024b10 <OBJ_Write+0x408>
 80249ba:	2b09      	cmp	r3, #9
 80249bc:	f000 814e 	beq.w	8024c5c <OBJ_Write+0x554>
 80249c0:	2b0b      	cmp	r3, #11
 80249c2:	f300 8181 	bgt.w	8024cc8 <OBJ_Write+0x5c0>
 80249c6:	e164      	b.n	8024c92 <OBJ_Write+0x58a>
 80249c8:	2b2d      	cmp	r3, #45	; 0x2d
 80249ca:	d047      	beq.n	8024a5c <OBJ_Write+0x354>
 80249cc:	2b2d      	cmp	r3, #45	; 0x2d
 80249ce:	dc11      	bgt.n	80249f4 <OBJ_Write+0x2ec>
 80249d0:	2b1e      	cmp	r3, #30
 80249d2:	d043      	beq.n	8024a5c <OBJ_Write+0x354>
 80249d4:	2b1e      	cmp	r3, #30
 80249d6:	dc06      	bgt.n	80249e6 <OBJ_Write+0x2de>
 80249d8:	2b15      	cmp	r3, #21
 80249da:	f000 8121 	beq.w	8024c20 <OBJ_Write+0x518>
 80249de:	2b1b      	cmp	r3, #27
 80249e0:	f000 811e 	beq.w	8024c20 <OBJ_Write+0x518>
 80249e4:	e170      	b.n	8024cc8 <OBJ_Write+0x5c0>
 80249e6:	2b1f      	cmp	r3, #31
 80249e8:	f000 8092 	beq.w	8024b10 <OBJ_Write+0x408>
 80249ec:	2b20      	cmp	r3, #32
 80249ee:	f000 80ef 	beq.w	8024bd0 <OBJ_Write+0x4c8>
 80249f2:	e169      	b.n	8024cc8 <OBJ_Write+0x5c0>
 80249f4:	2b37      	cmp	r3, #55	; 0x37
 80249f6:	dc08      	bgt.n	8024a0a <OBJ_Write+0x302>
 80249f8:	2b30      	cmp	r3, #48	; 0x30
 80249fa:	da2f      	bge.n	8024a5c <OBJ_Write+0x354>
 80249fc:	2b2e      	cmp	r3, #46	; 0x2e
 80249fe:	f000 8087 	beq.w	8024b10 <OBJ_Write+0x408>
 8024a02:	2b2f      	cmp	r3, #47	; 0x2f
 8024a04:	f000 80e4 	beq.w	8024bd0 <OBJ_Write+0x4c8>
 8024a08:	e15e      	b.n	8024cc8 <OBJ_Write+0x5c0>
 8024a0a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8024a0e:	2b03      	cmp	r3, #3
 8024a10:	f200 815a 	bhi.w	8024cc8 <OBJ_Write+0x5c0>
 8024a14:	e13d      	b.n	8024c92 <OBJ_Write+0x58a>
                        {
                        case DEFTYPE_NULL:
                            if(bCompleteAccess)
 8024a16:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8024a1a:	2b00      	cmp	r3, #0
 8024a1c:	d01a      	beq.n	8024a54 <OBJ_Write+0x34c>
                            {
                                /*Handle alignment entry*/
                                if (((pEntry->BitLength & 0xF) > 0)
 8024a1e:	69fb      	ldr	r3, [r7, #28]
 8024a20:	885b      	ldrh	r3, [r3, #2]
 8024a22:	f003 030f 	and.w	r3, r3, #15
 8024a26:	2b00      	cmp	r3, #0
 8024a28:	dd0a      	ble.n	8024a40 <OBJ_Write+0x338>
                                    && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 8024a2a:	8b3b      	ldrh	r3, [r7, #24]
 8024a2c:	69fa      	ldr	r2, [r7, #28]
 8024a2e:	8852      	ldrh	r2, [r2, #2]
 8024a30:	4413      	add	r3, r2
 8024a32:	f003 030f 	and.w	r3, r3, #15
 8024a36:	2b00      	cmp	r3, #0
 8024a38:	d102      	bne.n	8024a40 <OBJ_Write+0x338>
                                {
                                    /* we have reached the UINT16 border */
                                    pData++;
 8024a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024a3c:	3302      	adds	r3, #2
 8024a3e:	64bb      	str	r3, [r7, #72]	; 0x48
                                }

                                /*increment WORD offset*/
                                pData += ((pEntry->BitLength & 0xF0) >> 4);
 8024a40:	69fb      	ldr	r3, [r7, #28]
 8024a42:	885b      	ldrh	r3, [r3, #2]
 8024a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024a48:	111b      	asrs	r3, r3, #4
 8024a4a:	005b      	lsls	r3, r3, #1
 8024a4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024a4e:	4413      	add	r3, r2
 8024a50:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                            else
                            {
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
                            }
                            break;
 8024a52:	e13b      	b.n	8024ccc <OBJ_Write+0x5c4>
                                /*increment WORD offset*/
                                pData += ((pEntry->BitLength & 0xF0) >> 4);
                            }
                            else
                            {
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8024a54:	2318      	movs	r3, #24
 8024a56:	e175      	b.n	8024d44 <OBJ_Write+0x63c>
 8024a58:	1fff2541 	.word	0x1fff2541
/*ECATCHANGE_START(V5.11) SDO9*/
                        case    DEFTYPE_BYTE :
/*ECATCHANGE_END(V5.11) SDO9*/
                        {
                            /* depending on the bitOffset we have to copy the Hi or the Lo-Byte */
                            UINT16 TmpValue = 0x0000;
 8024a5c:	2300      	movs	r3, #0
 8024a5e:	84bb      	strh	r3, [r7, #36]	; 0x24

                            bitMask = cBitMask[pEntry->BitLength] << (bitOffset & 0x0F);
 8024a60:	69fb      	ldr	r3, [r7, #28]
 8024a62:	885b      	ldrh	r3, [r3, #2]
 8024a64:	461a      	mov	r2, r3
 8024a66:	4b9f      	ldr	r3, [pc, #636]	; (8024ce4 <OBJ_Write+0x5dc>)
 8024a68:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8024a6c:	461a      	mov	r2, r3
 8024a6e:	8b3b      	ldrh	r3, [r7, #24]
 8024a70:	f003 030f 	and.w	r3, r3, #15
 8024a74:	fa02 f303 	lsl.w	r3, r2, r3
 8024a78:	82fb      	strh	r3, [r7, #22]

                            /*Swap object data (if required); all masks and offsets are defined for little endian format*/
                            TmpValue = SWAPWORD(pVarPtr[0]);
 8024a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024a7c:	881b      	ldrh	r3, [r3, #0]
 8024a7e:	84bb      	strh	r3, [r7, #36]	; 0x24

                            /*Clear corresponding bits*/
                            TmpValue &= ~bitMask;
 8024a80:	8afb      	ldrh	r3, [r7, #22]
 8024a82:	43db      	mvns	r3, r3
 8024a84:	b29a      	uxth	r2, r3
 8024a86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8024a88:	4013      	ands	r3, r2
 8024a8a:	b29b      	uxth	r3, r3
 8024a8c:	84bb      	strh	r3, [r7, #36]	; 0x24

/* ECATCHANGE_START(V5.11) SDO7*/
                            if (bCompleteAccess) 
 8024a8e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8024a92:	2b00      	cmp	r3, #0
 8024a94:	d008      	beq.n	8024aa8 <OBJ_Write+0x3a0>
                            {
                                /*shifting is not required for Complete access because the bits are set to the correct offset by the master*/
                                TmpValue |= (SWAPWORD(pData[0]) & bitMask);
 8024a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024a98:	881a      	ldrh	r2, [r3, #0]
 8024a9a:	8afb      	ldrh	r3, [r7, #22]
 8024a9c:	4013      	ands	r3, r2
 8024a9e:	b29a      	uxth	r2, r3
 8024aa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8024aa2:	4313      	orrs	r3, r2
 8024aa4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8024aa6:	e023      	b.n	8024af0 <OBJ_Write+0x3e8>
                            }
                            else
                            {
                                if((SWAPWORD(pData[0]) & ~cBitMask[pEntry->BitLength]))
 8024aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024aaa:	881b      	ldrh	r3, [r3, #0]
 8024aac:	461a      	mov	r2, r3
 8024aae:	69fb      	ldr	r3, [r7, #28]
 8024ab0:	885b      	ldrh	r3, [r3, #2]
 8024ab2:	4619      	mov	r1, r3
 8024ab4:	4b8b      	ldr	r3, [pc, #556]	; (8024ce4 <OBJ_Write+0x5dc>)
 8024ab6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8024aba:	43db      	mvns	r3, r3
 8024abc:	4013      	ands	r3, r2
 8024abe:	2b00      	cmp	r3, #0
 8024ac0:	d001      	beq.n	8024ac6 <OBJ_Write+0x3be>
                                {
                                    /*written value exceed entry range*/
                                    return ABORTIDX_VALUE_EXCEEDED;
 8024ac2:	2312      	movs	r3, #18
 8024ac4:	e13e      	b.n	8024d44 <OBJ_Write+0x63c>
                                }
                                else
                                {
                                    /*Shift Bits to corresponding offset within the object memory*/
                                    TmpValue |= ((SWAPWORD(pData[0]) & cBitMask[pEntry->BitLength]) << (bitOffset & 0x0F));
 8024ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024ac8:	881a      	ldrh	r2, [r3, #0]
 8024aca:	69fb      	ldr	r3, [r7, #28]
 8024acc:	885b      	ldrh	r3, [r3, #2]
 8024ace:	4619      	mov	r1, r3
 8024ad0:	4b84      	ldr	r3, [pc, #528]	; (8024ce4 <OBJ_Write+0x5dc>)
 8024ad2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8024ad6:	4013      	ands	r3, r2
 8024ad8:	b29b      	uxth	r3, r3
 8024ada:	461a      	mov	r2, r3
 8024adc:	8b3b      	ldrh	r3, [r7, #24]
 8024ade:	f003 030f 	and.w	r3, r3, #15
 8024ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8024ae6:	b29a      	uxth	r2, r3
 8024ae8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8024aea:	4313      	orrs	r3, r2
 8024aec:	b29b      	uxth	r3, r3
 8024aee:	84bb      	strh	r3, [r7, #36]	; 0x24
                                }
                            }
/* ECATCHANGE_END(V5.11) SDO7*/

                            /*Swap written data to big endian format (if required)*/
                            pVarPtr[0] = SWAPWORD(TmpValue);
 8024af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024af2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8024af4:	801a      	strh	r2, [r3, #0]

                            if ( ((bitOffset+pEntry->BitLength) & 0x0F) == 0 )
 8024af6:	8b3b      	ldrh	r3, [r7, #24]
 8024af8:	69fa      	ldr	r2, [r7, #28]
 8024afa:	8852      	ldrh	r2, [r2, #2]
 8024afc:	4413      	add	r3, r2
 8024afe:	f003 030f 	and.w	r3, r3, #15
 8024b02:	2b00      	cmp	r3, #0
 8024b04:	d103      	bne.n	8024b0e <OBJ_Write+0x406>
                                /* we have reached the UINT16 border */
                                pData++;
 8024b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024b08:	3302      	adds	r3, #2
 8024b0a:	64bb      	str	r3, [r7, #72]	; 0x48
                        }
                            break;
 8024b0c:	e0de      	b.n	8024ccc <OBJ_Write+0x5c4>
 8024b0e:	e0dd      	b.n	8024ccc <OBJ_Write+0x5c4>
                        case    DEFTYPE_BITARR16:
/*ECATCHANGE_START(V5.11) SDO9*/
                        case    DEFTYPE_WORD:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 8024b10:	8b3b      	ldrh	r3, [r7, #24]
 8024b12:	f003 030f 	and.w	r3, r3, #15
 8024b16:	2b00      	cmp	r3, #0
 8024b18:	d001      	beq.n	8024b1e <OBJ_Write+0x416>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8024b1a:	2305      	movs	r3, #5
 8024b1c:	e112      	b.n	8024d44 <OBJ_Write+0x63c>
/*ECATCHANGE_END(V5.11) SDO1*/

                            {
                            /* in this example the objects are defined in that way,
                            that the 16 bit type are always starting at an exact WORD offset */
                            UINT16 u16NewData = SWAPWORD(pData[0]);
 8024b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024b20:	881b      	ldrh	r3, [r3, #0]
 8024b22:	82bb      	strh	r3, [r7, #20]
                            if(bClearSubindex0Required && (pVarPtr[0] != u16NewData))
 8024b24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8024b28:	2b00      	cmp	r3, #0
 8024b2a:	d006      	beq.n	8024b3a <OBJ_Write+0x432>
 8024b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024b2e:	881b      	ldrh	r3, [r3, #0]
 8024b30:	8aba      	ldrh	r2, [r7, #20]
 8024b32:	429a      	cmp	r2, r3
 8024b34:	d001      	beq.n	8024b3a <OBJ_Write+0x432>
                            {
                                /* try to write new data when subindex0 shall be reset*/
                                return ABORTIDX_ENTRY_CANT_BE_WRITTEN_SI0_NOT_0;
 8024b36:	231c      	movs	r3, #28
 8024b38:	e104      	b.n	8024d44 <OBJ_Write+0x63c>
                            }

                            /*check value if a new PDO assign entry should be written*/
                            if(IS_PDO_ASSIGN(index))  //PDO assign
 8024b3a:	89fb      	ldrh	r3, [r7, #14]
 8024b3c:	f641 420f 	movw	r2, #7183	; 0x1c0f
 8024b40:	4293      	cmp	r3, r2
 8024b42:	d919      	bls.n	8024b78 <OBJ_Write+0x470>
 8024b44:	89fb      	ldrh	r3, [r7, #14]
 8024b46:	f641 422f 	movw	r2, #7215	; 0x1c2f
 8024b4a:	4293      	cmp	r3, r2
 8024b4c:	d814      	bhi.n	8024b78 <OBJ_Write+0x470>
                            {
                                if (!IS_RX_PDO(u16NewData) && !IS_TX_PDO(u16NewData) && (u16NewData != 0)) //check if the new assign entry value is valid
 8024b4e:	8abb      	ldrh	r3, [r7, #20]
 8024b50:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8024b54:	d303      	bcc.n	8024b5e <OBJ_Write+0x456>
 8024b56:	8abb      	ldrh	r3, [r7, #20]
 8024b58:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8024b5c:	d30c      	bcc.n	8024b78 <OBJ_Write+0x470>
 8024b5e:	8abb      	ldrh	r3, [r7, #20]
 8024b60:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8024b64:	d303      	bcc.n	8024b6e <OBJ_Write+0x466>
 8024b66:	8abb      	ldrh	r3, [r7, #20]
 8024b68:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8024b6c:	d304      	bcc.n	8024b78 <OBJ_Write+0x470>
 8024b6e:	8abb      	ldrh	r3, [r7, #20]
 8024b70:	2b00      	cmp	r3, #0
 8024b72:	d001      	beq.n	8024b78 <OBJ_Write+0x470>
                                {
                                    return ABORTIDX_VALUE_EXCEEDED;
 8024b74:	2312      	movs	r3, #18
 8024b76:	e0e5      	b.n	8024d44 <OBJ_Write+0x63c>
                                }
                            }

                            if((index == 0x1C32 || index == 0x1C33) && (i == 1))
 8024b78:	89fb      	ldrh	r3, [r7, #14]
 8024b7a:	f641 4232 	movw	r2, #7218	; 0x1c32
 8024b7e:	4293      	cmp	r3, r2
 8024b80:	d004      	beq.n	8024b8c <OBJ_Write+0x484>
 8024b82:	89fb      	ldrh	r3, [r7, #14]
 8024b84:	f641 4233 	movw	r2, #7219	; 0x1c33
 8024b88:	4293      	cmp	r3, r2
 8024b8a:	d11a      	bne.n	8024bc2 <OBJ_Write+0x4ba>
 8024b8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024b8e:	2b01      	cmp	r3, #1
 8024b90:	d117      	bne.n	8024bc2 <OBJ_Write+0x4ba>
                            {
                                /* The Synchronisation type (0x1C3x.1) was written by the user => the Sync type will not be calculated based on the register settings (if they don't match an error will be returned P_2_S)*/
                                if(pVarPtr[0] != u16NewData)
 8024b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024b94:	881b      	ldrh	r3, [r3, #0]
 8024b96:	8aba      	ldrh	r2, [r7, #20]
 8024b98:	429a      	cmp	r2, r3
 8024b9a:	d00f      	beq.n	8024bbc <OBJ_Write+0x4b4>
                                {
                                    result = CheckSyncTypeValue(index,u16NewData);
 8024b9c:	89fa      	ldrh	r2, [r7, #14]
 8024b9e:	8abb      	ldrh	r3, [r7, #20]
 8024ba0:	4610      	mov	r0, r2
 8024ba2:	4619      	mov	r1, r3
 8024ba4:	f7ff fa06 	bl	8023fb4 <CheckSyncTypeValue>
 8024ba8:	4603      	mov	r3, r0
 8024baa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                                    if(result != 0)
 8024bae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8024bb2:	2b00      	cmp	r3, #0
 8024bb4:	d002      	beq.n	8024bbc <OBJ_Write+0x4b4>
                                        return result;
 8024bb6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8024bba:	e0c3      	b.n	8024d44 <OBJ_Write+0x63c>
                                }

                                /* The user may force to current Sync Mode for that reason the flag has also to be set if the same value was written */
                                bSyncSetByUser = TRUE;
 8024bbc:	4b4a      	ldr	r3, [pc, #296]	; (8024ce8 <OBJ_Write+0x5e0>)
 8024bbe:	2201      	movs	r2, #1
 8024bc0:	701a      	strb	r2, [r3, #0]
                            }

                            pVarPtr[0] = u16NewData;
 8024bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024bc4:	8aba      	ldrh	r2, [r7, #20]
 8024bc6:	801a      	strh	r2, [r3, #0]
                            pData++;
 8024bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024bca:	3302      	adds	r3, #2
 8024bcc:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                            break;
 8024bce:	e07d      	b.n	8024ccc <OBJ_Write+0x5c4>
                        case    DEFTYPE_BITARR32:
/*ECATCHANGE_START(V5.11) SDO9*/
                        case    DEFTYPE_DWORD:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 8024bd0:	8b3b      	ldrh	r3, [r7, #24]
 8024bd2:	f003 030f 	and.w	r3, r3, #15
 8024bd6:	2b00      	cmp	r3, #0
 8024bd8:	d001      	beq.n	8024bde <OBJ_Write+0x4d6>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8024bda:	2305      	movs	r3, #5
 8024bdc:	e0b2      	b.n	8024d44 <OBJ_Write+0x63c>
/*ECATCHANGE_END(V5.11) SDO1*/
                            {

                            /* in this example the objects are defined in that way,
                               that the 32 bit type are always starting at an exact WORD offset */
                            if(bClearSubindex0Required && 
 8024bde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8024be2:	2b00      	cmp	r3, #0
 8024be4:	d00f      	beq.n	8024c06 <OBJ_Write+0x4fe>
                                ((pVarPtr[0] != pData[0])
 8024be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024be8:	881a      	ldrh	r2, [r3, #0]
 8024bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024bec:	881b      	ldrh	r3, [r3, #0]
/*ECATCHANGE_END(V5.11) SDO1*/
                            {

                            /* in this example the objects are defined in that way,
                               that the 32 bit type are always starting at an exact WORD offset */
                            if(bClearSubindex0Required && 
 8024bee:	429a      	cmp	r2, r3
 8024bf0:	d107      	bne.n	8024c02 <OBJ_Write+0x4fa>
                                ((pVarPtr[0] != pData[0])
                                || (pVarPtr[1] != pData[1])))
 8024bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024bf4:	3302      	adds	r3, #2
 8024bf6:	881a      	ldrh	r2, [r3, #0]
 8024bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024bfa:	3302      	adds	r3, #2
 8024bfc:	881b      	ldrh	r3, [r3, #0]
 8024bfe:	429a      	cmp	r2, r3
 8024c00:	d001      	beq.n	8024c06 <OBJ_Write+0x4fe>
                            {
                                /* try to write new data when subindex0 shall be reset*/
                                return ABORTIDX_ENTRY_CANT_BE_WRITTEN_SI0_NOT_0;
 8024c02:	231c      	movs	r3, #28
 8024c04:	e09e      	b.n	8024d44 <OBJ_Write+0x63c>
                            }

                            pVarPtr[0] = pData[0];
 8024c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024c08:	881a      	ldrh	r2, [r3, #0]
 8024c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c0c:	801a      	strh	r2, [r3, #0]
                            pVarPtr[1] = pData[1];
 8024c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c10:	3302      	adds	r3, #2
 8024c12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024c14:	8852      	ldrh	r2, [r2, #2]
 8024c16:	801a      	strh	r2, [r3, #0]
                            pData += 2;
 8024c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024c1a:	3304      	adds	r3, #4
 8024c1c:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                            break;
 8024c1e:	e055      	b.n	8024ccc <OBJ_Write+0x5c4>
                        case    DEFTYPE_REAL64:
                        case 	DEFTYPE_INTEGER64:
                        case    DEFTYPE_UNSIGNED64:
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 8024c20:	8b3b      	ldrh	r3, [r7, #24]
 8024c22:	f003 030f 	and.w	r3, r3, #15
 8024c26:	2b00      	cmp	r3, #0
 8024c28:	d001      	beq.n	8024c2e <OBJ_Write+0x526>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8024c2a:	2305      	movs	r3, #5
 8024c2c:	e08a      	b.n	8024d44 <OBJ_Write+0x63c>
                            }
/*ECATCHANGE_END(V5.11) SDO1*/
                            /* in this example the objects are defined in that way,
                               that the 64 bit type are always starting at an exact WORD offset */
                            pVarPtr[0] = pData[0];
 8024c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024c30:	881a      	ldrh	r2, [r3, #0]
 8024c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c34:	801a      	strh	r2, [r3, #0]
                            pVarPtr[1] = pData[1];
 8024c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c38:	3302      	adds	r3, #2
 8024c3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024c3c:	8852      	ldrh	r2, [r2, #2]
 8024c3e:	801a      	strh	r2, [r3, #0]
                            pVarPtr[2] = pData[2];
 8024c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c42:	3304      	adds	r3, #4
 8024c44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024c46:	8892      	ldrh	r2, [r2, #4]
 8024c48:	801a      	strh	r2, [r3, #0]
                            pVarPtr[3] = pData[3];
 8024c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c4c:	3306      	adds	r3, #6
 8024c4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024c50:	88d2      	ldrh	r2, [r2, #6]
 8024c52:	801a      	strh	r2, [r3, #0]
                            pData += 4;
 8024c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024c56:	3308      	adds	r3, #8
 8024c58:	64bb      	str	r3, [r7, #72]	; 0x48
                            break;
 8024c5a:	e037      	b.n	8024ccc <OBJ_Write+0x5c4>
                        case    DEFTYPE_VISIBLESTRING:
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 8024c5c:	8b3b      	ldrh	r3, [r7, #24]
 8024c5e:	f003 030f 	and.w	r3, r3, #15
 8024c62:	2b00      	cmp	r3, #0
 8024c64:	d001      	beq.n	8024c6a <OBJ_Write+0x562>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8024c66:	2305      	movs	r3, #5
 8024c68:	e06c      	b.n	8024d44 <OBJ_Write+0x63c>
                            }
/*ECATCHANGE_END(V5.11) SDO1*/

                            OBJTOMBXSTRCPY(pVarPtr, pData, BIT2BYTE(pEntry->BitLength));
 8024c6a:	69fb      	ldr	r3, [r7, #28]
 8024c6c:	885b      	ldrh	r3, [r3, #2]
 8024c6e:	3307      	adds	r3, #7
 8024c70:	10db      	asrs	r3, r3, #3
 8024c72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024c74:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8024c76:	461a      	mov	r2, r3
 8024c78:	f003 faf4 	bl	8028264 <memcpy>

/*ECATCHANGE_START(V5.11) SDO2*/
                            pData += BIT2WORD((pEntry->BitLength)& ~0xF);
 8024c7c:	69fb      	ldr	r3, [r7, #28]
 8024c7e:	885b      	ldrh	r3, [r3, #2]
 8024c80:	f023 030f 	bic.w	r3, r3, #15
 8024c84:	330f      	adds	r3, #15
 8024c86:	111b      	asrs	r3, r3, #4
 8024c88:	005b      	lsls	r3, r3, #1
 8024c8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024c8c:	4413      	add	r3, r2
 8024c8e:	64bb      	str	r3, [r7, #72]	; 0x48
/*ECATCHANGE_END(V5.11) SDO2*/
                            break;
 8024c90:	e01c      	b.n	8024ccc <OBJ_Write+0x5c4>
                            case DEFTYPE_ARRAY_OF_SINT :
                            case DEFTYPE_ARRAY_OF_DINT :
                            case DEFTYPE_ARRAY_OF_UDINT:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 8024c92:	8b3b      	ldrh	r3, [r7, #24]
 8024c94:	f003 030f 	and.w	r3, r3, #15
 8024c98:	2b00      	cmp	r3, #0
 8024c9a:	d001      	beq.n	8024ca0 <OBJ_Write+0x598>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8024c9c:	2305      	movs	r3, #5
 8024c9e:	e051      	b.n	8024d44 <OBJ_Write+0x63c>
                            }
/*ECATCHANGE_END(V5.11) SDO1*/

                            /* in this example the objects are defined in that way,
                               that the other types are always starting at an even byte offset */
                            OBJTOMBXMEMCPY(pVarPtr, pData, BIT2BYTE(pEntry->BitLength));
 8024ca0:	69fb      	ldr	r3, [r7, #28]
 8024ca2:	885b      	ldrh	r3, [r3, #2]
 8024ca4:	3307      	adds	r3, #7
 8024ca6:	10db      	asrs	r3, r3, #3
 8024ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024caa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8024cac:	461a      	mov	r2, r3
 8024cae:	f003 fad9 	bl	8028264 <memcpy>
/*ECATCHANGE_START(V5.11) SDO2*/
                            pData += BIT2WORD((pEntry->BitLength) & ~0xF);
 8024cb2:	69fb      	ldr	r3, [r7, #28]
 8024cb4:	885b      	ldrh	r3, [r3, #2]
 8024cb6:	f023 030f 	bic.w	r3, r3, #15
 8024cba:	330f      	adds	r3, #15
 8024cbc:	111b      	asrs	r3, r3, #4
 8024cbe:	005b      	lsls	r3, r3, #1
 8024cc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024cc2:	4413      	add	r3, r2
 8024cc4:	64bb      	str	r3, [r7, #72]	; 0x48
/*ECATCHANGE_END(V5.11) SDO2*/

                            break;
 8024cc6:	e001      	b.n	8024ccc <OBJ_Write+0x5c4>
                        default:
                            /* other data types are not supported from this example */
                            return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8024cc8:	2318      	movs	r3, #24
 8024cca:	e03b      	b.n	8024d44 <OBJ_Write+0x63c>
                        }
                    }

                    /* set flag */
                    bWritten = 1;
 8024ccc:	2301      	movs	r3, #1
 8024cce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8024cd2:	e027      	b.n	8024d24 <OBJ_Write+0x61c>

                }
            }
            else
            {
                if(i == 0)
 8024cd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024cd6:	2b00      	cmp	r3, #0
 8024cd8:	d108      	bne.n	8024cec <OBJ_Write+0x5e4>
                {
                    /* For SubIndex0 16Bit are reserved even if the BitLength is 8 */
                    pData++;
 8024cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024cdc:	3302      	adds	r3, #2
 8024cde:	64bb      	str	r3, [r7, #72]	; 0x48
 8024ce0:	e01d      	b.n	8024d1e <OBJ_Write+0x616>
 8024ce2:	bf00      	nop
 8024ce4:	080289b4 	.word	0x080289b4
 8024ce8:	1fff28a4 	.word	0x1fff28a4
                }
                else
                {
                    /*Handle Bit/Byte Offset*/
                    if (((pEntry->BitLength & 0xF) > 0)
 8024cec:	69fb      	ldr	r3, [r7, #28]
 8024cee:	885b      	ldrh	r3, [r3, #2]
 8024cf0:	f003 030f 	and.w	r3, r3, #15
 8024cf4:	2b00      	cmp	r3, #0
 8024cf6:	dd0a      	ble.n	8024d0e <OBJ_Write+0x606>
                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 8024cf8:	8b3b      	ldrh	r3, [r7, #24]
 8024cfa:	69fa      	ldr	r2, [r7, #28]
 8024cfc:	8852      	ldrh	r2, [r2, #2]
 8024cfe:	4413      	add	r3, r2
 8024d00:	f003 030f 	and.w	r3, r3, #15
 8024d04:	2b00      	cmp	r3, #0
 8024d06:	d102      	bne.n	8024d0e <OBJ_Write+0x606>
                    {
                        /* we have reached the UINT16 border */
                        pData++;
 8024d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024d0a:	3302      	adds	r3, #2
 8024d0c:	64bb      	str	r3, [r7, #72]	; 0x48
                    }

                    /*increment WORD offset*/
/*ECATCHANGE_START(V5.11) SDO9*/
                    pData += ((pEntry->BitLength & 0xFFF0) >> 4);
 8024d0e:	69fb      	ldr	r3, [r7, #28]
 8024d10:	885b      	ldrh	r3, [r3, #2]
 8024d12:	091b      	lsrs	r3, r3, #4
 8024d14:	b29b      	uxth	r3, r3
 8024d16:	005b      	lsls	r3, r3, #1
 8024d18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024d1a:	4413      	add	r3, r2
 8024d1c:	64bb      	str	r3, [r7, #72]	; 0x48
/*ECATCHANGE_END(V5.11) SDO9*/
                }
                /*If no other entry was written this result will be returned*/
                result = ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8024d1e:	2318      	movs	r3, #24
 8024d20:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
           return 0; //no error
        }
/*ECATCHANGE_END(V5.11) ECAT*/

        /* we use the standard write function */
        for (i = subindex; i <= lastSubindex; i++)
 8024d24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024d26:	3301      	adds	r3, #1
 8024d28:	86fb      	strh	r3, [r7, #54]	; 0x36
 8024d2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8024d2c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8024d2e:	429a      	cmp	r2, r3
 8024d30:	f67f adb2 	bls.w	8024898 <OBJ_Write+0x190>
                /*If no other entry was written this result will be returned*/
                result = ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
            }
        }

        if (bWritten == 0)
 8024d34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8024d38:	2b00      	cmp	r3, #0
 8024d3a:	d102      	bne.n	8024d42 <OBJ_Write+0x63a>
            /* we didn't write anything, so we have to return the stored error code */
            return result;
 8024d3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8024d40:	e000      	b.n	8024d44 <OBJ_Write+0x63c>
    }

    return 0;
 8024d42:	2300      	movs	r3, #0
}
 8024d44:	4618      	mov	r0, r3
 8024d46:	373c      	adds	r7, #60	; 0x3c
 8024d48:	46bd      	mov	sp, r7
 8024d4a:	bd90      	pop	{r4, r7, pc}

08024d4c <SdoDownloadSegmentInd>:
            the data will be written to the object dictionary. The
            function sends a response by itself.
*////////////////////////////////////////////////////////////////////////////////////////

static UINT8 SdoDownloadSegmentInd( TDOWNLOADSDOSEGREQMBX MBXMEM * pSdoInd )
{
 8024d4c:	b5b0      	push	{r4, r5, r7, lr}
 8024d4e:	b088      	sub	sp, #32
 8024d50:	af02      	add	r7, sp, #8
 8024d52:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 8024d54:	2300      	movs	r3, #0
 8024d56:	75fb      	strb	r3, [r7, #23]
    UINT32 bytesToSave = 0;
 8024d58:	2300      	movs	r3, #0
 8024d5a:	613b      	str	r3, [r7, #16]

    if ( (pSdoInd->SdoHeader.SegHeader & SEGHEADER_TOGGLE) == bSdoSegLastToggle )
 8024d5c:	687b      	ldr	r3, [r7, #4]
 8024d5e:	7a1b      	ldrb	r3, [r3, #8]
 8024d60:	f003 0310 	and.w	r3, r3, #16
 8024d64:	4a86      	ldr	r2, [pc, #536]	; (8024f80 <SdoDownloadSegmentInd+0x234>)
 8024d66:	7812      	ldrb	r2, [r2, #0]
 8024d68:	4293      	cmp	r3, r2
 8024d6a:	d102      	bne.n	8024d72 <SdoDownloadSegmentInd+0x26>
    {
        /* toggle bit has not toggled... */
        abort = ABORTIDX_TOGGLE_BIT_NOT_CHANGED;
 8024d6c:	2301      	movs	r3, #1
 8024d6e:	75fb      	strb	r3, [r7, #23]
 8024d70:	e0bb      	b.n	8024eea <SdoDownloadSegmentInd+0x19e>
    }
    else
    {
        /* maxData contains the maximum data to be received with a SDO-DownloadSegment */
        UINT16 maxData =    u16ReceiveMbxSize - MBX_HEADER_SIZE - SEGMENT_NORM_HEADER_SIZE;
 8024d72:	4b84      	ldr	r3, [pc, #528]	; (8024f84 <SdoDownloadSegmentInd+0x238>)
 8024d74:	881b      	ldrh	r3, [r3, #0]
 8024d76:	3b09      	subs	r3, #9
 8024d78:	81fb      	strh	r3, [r7, #14]
        /* the new toggle bit is stored in bSdoSegLastToggle */
        bSdoSegLastToggle = pSdoInd->SdoHeader.SegHeader & SEGHEADER_TOGGLE;
 8024d7a:	687b      	ldr	r3, [r7, #4]
 8024d7c:	7a1b      	ldrb	r3, [r3, #8]
 8024d7e:	f003 0310 	and.w	r3, r3, #16
 8024d82:	b2da      	uxtb	r2, r3
 8024d84:	4b7e      	ldr	r3, [pc, #504]	; (8024f80 <SdoDownloadSegmentInd+0x234>)
 8024d86:	701a      	strb	r2, [r3, #0]

        /* a SDO-Download Segment is only allowed if a SDO-Download Request was received before,
           in that case a buffer for the received data was allocated in SDOS_SdoInd before */
        if ( pSdoSegData )
 8024d88:	4b7f      	ldr	r3, [pc, #508]	; (8024f88 <SdoDownloadSegmentInd+0x23c>)
 8024d8a:	681b      	ldr	r3, [r3, #0]
 8024d8c:	2b00      	cmp	r3, #0
 8024d8e:	f000 80aa 	beq.w	8024ee6 <SdoDownloadSegmentInd+0x19a>
        {
            /* bytesToSave contains the remaining data with this and maybe the following
               SDO-Download Segment services */
            bytesToSave = nSdoSegCompleteSize - nSdoSegBytesToHandle;
 8024d92:	4b7e      	ldr	r3, [pc, #504]	; (8024f8c <SdoDownloadSegmentInd+0x240>)
 8024d94:	681a      	ldr	r2, [r3, #0]
 8024d96:	4b7e      	ldr	r3, [pc, #504]	; (8024f90 <SdoDownloadSegmentInd+0x244>)
 8024d98:	681b      	ldr	r3, [r3, #0]
 8024d9a:	1ad3      	subs	r3, r2, r3
 8024d9c:	613b      	str	r3, [r7, #16]

            if ( pSdoInd->SdoHeader.SegHeader & SEGHEADER_NOMOREFOLLOWS )
 8024d9e:	687b      	ldr	r3, [r7, #4]
 8024da0:	7a1b      	ldrb	r3, [r3, #8]
 8024da2:	f003 0301 	and.w	r3, r3, #1
 8024da6:	2b00      	cmp	r3, #0
 8024da8:	d02c      	beq.n	8024e04 <SdoDownloadSegmentInd+0xb8>
            {
                /* the last segment is received, check if the length of the remaining data is the
                   same as the length of the received data */
                if ( bytesToSave <= maxData )
 8024daa:	89fa      	ldrh	r2, [r7, #14]
 8024dac:	693b      	ldr	r3, [r7, #16]
 8024dae:	429a      	cmp	r2, r3
 8024db0:	d325      	bcc.n	8024dfe <SdoDownloadSegmentInd+0xb2>
                {
/* ECATCHANGE_START(V5.11) ECAT7*/
                    UINT16 mbxSize = SWAPWORD(pSdoInd->MbxHeader.Length);
 8024db2:	687b      	ldr	r3, [r7, #4]
 8024db4:	881b      	ldrh	r3, [r3, #0]
 8024db6:	81bb      	strh	r3, [r7, #12]

                    /* for the check it is distinguished if the remaining bytes are less than 8 (in that
                       case 7 data bytes were sent and the SDO-Download Segment header contains the information
                        how much bytes are valid (CAN-compatibility)), otherwise the length has to match exactly
                        and the SDO-Download Segment-Headerbyte is ignored */
                    if (((bytesToSave <= (UINT32)(mbxSize - SEGMENT_NORM_HEADER_SIZE))
 8024db8:	89bb      	ldrh	r3, [r7, #12]
 8024dba:	3b03      	subs	r3, #3
 8024dbc:	461a      	mov	r2, r3
 8024dbe:	693b      	ldr	r3, [r7, #16]
 8024dc0:	429a      	cmp	r2, r3
 8024dc2:	d30c      	bcc.n	8024dde <SdoDownloadSegmentInd+0x92>
                         &&( bytesToSave == ((UINT16) (MIN_SEGMENTED_DATA - ((pSdoInd->SdoHeader.SegHeader & SEGHEADER_SEGDATASIZE) >> SEGHEADERSHIFT_SEGDATASIZE))) )
 8024dc4:	687b      	ldr	r3, [r7, #4]
 8024dc6:	7a1b      	ldrb	r3, [r3, #8]
 8024dc8:	f003 030e 	and.w	r3, r3, #14
 8024dcc:	105b      	asrs	r3, r3, #1
 8024dce:	b29b      	uxth	r3, r3
 8024dd0:	f1c3 0307 	rsb	r3, r3, #7
 8024dd4:	b29b      	uxth	r3, r3
 8024dd6:	461a      	mov	r2, r3
 8024dd8:	693b      	ldr	r3, [r7, #16]
 8024dda:	429a      	cmp	r2, r3
 8024ddc:	d008      	beq.n	8024df0 <SdoDownloadSegmentInd+0xa4>
                          )
                        ||( ( bytesToSave > MIN_SEGMENTED_DATA )
 8024dde:	693b      	ldr	r3, [r7, #16]
 8024de0:	2b07      	cmp	r3, #7
 8024de2:	d909      	bls.n	8024df8 <SdoDownloadSegmentInd+0xac>
                        && (bytesToSave == (mbxSize - SEGMENT_NORM_HEADER_SIZE))
 8024de4:	89bb      	ldrh	r3, [r7, #12]
 8024de6:	3b03      	subs	r3, #3
 8024de8:	461a      	mov	r2, r3
 8024dea:	693b      	ldr	r3, [r7, #16]
 8024dec:	429a      	cmp	r2, r3
 8024dee:	d103      	bne.n	8024df8 <SdoDownloadSegmentInd+0xac>
                        ) )
/* ECATCHANGE_END(V5.11) ECAT7*/
                    {
                        /* length is correct */
                        bSdoSegFollows = FALSE;
 8024df0:	4b68      	ldr	r3, [pc, #416]	; (8024f94 <SdoDownloadSegmentInd+0x248>)
 8024df2:	2200      	movs	r2, #0
 8024df4:	701a      	strb	r2, [r3, #0]
 8024df6:	e011      	b.n	8024e1c <SdoDownloadSegmentInd+0xd0>
                    }
                    else
                        abort = ABORTIDX_PARAM_LENGTH_ERROR;
 8024df8:	230e      	movs	r3, #14
 8024dfa:	75fb      	strb	r3, [r7, #23]
 8024dfc:	e00e      	b.n	8024e1c <SdoDownloadSegmentInd+0xd0>
                }
                else
                    abort = ABORTIDX_PARAM_LENGTH_ERROR;
 8024dfe:	230e      	movs	r3, #14
 8024e00:	75fb      	strb	r3, [r7, #23]
 8024e02:	e00b      	b.n	8024e1c <SdoDownloadSegmentInd+0xd0>
            }
            else
            {
                /* its not the last segment */
                bSdoSegFollows = TRUE;
 8024e04:	4b63      	ldr	r3, [pc, #396]	; (8024f94 <SdoDownloadSegmentInd+0x248>)
 8024e06:	2201      	movs	r2, #1
 8024e08:	701a      	strb	r2, [r3, #0]
                /* we have to check if we expect less bytes than the maximum size which can be send with a single
                   SDO Download Segment */
                if ( bytesToSave <= maxData )
 8024e0a:	89fa      	ldrh	r2, [r7, #14]
 8024e0c:	693b      	ldr	r3, [r7, #16]
 8024e0e:	429a      	cmp	r2, r3
 8024e10:	d302      	bcc.n	8024e18 <SdoDownloadSegmentInd+0xcc>
                    abort = ABORTIDX_PARAM_LENGTH_ERROR;
 8024e12:	230e      	movs	r3, #14
 8024e14:	75fb      	strb	r3, [r7, #23]
 8024e16:	e001      	b.n	8024e1c <SdoDownloadSegmentInd+0xd0>
                else
                    /* length is okay, bytesToSave contains the data size to be copied */
                    bytesToSave = maxData;
 8024e18:	89fb      	ldrh	r3, [r7, #14]
 8024e1a:	613b      	str	r3, [r7, #16]
            }

            if ( abort == 0 )
 8024e1c:	7dfb      	ldrb	r3, [r7, #23]
 8024e1e:	2b00      	cmp	r3, #0
 8024e20:	d163      	bne.n	8024eea <SdoDownloadSegmentInd+0x19e>
            {
                /* the received data is copied in the buffer */
                MBXMEMCPY( ((UINT8*)pSdoSegData) + (nSdoSegBytesToHandle), pSdoInd->SdoHeader.Data, bytesToSave ); 
 8024e22:	4b59      	ldr	r3, [pc, #356]	; (8024f88 <SdoDownloadSegmentInd+0x23c>)
 8024e24:	681a      	ldr	r2, [r3, #0]
 8024e26:	4b5a      	ldr	r3, [pc, #360]	; (8024f90 <SdoDownloadSegmentInd+0x244>)
 8024e28:	681b      	ldr	r3, [r3, #0]
 8024e2a:	441a      	add	r2, r3
 8024e2c:	687b      	ldr	r3, [r7, #4]
 8024e2e:	3309      	adds	r3, #9
 8024e30:	4610      	mov	r0, r2
 8024e32:	4619      	mov	r1, r3
 8024e34:	693a      	ldr	r2, [r7, #16]
 8024e36:	f003 fa15 	bl	8028264 <memcpy>

                if ( bSdoSegFollows == FALSE    )
 8024e3a:	4b56      	ldr	r3, [pc, #344]	; (8024f94 <SdoDownloadSegmentInd+0x248>)
 8024e3c:	781b      	ldrb	r3, [r3, #0]
 8024e3e:	2b00      	cmp	r3, #0
 8024e40:	d153      	bne.n	8024eea <SdoDownloadSegmentInd+0x19e>
                {
                    /* it was the last segment, OBJ_Write will called to make the Write-operation */
                    abort = OBJ_Write( nSdoSegIndex, nSdoSegSubindex, nSdoSegCompleteSize, pSdoSegObjEntry, (UINT16 MBXMEM *) pSdoSegData, bSdoSegAccess );
 8024e42:	4b55      	ldr	r3, [pc, #340]	; (8024f98 <SdoDownloadSegmentInd+0x24c>)
 8024e44:	8818      	ldrh	r0, [r3, #0]
 8024e46:	4b55      	ldr	r3, [pc, #340]	; (8024f9c <SdoDownloadSegmentInd+0x250>)
 8024e48:	7819      	ldrb	r1, [r3, #0]
 8024e4a:	4b50      	ldr	r3, [pc, #320]	; (8024f8c <SdoDownloadSegmentInd+0x240>)
 8024e4c:	681d      	ldr	r5, [r3, #0]
 8024e4e:	4b54      	ldr	r3, [pc, #336]	; (8024fa0 <SdoDownloadSegmentInd+0x254>)
 8024e50:	681c      	ldr	r4, [r3, #0]
 8024e52:	4b4d      	ldr	r3, [pc, #308]	; (8024f88 <SdoDownloadSegmentInd+0x23c>)
 8024e54:	681a      	ldr	r2, [r3, #0]
 8024e56:	4b53      	ldr	r3, [pc, #332]	; (8024fa4 <SdoDownloadSegmentInd+0x258>)
 8024e58:	781b      	ldrb	r3, [r3, #0]
 8024e5a:	9200      	str	r2, [sp, #0]
 8024e5c:	9301      	str	r3, [sp, #4]
 8024e5e:	462a      	mov	r2, r5
 8024e60:	4623      	mov	r3, r4
 8024e62:	f7ff fc51 	bl	8024708 <OBJ_Write>
 8024e66:	4603      	mov	r3, r0
 8024e68:	75fb      	strb	r3, [r7, #23]
                    if ( abort == ABORTIDX_WORKING )
 8024e6a:	7dfb      	ldrb	r3, [r7, #23]
 8024e6c:	2bff      	cmp	r3, #255	; 0xff
 8024e6e:	d131      	bne.n	8024ed4 <SdoDownloadSegmentInd+0x188>
                    {
                        /* the application generates the SDO-Response later on by calling SDOS_SdoRes (only possible if object access function pointer is defined) */
                        u8PendingSdo = SDO_PENDING_SEG_WRITE;
 8024e70:	4b4d      	ldr	r3, [pc, #308]	; (8024fa8 <SdoDownloadSegmentInd+0x25c>)
 8024e72:	2202      	movs	r2, #2
 8024e74:	701a      	strb	r2, [r3, #0]
                        bStoreCompleteAccess = bSdoSegAccess;
 8024e76:	4b4b      	ldr	r3, [pc, #300]	; (8024fa4 <SdoDownloadSegmentInd+0x258>)
 8024e78:	781b      	ldrb	r3, [r3, #0]
 8024e7a:	2b00      	cmp	r3, #0
 8024e7c:	bf14      	ite	ne
 8024e7e:	2301      	movne	r3, #1
 8024e80:	2300      	moveq	r3, #0
 8024e82:	b2da      	uxtb	r2, r3
 8024e84:	4b49      	ldr	r3, [pc, #292]	; (8024fac <SdoDownloadSegmentInd+0x260>)
 8024e86:	701a      	strb	r2, [r3, #0]
                        u8StoreSubindex = nSdoSegSubindex;
 8024e88:	4b44      	ldr	r3, [pc, #272]	; (8024f9c <SdoDownloadSegmentInd+0x250>)
 8024e8a:	781a      	ldrb	r2, [r3, #0]
 8024e8c:	4b48      	ldr	r3, [pc, #288]	; (8024fb0 <SdoDownloadSegmentInd+0x264>)
 8024e8e:	701a      	strb	r2, [r3, #0]
                        u16StoreIndex = nSdoSegIndex;
 8024e90:	4b41      	ldr	r3, [pc, #260]	; (8024f98 <SdoDownloadSegmentInd+0x24c>)
 8024e92:	881a      	ldrh	r2, [r3, #0]
 8024e94:	4b47      	ldr	r3, [pc, #284]	; (8024fb4 <SdoDownloadSegmentInd+0x268>)
 8024e96:	801a      	strh	r2, [r3, #0]
                        u32StoreDataSize = nSdoSegCompleteSize;
 8024e98:	4b3c      	ldr	r3, [pc, #240]	; (8024f8c <SdoDownloadSegmentInd+0x240>)
 8024e9a:	681b      	ldr	r3, [r3, #0]
 8024e9c:	4a46      	ldr	r2, [pc, #280]	; (8024fb8 <SdoDownloadSegmentInd+0x26c>)
 8024e9e:	6013      	str	r3, [r2, #0]
                        pStoreData = pSdoSegData;
 8024ea0:	4b39      	ldr	r3, [pc, #228]	; (8024f88 <SdoDownloadSegmentInd+0x23c>)
 8024ea2:	681b      	ldr	r3, [r3, #0]
 8024ea4:	4a45      	ldr	r2, [pc, #276]	; (8024fbc <SdoDownloadSegmentInd+0x270>)
 8024ea6:	6013      	str	r3, [r2, #0]

                        pSdoPendFunc = pSdoSegObjEntry->Write;
 8024ea8:	4b3d      	ldr	r3, [pc, #244]	; (8024fa0 <SdoDownloadSegmentInd+0x254>)
 8024eaa:	681b      	ldr	r3, [r3, #0]
 8024eac:	6a1b      	ldr	r3, [r3, #32]
 8024eae:	4a44      	ldr	r2, [pc, #272]	; (8024fc0 <SdoDownloadSegmentInd+0x274>)
 8024eb0:	6013      	str	r3, [r2, #0]

                        bSdoInWork = TRUE;
 8024eb2:	4b44      	ldr	r3, [pc, #272]	; (8024fc4 <SdoDownloadSegmentInd+0x278>)
 8024eb4:	2201      	movs	r2, #1
 8024eb6:	701a      	strb	r2, [r3, #0]
                        pSdoResStored = (TINITSDOMBX MBXMEM *) pSdoInd;
 8024eb8:	4a43      	ldr	r2, [pc, #268]	; (8024fc8 <SdoDownloadSegmentInd+0x27c>)
 8024eba:	687b      	ldr	r3, [r7, #4]
 8024ebc:	6013      	str	r3, [r2, #0]

                        bSdoSegFollows = FALSE;
 8024ebe:	4b35      	ldr	r3, [pc, #212]	; (8024f94 <SdoDownloadSegmentInd+0x248>)
 8024ec0:	2200      	movs	r2, #0
 8024ec2:	701a      	strb	r2, [r3, #0]
                        nSdoSegService    = 0;
 8024ec4:	4b41      	ldr	r3, [pc, #260]	; (8024fcc <SdoDownloadSegmentInd+0x280>)
 8024ec6:	2200      	movs	r2, #0
 8024ec8:	701a      	strb	r2, [r3, #0]
                        nSdoSegBytesToHandle = 0;
 8024eca:	4b31      	ldr	r3, [pc, #196]	; (8024f90 <SdoDownloadSegmentInd+0x244>)
 8024ecc:	2200      	movs	r2, #0
 8024ece:	601a      	str	r2, [r3, #0]

                        return ABORTIDX_WORKING;
 8024ed0:	23ff      	movs	r3, #255	; 0xff
 8024ed2:	e051      	b.n	8024f78 <SdoDownloadSegmentInd+0x22c>
                    }
                    else
                    {
                        /* the allocated buffer can be released */
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 8024ed4:	4b2c      	ldr	r3, [pc, #176]	; (8024f88 <SdoDownloadSegmentInd+0x23c>)
 8024ed6:	681b      	ldr	r3, [r3, #0]
 8024ed8:	4618      	mov	r0, r3
 8024eda:	f003 f9bb 	bl	8028254 <free>
                        pSdoSegData = NULL;
 8024ede:	4b2a      	ldr	r3, [pc, #168]	; (8024f88 <SdoDownloadSegmentInd+0x23c>)
 8024ee0:	2200      	movs	r2, #0
 8024ee2:	601a      	str	r2, [r3, #0]
 8024ee4:	e001      	b.n	8024eea <SdoDownloadSegmentInd+0x19e>
                }
            }
        }
        else
        {
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8024ee6:	2303      	movs	r3, #3
 8024ee8:	75fb      	strb	r3, [r7, #23]
        }
    }

    if ( abort == 0)
 8024eea:	7dfb      	ldrb	r3, [r7, #23]
 8024eec:	2b00      	cmp	r3, #0
 8024eee:	d12d      	bne.n	8024f4c <SdoDownloadSegmentInd+0x200>
    {
        /* send the SDO Download Segment response */
        pSdoInd->MbxHeader.Length = SEGMENT_NORM_RES_SIZE;
 8024ef0:	687b      	ldr	r3, [r7, #4]
 8024ef2:	220a      	movs	r2, #10
 8024ef4:	801a      	strh	r2, [r3, #0]
        pSdoInd->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 8024ef6:	687b      	ldr	r3, [r7, #4]
 8024ef8:	88db      	ldrh	r3, [r3, #6]
 8024efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024efe:	b29a      	uxth	r2, r3
 8024f00:	687b      	ldr	r3, [r7, #4]
 8024f02:	80da      	strh	r2, [r3, #6]
        pSdoInd->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 8024f04:	687b      	ldr	r3, [r7, #4]
 8024f06:	88db      	ldrh	r3, [r3, #6]
 8024f08:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8024f0c:	b29a      	uxth	r2, r3
 8024f0e:	687b      	ldr	r3, [r7, #4]
 8024f10:	80da      	strh	r2, [r3, #6]
        /* the SDO Download Segment header depends if it was the last segment or not */
        if ( bSdoSegLastToggle )
 8024f12:	4b1b      	ldr	r3, [pc, #108]	; (8024f80 <SdoDownloadSegmentInd+0x234>)
 8024f14:	781b      	ldrb	r3, [r3, #0]
 8024f16:	2b00      	cmp	r3, #0
 8024f18:	d003      	beq.n	8024f22 <SdoDownloadSegmentInd+0x1d6>
        {
           pSdoInd->SdoHeader.SegHeader        = SDOSERVICE_DOWNLOADSEGMENTRES|SEGHEADER_TOGGLE;
 8024f1a:	687b      	ldr	r3, [r7, #4]
 8024f1c:	2230      	movs	r2, #48	; 0x30
 8024f1e:	721a      	strb	r2, [r3, #8]
 8024f20:	e002      	b.n	8024f28 <SdoDownloadSegmentInd+0x1dc>
        }
        else
           pSdoInd->SdoHeader.SegHeader        = SDOSERVICE_DOWNLOADSEGMENTRES;
 8024f22:	687b      	ldr	r3, [r7, #4]
 8024f24:	2220      	movs	r2, #32
 8024f26:	721a      	strb	r2, [r3, #8]

        if ( bSdoSegFollows == TRUE )
 8024f28:	4b1a      	ldr	r3, [pc, #104]	; (8024f94 <SdoDownloadSegmentInd+0x248>)
 8024f2a:	781b      	ldrb	r3, [r3, #0]
 8024f2c:	2b01      	cmp	r3, #1
 8024f2e:	d106      	bne.n	8024f3e <SdoDownloadSegmentInd+0x1f2>
        {
            /* segments are still expected, nSdoSegBytesToHandle contains the number of received data bytes */
            nSdoSegBytesToHandle += bytesToSave;
 8024f30:	4b17      	ldr	r3, [pc, #92]	; (8024f90 <SdoDownloadSegmentInd+0x244>)
 8024f32:	681a      	ldr	r2, [r3, #0]
 8024f34:	693b      	ldr	r3, [r7, #16]
 8024f36:	4413      	add	r3, r2
 8024f38:	4a15      	ldr	r2, [pc, #84]	; (8024f90 <SdoDownloadSegmentInd+0x244>)
 8024f3a:	6013      	str	r3, [r2, #0]
 8024f3c:	e01b      	b.n	8024f76 <SdoDownloadSegmentInd+0x22a>
        }
        else
        {
            /* the last segment was received, the variables are reset */
            nSdoSegBytesToHandle = 0;
 8024f3e:	4b14      	ldr	r3, [pc, #80]	; (8024f90 <SdoDownloadSegmentInd+0x244>)
 8024f40:	2200      	movs	r2, #0
 8024f42:	601a      	str	r2, [r3, #0]
            nSdoSegService    = 0;
 8024f44:	4b21      	ldr	r3, [pc, #132]	; (8024fcc <SdoDownloadSegmentInd+0x280>)
 8024f46:	2200      	movs	r2, #0
 8024f48:	701a      	strb	r2, [r3, #0]
 8024f4a:	e014      	b.n	8024f76 <SdoDownloadSegmentInd+0x22a>
        }
    }
    else 
    {
        /* the Abort-Response will be sent in SDOS_SdoInd*/
        bSdoSegFollows = FALSE;
 8024f4c:	4b11      	ldr	r3, [pc, #68]	; (8024f94 <SdoDownloadSegmentInd+0x248>)
 8024f4e:	2200      	movs	r2, #0
 8024f50:	701a      	strb	r2, [r3, #0]
        nSdoSegService    = 0;
 8024f52:	4b1e      	ldr	r3, [pc, #120]	; (8024fcc <SdoDownloadSegmentInd+0x280>)
 8024f54:	2200      	movs	r2, #0
 8024f56:	701a      	strb	r2, [r3, #0]
        if (pSdoSegData)
 8024f58:	4b0b      	ldr	r3, [pc, #44]	; (8024f88 <SdoDownloadSegmentInd+0x23c>)
 8024f5a:	681b      	ldr	r3, [r3, #0]
 8024f5c:	2b00      	cmp	r3, #0
 8024f5e:	d007      	beq.n	8024f70 <SdoDownloadSegmentInd+0x224>
        {
            /* the memory has to be released if it is not released before.
            In case of AbortIdx_Working the buffer will be freed in SDOS_SdoRes*/
            FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 8024f60:	4b09      	ldr	r3, [pc, #36]	; (8024f88 <SdoDownloadSegmentInd+0x23c>)
 8024f62:	681b      	ldr	r3, [r3, #0]
 8024f64:	4618      	mov	r0, r3
 8024f66:	f003 f975 	bl	8028254 <free>
            pSdoSegData = NULL;
 8024f6a:	4b07      	ldr	r3, [pc, #28]	; (8024f88 <SdoDownloadSegmentInd+0x23c>)
 8024f6c:	2200      	movs	r2, #0
 8024f6e:	601a      	str	r2, [r3, #0]
        }

        nSdoSegBytesToHandle = 0;
 8024f70:	4b07      	ldr	r3, [pc, #28]	; (8024f90 <SdoDownloadSegmentInd+0x244>)
 8024f72:	2200      	movs	r2, #0
 8024f74:	601a      	str	r2, [r3, #0]
    }

    return abort;
 8024f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8024f78:	4618      	mov	r0, r3
 8024f7a:	3718      	adds	r7, #24
 8024f7c:	46bd      	mov	sp, r7
 8024f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8024f80:	1fff28c6 	.word	0x1fff28c6
 8024f84:	1fff2812 	.word	0x1fff2812
 8024f88:	1fff28d8 	.word	0x1fff28d8
 8024f8c:	1fff28bc 	.word	0x1fff28bc
 8024f90:	1fff28b4 	.word	0x1fff28b4
 8024f94:	1fff28b9 	.word	0x1fff28b9
 8024f98:	1fff28dc 	.word	0x1fff28dc
 8024f9c:	1fff28f4 	.word	0x1fff28f4
 8024fa0:	1fff28f0 	.word	0x1fff28f0
 8024fa4:	1fff28b8 	.word	0x1fff28b8
 8024fa8:	1fff28c4 	.word	0x1fff28c4
 8024fac:	1fff28c5 	.word	0x1fff28c5
 8024fb0:	1fff28f8 	.word	0x1fff28f8
 8024fb4:	1fff28f6 	.word	0x1fff28f6
 8024fb8:	1fff28d4 	.word	0x1fff28d4
 8024fbc:	1fff28b0 	.word	0x1fff28b0
 8024fc0:	1fff28c0 	.word	0x1fff28c0
 8024fc4:	1fff146f 	.word	0x1fff146f
 8024fc8:	1fff28d0 	.word	0x1fff28d0
 8024fcc:	1fff28c7 	.word	0x1fff28c7

08024fd0 <SdoUploadSegmentInd>:
            is received from the master. It prepares and operates the
            response and sends it by itself.
*////////////////////////////////////////////////////////////////////////////////////////

static UINT8 SdoUploadSegmentInd( TUPLOADSDOSEGREQMBX MBXMEM * pSdoInd )
{
 8024fd0:	b580      	push	{r7, lr}
 8024fd2:	b086      	sub	sp, #24
 8024fd4:	af00      	add	r7, sp, #0
 8024fd6:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 8024fd8:	2300      	movs	r3, #0
 8024fda:	75fb      	strb	r3, [r7, #23]
    TUPLOADSDOSEGRESMBX MBXMEM * pSdoSegRes = (TUPLOADSDOSEGRESMBX MBXMEM *)pSdoInd;
 8024fdc:	687b      	ldr	r3, [r7, #4]
 8024fde:	60fb      	str	r3, [r7, #12]

   if ( (pSdoInd->SegHeader & SEGHEADER_TOGGLE) == bSdoSegLastToggle )
 8024fe0:	687b      	ldr	r3, [r7, #4]
 8024fe2:	7a1b      	ldrb	r3, [r3, #8]
 8024fe4:	f003 0310 	and.w	r3, r3, #16
 8024fe8:	4a4c      	ldr	r2, [pc, #304]	; (802511c <SdoUploadSegmentInd+0x14c>)
 8024fea:	7812      	ldrb	r2, [r2, #0]
 8024fec:	4293      	cmp	r3, r2
 8024fee:	d102      	bne.n	8024ff6 <SdoUploadSegmentInd+0x26>
    {
        /* toggle bit has not toggled... */
        abort = ABORTIDX_TOGGLE_BIT_NOT_CHANGED;
 8024ff0:	2301      	movs	r3, #1
 8024ff2:	75fb      	strb	r3, [r7, #23]
 8024ff4:	e08c      	b.n	8025110 <SdoUploadSegmentInd+0x140>
    }
    else
    {
        /* maxData contains the maximum data to be sent with a SDO-Upload Segment response */
         
        UINT32 size = 0;
 8024ff6:	2300      	movs	r3, #0
 8024ff8:	613b      	str	r3, [r7, #16]
        UINT16 maxData;
        {
            maxData =    u16SendMbxSize - MBX_HEADER_SIZE - SEGMENT_NORM_HEADER_SIZE;
 8024ffa:	4b49      	ldr	r3, [pc, #292]	; (8025120 <SdoUploadSegmentInd+0x150>)
 8024ffc:	881b      	ldrh	r3, [r3, #0]
 8024ffe:	3b09      	subs	r3, #9
 8025000:	817b      	strh	r3, [r7, #10]
        }

        /* the new toggle bit is stored in bSdoSegLastToggle */
        bSdoSegLastToggle = pSdoInd->SegHeader & SEGHEADER_TOGGLE;
 8025002:	687b      	ldr	r3, [r7, #4]
 8025004:	7a1b      	ldrb	r3, [r3, #8]
 8025006:	f003 0310 	and.w	r3, r3, #16
 802500a:	b2da      	uxtb	r2, r3
 802500c:	4b43      	ldr	r3, [pc, #268]	; (802511c <SdoUploadSegmentInd+0x14c>)
 802500e:	701a      	strb	r2, [r3, #0]

        if ( nSdoSegCompleteSize < (nSdoSegBytesToHandle + maxData) )
 8025010:	897a      	ldrh	r2, [r7, #10]
 8025012:	4b44      	ldr	r3, [pc, #272]	; (8025124 <SdoUploadSegmentInd+0x154>)
 8025014:	681b      	ldr	r3, [r3, #0]
 8025016:	441a      	add	r2, r3
 8025018:	4b43      	ldr	r3, [pc, #268]	; (8025128 <SdoUploadSegmentInd+0x158>)
 802501a:	681b      	ldr	r3, [r3, #0]
 802501c:	429a      	cmp	r2, r3
 802501e:	d909      	bls.n	8025034 <SdoUploadSegmentInd+0x64>
        {
            /* the remaining data can be send with one SDO Upload Segment response,
               size contains the data to be copied */
            size = nSdoSegCompleteSize - nSdoSegBytesToHandle;
 8025020:	4b41      	ldr	r3, [pc, #260]	; (8025128 <SdoUploadSegmentInd+0x158>)
 8025022:	681a      	ldr	r2, [r3, #0]
 8025024:	4b3f      	ldr	r3, [pc, #252]	; (8025124 <SdoUploadSegmentInd+0x154>)
 8025026:	681b      	ldr	r3, [r3, #0]
 8025028:	1ad3      	subs	r3, r2, r3
 802502a:	613b      	str	r3, [r7, #16]
            bSdoSegFollows = FALSE;
 802502c:	4b3f      	ldr	r3, [pc, #252]	; (802512c <SdoUploadSegmentInd+0x15c>)
 802502e:	2200      	movs	r2, #0
 8025030:	701a      	strb	r2, [r3, #0]
 8025032:	e004      	b.n	802503e <SdoUploadSegmentInd+0x6e>
        }
        else
        {
            /* more data will follow, size contains the data to be copied */
            size = maxData;
 8025034:	897b      	ldrh	r3, [r7, #10]
 8025036:	613b      	str	r3, [r7, #16]
            bSdoSegFollows = TRUE;
 8025038:	4b3c      	ldr	r3, [pc, #240]	; (802512c <SdoUploadSegmentInd+0x15c>)
 802503a:	2201      	movs	r2, #1
 802503c:	701a      	strb	r2, [r3, #0]
        }

        /* copy the object data in the SDO Upload segment response */
        MBXMEMCPY( pSdoSegRes->SdoHeader.Data, &(((UINT8*)pSdoSegData)[nSdoSegBytesToHandle]), size );
 802503e:	68fb      	ldr	r3, [r7, #12]
 8025040:	f103 0109 	add.w	r1, r3, #9
 8025044:	4b3a      	ldr	r3, [pc, #232]	; (8025130 <SdoUploadSegmentInd+0x160>)
 8025046:	681a      	ldr	r2, [r3, #0]
 8025048:	4b36      	ldr	r3, [pc, #216]	; (8025124 <SdoUploadSegmentInd+0x154>)
 802504a:	681b      	ldr	r3, [r3, #0]
 802504c:	4413      	add	r3, r2
 802504e:	4608      	mov	r0, r1
 8025050:	4619      	mov	r1, r3
 8025052:	693a      	ldr	r2, [r7, #16]
 8025054:	f003 f906 	bl	8028264 <memcpy>
        
        /* the SDO Upload Segment header depends if there is still data to be sent */
        pSdoSegRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 8025058:	68fb      	ldr	r3, [r7, #12]
 802505a:	88db      	ldrh	r3, [r3, #6]
 802505c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025060:	b29a      	uxth	r2, r3
 8025062:	68fb      	ldr	r3, [r7, #12]
 8025064:	80da      	strh	r2, [r3, #6]
        pSdoSegRes->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 8025066:	68fb      	ldr	r3, [r7, #12]
 8025068:	88db      	ldrh	r3, [r3, #6]
 802506a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 802506e:	b29a      	uxth	r2, r3
 8025070:	68fb      	ldr	r3, [r7, #12]
 8025072:	80da      	strh	r2, [r3, #6]

        /*Clear SDO header*/
        pSdoSegRes->SdoHeader.SegHeader &= ~SEGHEADER_MASK;
 8025074:	68fb      	ldr	r3, [r7, #12]
 8025076:	2200      	movs	r2, #0
 8025078:	721a      	strb	r2, [r3, #8]
        if (bSdoSegFollows)
 802507a:	4b2c      	ldr	r3, [pc, #176]	; (802512c <SdoUploadSegmentInd+0x15c>)
 802507c:	781b      	ldrb	r3, [r3, #0]
 802507e:	2b00      	cmp	r3, #0
 8025080:	d008      	beq.n	8025094 <SdoUploadSegmentInd+0xc4>
            pSdoSegRes->SdoHeader.SegHeader        |= SDOSERVICE_UPLOADSEGMENTRES | bSdoSegLastToggle;
 8025082:	68fb      	ldr	r3, [r7, #12]
 8025084:	7a1a      	ldrb	r2, [r3, #8]
 8025086:	4b25      	ldr	r3, [pc, #148]	; (802511c <SdoUploadSegmentInd+0x14c>)
 8025088:	781b      	ldrb	r3, [r3, #0]
 802508a:	4313      	orrs	r3, r2
 802508c:	b2da      	uxtb	r2, r3
 802508e:	68fb      	ldr	r3, [r7, #12]
 8025090:	721a      	strb	r2, [r3, #8]
 8025092:	e00a      	b.n	80250aa <SdoUploadSegmentInd+0xda>
        else
            pSdoSegRes->SdoHeader.SegHeader        |= SDOSERVICE_UPLOADSEGMENTRES | bSdoSegLastToggle | SEGHEADER_NOMOREFOLLOWS;
 8025094:	68fb      	ldr	r3, [r7, #12]
 8025096:	7a1a      	ldrb	r2, [r3, #8]
 8025098:	4b20      	ldr	r3, [pc, #128]	; (802511c <SdoUploadSegmentInd+0x14c>)
 802509a:	781b      	ldrb	r3, [r3, #0]
 802509c:	4313      	orrs	r3, r2
 802509e:	b2db      	uxtb	r3, r3
 80250a0:	f043 0301 	orr.w	r3, r3, #1
 80250a4:	b2da      	uxtb	r2, r3
 80250a6:	68fb      	ldr	r3, [r7, #12]
 80250a8:	721a      	strb	r2, [r3, #8]

        // operate CAN specific flag segDataSize:
        /* HBu 06.02.06: the sizes were wrong */
        if ( size < MIN_SEGMENTED_DATA )
 80250aa:	693b      	ldr	r3, [r7, #16]
 80250ac:	2b06      	cmp	r3, #6
 80250ae:	d810      	bhi.n	80250d2 <SdoUploadSegmentInd+0x102>
        {
            // at least    MIN_SEGMENTED_DATA bytes have to be send:
            pSdoSegRes->MbxHeader.Length = SEGMENT_NORM_RES_SIZE;
 80250b0:	68fb      	ldr	r3, [r7, #12]
 80250b2:	220a      	movs	r2, #10
 80250b4:	801a      	strh	r2, [r3, #0]
            pSdoSegRes->SdoHeader.SegHeader    |= (MIN_SEGMENTED_DATA - size) << SEGHEADERSHIFT_SEGDATASIZE;
 80250b6:	68fb      	ldr	r3, [r7, #12]
 80250b8:	7a1a      	ldrb	r2, [r3, #8]
 80250ba:	693b      	ldr	r3, [r7, #16]
 80250bc:	b2db      	uxtb	r3, r3
 80250be:	f1c3 0307 	rsb	r3, r3, #7
 80250c2:	b2db      	uxtb	r3, r3
 80250c4:	005b      	lsls	r3, r3, #1
 80250c6:	b2db      	uxtb	r3, r3
 80250c8:	4313      	orrs	r3, r2
 80250ca:	b2da      	uxtb	r2, r3
 80250cc:	68fb      	ldr	r3, [r7, #12]
 80250ce:	721a      	strb	r2, [r3, #8]
 80250d0:	e005      	b.n	80250de <SdoUploadSegmentInd+0x10e>
        }
        else
        {
            pSdoSegRes->MbxHeader.Length         = ((UINT16) size) + SEGMENT_NORM_HEADER_SIZE;
 80250d2:	693b      	ldr	r3, [r7, #16]
 80250d4:	b29b      	uxth	r3, r3
 80250d6:	3303      	adds	r3, #3
 80250d8:	b29a      	uxth	r2, r3
 80250da:	68fb      	ldr	r3, [r7, #12]
 80250dc:	801a      	strh	r2, [r3, #0]
        }

        if ( bSdoSegFollows == TRUE )
 80250de:	4b13      	ldr	r3, [pc, #76]	; (802512c <SdoUploadSegmentInd+0x15c>)
 80250e0:	781b      	ldrb	r3, [r3, #0]
 80250e2:	2b01      	cmp	r3, #1
 80250e4:	d106      	bne.n	80250f4 <SdoUploadSegmentInd+0x124>
            // updating the value of send bytes:
            nSdoSegBytesToHandle += size;
 80250e6:	4b0f      	ldr	r3, [pc, #60]	; (8025124 <SdoUploadSegmentInd+0x154>)
 80250e8:	681a      	ldr	r2, [r3, #0]
 80250ea:	693b      	ldr	r3, [r7, #16]
 80250ec:	4413      	add	r3, r2
 80250ee:	4a0d      	ldr	r2, [pc, #52]	; (8025124 <SdoUploadSegmentInd+0x154>)
 80250f0:	6013      	str	r3, [r2, #0]
 80250f2:	e00d      	b.n	8025110 <SdoUploadSegmentInd+0x140>
        else
        {
            FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 80250f4:	4b0e      	ldr	r3, [pc, #56]	; (8025130 <SdoUploadSegmentInd+0x160>)
 80250f6:	681b      	ldr	r3, [r3, #0]
 80250f8:	4618      	mov	r0, r3
 80250fa:	f003 f8ab 	bl	8028254 <free>
            pSdoSegData = NULL;
 80250fe:	4b0c      	ldr	r3, [pc, #48]	; (8025130 <SdoUploadSegmentInd+0x160>)
 8025100:	2200      	movs	r2, #0
 8025102:	601a      	str	r2, [r3, #0]
            nSdoSegBytesToHandle = 0;
 8025104:	4b07      	ldr	r3, [pc, #28]	; (8025124 <SdoUploadSegmentInd+0x154>)
 8025106:	2200      	movs	r2, #0
 8025108:	601a      	str	r2, [r3, #0]
            nSdoSegService    = 0;
 802510a:	4b0a      	ldr	r3, [pc, #40]	; (8025134 <SdoUploadSegmentInd+0x164>)
 802510c:	2200      	movs	r2, #0
 802510e:	701a      	strb	r2, [r3, #0]
        }
    }

    return abort;
 8025110:	7dfb      	ldrb	r3, [r7, #23]
}
 8025112:	4618      	mov	r0, r3
 8025114:	3718      	adds	r7, #24
 8025116:	46bd      	mov	sp, r7
 8025118:	bd80      	pop	{r7, pc}
 802511a:	bf00      	nop
 802511c:	1fff28c6 	.word	0x1fff28c6
 8025120:	1fff2800 	.word	0x1fff2800
 8025124:	1fff28b4 	.word	0x1fff28b4
 8025128:	1fff28bc 	.word	0x1fff28bc
 802512c:	1fff28b9 	.word	0x1fff28b9
 8025130:	1fff28d8 	.word	0x1fff28d8
 8025134:	1fff28c7 	.word	0x1fff28c7

08025138 <SdoRes>:

 \brief    This function is called when a SDO response shall be sent
*////////////////////////////////////////////////////////////////////////////////////////

void SdoRes(UINT8 abort, UINT8 command, UINT8 completeAccess, UINT16 dataSize, UINT32 objLength, TINITSDOMBX MBXMEM *pSdoRes)
{
 8025138:	b590      	push	{r4, r7, lr}
 802513a:	b083      	sub	sp, #12
 802513c:	af00      	add	r7, sp, #0
 802513e:	4604      	mov	r4, r0
 8025140:	4608      	mov	r0, r1
 8025142:	4611      	mov	r1, r2
 8025144:	461a      	mov	r2, r3
 8025146:	4623      	mov	r3, r4
 8025148:	71fb      	strb	r3, [r7, #7]
 802514a:	4603      	mov	r3, r0
 802514c:	71bb      	strb	r3, [r7, #6]
 802514e:	460b      	mov	r3, r1
 8025150:	717b      	strb	r3, [r7, #5]
 8025152:	4613      	mov	r3, r2
 8025154:	807b      	strh	r3, [r7, #2]
    /* for an upload segment response the toggle bit was overwritten */
    if ((command != SDOSERVICE_UPLOADSEGMENTREQ) && (command != SDOSERVICE_DOWNLOADSEGMENTREQ))
 8025156:	79bb      	ldrb	r3, [r7, #6]
 8025158:	2b60      	cmp	r3, #96	; 0x60
 802515a:	d005      	beq.n	8025168 <SdoRes+0x30>
 802515c:	79bb      	ldrb	r3, [r7, #6]
 802515e:	2b00      	cmp	r3, #0
 8025160:	d002      	beq.n	8025168 <SdoRes+0x30>
    {
        pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] = 0;
 8025162:	69fb      	ldr	r3, [r7, #28]
 8025164:	2200      	movs	r2, #0
 8025166:	721a      	strb	r2, [r3, #8]
    }
    if ( abort == 0 )
 8025168:	79fb      	ldrb	r3, [r7, #7]
 802516a:	2b00      	cmp	r3, #0
 802516c:	d16c      	bne.n	8025248 <SdoRes+0x110>
    {
        /* SDO-Download or SDO-Upload was successful, generate the SDO- and CoE-Header */
        pSdoRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 802516e:	69fb      	ldr	r3, [r7, #28]
 8025170:	88db      	ldrh	r3, [r3, #6]
 8025172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025176:	b29a      	uxth	r2, r3
 8025178:	69fb      	ldr	r3, [r7, #28]
 802517a:	80da      	strh	r2, [r3, #6]
        pSdoRes->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 802517c:	69fb      	ldr	r3, [r7, #28]
 802517e:	88db      	ldrh	r3, [r3, #6]
 8025180:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8025184:	b29a      	uxth	r2, r3
 8025186:	69fb      	ldr	r3, [r7, #28]
 8025188:	80da      	strh	r2, [r3, #6]
        if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 802518a:	79bb      	ldrb	r3, [r7, #6]
 802518c:	2b40      	cmp	r3, #64	; 0x40
 802518e:	d13f      	bne.n	8025210 <SdoRes+0xd8>
        {
            // HBu 06.02.06: Complete Access Bit in the SDO-Upload-Response too */
            if ( (objLength <= 4) && (objLength > 0) )
 8025190:	69bb      	ldr	r3, [r7, #24]
 8025192:	2b04      	cmp	r3, #4
 8025194:	d818      	bhi.n	80251c8 <SdoRes+0x90>
 8025196:	69bb      	ldr	r3, [r7, #24]
 8025198:	2b00      	cmp	r3, #0
 802519a:	d015      	beq.n	80251c8 <SdoRes+0x90>
            {
                /* Expedited Upload Response */
                pSdoRes->MbxHeader.Length             =         EXPEDITED_FRAME_SIZE;
 802519c:	69fb      	ldr	r3, [r7, #28]
 802519e:	220a      	movs	r2, #10
 80251a0:	801a      	strh	r2, [r3, #0]
                pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |=     SDOHEADER_SIZEINDICATOR     |
 80251a2:	69fb      	ldr	r3, [r7, #28]
 80251a4:	7a1a      	ldrb	r2, [r3, #8]
                                                                                        SDOHEADER_TRANSFERTYPE        |
                                                                                        completeAccess |
                                                                                        ((MAX_EXPEDITED_DATA - ((UINT8)objLength)) << SDOHEADERSHIFT_DATASETSIZE) |
 80251a6:	69bb      	ldr	r3, [r7, #24]
 80251a8:	b2db      	uxtb	r3, r3
 80251aa:	f1c3 0304 	rsb	r3, r3, #4
 80251ae:	009b      	lsls	r3, r3, #2
            // HBu 06.02.06: Complete Access Bit in the SDO-Upload-Response too */
            if ( (objLength <= 4) && (objLength > 0) )
            {
                /* Expedited Upload Response */
                pSdoRes->MbxHeader.Length             =         EXPEDITED_FRAME_SIZE;
                pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |=     SDOHEADER_SIZEINDICATOR     |
 80251b0:	b2d9      	uxtb	r1, r3
 80251b2:	797b      	ldrb	r3, [r7, #5]
 80251b4:	430b      	orrs	r3, r1
 80251b6:	b2db      	uxtb	r3, r3
 80251b8:	4313      	orrs	r3, r2
 80251ba:	b2db      	uxtb	r3, r3
 80251bc:	f043 0343 	orr.w	r3, r3, #67	; 0x43
 80251c0:	b2da      	uxtb	r2, r3
 80251c2:	69fb      	ldr	r3, [r7, #28]
 80251c4:	721a      	strb	r2, [r3, #8]
 80251c6:	e059      	b.n	802527c <SdoRes+0x144>
                                                                                        SDOSERVICE_INITIATEUPLOADRES;
            }
            else
            {
                /* Normal or Segmented Upload Response */
                if (dataSize <  objLength)
 80251c8:	887a      	ldrh	r2, [r7, #2]
 80251ca:	69bb      	ldr	r3, [r7, #24]
 80251cc:	429a      	cmp	r2, r3
 80251ce:	d205      	bcs.n	80251dc <SdoRes+0xa4>
                {
                    pSdoRes->MbxHeader.Length         =         UPLOAD_NORM_RES_SIZE+dataSize;
 80251d0:	887b      	ldrh	r3, [r7, #2]
 80251d2:	330a      	adds	r3, #10
 80251d4:	b29a      	uxth	r2, r3
 80251d6:	69fb      	ldr	r3, [r7, #28]
 80251d8:	801a      	strh	r2, [r3, #0]
 80251da:	e005      	b.n	80251e8 <SdoRes+0xb0>
                }
                else
                {
                    pSdoRes->MbxHeader.Length         =         UPLOAD_NORM_RES_SIZE+((UINT16)objLength);
 80251dc:	69bb      	ldr	r3, [r7, #24]
 80251de:	b29b      	uxth	r3, r3
 80251e0:	330a      	adds	r3, #10
 80251e2:	b29a      	uxth	r2, r3
 80251e4:	69fb      	ldr	r3, [r7, #28]
 80251e6:	801a      	strh	r2, [r3, #0]
                }
                   ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoRes)->CompleteSize[0] = SWAPWORD((UINT16)objLength);
 80251e8:	69bb      	ldr	r3, [r7, #24]
 80251ea:	b29a      	uxth	r2, r3
 80251ec:	69fb      	ldr	r3, [r7, #28]
 80251ee:	819a      	strh	r2, [r3, #12]
                   ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoRes)->CompleteSize[1] = SWAPWORD((UINT16)(objLength>>16));
 80251f0:	69bb      	ldr	r3, [r7, #24]
 80251f2:	0c1b      	lsrs	r3, r3, #16
 80251f4:	b29a      	uxth	r2, r3
 80251f6:	69fb      	ldr	r3, [r7, #28]
 80251f8:	81da      	strh	r2, [r3, #14]
                pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |=     SDOHEADER_SIZEINDICATOR     |
 80251fa:	69fb      	ldr	r3, [r7, #28]
 80251fc:	7a1a      	ldrb	r2, [r3, #8]
 80251fe:	797b      	ldrb	r3, [r7, #5]
 8025200:	4313      	orrs	r3, r2
 8025202:	b2db      	uxtb	r3, r3
 8025204:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 8025208:	b2da      	uxtb	r2, r3
 802520a:	69fb      	ldr	r3, [r7, #28]
 802520c:	721a      	strb	r2, [r3, #8]
 802520e:	e035      	b.n	802527c <SdoRes+0x144>
                                                                                        completeAccess |
                                                                                        SDOSERVICE_INITIATEUPLOADRES;
            }
        }
        /* for a segmented response the command was wrong in the response */
        else if ( command == SDOSERVICE_DOWNLOADSEGMENTREQ )
 8025210:	79bb      	ldrb	r3, [r7, #6]
 8025212:	2b00      	cmp	r3, #0
 8025214:	d10a      	bne.n	802522c <SdoRes+0xf4>
        {
            /* Download segmented response */
            pSdoRes->MbxHeader.Length         = DOWNLOAD_NORM_RES_SIZE;
 8025216:	69fb      	ldr	r3, [r7, #28]
 8025218:	220a      	movs	r2, #10
 802521a:	801a      	strh	r2, [r3, #0]
            pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= SDOSERVICE_DOWNLOADSEGMENTRES;
 802521c:	69fb      	ldr	r3, [r7, #28]
 802521e:	7a1b      	ldrb	r3, [r3, #8]
 8025220:	f043 0320 	orr.w	r3, r3, #32
 8025224:	b2da      	uxtb	r2, r3
 8025226:	69fb      	ldr	r3, [r7, #28]
 8025228:	721a      	strb	r2, [r3, #8]
 802522a:	e027      	b.n	802527c <SdoRes+0x144>
      }
        else if ( command != SDOSERVICE_UPLOADSEGMENTREQ )
 802522c:	79bb      	ldrb	r3, [r7, #6]
 802522e:	2b60      	cmp	r3, #96	; 0x60
 8025230:	d024      	beq.n	802527c <SdoRes+0x144>
        {
            /* Download response */
            pSdoRes->MbxHeader.Length         = DOWNLOAD_NORM_RES_SIZE;
 8025232:	69fb      	ldr	r3, [r7, #28]
 8025234:	220a      	movs	r2, #10
 8025236:	801a      	strh	r2, [r3, #0]
            pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= SDOSERVICE_INITIATEDOWNLOADRES;
 8025238:	69fb      	ldr	r3, [r7, #28]
 802523a:	7a1b      	ldrb	r3, [r3, #8]
 802523c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8025240:	b2da      	uxtb	r2, r3
 8025242:	69fb      	ldr	r3, [r7, #28]
 8025244:	721a      	strb	r2, [r3, #8]
 8025246:	e019      	b.n	802527c <SdoRes+0x144>
        }
    }
    else
    {
        /* generate a SDO-Abort-Request */
        pSdoRes->MbxHeader.Length         = ABORT_NORM_RES_SIZE;
 8025248:	69fb      	ldr	r3, [r7, #28]
 802524a:	220a      	movs	r2, #10
 802524c:	801a      	strh	r2, [r3, #0]
        pSdoRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 802524e:	69fb      	ldr	r3, [r7, #28]
 8025250:	88db      	ldrh	r3, [r3, #6]
 8025252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025256:	b29a      	uxth	r2, r3
 8025258:	69fb      	ldr	r3, [r7, #28]
 802525a:	80da      	strh	r2, [r3, #6]
        pSdoRes->CoeHeader |= ((UINT16)COESERVICE_SDOREQUEST) << COEHEADER_COESERVICESHIFT;
 802525c:	69fb      	ldr	r3, [r7, #28]
 802525e:	88db      	ldrh	r3, [r3, #6]
 8025260:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8025264:	b29a      	uxth	r2, r3
 8025266:	69fb      	ldr	r3, [r7, #28]
 8025268:	80da      	strh	r2, [r3, #6]
        pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    = SDOSERVICE_ABORTTRANSFER;
 802526a:	69fb      	ldr	r3, [r7, #28]
 802526c:	2280      	movs	r2, #128	; 0x80
 802526e:	721a      	strb	r2, [r3, #8]
        ((TABORTSDOTRANSFERREQMBX MBXMEM *) pSdoRes)->AbortCode = SWAPDWORD(cAbortCode[abort]);
 8025270:	79fb      	ldrb	r3, [r7, #7]
 8025272:	4a09      	ldr	r2, [pc, #36]	; (8025298 <SdoRes+0x160>)
 8025274:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8025278:	69fb      	ldr	r3, [r7, #28]
 802527a:	60da      	str	r2, [r3, #12]
    }

    // HBu 02.05.06: if the CoE-response could not be sent because the
    //               send mailbox is full it should be stored
    if (MBX_MailboxSendReq((TMBX MBXMEM *) pSdoRes, COE_SERVICE) != 0)
 802527c:	69f8      	ldr	r0, [r7, #28]
 802527e:	2102      	movs	r1, #2
 8025280:	f7fe f9ae 	bl	80235e0 <MBX_MailboxSendReq>
 8025284:	4603      	mov	r3, r0
 8025286:	2b00      	cmp	r3, #0
 8025288:	d002      	beq.n	8025290 <SdoRes+0x158>
    {
        /* we store the CoE mailbox service to send it later (in COE_ContinueInd) when the mailbox is read */
        pCoeSendStored = (TMBX MBXMEM *) pSdoRes;
 802528a:	4a04      	ldr	r2, [pc, #16]	; (802529c <SdoRes+0x164>)
 802528c:	69fb      	ldr	r3, [r7, #28]
 802528e:	6013      	str	r3, [r2, #0]
    }
}
 8025290:	370c      	adds	r7, #12
 8025292:	46bd      	mov	sp, r7
 8025294:	bd90      	pop	{r4, r7, pc}
 8025296:	bf00      	nop
 8025298:	080289d4 	.word	0x080289d4
 802529c:	1fff2538 	.word	0x1fff2538

080252a0 <SDOS_SdoInd>:
            is received from the master and calls depending from
            the command the concerning function.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 SDOS_SdoInd(TINITSDOMBX MBXMEM *pSdoInd)
{
 80252a0:	b590      	push	{r4, r7, lr}
 80252a2:	b08f      	sub	sp, #60	; 0x3c
 80252a4:	af02      	add	r7, sp, #8
 80252a6:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 80252a8:	2300      	movs	r3, #0
 80252aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    UINT8 sdoHeader = pSdoInd->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMMANDMASK;
 80252ae:	687b      	ldr	r3, [r7, #4]
 80252b0:	7a1b      	ldrb	r3, [r3, #8]
 80252b2:	76bb      	strb	r3, [r7, #26]
    /* the SDO-command is in bit 5-7 of the first SDO-Byte */
    UINT8 command = (sdoHeader & SDOHEADER_COMMAND);
 80252b4:	7ebb      	ldrb	r3, [r7, #26]
 80252b6:	f023 031f 	bic.w	r3, r3, #31
 80252ba:	767b      	strb	r3, [r7, #25]
    /* mbxSize contains the size of the mailbox (CoE-Header (2 Bytes) + SDO-Header (8 Bytes) + SDO-Data (if the data length is greater than 4)) */
    UINT16 mbxSize = SWAPWORD(pSdoInd->MbxHeader.Length);
 80252bc:	687b      	ldr	r3, [r7, #4]
 80252be:	881b      	ldrh	r3, [r3, #0]
 80252c0:	82fb      	strh	r3, [r7, #22]
    UINT16 index;
    UINT8 subindex;
    OBJCONST TOBJECT OBJMEM * pObjEntry;
    /* this variable contains the information, if all entries of an object will be read (bCompleteAccess > 0) or a single entry */
    UINT8 bCompleteAccess = 0;
 80252c2:	2300      	movs	r3, #0
 80252c4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    UINT32 objLength = 0;
 80252c8:	2300      	movs	r3, #0
 80252ca:	62bb      	str	r3, [r7, #40]	; 0x28
    UINT32 dataSize = 0;
 80252cc:	2300      	movs	r3, #0
 80252ce:	627b      	str	r3, [r7, #36]	; 0x24

    if ( bSdoInWork )
 80252d0:	4b99      	ldr	r3, [pc, #612]	; (8025538 <SDOS_SdoInd+0x298>)
 80252d2:	781b      	ldrb	r3, [r3, #0]
 80252d4:	2b00      	cmp	r3, #0
 80252d6:	d001      	beq.n	80252dc <SDOS_SdoInd+0x3c>
    {
        /* the last SDO is still in work */
        return MBXERR_SERVICEINWORK;
 80252d8:	2309      	movs	r3, #9
 80252da:	e275      	b.n	80257c8 <SDOS_SdoInd+0x528>
    }


    switch (command)
 80252dc:	7e7b      	ldrb	r3, [r7, #25]
 80252de:	2b20      	cmp	r3, #32
 80252e0:	d00b      	beq.n	80252fa <SDOS_SdoInd+0x5a>
 80252e2:	2b20      	cmp	r3, #32
 80252e4:	dc03      	bgt.n	80252ee <SDOS_SdoInd+0x4e>
 80252e6:	2b00      	cmp	r3, #0
 80252e8:	f000 823b 	beq.w	8025762 <SDOS_SdoInd+0x4c2>
 80252ec:	e253      	b.n	8025796 <SDOS_SdoInd+0x4f6>
 80252ee:	2b40      	cmp	r3, #64	; 0x40
 80252f0:	d003      	beq.n	80252fa <SDOS_SdoInd+0x5a>
 80252f2:	2b60      	cmp	r3, #96	; 0x60
 80252f4:	f000 8235 	beq.w	8025762 <SDOS_SdoInd+0x4c2>
 80252f8:	e24d      	b.n	8025796 <SDOS_SdoInd+0x4f6>
    {
    case SDOSERVICE_INITIATEDOWNLOADREQ:
    case SDOSERVICE_INITIATEUPLOADREQ:
        /* the variable index contains the requested index of the SDO service */
        index = pSdoInd->SdoHeader.Sdo[SDOHEADER_INDEXHIOFFSET] & SDOHEADER_INDEXHIMASK;
 80252fa:	687b      	ldr	r3, [r7, #4]
 80252fc:	7a9b      	ldrb	r3, [r3, #10]
 80252fe:	82bb      	strh	r3, [r7, #20]
        index <<= 8;
 8025300:	8abb      	ldrh	r3, [r7, #20]
 8025302:	021b      	lsls	r3, r3, #8
 8025304:	82bb      	strh	r3, [r7, #20]
        index += pSdoInd->SdoHeader.Sdo[SDOHEADER_INDEXLOOFFSET] >> SDOHEADER_INDEXLOSHIFT;
 8025306:	687b      	ldr	r3, [r7, #4]
 8025308:	7a5b      	ldrb	r3, [r3, #9]
 802530a:	b29a      	uxth	r2, r3
 802530c:	8abb      	ldrh	r3, [r7, #20]
 802530e:	4413      	add	r3, r2
 8025310:	82bb      	strh	r3, [r7, #20]
        /* the variable subindex contains the requested subindex of the SDO service */
        subindex    = pSdoInd->SdoHeader.Sdo[SDOHEADER_SUBINDEXOFFSET] >> SDOHEADER_SUBINDEXSHIFT;
 8025312:	687b      	ldr	r3, [r7, #4]
 8025314:	7adb      	ldrb	r3, [r3, #11]
 8025316:	74fb      	strb	r3, [r7, #19]

        /* OBJ_GetObjectHandle checks if the requested index is defined in the object dictionary */
        pObjEntry = OBJ_GetObjectHandle( index );
 8025318:	8abb      	ldrh	r3, [r7, #20]
 802531a:	4618      	mov	r0, r3
 802531c:	f7fe fb1a 	bl	8023954 <OBJ_GetObjectHandle>
 8025320:	60f8      	str	r0, [r7, #12]

        if ( pObjEntry )
 8025322:	68fb      	ldr	r3, [r7, #12]
 8025324:	2b00      	cmp	r3, #0
 8025326:	f000 8217 	beq.w	8025758 <SDOS_SdoInd+0x4b8>
        {
            /* transferType contains the information if the SDO Download Request or the SDO Upload Response
               can be an expedited service (SDO data length <= 4, that means the data is stored in the
                SDO-Header completely */
            UINT8 bTransferType = 0;
 802532a:	2300      	movs	r3, #0
 802532c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            /* pData is the pointer to the received (SDO-Download) or sent (SDO-Upload) SDO data in the mailbox */
            UINT16 MBXMEM * pData = NULL;
 8025330:	2300      	movs	r3, #0
 8025332:	61fb      	str	r3, [r7, #28]
            UINT8 segTransfer = 0;
 8025334:	2300      	movs	r3, #0
 8025336:	76fb      	strb	r3, [r7, #27]

            {
                dataSize = objLength = OBJ_GetObjectLength( index, subindex, pObjEntry, (UINT8) (sdoHeader & SDOHEADER_COMPLETEACCESS) );
 8025338:	7ebb      	ldrb	r3, [r7, #26]
 802533a:	f003 0310 	and.w	r3, r3, #16
 802533e:	b2db      	uxtb	r3, r3
 8025340:	8ab9      	ldrh	r1, [r7, #20]
 8025342:	7cfa      	ldrb	r2, [r7, #19]
 8025344:	4608      	mov	r0, r1
 8025346:	4611      	mov	r1, r2
 8025348:	68fa      	ldr	r2, [r7, #12]
 802534a:	f7fe fb1f 	bl	802398c <OBJ_GetObjectLength>
 802534e:	62b8      	str	r0, [r7, #40]	; 0x28
 8025350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025352:	627b      	str	r3, [r7, #36]	; 0x24

                if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 8025354:	7e7b      	ldrb	r3, [r7, #25]
 8025356:	2b40      	cmp	r3, #64	; 0x40
 8025358:	d127      	bne.n	80253aa <SDOS_SdoInd+0x10a>
                {
                    /* SDO Upload */
                    if ( mbxSize != EXPEDITED_FRAME_SIZE )
 802535a:	8afb      	ldrh	r3, [r7, #22]
 802535c:	2b0a      	cmp	r3, #10
 802535e:	d001      	beq.n	8025364 <SDOS_SdoInd+0xc4>
                        /* a SDO Upload request has always a fixed size (2 Byte CoE-Header plus 8 Byte SDO-Header) */
                        return MBXERR_INVALIDSIZE;
 8025360:	2308      	movs	r3, #8
 8025362:	e231      	b.n	80257c8 <SDOS_SdoInd+0x528>
                    /* distinguish between expedited and normal upload response within the length of the response data */
                    if ( (objLength <= MAX_EXPEDITED_DATA) && objLength != 0 )
 8025364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025366:	2b04      	cmp	r3, #4
 8025368:	d810      	bhi.n	802538c <SDOS_SdoInd+0xec>
 802536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802536c:	2b00      	cmp	r3, #0
 802536e:	d00d      	beq.n	802538c <SDOS_SdoInd+0xec>
                    {
                        /* Expedited Upload */
                        bTransferType = 1;
 8025370:	2301      	movs	r3, #1
 8025372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                        /* pData is the pointer where the object data has to be copied for the response */
                        pData = ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoInd)->Data;
 8025376:	687b      	ldr	r3, [r7, #4]
 8025378:	330c      	adds	r3, #12
 802537a:	61fb      	str	r3, [r7, #28]
                        /* initialize the 4 data bytes of the SDO upload response because the requested object data
                           could be less than 4 */
                        pData[0] = 0;
 802537c:	69fb      	ldr	r3, [r7, #28]
 802537e:	2200      	movs	r2, #0
 8025380:	801a      	strh	r2, [r3, #0]
                        pData[1] = 0;
 8025382:	69fb      	ldr	r3, [r7, #28]
 8025384:	3302      	adds	r3, #2
 8025386:	2200      	movs	r2, #0
 8025388:	801a      	strh	r2, [r3, #0]
 802538a:	e013      	b.n	80253b4 <SDOS_SdoInd+0x114>
                    }
                    else
                    {
                        /* HBu 06.02.06: the variable dataSize has to be set to the available size in one mailbox */
                    dataSize = u16SendMbxSize - MBX_HEADER_SIZE - UPLOAD_NORM_RES_SIZE;
 802538c:	4b6b      	ldr	r3, [pc, #428]	; (802553c <SDOS_SdoInd+0x29c>)
 802538e:	881b      	ldrh	r3, [r3, #0]
 8025390:	3b10      	subs	r3, #16
 8025392:	627b      	str	r3, [r7, #36]	; 0x24
                        if ( dataSize < objLength )
 8025394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025398:	429a      	cmp	r2, r3
 802539a:	d202      	bcs.n	80253a2 <SDOS_SdoInd+0x102>
                            /* Segmented Upload */
                            segTransfer = 1;
 802539c:	2301      	movs	r3, #1
 802539e:	76fb      	strb	r3, [r7, #27]
 80253a0:	e008      	b.n	80253b4 <SDOS_SdoInd+0x114>
                        else
                            /* Normal Upload */
                            pData = ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoInd)->Data;
 80253a2:	687b      	ldr	r3, [r7, #4]
 80253a4:	3310      	adds	r3, #16
 80253a6:	61fb      	str	r3, [r7, #28]
 80253a8:	e004      	b.n	80253b4 <SDOS_SdoInd+0x114>
                    }
                }
                else
                {
                    /* SDO-Download: store if the request is a expedited or normal request  */
                    bTransferType = sdoHeader & SDOHEADER_TRANSFERTYPE;
 80253aa:	7ebb      	ldrb	r3, [r7, #26]
 80253ac:	f003 0302 	and.w	r3, r3, #2
 80253b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                }
            }

            if ( command == SDOSERVICE_INITIATEDOWNLOADREQ )
 80253b4:	7e7b      	ldrb	r3, [r7, #25]
 80253b6:	2b20      	cmp	r3, #32
 80253b8:	d13c      	bne.n	8025434 <SDOS_SdoInd+0x194>
            {
                /* SDO Download */
                if ( bTransferType )
 80253ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80253be:	2b00      	cmp	r3, #0
 80253c0:	d00f      	beq.n	80253e2 <SDOS_SdoInd+0x142>
                {
                    /* Expedited Download */
                    if ( mbxSize != EXPEDITED_FRAME_SIZE )
 80253c2:	8afb      	ldrh	r3, [r7, #22]
 80253c4:	2b0a      	cmp	r3, #10
 80253c6:	d001      	beq.n	80253cc <SDOS_SdoInd+0x12c>
                        /* an Expedited SDO Download request has always a fixed size (2 Byte CoE-Header plus 8 Byte SDO-Header) */
                        return MBXERR_INVALIDSIZE;
 80253c8:	2308      	movs	r3, #8
 80253ca:	e1fd      	b.n	80257c8 <SDOS_SdoInd+0x528>
                    /* dataSize gets the real size of the downloaded object data (1,2,3 or 4) */
                    dataSize = MAX_EXPEDITED_DATA - ((sdoHeader & SDOHEADER_DATASETSIZE) >> SDOHEADERSHIFT_DATASETSIZE);
 80253cc:	7ebb      	ldrb	r3, [r7, #26]
 80253ce:	f003 030c 	and.w	r3, r3, #12
 80253d2:	109b      	asrs	r3, r3, #2
 80253d4:	f1c3 0304 	rsb	r3, r3, #4
 80253d8:	627b      	str	r3, [r7, #36]	; 0x24
                    /* pData is the pointer to the downloaded object data */
                    pData = (UINT16 MBXMEM *) &pSdoInd[1];
 80253da:	687b      	ldr	r3, [r7, #4]
 80253dc:	330c      	adds	r3, #12
 80253de:	61fb      	str	r3, [r7, #28]
 80253e0:	e028      	b.n	8025434 <SDOS_SdoInd+0x194>
                {
                    /* Normal Download */
                    /* downloadSize gets the real size of the downloaded data */
                    /* '&' operator was too much */

                    UINT32 downloadSize = ((UINT32)(SWAPWORD(((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->CompleteSize[1]))<<16) + (SWAPWORD(((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->CompleteSize[0]));
 80253e2:	687b      	ldr	r3, [r7, #4]
 80253e4:	89db      	ldrh	r3, [r3, #14]
 80253e6:	041b      	lsls	r3, r3, #16
 80253e8:	687a      	ldr	r2, [r7, #4]
 80253ea:	8992      	ldrh	r2, [r2, #12]
 80253ec:	4413      	add	r3, r2
 80253ee:	60bb      	str	r3, [r7, #8]

                    /* HBu 29.03.06: if it is a segmented download the mbxSize has to be the complete mailbox size */
                    if ( (MBX_HEADER_SIZE+EXPEDITED_FRAME_SIZE+downloadSize) > u16ReceiveMbxSize )
 80253f0:	68bb      	ldr	r3, [r7, #8]
 80253f2:	3310      	adds	r3, #16
 80253f4:	4a52      	ldr	r2, [pc, #328]	; (8025540 <SDOS_SdoInd+0x2a0>)
 80253f6:	8812      	ldrh	r2, [r2, #0]
 80253f8:	4293      	cmp	r3, r2
 80253fa:	d907      	bls.n	802540c <SDOS_SdoInd+0x16c>
                    {
                        if ( mbxSize != (u16ReceiveMbxSize-MBX_HEADER_SIZE) )
 80253fc:	8afa      	ldrh	r2, [r7, #22]
 80253fe:	4b50      	ldr	r3, [pc, #320]	; (8025540 <SDOS_SdoInd+0x2a0>)
 8025400:	881b      	ldrh	r3, [r3, #0]
 8025402:	3b06      	subs	r3, #6
 8025404:	429a      	cmp	r2, r3
 8025406:	d008      	beq.n	802541a <SDOS_SdoInd+0x17a>
                            return MBXERR_INVALIDSIZE;
 8025408:	2308      	movs	r3, #8
 802540a:	e1dd      	b.n	80257c8 <SDOS_SdoInd+0x528>
                    }
                    else
                    {
                        if ( mbxSize != (EXPEDITED_FRAME_SIZE+downloadSize) )
 802540c:	8afa      	ldrh	r2, [r7, #22]
 802540e:	68bb      	ldr	r3, [r7, #8]
 8025410:	330a      	adds	r3, #10
 8025412:	429a      	cmp	r2, r3
 8025414:	d001      	beq.n	802541a <SDOS_SdoInd+0x17a>
                            /* the mbxSize and the downloadSize are not consistent (mbxSize = downloadSize + 2 byte CoE-Header + 8 byte SDO Header */
                            return MBXERR_INVALIDSIZE;
 8025416:	2308      	movs	r3, #8
 8025418:	e1d6      	b.n	80257c8 <SDOS_SdoInd+0x528>
                    }

                    /* pData is the pointer to the downloaded object data */
                    pData = (UINT16 MBXMEM *) ((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->Data;
 802541a:	687b      	ldr	r3, [r7, #4]
 802541c:	3310      	adds	r3, #16
 802541e:	61fb      	str	r3, [r7, #28]
                    /* the received dataSize will be checked in the object specific functions called from
                       OBJ_Write (in objdef.c) */
                    dataSize = downloadSize;
 8025420:	68bb      	ldr	r3, [r7, #8]
 8025422:	627b      	str	r3, [r7, #36]	; 0x24
                    if ( dataSize > (UINT32)(mbxSize - DOWNLOAD_NORM_REQ_SIZE) )
 8025424:	8afb      	ldrh	r3, [r7, #22]
 8025426:	f1a3 020a 	sub.w	r2, r3, #10
 802542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802542c:	429a      	cmp	r2, r3
 802542e:	d201      	bcs.n	8025434 <SDOS_SdoInd+0x194>
                        /* Segmented Download */
                        segTransfer = 1;
 8025430:	2301      	movs	r3, #1
 8025432:	76fb      	strb	r3, [r7, #27]
                }
            }

            if ( sdoHeader & SDOHEADER_COMPLETEACCESS )
 8025434:	7ebb      	ldrb	r3, [r7, #26]
 8025436:	f003 0310 	and.w	r3, r3, #16
 802543a:	2b00      	cmp	r3, #0
 802543c:	d008      	beq.n	8025450 <SDOS_SdoInd+0x1b0>
            {
                bCompleteAccess = 1;
 802543e:	2301      	movs	r3, #1
 8025440:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                // HBu 02.05.06: Complete Access is only supported with subindex 0 and 1
                if (subindex > 1)
 8025444:	7cfb      	ldrb	r3, [r7, #19]
 8025446:	2b01      	cmp	r3, #1
 8025448:	d902      	bls.n	8025450 <SDOS_SdoInd+0x1b0>
                    abort = ABORTIDX_UNSUPPORTED_ACCESS;
 802544a:	2305      	movs	r3, #5
 802544c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }

            if ( abort == 0 )
 8025450:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8025454:	2b00      	cmp	r3, #0
 8025456:	f040 817e 	bne.w	8025756 <SDOS_SdoInd+0x4b6>
            {
                if ( segTransfer )
 802545a:	7efb      	ldrb	r3, [r7, #27]
 802545c:	2b00      	cmp	r3, #0
 802545e:	f000 80d7 	beq.w	8025610 <SDOS_SdoInd+0x370>
                {
                    bSdoSegFollows         = TRUE;
 8025462:	4b38      	ldr	r3, [pc, #224]	; (8025544 <SDOS_SdoInd+0x2a4>)
 8025464:	2201      	movs	r2, #1
 8025466:	701a      	strb	r2, [r3, #0]
                    bSdoSegLastToggle     = 1;
 8025468:	4b37      	ldr	r3, [pc, #220]	; (8025548 <SDOS_SdoInd+0x2a8>)
 802546a:	2201      	movs	r2, #1
 802546c:	701a      	strb	r2, [r3, #0]
                    bSdoSegAccess             = bCompleteAccess;
 802546e:	4a37      	ldr	r2, [pc, #220]	; (802554c <SDOS_SdoInd+0x2ac>)
 8025470:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8025474:	7013      	strb	r3, [r2, #0]
                    nSdoSegIndex             = index;
 8025476:	4a36      	ldr	r2, [pc, #216]	; (8025550 <SDOS_SdoInd+0x2b0>)
 8025478:	8abb      	ldrh	r3, [r7, #20]
 802547a:	8013      	strh	r3, [r2, #0]
                    nSdoSegSubindex         = subindex;
 802547c:	4a35      	ldr	r2, [pc, #212]	; (8025554 <SDOS_SdoInd+0x2b4>)
 802547e:	7cfb      	ldrb	r3, [r7, #19]
 8025480:	7013      	strb	r3, [r2, #0]
                    pSdoSegObjEntry        = pObjEntry;
 8025482:	4a35      	ldr	r2, [pc, #212]	; (8025558 <SDOS_SdoInd+0x2b8>)
 8025484:	68fb      	ldr	r3, [r7, #12]
 8025486:	6013      	str	r3, [r2, #0]
                    if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 8025488:	7e7b      	ldrb	r3, [r7, #25]
 802548a:	2b40      	cmp	r3, #64	; 0x40
 802548c:	d103      	bne.n	8025496 <SDOS_SdoInd+0x1f6>
                        nSdoSegCompleteSize    = objLength;
 802548e:	4a33      	ldr	r2, [pc, #204]	; (802555c <SDOS_SdoInd+0x2bc>)
 8025490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025492:	6013      	str	r3, [r2, #0]
 8025494:	e002      	b.n	802549c <SDOS_SdoInd+0x1fc>
                    else
                        nSdoSegCompleteSize    = dataSize;
 8025496:	4a31      	ldr	r2, [pc, #196]	; (802555c <SDOS_SdoInd+0x2bc>)
 8025498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802549a:	6013      	str	r3, [r2, #0]

                    if (pSdoSegData != NULL)
 802549c:	4b30      	ldr	r3, [pc, #192]	; (8025560 <SDOS_SdoInd+0x2c0>)
 802549e:	681b      	ldr	r3, [r3, #0]
 80254a0:	2b00      	cmp	r3, #0
 80254a2:	d007      	beq.n	80254b4 <SDOS_SdoInd+0x214>
                    {
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData);
 80254a4:	4b2e      	ldr	r3, [pc, #184]	; (8025560 <SDOS_SdoInd+0x2c0>)
 80254a6:	681b      	ldr	r3, [r3, #0]
 80254a8:	4618      	mov	r0, r3
 80254aa:	f002 fed3 	bl	8028254 <free>
                        pSdoSegData = NULL;
 80254ae:	4b2c      	ldr	r3, [pc, #176]	; (8025560 <SDOS_SdoInd+0x2c0>)
 80254b0:	2200      	movs	r2, #0
 80254b2:	601a      	str	r2, [r3, #0]
                    }
                    pSdoSegData = (UINT16 VARMEM *) ALLOCMEM( ROUNDUPBYTE2WORD(nSdoSegCompleteSize) );
 80254b4:	4b29      	ldr	r3, [pc, #164]	; (802555c <SDOS_SdoInd+0x2bc>)
 80254b6:	681b      	ldr	r3, [r3, #0]
 80254b8:	3301      	adds	r3, #1
 80254ba:	f023 0301 	bic.w	r3, r3, #1
 80254be:	4618      	mov	r0, r3
 80254c0:	f002 fec0 	bl	8028244 <malloc>
 80254c4:	4603      	mov	r3, r0
 80254c6:	461a      	mov	r2, r3
 80254c8:	4b25      	ldr	r3, [pc, #148]	; (8025560 <SDOS_SdoInd+0x2c0>)
 80254ca:	601a      	str	r2, [r3, #0]

                    if ( pSdoSegData == NULL )
 80254cc:	4b24      	ldr	r3, [pc, #144]	; (8025560 <SDOS_SdoInd+0x2c0>)
 80254ce:	681b      	ldr	r3, [r3, #0]
 80254d0:	2b00      	cmp	r3, #0
 80254d2:	d10b      	bne.n	80254ec <SDOS_SdoInd+0x24c>
                    {
/*ECATCHANGE_START(V5.11) SDO4*/
                        if(bCompleteAccess)
 80254d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80254d8:	2b00      	cmp	r3, #0
 80254da:	d003      	beq.n	80254e4 <SDOS_SdoInd+0x244>
                            abort = ABORTIDX_UNSUPPORTED_ACCESS;
 80254dc:	2305      	movs	r3, #5
 80254de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80254e2:	e138      	b.n	8025756 <SDOS_SdoInd+0x4b6>
                        else
/*ECATCHANGE_END(V5.11) SDO4*/
                            abort = ABORTIDX_OUT_OF_MEMORY;
 80254e4:	2304      	movs	r3, #4
 80254e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80254ea:	e134      	b.n	8025756 <SDOS_SdoInd+0x4b6>
                    }
                    else
                    {
                        if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 80254ec:	7e7b      	ldrb	r3, [r7, #25]
 80254ee:	2b40      	cmp	r3, #64	; 0x40
 80254f0:	d178      	bne.n	80255e4 <SDOS_SdoInd+0x344>
                        {
                            /* Segmented Upload */
                            abort = OBJ_Read( index, subindex, objLength, pObjEntry, (UINT16 MBXMEM *) pSdoSegData, bCompleteAccess );
 80254f2:	4b1b      	ldr	r3, [pc, #108]	; (8025560 <SDOS_SdoInd+0x2c0>)
 80254f4:	681b      	ldr	r3, [r3, #0]
 80254f6:	8ab9      	ldrh	r1, [r7, #20]
 80254f8:	7cfa      	ldrb	r2, [r7, #19]
 80254fa:	9300      	str	r3, [sp, #0]
 80254fc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8025500:	9301      	str	r3, [sp, #4]
 8025502:	4608      	mov	r0, r1
 8025504:	4611      	mov	r1, r2
 8025506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025508:	68fb      	ldr	r3, [r7, #12]
 802550a:	f7fe fe29 	bl	8024160 <OBJ_Read>
 802550e:	4603      	mov	r3, r0
 8025510:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                            if ( abort == 0 )
 8025514:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8025518:	2b00      	cmp	r3, #0
 802551a:	d125      	bne.n	8025568 <SDOS_SdoInd+0x2c8>
                            {
                                MBXMEMCPY( ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoInd)->Data, pSdoSegData, dataSize );
 802551c:	687b      	ldr	r3, [r7, #4]
 802551e:	f103 0210 	add.w	r2, r3, #16
 8025522:	4b0f      	ldr	r3, [pc, #60]	; (8025560 <SDOS_SdoInd+0x2c0>)
 8025524:	681b      	ldr	r3, [r3, #0]
 8025526:	4610      	mov	r0, r2
 8025528:	4619      	mov	r1, r3
 802552a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802552c:	f002 fe9a 	bl	8028264 <memcpy>
                                nSdoSegService    = SDOSERVICE_UPLOADSEGMENTREQ;
 8025530:	4b0c      	ldr	r3, [pc, #48]	; (8025564 <SDOS_SdoInd+0x2c4>)
 8025532:	2260      	movs	r2, #96	; 0x60
 8025534:	701a      	strb	r2, [r3, #0]
 8025536:	e067      	b.n	8025608 <SDOS_SdoInd+0x368>
 8025538:	1fff146f 	.word	0x1fff146f
 802553c:	1fff2800 	.word	0x1fff2800
 8025540:	1fff2812 	.word	0x1fff2812
 8025544:	1fff28b9 	.word	0x1fff28b9
 8025548:	1fff28c6 	.word	0x1fff28c6
 802554c:	1fff28b8 	.word	0x1fff28b8
 8025550:	1fff28dc 	.word	0x1fff28dc
 8025554:	1fff28f4 	.word	0x1fff28f4
 8025558:	1fff28f0 	.word	0x1fff28f0
 802555c:	1fff28bc 	.word	0x1fff28bc
 8025560:	1fff28d8 	.word	0x1fff28d8
 8025564:	1fff28c7 	.word	0x1fff28c7
                            }
                            else if ( abort == ABORTIDX_WORKING )
 8025568:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802556c:	2bff      	cmp	r3, #255	; 0xff
 802556e:	d14b      	bne.n	8025608 <SDOS_SdoInd+0x368>
                            {
                                /* the application generates the SDO-Response later on by calling SDOS_SdoRes (only possible if object access function pointer is defined) */
                                u8PendingSdo = SDO_PENDING_SEG_READ;
 8025570:	4b97      	ldr	r3, [pc, #604]	; (80257d0 <SDOS_SdoInd+0x530>)
 8025572:	2204      	movs	r2, #4
 8025574:	701a      	strb	r2, [r3, #0]
                                bStoreCompleteAccess = bCompleteAccess;
 8025576:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 802557a:	2b00      	cmp	r3, #0
 802557c:	bf14      	ite	ne
 802557e:	2301      	movne	r3, #1
 8025580:	2300      	moveq	r3, #0
 8025582:	b2da      	uxtb	r2, r3
 8025584:	4b93      	ldr	r3, [pc, #588]	; (80257d4 <SDOS_SdoInd+0x534>)
 8025586:	701a      	strb	r2, [r3, #0]
                                u8StoreSubindex = subindex;
 8025588:	4a93      	ldr	r2, [pc, #588]	; (80257d8 <SDOS_SdoInd+0x538>)
 802558a:	7cfb      	ldrb	r3, [r7, #19]
 802558c:	7013      	strb	r3, [r2, #0]
                                u16StoreIndex = index;
 802558e:	4a93      	ldr	r2, [pc, #588]	; (80257dc <SDOS_SdoInd+0x53c>)
 8025590:	8abb      	ldrh	r3, [r7, #20]
 8025592:	8013      	strh	r3, [r2, #0]
                                u32StoreDataSize = objLength;
 8025594:	4a92      	ldr	r2, [pc, #584]	; (80257e0 <SDOS_SdoInd+0x540>)
 8025596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025598:	6013      	str	r3, [r2, #0]
                                pStoreData = pSdoSegData;
 802559a:	4b92      	ldr	r3, [pc, #584]	; (80257e4 <SDOS_SdoInd+0x544>)
 802559c:	681b      	ldr	r3, [r3, #0]
 802559e:	4a92      	ldr	r2, [pc, #584]	; (80257e8 <SDOS_SdoInd+0x548>)
 80255a0:	6013      	str	r3, [r2, #0]
                                pSdoPendFunc = pObjEntry->Read;
 80255a2:	68fb      	ldr	r3, [r7, #12]
 80255a4:	69db      	ldr	r3, [r3, #28]
 80255a6:	4a91      	ldr	r2, [pc, #580]	; (80257ec <SDOS_SdoInd+0x54c>)
 80255a8:	6013      	str	r3, [r2, #0]

                                bSdoInWork = TRUE;
 80255aa:	4b91      	ldr	r3, [pc, #580]	; (80257f0 <SDOS_SdoInd+0x550>)
 80255ac:	2201      	movs	r2, #1
 80255ae:	701a      	strb	r2, [r3, #0]
                                /* we have to store the buffer and the response header */
                                pSdoResStored = pSdoInd;
 80255b0:	4a90      	ldr	r2, [pc, #576]	; (80257f4 <SDOS_SdoInd+0x554>)
 80255b2:	687b      	ldr	r3, [r7, #4]
 80255b4:	6013      	str	r3, [r2, #0]

                                /*update command field*/
                                pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]   &= ~SDOHEADER_COMMANDMASK;
 80255b6:	4b8f      	ldr	r3, [pc, #572]	; (80257f4 <SDOS_SdoInd+0x554>)
 80255b8:	681b      	ldr	r3, [r3, #0]
 80255ba:	2200      	movs	r2, #0
 80255bc:	721a      	strb	r2, [r3, #8]
                                pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]   |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 80255be:	4b8d      	ldr	r3, [pc, #564]	; (80257f4 <SDOS_SdoInd+0x554>)
 80255c0:	681b      	ldr	r3, [r3, #0]
 80255c2:	4a8c      	ldr	r2, [pc, #560]	; (80257f4 <SDOS_SdoInd+0x554>)
 80255c4:	6812      	ldr	r2, [r2, #0]
 80255c6:	7a12      	ldrb	r2, [r2, #8]
 80255c8:	b2d1      	uxtb	r1, r2
 80255ca:	7eba      	ldrb	r2, [r7, #26]
 80255cc:	f022 020f 	bic.w	r2, r2, #15
 80255d0:	b2d2      	uxtb	r2, r2
 80255d2:	430a      	orrs	r2, r1
 80255d4:	b2d2      	uxtb	r2, r2
 80255d6:	b2d2      	uxtb	r2, r2
 80255d8:	721a      	strb	r2, [r3, #8]
                                nSdoSegService    = SDOSERVICE_UPLOADSEGMENTREQ;
 80255da:	4b87      	ldr	r3, [pc, #540]	; (80257f8 <SDOS_SdoInd+0x558>)
 80255dc:	2260      	movs	r2, #96	; 0x60
 80255de:	701a      	strb	r2, [r3, #0]
                                return 0;
 80255e0:	2300      	movs	r3, #0
 80255e2:	e0f1      	b.n	80257c8 <SDOS_SdoInd+0x528>
                            }
                        }
                        else
                        {
                            /* Segmented Download */
                            MBXMEMCPY( pSdoSegData, ((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->Data, mbxSize-DOWNLOAD_NORM_REQ_SIZE );
 80255e4:	4b7f      	ldr	r3, [pc, #508]	; (80257e4 <SDOS_SdoInd+0x544>)
 80255e6:	6819      	ldr	r1, [r3, #0]
 80255e8:	687b      	ldr	r3, [r7, #4]
 80255ea:	f103 0210 	add.w	r2, r3, #16
 80255ee:	8afb      	ldrh	r3, [r7, #22]
 80255f0:	3b0a      	subs	r3, #10
 80255f2:	4608      	mov	r0, r1
 80255f4:	4611      	mov	r1, r2
 80255f6:	461a      	mov	r2, r3
 80255f8:	f002 fe34 	bl	8028264 <memcpy>
                            nSdoSegService    = SDOSERVICE_DOWNLOADSEGMENTREQ;
 80255fc:	4b7e      	ldr	r3, [pc, #504]	; (80257f8 <SDOS_SdoInd+0x558>)
 80255fe:	2200      	movs	r2, #0
 8025600:	701a      	strb	r2, [r3, #0]
                            dataSize = (mbxSize-DOWNLOAD_NORM_REQ_SIZE);
 8025602:	8afb      	ldrh	r3, [r7, #22]
 8025604:	3b0a      	subs	r3, #10
 8025606:	627b      	str	r3, [r7, #36]	; 0x24
                        }

                        nSdoSegBytesToHandle = dataSize;
 8025608:	4a7c      	ldr	r2, [pc, #496]	; (80257fc <SDOS_SdoInd+0x55c>)
 802560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802560c:	6013      	str	r3, [r2, #0]
 802560e:	e0a7      	b.n	8025760 <SDOS_SdoInd+0x4c0>
                    }
                }
                else
                {
                    if ( objLength == 0 )
 8025610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025612:	2b00      	cmp	r3, #0
 8025614:	d108      	bne.n	8025628 <SDOS_SdoInd+0x388>
                    {
                        /* the objLength is not known, therefore the variables for a possible segmented transfer
                            should be initialized */
                        nSdoSegIndex             = index;
 8025616:	4a7a      	ldr	r2, [pc, #488]	; (8025800 <SDOS_SdoInd+0x560>)
 8025618:	8abb      	ldrh	r3, [r7, #20]
 802561a:	8013      	strh	r3, [r2, #0]
                        nSdoSegSubindex         = subindex;
 802561c:	4a79      	ldr	r2, [pc, #484]	; (8025804 <SDOS_SdoInd+0x564>)
 802561e:	7cfb      	ldrb	r3, [r7, #19]
 8025620:	7013      	strb	r3, [r2, #0]
                        pSdoSegObjEntry        = pObjEntry;
 8025622:	4a79      	ldr	r2, [pc, #484]	; (8025808 <SDOS_SdoInd+0x568>)
 8025624:	68fb      	ldr	r3, [r7, #12]
 8025626:	6013      	str	r3, [r2, #0]
                    }
                    if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 8025628:	7e7b      	ldrb	r3, [r7, #25]
 802562a:	2b40      	cmp	r3, #64	; 0x40
 802562c:	d149      	bne.n	80256c2 <SDOS_SdoInd+0x422>
                    {
                        /* Expedited or Normal Upload */
                        abort = OBJ_Read( index, subindex, objLength, pObjEntry, pData, bCompleteAccess );
 802562e:	8ab9      	ldrh	r1, [r7, #20]
 8025630:	7cfa      	ldrb	r2, [r7, #19]
 8025632:	69fb      	ldr	r3, [r7, #28]
 8025634:	9300      	str	r3, [sp, #0]
 8025636:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 802563a:	9301      	str	r3, [sp, #4]
 802563c:	4608      	mov	r0, r1
 802563e:	4611      	mov	r1, r2
 8025640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025642:	68fb      	ldr	r3, [r7, #12]
 8025644:	f7fe fd8c 	bl	8024160 <OBJ_Read>
 8025648:	4603      	mov	r3, r0
 802564a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if ( abort == ABORTIDX_WORKING )
 802564e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8025652:	2bff      	cmp	r3, #255	; 0xff
 8025654:	d17f      	bne.n	8025756 <SDOS_SdoInd+0x4b6>
                        {
                            /* the application generates the SDO-Response later on by calling SDOS_SdoRes (only possible if object access function pointer is defined) */
                            u8PendingSdo = SDO_PENDING_READ;
 8025656:	4b5e      	ldr	r3, [pc, #376]	; (80257d0 <SDOS_SdoInd+0x530>)
 8025658:	2203      	movs	r2, #3
 802565a:	701a      	strb	r2, [r3, #0]
                            bStoreCompleteAccess = bCompleteAccess;
 802565c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8025660:	2b00      	cmp	r3, #0
 8025662:	bf14      	ite	ne
 8025664:	2301      	movne	r3, #1
 8025666:	2300      	moveq	r3, #0
 8025668:	b2da      	uxtb	r2, r3
 802566a:	4b5a      	ldr	r3, [pc, #360]	; (80257d4 <SDOS_SdoInd+0x534>)
 802566c:	701a      	strb	r2, [r3, #0]
                            u8StoreSubindex = subindex;
 802566e:	4a5a      	ldr	r2, [pc, #360]	; (80257d8 <SDOS_SdoInd+0x538>)
 8025670:	7cfb      	ldrb	r3, [r7, #19]
 8025672:	7013      	strb	r3, [r2, #0]
                            u16StoreIndex = index;
 8025674:	4a59      	ldr	r2, [pc, #356]	; (80257dc <SDOS_SdoInd+0x53c>)
 8025676:	8abb      	ldrh	r3, [r7, #20]
 8025678:	8013      	strh	r3, [r2, #0]
                            u32StoreDataSize = objLength;
 802567a:	4a59      	ldr	r2, [pc, #356]	; (80257e0 <SDOS_SdoInd+0x540>)
 802567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802567e:	6013      	str	r3, [r2, #0]
                            pStoreData = pData;
 8025680:	4a59      	ldr	r2, [pc, #356]	; (80257e8 <SDOS_SdoInd+0x548>)
 8025682:	69fb      	ldr	r3, [r7, #28]
 8025684:	6013      	str	r3, [r2, #0]
                            pSdoPendFunc = pObjEntry->Read;
 8025686:	68fb      	ldr	r3, [r7, #12]
 8025688:	69db      	ldr	r3, [r3, #28]
 802568a:	4a58      	ldr	r2, [pc, #352]	; (80257ec <SDOS_SdoInd+0x54c>)
 802568c:	6013      	str	r3, [r2, #0]

                            bSdoInWork = TRUE;
 802568e:	4b58      	ldr	r3, [pc, #352]	; (80257f0 <SDOS_SdoInd+0x550>)
 8025690:	2201      	movs	r2, #1
 8025692:	701a      	strb	r2, [r3, #0]
                            /* we have to store the buffer and the response header */
                            pSdoResStored = pSdoInd;
 8025694:	4a57      	ldr	r2, [pc, #348]	; (80257f4 <SDOS_SdoInd+0x554>)
 8025696:	687b      	ldr	r3, [r7, #4]
 8025698:	6013      	str	r3, [r2, #0]
                            
                            /*update command field*/
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= ~SDOHEADER_COMMANDMASK;
 802569a:	4b56      	ldr	r3, [pc, #344]	; (80257f4 <SDOS_SdoInd+0x554>)
 802569c:	681b      	ldr	r3, [r3, #0]
 802569e:	2200      	movs	r2, #0
 80256a0:	721a      	strb	r2, [r3, #8]
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 80256a2:	4b54      	ldr	r3, [pc, #336]	; (80257f4 <SDOS_SdoInd+0x554>)
 80256a4:	681b      	ldr	r3, [r3, #0]
 80256a6:	4a53      	ldr	r2, [pc, #332]	; (80257f4 <SDOS_SdoInd+0x554>)
 80256a8:	6812      	ldr	r2, [r2, #0]
 80256aa:	7a12      	ldrb	r2, [r2, #8]
 80256ac:	b2d1      	uxtb	r1, r2
 80256ae:	7eba      	ldrb	r2, [r7, #26]
 80256b0:	f022 020f 	bic.w	r2, r2, #15
 80256b4:	b2d2      	uxtb	r2, r2
 80256b6:	430a      	orrs	r2, r1
 80256b8:	b2d2      	uxtb	r2, r2
 80256ba:	b2d2      	uxtb	r2, r2
 80256bc:	721a      	strb	r2, [r3, #8]
                            return 0;
 80256be:	2300      	movs	r3, #0
 80256c0:	e082      	b.n	80257c8 <SDOS_SdoInd+0x528>
                        }
                    }
                    else
                    {
                        /* Expedited or Normal Download */
                        abort = OBJ_Write( index, subindex, dataSize, pObjEntry, pData, bCompleteAccess );
 80256c2:	8ab9      	ldrh	r1, [r7, #20]
 80256c4:	7cfa      	ldrb	r2, [r7, #19]
 80256c6:	69fb      	ldr	r3, [r7, #28]
 80256c8:	9300      	str	r3, [sp, #0]
 80256ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80256ce:	9301      	str	r3, [sp, #4]
 80256d0:	4608      	mov	r0, r1
 80256d2:	4611      	mov	r1, r2
 80256d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80256d6:	68fb      	ldr	r3, [r7, #12]
 80256d8:	f7ff f816 	bl	8024708 <OBJ_Write>
 80256dc:	4603      	mov	r3, r0
 80256de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if ( abort == ABORTIDX_WORKING )
 80256e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80256e6:	2bff      	cmp	r3, #255	; 0xff
 80256e8:	d135      	bne.n	8025756 <SDOS_SdoInd+0x4b6>
                        {
                            /* the application generates the SDO-Response later on by calling SDOS_SdoRes (only possible if object access function pointer is defined) */
                            u8PendingSdo = SDO_PENDING_WRITE;
 80256ea:	4b39      	ldr	r3, [pc, #228]	; (80257d0 <SDOS_SdoInd+0x530>)
 80256ec:	2201      	movs	r2, #1
 80256ee:	701a      	strb	r2, [r3, #0]
                            bStoreCompleteAccess = bCompleteAccess;
 80256f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80256f4:	2b00      	cmp	r3, #0
 80256f6:	bf14      	ite	ne
 80256f8:	2301      	movne	r3, #1
 80256fa:	2300      	moveq	r3, #0
 80256fc:	b2da      	uxtb	r2, r3
 80256fe:	4b35      	ldr	r3, [pc, #212]	; (80257d4 <SDOS_SdoInd+0x534>)
 8025700:	701a      	strb	r2, [r3, #0]
                            u8StoreSubindex = subindex;
 8025702:	4a35      	ldr	r2, [pc, #212]	; (80257d8 <SDOS_SdoInd+0x538>)
 8025704:	7cfb      	ldrb	r3, [r7, #19]
 8025706:	7013      	strb	r3, [r2, #0]
                            u16StoreIndex = index;
 8025708:	4a34      	ldr	r2, [pc, #208]	; (80257dc <SDOS_SdoInd+0x53c>)
 802570a:	8abb      	ldrh	r3, [r7, #20]
 802570c:	8013      	strh	r3, [r2, #0]
                            u32StoreDataSize = dataSize;
 802570e:	4a34      	ldr	r2, [pc, #208]	; (80257e0 <SDOS_SdoInd+0x540>)
 8025710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025712:	6013      	str	r3, [r2, #0]
                            pStoreData = pData;
 8025714:	4a34      	ldr	r2, [pc, #208]	; (80257e8 <SDOS_SdoInd+0x548>)
 8025716:	69fb      	ldr	r3, [r7, #28]
 8025718:	6013      	str	r3, [r2, #0]
                            pSdoPendFunc = pObjEntry->Write;
 802571a:	68fb      	ldr	r3, [r7, #12]
 802571c:	6a1b      	ldr	r3, [r3, #32]
 802571e:	4a33      	ldr	r2, [pc, #204]	; (80257ec <SDOS_SdoInd+0x54c>)
 8025720:	6013      	str	r3, [r2, #0]

                            bSdoInWork = TRUE;
 8025722:	4b33      	ldr	r3, [pc, #204]	; (80257f0 <SDOS_SdoInd+0x550>)
 8025724:	2201      	movs	r2, #1
 8025726:	701a      	strb	r2, [r3, #0]
                            /* we have to store the buffer and the response header */
                            pSdoResStored = pSdoInd;
 8025728:	4a32      	ldr	r2, [pc, #200]	; (80257f4 <SDOS_SdoInd+0x554>)
 802572a:	687b      	ldr	r3, [r7, #4]
 802572c:	6013      	str	r3, [r2, #0]

                            /*update command field*/
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= ~SDOHEADER_COMMANDMASK;
 802572e:	4b31      	ldr	r3, [pc, #196]	; (80257f4 <SDOS_SdoInd+0x554>)
 8025730:	681b      	ldr	r3, [r3, #0]
 8025732:	2200      	movs	r2, #0
 8025734:	721a      	strb	r2, [r3, #8]
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 8025736:	4b2f      	ldr	r3, [pc, #188]	; (80257f4 <SDOS_SdoInd+0x554>)
 8025738:	681b      	ldr	r3, [r3, #0]
 802573a:	4a2e      	ldr	r2, [pc, #184]	; (80257f4 <SDOS_SdoInd+0x554>)
 802573c:	6812      	ldr	r2, [r2, #0]
 802573e:	7a12      	ldrb	r2, [r2, #8]
 8025740:	b2d1      	uxtb	r1, r2
 8025742:	7eba      	ldrb	r2, [r7, #26]
 8025744:	f022 020f 	bic.w	r2, r2, #15
 8025748:	b2d2      	uxtb	r2, r2
 802574a:	430a      	orrs	r2, r1
 802574c:	b2d2      	uxtb	r2, r2
 802574e:	b2d2      	uxtb	r2, r2
 8025750:	721a      	strb	r2, [r3, #8]
                            return 0;
 8025752:	2300      	movs	r3, #0
 8025754:	e038      	b.n	80257c8 <SDOS_SdoInd+0x528>
 8025756:	e003      	b.n	8025760 <SDOS_SdoInd+0x4c0>
            } /* if ( abort == 0 ) */

        } //if(pEntry) (Object handle found)
        else
        {
            abort = ABORTIDX_OBJECT_NOT_EXISTING;
 8025758:	2308      	movs	r3, #8
 802575a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        break;
 802575e:	e01e      	b.n	802579e <SDOS_SdoInd+0x4fe>
 8025760:	e01d      	b.n	802579e <SDOS_SdoInd+0x4fe>

    case SDOSERVICE_DOWNLOADSEGMENTREQ:
    case SDOSERVICE_UPLOADSEGMENTREQ:
        if ( command == nSdoSegService )
 8025762:	4b25      	ldr	r3, [pc, #148]	; (80257f8 <SDOS_SdoInd+0x558>)
 8025764:	781b      	ldrb	r3, [r3, #0]
 8025766:	7e7a      	ldrb	r2, [r7, #25]
 8025768:	429a      	cmp	r2, r3
 802576a:	d110      	bne.n	802578e <SDOS_SdoInd+0x4ee>
        {
            if ( command == SDOSERVICE_DOWNLOADSEGMENTREQ )
 802576c:	7e7b      	ldrb	r3, [r7, #25]
 802576e:	2b00      	cmp	r3, #0
 8025770:	d106      	bne.n	8025780 <SDOS_SdoInd+0x4e0>
                abort = SdoDownloadSegmentInd( (TDOWNLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
 8025772:	6878      	ldr	r0, [r7, #4]
 8025774:	f7ff faea 	bl	8024d4c <SdoDownloadSegmentInd>
 8025778:	4603      	mov	r3, r0
 802577a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            else
                abort = SdoUploadSegmentInd( (TUPLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
        }
        else
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
        break;
 802577e:	e00e      	b.n	802579e <SDOS_SdoInd+0x4fe>
        if ( command == nSdoSegService )
        {
            if ( command == SDOSERVICE_DOWNLOADSEGMENTREQ )
                abort = SdoDownloadSegmentInd( (TDOWNLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
            else
                abort = SdoUploadSegmentInd( (TUPLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
 8025780:	6878      	ldr	r0, [r7, #4]
 8025782:	f7ff fc25 	bl	8024fd0 <SdoUploadSegmentInd>
 8025786:	4603      	mov	r3, r0
 8025788:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        else
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
        break;
 802578c:	e007      	b.n	802579e <SDOS_SdoInd+0x4fe>
                abort = SdoDownloadSegmentInd( (TDOWNLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
            else
                abort = SdoUploadSegmentInd( (TUPLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
        }
        else
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 802578e:	2303      	movs	r3, #3
 8025790:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 8025794:	e003      	b.n	802579e <SDOS_SdoInd+0x4fe>

    default:
        abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8025796:	2303      	movs	r3, #3
 8025798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 802579c:	bf00      	nop
    }

    if(abort != ABORTIDX_WORKING)
 802579e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80257a2:	2bff      	cmp	r3, #255	; 0xff
 80257a4:	d00f      	beq.n	80257c6 <SDOS_SdoInd+0x526>
    {
        /*  type cast was added because of warning */
        SdoRes(abort, command, (UINT8) (sdoHeader & SDOHEADER_COMPLETEACCESS), (UINT16) dataSize, objLength, pSdoInd);
 80257a6:	7ebb      	ldrb	r3, [r7, #26]
 80257a8:	f003 0310 	and.w	r3, r3, #16
 80257ac:	b2da      	uxtb	r2, r3
 80257ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80257b0:	b29c      	uxth	r4, r3
 80257b2:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 80257b6:	7e79      	ldrb	r1, [r7, #25]
 80257b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80257ba:	9300      	str	r3, [sp, #0]
 80257bc:	687b      	ldr	r3, [r7, #4]
 80257be:	9301      	str	r3, [sp, #4]
 80257c0:	4623      	mov	r3, r4
 80257c2:	f7ff fcb9 	bl	8025138 <SdoRes>
    }

    return 0;
 80257c6:	2300      	movs	r3, #0
}
 80257c8:	4618      	mov	r0, r3
 80257ca:	3734      	adds	r7, #52	; 0x34
 80257cc:	46bd      	mov	sp, r7
 80257ce:	bd90      	pop	{r4, r7, pc}
 80257d0:	1fff28c4 	.word	0x1fff28c4
 80257d4:	1fff28c5 	.word	0x1fff28c5
 80257d8:	1fff28f8 	.word	0x1fff28f8
 80257dc:	1fff28f6 	.word	0x1fff28f6
 80257e0:	1fff28d4 	.word	0x1fff28d4
 80257e4:	1fff28d8 	.word	0x1fff28d8
 80257e8:	1fff28b0 	.word	0x1fff28b0
 80257ec:	1fff28c0 	.word	0x1fff28c0
 80257f0:	1fff146f 	.word	0x1fff146f
 80257f4:	1fff28d0 	.word	0x1fff28d0
 80257f8:	1fff28c7 	.word	0x1fff28c7
 80257fc:	1fff28b4 	.word	0x1fff28b4
 8025800:	1fff28dc 	.word	0x1fff28dc
 8025804:	1fff28f4 	.word	0x1fff28f4
 8025808:	1fff28f0 	.word	0x1fff28f0

0802580c <SDOS_SdoRes>:

 \brief    This function is called when a SDO response shall be sent
*////////////////////////////////////////////////////////////////////////////////////////

void SDOS_SdoRes(UINT8 abort, UINT32 objLength, UINT16 MBXMEM *pData)
{
 802580c:	b5b0      	push	{r4, r5, r7, lr}
 802580e:	b088      	sub	sp, #32
 8025810:	af02      	add	r7, sp, #8
 8025812:	4603      	mov	r3, r0
 8025814:	60b9      	str	r1, [r7, #8]
 8025816:	607a      	str	r2, [r7, #4]
 8025818:	73fb      	strb	r3, [r7, #15]
    UINT16 dataSize = 0;
 802581a:	2300      	movs	r3, #0
 802581c:	82fb      	strh	r3, [r7, #22]

    if (bSdoInWork)
 802581e:	4b3a      	ldr	r3, [pc, #232]	; (8025908 <SDOS_SdoRes+0xfc>)
 8025820:	781b      	ldrb	r3, [r3, #0]
 8025822:	2b00      	cmp	r3, #0
 8025824:	d06c      	beq.n	8025900 <SDOS_SdoRes+0xf4>
    {
        /* SDO-Response is expected */
        UINT8 command = pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMMAND;
 8025826:	4b39      	ldr	r3, [pc, #228]	; (802590c <SDOS_SdoRes+0x100>)
 8025828:	681b      	ldr	r3, [r3, #0]
 802582a:	7a1b      	ldrb	r3, [r3, #8]
 802582c:	f023 031f 	bic.w	r3, r3, #31
 8025830:	757b      	strb	r3, [r7, #21]
        UINT8 completeAccess = pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMPLETEACCESS;
 8025832:	4b36      	ldr	r3, [pc, #216]	; (802590c <SDOS_SdoRes+0x100>)
 8025834:	681b      	ldr	r3, [r3, #0]
 8025836:	7a1b      	ldrb	r3, [r3, #8]
 8025838:	f003 0310 	and.w	r3, r3, #16
 802583c:	753b      	strb	r3, [r7, #20]

        if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 802583e:	7d7b      	ldrb	r3, [r7, #21]
 8025840:	2b40      	cmp	r3, #64	; 0x40
 8025842:	d14d      	bne.n	80258e0 <SDOS_SdoRes+0xd4>
        {
            /* dataSize contains the available size in one mailbox */
            dataSize = u16SendMbxSize - MBX_HEADER_SIZE - UPLOAD_NORM_RES_SIZE;
 8025844:	4b32      	ldr	r3, [pc, #200]	; (8025910 <SDOS_SdoRes+0x104>)
 8025846:	881b      	ldrh	r3, [r3, #0]
 8025848:	3b10      	subs	r3, #16
 802584a:	82fb      	strh	r3, [r7, #22]
            if ( dataSize < objLength )
 802584c:	8afa      	ldrh	r2, [r7, #22]
 802584e:	68bb      	ldr	r3, [r7, #8]
 8025850:	429a      	cmp	r2, r3
 8025852:	d21f      	bcs.n	8025894 <SDOS_SdoRes+0x88>
            {
                /* Segmented Upload, the variables for the segmented transfer should be initialized */
                bSdoSegFollows         = TRUE;
 8025854:	4b2f      	ldr	r3, [pc, #188]	; (8025914 <SDOS_SdoRes+0x108>)
 8025856:	2201      	movs	r2, #1
 8025858:	701a      	strb	r2, [r3, #0]
                bSdoSegLastToggle     = 1;
 802585a:	4b2f      	ldr	r3, [pc, #188]	; (8025918 <SDOS_SdoRes+0x10c>)
 802585c:	2201      	movs	r2, #1
 802585e:	701a      	strb	r2, [r3, #0]
                bSdoSegAccess             = completeAccess;
 8025860:	4a2e      	ldr	r2, [pc, #184]	; (802591c <SDOS_SdoRes+0x110>)
 8025862:	7d3b      	ldrb	r3, [r7, #20]
 8025864:	7013      	strb	r3, [r2, #0]
                nSdoSegCompleteSize    = objLength;
 8025866:	4a2e      	ldr	r2, [pc, #184]	; (8025920 <SDOS_SdoRes+0x114>)
 8025868:	68bb      	ldr	r3, [r7, #8]
 802586a:	6013      	str	r3, [r2, #0]
                nSdoSegService            = SDOSERVICE_UPLOADSEGMENTREQ;
 802586c:	4b2d      	ldr	r3, [pc, #180]	; (8025924 <SDOS_SdoRes+0x118>)
 802586e:	2260      	movs	r2, #96	; 0x60
 8025870:	701a      	strb	r2, [r3, #0]
                pSdoSegData                = (UINT16 VARMEM *) pData;
 8025872:	4a2d      	ldr	r2, [pc, #180]	; (8025928 <SDOS_SdoRes+0x11c>)
 8025874:	687b      	ldr	r3, [r7, #4]
 8025876:	6013      	str	r3, [r2, #0]
                /* the first segment shall be copied */
                MBXMEMCPY(((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data, pData, dataSize);
 8025878:	4b24      	ldr	r3, [pc, #144]	; (802590c <SDOS_SdoRes+0x100>)
 802587a:	681b      	ldr	r3, [r3, #0]
 802587c:	f103 0210 	add.w	r2, r3, #16
 8025880:	8afb      	ldrh	r3, [r7, #22]
 8025882:	4610      	mov	r0, r2
 8025884:	6879      	ldr	r1, [r7, #4]
 8025886:	461a      	mov	r2, r3
 8025888:	f002 fcec 	bl	8028264 <memcpy>
                nSdoSegBytesToHandle = dataSize;
 802588c:	8afb      	ldrh	r3, [r7, #22]
 802588e:	4a27      	ldr	r2, [pc, #156]	; (802592c <SDOS_SdoRes+0x120>)
 8025890:	6013      	str	r3, [r2, #0]
 8025892:	e025      	b.n	80258e0 <SDOS_SdoRes+0xd4>
            }
            else
            if ( (objLength <= 4) && (objLength > 0) )
 8025894:	68bb      	ldr	r3, [r7, #8]
 8025896:	2b04      	cmp	r3, #4
 8025898:	d813      	bhi.n	80258c2 <SDOS_SdoRes+0xb6>
 802589a:	68bb      	ldr	r3, [r7, #8]
 802589c:	2b00      	cmp	r3, #0
 802589e:	d010      	beq.n	80258c2 <SDOS_SdoRes+0xb6>
            {
                /* Expedited response */
                if ( pData != ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data )
 80258a0:	4b1a      	ldr	r3, [pc, #104]	; (802590c <SDOS_SdoRes+0x100>)
 80258a2:	681b      	ldr	r3, [r3, #0]
 80258a4:	f103 020c 	add.w	r2, r3, #12
 80258a8:	687b      	ldr	r3, [r7, #4]
 80258aa:	429a      	cmp	r2, r3
 80258ac:	d008      	beq.n	80258c0 <SDOS_SdoRes+0xb4>
                {
                    /* the data is not in the response buffer yet, it shall be copied */
                    MBXMEMCPY(((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data, pData, objLength);
 80258ae:	4b17      	ldr	r3, [pc, #92]	; (802590c <SDOS_SdoRes+0x100>)
 80258b0:	681b      	ldr	r3, [r3, #0]
 80258b2:	330c      	adds	r3, #12
 80258b4:	4618      	mov	r0, r3
 80258b6:	6879      	ldr	r1, [r7, #4]
 80258b8:	68ba      	ldr	r2, [r7, #8]
 80258ba:	f002 fcd3 	bl	8028264 <memcpy>
            }
            else
            if ( (objLength <= 4) && (objLength > 0) )
            {
                /* Expedited response */
                if ( pData != ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data )
 80258be:	e00f      	b.n	80258e0 <SDOS_SdoRes+0xd4>
 80258c0:	e00e      	b.n	80258e0 <SDOS_SdoRes+0xd4>
                }
            }
            else
            {
                /* Normal response */
                if ( pData != ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data )
 80258c2:	4b12      	ldr	r3, [pc, #72]	; (802590c <SDOS_SdoRes+0x100>)
 80258c4:	681b      	ldr	r3, [r3, #0]
 80258c6:	f103 0210 	add.w	r2, r3, #16
 80258ca:	687b      	ldr	r3, [r7, #4]
 80258cc:	429a      	cmp	r2, r3
 80258ce:	d007      	beq.n	80258e0 <SDOS_SdoRes+0xd4>
                {
                    /* the data is not in the response buffer yet, it shall be copied */
                    MBXMEMCPY(((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data, pData, objLength);
 80258d0:	4b0e      	ldr	r3, [pc, #56]	; (802590c <SDOS_SdoRes+0x100>)
 80258d2:	681b      	ldr	r3, [r3, #0]
 80258d4:	3310      	adds	r3, #16
 80258d6:	4618      	mov	r0, r3
 80258d8:	6879      	ldr	r1, [r7, #4]
 80258da:	68ba      	ldr	r2, [r7, #8]
 80258dc:	f002 fcc2 	bl	8028264 <memcpy>
                }
            }
        }

        /* SDO access is finished, send the response */
        bSdoInWork = FALSE;
 80258e0:	4b09      	ldr	r3, [pc, #36]	; (8025908 <SDOS_SdoRes+0xfc>)
 80258e2:	2200      	movs	r2, #0
 80258e4:	701a      	strb	r2, [r3, #0]
        SdoRes(abort, command, completeAccess, dataSize, objLength, pSdoResStored);
 80258e6:	4b09      	ldr	r3, [pc, #36]	; (802590c <SDOS_SdoRes+0x100>)
 80258e8:	681b      	ldr	r3, [r3, #0]
 80258ea:	7bf8      	ldrb	r0, [r7, #15]
 80258ec:	7d79      	ldrb	r1, [r7, #21]
 80258ee:	7d3d      	ldrb	r5, [r7, #20]
 80258f0:	8afc      	ldrh	r4, [r7, #22]
 80258f2:	68ba      	ldr	r2, [r7, #8]
 80258f4:	9200      	str	r2, [sp, #0]
 80258f6:	9301      	str	r3, [sp, #4]
 80258f8:	462a      	mov	r2, r5
 80258fa:	4623      	mov	r3, r4
 80258fc:	f7ff fc1c 	bl	8025138 <SdoRes>
    }
}
 8025900:	3718      	adds	r7, #24
 8025902:	46bd      	mov	sp, r7
 8025904:	bdb0      	pop	{r4, r5, r7, pc}
 8025906:	bf00      	nop
 8025908:	1fff146f 	.word	0x1fff146f
 802590c:	1fff28d0 	.word	0x1fff28d0
 8025910:	1fff2800 	.word	0x1fff2800
 8025914:	1fff28b9 	.word	0x1fff28b9
 8025918:	1fff28c6 	.word	0x1fff28c6
 802591c:	1fff28b8 	.word	0x1fff28b8
 8025920:	1fff28bc 	.word	0x1fff28bc
 8025924:	1fff28c7 	.word	0x1fff28c7
 8025928:	1fff28d8 	.word	0x1fff28d8
 802592c:	1fff28b4 	.word	0x1fff28b4

08025930 <SDOS_SdoInfoInd>:
            is received from the master and calls depending from
            the opcode the concerning function.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 SDOS_SdoInfoInd( TSDOINFORMATION MBXMEM *pSdoInfoInd )
{
 8025930:	b590      	push	{r4, r7, lr}
 8025932:	b08f      	sub	sp, #60	; 0x3c
 8025934:	af02      	add	r7, sp, #8
 8025936:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 8025938:	2300      	movs	r3, #0
 802593a:	73fb      	strb	r3, [r7, #15]
    /* the variable opCode contains the requested SDO Information type */
    UINT8 opCode = (UINT8) ((pSdoInfoInd->SdoHeader.InfoHead & INFOHEAD_OPCODE_MASK) >> INFOHEAD_OPCODE_SHIFT);
 802593c:	687b      	ldr	r3, [r7, #4]
 802593e:	891b      	ldrh	r3, [r3, #8]
 8025940:	b2db      	uxtb	r3, r3
 8025942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8025946:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    OBJCONST TOBJECT OBJMEM * pObjEntry;
    UINT16 index;
    UINT8 flags = COE_SERVICE;
 802594a:	2302      	movs	r3, #2
 802594c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* it has to be checked if the mailbox protocol is correct, the sent mailbox data length has to
       great enough for the service header of the requested SDO Information type */
    if ( opCode == SDOINFOSERVICE_ENTRYDESCRIPTION_Q )
 8025950:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8025954:	2b05      	cmp	r3, #5
 8025956:	d105      	bne.n	8025964 <SDOS_SdoInfoInd+0x34>
    {
        if ( pSdoInfoInd->MbxHeader.Length < SIZEOF_SDOINFOENTRYREQSTRUCT )
 8025958:	687b      	ldr	r3, [r7, #4]
 802595a:	881b      	ldrh	r3, [r3, #0]
 802595c:	2b09      	cmp	r3, #9
 802595e:	d807      	bhi.n	8025970 <SDOS_SdoInfoInd+0x40>
            return MBXERR_SIZETOOSHORT;
 8025960:	2306      	movs	r3, #6
 8025962:	e1d9      	b.n	8025d18 <SDOS_SdoInfoInd+0x3e8>
    }
    else
    {
        if ( pSdoInfoInd->MbxHeader.Length < SIZEOF_SDOINFOLISTSTRUCT )
 8025964:	687b      	ldr	r3, [r7, #4]
 8025966:	881b      	ldrh	r3, [r3, #0]
 8025968:	2b07      	cmp	r3, #7
 802596a:	d801      	bhi.n	8025970 <SDOS_SdoInfoInd+0x40>
            return MBXERR_SIZETOOSHORT;
 802596c:	2306      	movs	r3, #6
 802596e:	e1d3      	b.n	8025d18 <SDOS_SdoInfoInd+0x3e8>
    }

    switch ( opCode )
 8025970:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8025974:	2b03      	cmp	r3, #3
 8025976:	f000 80ca 	beq.w	8025b0e <SDOS_SdoInfoInd+0x1de>
 802597a:	2b05      	cmp	r3, #5
 802597c:	f000 80c7 	beq.w	8025b0e <SDOS_SdoInfoInd+0x1de>
 8025980:	2b01      	cmp	r3, #1
 8025982:	f040 8199 	bne.w	8025cb8 <SDOS_SdoInfoInd+0x388>
    {
    case SDOINFOSERVICE_OBJDICTIONARYLIST_Q:
        /* an object list is requested, check if the list type is supported */
        if ( SWAPWORD(pSdoInfoInd->SdoHeader.Data.List.ListType) <= INFO_LIST_TYPE_MAX )
 8025986:	687b      	ldr	r3, [r7, #4]
 8025988:	899b      	ldrh	r3, [r3, #12]
 802598a:	2b05      	cmp	r3, #5
 802598c:	f200 80be 	bhi.w	8025b0c <SDOS_SdoInfoInd+0x1dc>
        {
            UINT16 size = 0;
 8025990:	2300      	movs	r3, #0
 8025992:	85bb      	strh	r3, [r7, #44]	; 0x2c
            /* the variable listType contains the requested listType */
            UINT8 listType = (UINT8) SWAPWORD(pSdoInfoInd->SdoHeader.Data.List.ListType);
 8025994:	687b      	ldr	r3, [r7, #4]
 8025996:	899b      	ldrh	r3, [r3, #12]
 8025998:	f887 3020 	strb.w	r3, [r7, #32]

            /* the SDO Information Header has to be stored because this function will be
               called again if the response could not be sent with one mailbox service, the
               variable nSdoInfoFragmentsLeft is 0 zero for the first call and unequal 0
               for the following calls */
            MBXMEMCPY(aSdoInfoHeader, pSdoInfoInd, SDO_INFO_HEADER_BYTE_SIZE);
 802599c:	48a8      	ldr	r0, [pc, #672]	; (8025c40 <SDOS_SdoInfoInd+0x310>)
 802599e:	6879      	ldr	r1, [r7, #4]
 80259a0:	220e      	movs	r2, #14
 80259a2:	f002 fc5f 	bl	8028264 <memcpy>
            if ( listType-- == 0 )
 80259a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80259aa:	1e5a      	subs	r2, r3, #1
 80259ac:	f887 2020 	strb.w	r2, [r7, #32]
 80259b0:	2b00      	cmp	r3, #0
 80259b2:	d122      	bne.n	80259fa <SDOS_SdoInfoInd+0xca>
                /* List-Type 0: length of the lists */
                UINT8 i;

                /* the needed mailbox size for List-Type 0 response is just 24 bytes, the mailbox has always
                   to be at least 24 bytes to support the SDO Information service */
                nSdoInfoFragmentsLeft = 0;
 80259b4:	4ba3      	ldr	r3, [pc, #652]	; (8025c44 <SDOS_SdoInfoInd+0x314>)
 80259b6:	2200      	movs	r2, #0
 80259b8:	801a      	strh	r2, [r3, #0]
                for (i = 0; i < INFO_LIST_TYPE_MAX; i++)
 80259ba:	2300      	movs	r3, #0
 80259bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80259c0:	e014      	b.n	80259ec <SDOS_SdoInfoInd+0xbc>
                {
                    UINT16 n = OBJ_GetNoOfObjects(i);
 80259c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80259c6:	4618      	mov	r0, r3
 80259c8:	f7fe f8b0 	bl	8023b2c <OBJ_GetNoOfObjects>
 80259cc:	4603      	mov	r3, r0
 80259ce:	83fb      	strh	r3, [r7, #30]

                    /* copy the number of objects of the list type in the SDO Information response */
                    ((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[(SIZEOF_SDOINFOLISTSTRUCT>>1)+i] = SWAPWORD(n);
 80259d0:	687b      	ldr	r3, [r7, #4]
 80259d2:	1d9a      	adds	r2, r3, #6
 80259d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80259d8:	3304      	adds	r3, #4
 80259da:	005b      	lsls	r3, r3, #1
 80259dc:	4413      	add	r3, r2
 80259de:	8bfa      	ldrh	r2, [r7, #30]
 80259e0:	801a      	strh	r2, [r3, #0]
                UINT8 i;

                /* the needed mailbox size for List-Type 0 response is just 24 bytes, the mailbox has always
                   to be at least 24 bytes to support the SDO Information service */
                nSdoInfoFragmentsLeft = 0;
                for (i = 0; i < INFO_LIST_TYPE_MAX; i++)
 80259e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80259e6:	3301      	adds	r3, #1
 80259e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80259ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80259f0:	2b04      	cmp	r3, #4
 80259f2:	d9e6      	bls.n	80259c2 <SDOS_SdoInfoInd+0x92>
                    /* copy the number of objects of the list type in the SDO Information response */
                    ((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[(SIZEOF_SDOINFOLISTSTRUCT>>1)+i] = SWAPWORD(n);
                }

                /* size of the mailbox service response */
                size = (INFO_LIST_TYPE_MAX << 1) + SIZEOF_SDOINFOLISTSTRUCT;
 80259f4:	2312      	movs	r3, #18
 80259f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80259f8:	e05a      	b.n	8025ab0 <SDOS_SdoInfoInd+0x180>
            }
            else
            {
                /* object list with indexes is requested */
                UINT16 MBXMEM * pData;
                UINT16 n = 0;
 80259fa:	2300      	movs	r3, #0
 80259fc:	83bb      	strh	r3, [r7, #28]

                if ( nSdoInfoFragmentsLeft )
 80259fe:	4b91      	ldr	r3, [pc, #580]	; (8025c44 <SDOS_SdoInfoInd+0x314>)
 8025a00:	881b      	ldrh	r3, [r3, #0]
 8025a02:	2b00      	cmp	r3, #0
 8025a04:	d011      	beq.n	8025a2a <SDOS_SdoInfoInd+0xfa>
                {
                    /* the next fragment of the SDO Information response shall be sent */
                    /* initialize size with the maximum size fits into one mailbox service */
                    {
                        size = u16SendMbxSize - SIZEOF_SDOINFO - MBX_HEADER_SIZE;
 8025a06:	4b90      	ldr	r3, [pc, #576]	; (8025c48 <SDOS_SdoInfoInd+0x318>)
 8025a08:	881b      	ldrh	r3, [r3, #0]
 8025a0a:	3b0c      	subs	r3, #12
 8025a0c:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    }
                    /* initialize pData with the pointer where the fragment has to be copied */
                    pData = &((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[SIZEOF_SDOINFO>>1];
 8025a0e:	687b      	ldr	r3, [r7, #4]
 8025a10:	3306      	adds	r3, #6
 8025a12:	3306      	adds	r3, #6
 8025a14:	627b      	str	r3, [r7, #36]	; 0x24
                    /* initialize index with the next index to be sent */
                    index = nSdoInfoIndex;
 8025a16:	4b8d      	ldr	r3, [pc, #564]	; (8025c4c <SDOS_SdoInfoInd+0x31c>)
 8025a18:	881b      	ldrh	r3, [r3, #0]
 8025a1a:	81bb      	strh	r3, [r7, #12]
                    /* decrement the number of fragments to be sent */
                    nSdoInfoFragmentsLeft--;
 8025a1c:	4b89      	ldr	r3, [pc, #548]	; (8025c44 <SDOS_SdoInfoInd+0x314>)
 8025a1e:	881b      	ldrh	r3, [r3, #0]
 8025a20:	3b01      	subs	r3, #1
 8025a22:	b29a      	uxth	r2, r3
 8025a24:	4b87      	ldr	r3, [pc, #540]	; (8025c44 <SDOS_SdoInfoInd+0x314>)
 8025a26:	801a      	strh	r2, [r3, #0]
 8025a28:	e02a      	b.n	8025a80 <SDOS_SdoInfoInd+0x150>
                }
                else
                {
                    /* the first fragment of the SDO Information response has to be sent */
                    /* get the number of objects of the requested object list */
                    n = OBJ_GetNoOfObjects(listType);
 8025a2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025a2e:	4618      	mov	r0, r3
 8025a30:	f7fe f87c 	bl	8023b2c <OBJ_GetNoOfObjects>
 8025a34:	4603      	mov	r3, r0
 8025a36:	83bb      	strh	r3, [r7, #28]
                    /* we start with index 0x1000 */
                    index = 0x1000;
 8025a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8025a3c:	81bb      	strh	r3, [r7, #12]
                    /* initialize size with the maximum size fits into one mailbox service */
                    {
                        size = u16SendMbxSize - SIZEOF_SDOINFOLISTSTRUCT - MBX_HEADER_SIZE;
 8025a3e:	4b82      	ldr	r3, [pc, #520]	; (8025c48 <SDOS_SdoInfoInd+0x318>)
 8025a40:	881b      	ldrh	r3, [r3, #0]
 8025a42:	3b0e      	subs	r3, #14
 8025a44:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    }
                    /* initialize pData with the pointer where the fragment has to be copied */
                    pData = &((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[SIZEOF_SDOINFOLISTSTRUCT>>1];
 8025a46:	687b      	ldr	r3, [r7, #4]
 8025a48:	3306      	adds	r3, #6
 8025a4a:	3308      	adds	r3, #8
 8025a4c:	627b      	str	r3, [r7, #36]	; 0x24
                    /*Check if List need to be send in fragments*/
                    if( (n<<1) > size)
 8025a4e:	8bbb      	ldrh	r3, [r7, #28]
 8025a50:	005a      	lsls	r2, r3, #1
 8025a52:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8025a54:	429a      	cmp	r2, r3
 8025a56:	dd10      	ble.n	8025a7a <SDOS_SdoInfoInd+0x14a>
                        /*number of Bytes to transmit don't fit into one mailbox datagram*/

                        /*calculate number of fragments which need to be send
                        total number of bytes - bytes which will be transmitted with the current response plus the fragment size - 1 (to round up) divided by the size of the following fragments 
                        */
                        UINT16 Fragsize = size + 2;
 8025a58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8025a5a:	3302      	adds	r3, #2
 8025a5c:	837b      	strh	r3, [r7, #26]
                        nSdoInfoFragmentsLeft = (((n<<1)-size + (Fragsize-1)) /Fragsize);
 8025a5e:	8bbb      	ldrh	r3, [r7, #28]
 8025a60:	005a      	lsls	r2, r3, #1
 8025a62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8025a64:	1ad2      	subs	r2, r2, r3
 8025a66:	8b7b      	ldrh	r3, [r7, #26]
 8025a68:	3b01      	subs	r3, #1
 8025a6a:	441a      	add	r2, r3
 8025a6c:	8b7b      	ldrh	r3, [r7, #26]
 8025a6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025a72:	b29a      	uxth	r2, r3
 8025a74:	4b73      	ldr	r3, [pc, #460]	; (8025c44 <SDOS_SdoInfoInd+0x314>)
 8025a76:	801a      	strh	r2, [r3, #0]
 8025a78:	e002      	b.n	8025a80 <SDOS_SdoInfoInd+0x150>
                    }
                    else
                    {
                        nSdoInfoFragmentsLeft = 0;
 8025a7a:	4b72      	ldr	r3, [pc, #456]	; (8025c44 <SDOS_SdoInfoInd+0x314>)
 8025a7c:	2200      	movs	r2, #0
 8025a7e:	801a      	strh	r2, [r3, #0]
                    }
                }

                /* get the next part of the requested object list */
                size = OBJ_GetObjectList(listType, &index, size, pData,&abort);
 8025a80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025a84:	b298      	uxth	r0, r3
 8025a86:	f107 010c 	add.w	r1, r7, #12
 8025a8a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8025a8c:	f107 030f 	add.w	r3, r7, #15
 8025a90:	9300      	str	r3, [sp, #0]
 8025a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025a94:	f7fe f896 	bl	8023bc4 <OBJ_GetObjectList>
 8025a98:	4603      	mov	r3, r0
 8025a9a:	85bb      	strh	r3, [r7, #44]	; 0x2c

                /* store index for next fragment */
                nSdoInfoIndex = index;
 8025a9c:	89ba      	ldrh	r2, [r7, #12]
 8025a9e:	4b6b      	ldr	r3, [pc, #428]	; (8025c4c <SDOS_SdoInfoInd+0x31c>)
 8025aa0:	801a      	strh	r2, [r3, #0]
                /* size contains before the instruction the size still available in the mailbox buffer
                    and shall contain the size of the mailbox response data after the next instruction */
                {
                    size = u16SendMbxSize - size - MBX_HEADER_SIZE;
 8025aa2:	4b69      	ldr	r3, [pc, #420]	; (8025c48 <SDOS_SdoInfoInd+0x318>)
 8025aa4:	881a      	ldrh	r2, [r3, #0]
 8025aa6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8025aa8:	1ad3      	subs	r3, r2, r3
 8025aaa:	b29b      	uxth	r3, r3
 8025aac:	3b06      	subs	r3, #6
 8025aae:	85bb      	strh	r3, [r7, #44]	; 0x2c
                }
            }

            /* size of the mailbox response data */
            pSdoInfoInd->MbxHeader.Length    = size;
 8025ab0:	687b      	ldr	r3, [r7, #4]
 8025ab2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8025ab4:	801a      	strh	r2, [r3, #0]

            if(abort == 0)
 8025ab6:	7bfb      	ldrb	r3, [r7, #15]
 8025ab8:	2b00      	cmp	r3, #0
 8025aba:	d127      	bne.n	8025b0c <SDOS_SdoInfoInd+0x1dc>
            {
             pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 8025abc:	687b      	ldr	r3, [r7, #4]
 8025abe:	891b      	ldrh	r3, [r3, #8]
 8025ac0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8025ac4:	b29a      	uxth	r2, r3
 8025ac6:	687b      	ldr	r3, [r7, #4]
 8025ac8:	811a      	strh	r2, [r3, #8]
             pSdoInfoInd->SdoHeader.InfoHead |= (UINT16) (SDOINFOSERVICE_OBJDICTIONARYLIST_S << INFOHEAD_OPCODE_SHIFT);
 8025aca:	687b      	ldr	r3, [r7, #4]
 8025acc:	891b      	ldrh	r3, [r3, #8]
 8025ace:	f043 0302 	orr.w	r3, r3, #2
 8025ad2:	b29a      	uxth	r2, r3
 8025ad4:	687b      	ldr	r3, [r7, #4]
 8025ad6:	811a      	strh	r2, [r3, #8]
                /* number of fragments still has to be sent */
                pSdoInfoInd->SdoHeader.FragmentsLeft             = SWAPWORD(nSdoInfoFragmentsLeft);
 8025ad8:	4b5a      	ldr	r3, [pc, #360]	; (8025c44 <SDOS_SdoInfoInd+0x314>)
 8025ada:	881a      	ldrh	r2, [r3, #0]
 8025adc:	687b      	ldr	r3, [r7, #4]
 8025ade:	815a      	strh	r2, [r3, #10]

                if (nSdoInfoFragmentsLeft)
 8025ae0:	4b58      	ldr	r3, [pc, #352]	; (8025c44 <SDOS_SdoInfoInd+0x314>)
 8025ae2:	881b      	ldrh	r3, [r3, #0]
 8025ae4:	2b00      	cmp	r3, #0
 8025ae6:	d011      	beq.n	8025b0c <SDOS_SdoInfoInd+0x1dc>
                {
                    /* there still are fragments to be sent,
                       the InComplete flag in the SDO Information response has to be sent */
                    pSdoInfoInd->SdoHeader.InfoHead &= ~ INFOHEADER_INCOMPLETE_MASK;
 8025ae8:	687b      	ldr	r3, [r7, #4]
 8025aea:	891b      	ldrh	r3, [r3, #8]
 8025aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8025af0:	b29a      	uxth	r2, r3
 8025af2:	687b      	ldr	r3, [r7, #4]
 8025af4:	811a      	strh	r2, [r3, #8]
                    pSdoInfoInd->SdoHeader.InfoHead |= (UINT16) (SDOINFOSERVICE_INCOMPLETE << INFOHEAD_OPCODE_SHIFT);
 8025af6:	687b      	ldr	r3, [r7, #4]
 8025af8:	891b      	ldrh	r3, [r3, #8]
 8025afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025afe:	b29a      	uxth	r2, r3
 8025b00:	687b      	ldr	r3, [r7, #4]
 8025b02:	811a      	strh	r2, [r3, #8]
                    /* the FRAGMENTS_FOLLOW flag has to be set for the function MBX_MailboxSendReq to
                       indicate the mailbox handler that still fragments has to be sent so that this
                        function shall be called again from COE_ContinueInd when the actual mailbox buffer
                        was sent */
                    flags = FRAGMENTS_FOLLOW | COE_SERVICE;
 8025b04:	2382      	movs	r3, #130	; 0x82
 8025b06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                }
            }
        }
        break;
 8025b0a:	e0d7      	b.n	8025cbc <SDOS_SdoInfoInd+0x38c>
 8025b0c:	e0d6      	b.n	8025cbc <SDOS_SdoInfoInd+0x38c>

    case SDOINFOSERVICE_OBJDESCRIPTION_Q:
    case SDOINFOSERVICE_ENTRYDESCRIPTION_Q:
        /* get the requested index */
        index = SWAPWORD(pSdoInfoInd->SdoHeader.Data.Obj.Index);
 8025b0e:	687b      	ldr	r3, [r7, #4]
 8025b10:	899b      	ldrh	r3, [r3, #12]
 8025b12:	81bb      	strh	r3, [r7, #12]
        if(index < 0x1000)
 8025b14:	89bb      	ldrh	r3, [r7, #12]
 8025b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8025b1a:	d202      	bcs.n	8025b22 <SDOS_SdoInfoInd+0x1f2>
        {
            /*SDO Info access is only allowed for objects >= 0x1000*/
            abort = ABORTIDX_UNSUPPORTED_ACCESS;
 8025b1c:	2305      	movs	r3, #5
 8025b1e:	73fb      	strb	r3, [r7, #15]
 8025b20:	e0c9      	b.n	8025cb6 <SDOS_SdoInfoInd+0x386>
        }
        else
        {
            /* get the object handle of the requested index */
            pObjEntry = OBJ_GetObjectHandle( index );
 8025b22:	89bb      	ldrh	r3, [r7, #12]
 8025b24:	4618      	mov	r0, r3
 8025b26:	f7fd ff15 	bl	8023954 <OBJ_GetObjectHandle>
 8025b2a:	6178      	str	r0, [r7, #20]

            if ( pObjEntry )
 8025b2c:	697b      	ldr	r3, [r7, #20]
 8025b2e:	2b00      	cmp	r3, #0
 8025b30:	f000 80be 	beq.w	8025cb0 <SDOS_SdoInfoInd+0x380>
            {
                /* object exists */
                UINT16 size = 0;
 8025b34:	2300      	movs	r3, #0
 8025b36:	847b      	strh	r3, [r7, #34]	; 0x22
                if ( opCode == SDOINFOSERVICE_OBJDESCRIPTION_Q )
 8025b38:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8025b3c:	2b03      	cmp	r3, #3
 8025b3e:	d12b      	bne.n	8025b98 <SDOS_SdoInfoInd+0x268>
                {
                    /* object description is requested */
                    OBJTOMBXMEMCPY(&pSdoInfoInd->SdoHeader.Data.Obj.Res, OBJ_GetObjDesc(pObjEntry), SDO_INFO_OBJ_DESC_SIZE);
 8025b40:	687b      	ldr	r3, [r7, #4]
 8025b42:	f103 040e 	add.w	r4, r3, #14
 8025b46:	6978      	ldr	r0, [r7, #20]
 8025b48:	f7fe f976 	bl	8023e38 <OBJ_GetObjDesc>
 8025b4c:	4603      	mov	r3, r0
 8025b4e:	4620      	mov	r0, r4
 8025b50:	4619      	mov	r1, r3
 8025b52:	2204      	movs	r2, #4
 8025b54:	f002 fb86 	bl	8028264 <memcpy>

                    /* the mailbox should be big enough that the maximum object description
                    fits in the mailbox (the fragmentation is not done in the sample code),
                    so it will be checked only if the object description fits */
                    size = OBJ_GetDesc(index, 0, pObjEntry, NULL) + SIZEOF_SDOINFOOBJSTRUCT;
 8025b58:	89bb      	ldrh	r3, [r7, #12]
 8025b5a:	4618      	mov	r0, r3
 8025b5c:	2100      	movs	r1, #0
 8025b5e:	697a      	ldr	r2, [r7, #20]
 8025b60:	2300      	movs	r3, #0
 8025b62:	f7fe f8ab 	bl	8023cbc <OBJ_GetDesc>
 8025b66:	4603      	mov	r3, r0
 8025b68:	330c      	adds	r3, #12
 8025b6a:	847b      	strh	r3, [r7, #34]	; 0x22

                    if ( size > (u16SendMbxSize - MBX_HEADER_SIZE) )
 8025b6c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8025b6e:	4b36      	ldr	r3, [pc, #216]	; (8025c48 <SDOS_SdoInfoInd+0x318>)
 8025b70:	881b      	ldrh	r3, [r3, #0]
 8025b72:	3b06      	subs	r3, #6
 8025b74:	429a      	cmp	r2, r3
 8025b76:	d902      	bls.n	8025b7e <SDOS_SdoInfoInd+0x24e>
                    {
                        /* size of the object description does not fit in the mailbox,
                        the object description will be sent without the name */
                        size = SIZEOF_SDOINFOOBJSTRUCT;
 8025b78:	230c      	movs	r3, #12
 8025b7a:	847b      	strh	r3, [r7, #34]	; 0x22
 8025b7c:	e07b      	b.n	8025c76 <SDOS_SdoInfoInd+0x346>
                    }
                    else
                    {
                        /* object description fits in the mailbox, get the name of the object */
                        size = OBJ_GetDesc(index, 0, pObjEntry, ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Obj.Res)[1])) + SIZEOF_SDOINFOOBJSTRUCT;
 8025b7e:	89ba      	ldrh	r2, [r7, #12]
 8025b80:	687b      	ldr	r3, [r7, #4]
 8025b82:	330e      	adds	r3, #14
 8025b84:	3304      	adds	r3, #4
 8025b86:	4610      	mov	r0, r2
 8025b88:	2100      	movs	r1, #0
 8025b8a:	697a      	ldr	r2, [r7, #20]
 8025b8c:	f7fe f896 	bl	8023cbc <OBJ_GetDesc>
 8025b90:	4603      	mov	r3, r0
 8025b92:	330c      	adds	r3, #12
 8025b94:	847b      	strh	r3, [r7, #34]	; 0x22
 8025b96:	e06e      	b.n	8025c76 <SDOS_SdoInfoInd+0x346>
                }
                else
                {
                    /* entry description is requested,
                    get the requested subindex */
                    UINT8 subindex = (UINT8) ((pSdoInfoInd->SdoHeader.Data.Entry.Info & ENTRY_MASK_SUBINDEX) >> ENTRY_SUBINDEX_SHIFT);
 8025b98:	687b      	ldr	r3, [r7, #4]
 8025b9a:	89db      	ldrh	r3, [r3, #14]
 8025b9c:	74fb      	strb	r3, [r7, #19]

                    /* get the maximum subindex */
                    UINT8 maxSubindex = (OBJ_GetObjDesc(pObjEntry)->ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8025b9e:	6978      	ldr	r0, [r7, #20]
 8025ba0:	f7fe f94a 	bl	8023e38 <OBJ_GetObjDesc>
 8025ba4:	4603      	mov	r3, r0
 8025ba6:	885b      	ldrh	r3, [r3, #2]
 8025ba8:	74bb      	strb	r3, [r7, #18]

                    if ( subindex <= maxSubindex )
 8025baa:	7cfa      	ldrb	r2, [r7, #19]
 8025bac:	7cbb      	ldrb	r3, [r7, #18]
 8025bae:	429a      	cmp	r2, r3
 8025bb0:	d85f      	bhi.n	8025c72 <SDOS_SdoInfoInd+0x342>
                    {
                        UINT16 ObjectFlags;
                        /* requested subindex is not too great */
                        /* get the entry description of the requested entry */
                        OBJTOMBXMEMCPY(&pSdoInfoInd->SdoHeader.Data.Entry.Res, OBJ_GetEntryDesc(pObjEntry, subindex), SIZEOF(TSDOINFOENTRYDESC));
 8025bb2:	687b      	ldr	r3, [r7, #4]
 8025bb4:	f103 0410 	add.w	r4, r3, #16
 8025bb8:	7cfb      	ldrb	r3, [r7, #19]
 8025bba:	6978      	ldr	r0, [r7, #20]
 8025bbc:	4619      	mov	r1, r3
 8025bbe:	f7fe f90f 	bl	8023de0 <OBJ_GetEntryDesc>
 8025bc2:	4603      	mov	r3, r0
 8025bc4:	4620      	mov	r0, r4
 8025bc6:	4619      	mov	r1, r3
 8025bc8:	2206      	movs	r2, #6
 8025bca:	f002 fb4b 	bl	8028264 <memcpy>

                        /* the transmission of the value info is not supported yet of the sample code */
                        pSdoInfoInd->SdoHeader.Data.Entry.Info &= ~ENTRY_MASK_VALUEINFO;
 8025bce:	687b      	ldr	r3, [r7, #4]
 8025bd0:	89db      	ldrh	r3, [r3, #14]
 8025bd2:	b2db      	uxtb	r3, r3
 8025bd4:	b29a      	uxth	r2, r3
 8025bd6:	687b      	ldr	r3, [r7, #4]
 8025bd8:	81da      	strh	r2, [r3, #14]
                        ObjectFlags = OBJ_GetObjDesc(pObjEntry)->ObjFlags;
 8025bda:	6978      	ldr	r0, [r7, #20]
 8025bdc:	f7fe f92c 	bl	8023e38 <OBJ_GetObjDesc>
 8025be0:	4603      	mov	r3, r0
 8025be2:	885b      	ldrh	r3, [r3, #2]
 8025be4:	823b      	strh	r3, [r7, #16]
                        ObjectFlags = (ObjectFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8025be6:	8a3b      	ldrh	r3, [r7, #16]
 8025be8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8025bec:	121b      	asrs	r3, r3, #8
 8025bee:	823b      	strh	r3, [r7, #16]

                        if(((ObjectFlags == OBJCODE_ARR) || (ObjectFlags == OBJCODE_REC)) && (subindex == 0) )
 8025bf0:	8a3b      	ldrh	r3, [r7, #16]
 8025bf2:	2b08      	cmp	r3, #8
 8025bf4:	d002      	beq.n	8025bfc <SDOS_SdoInfoInd+0x2cc>
 8025bf6:	8a3b      	ldrh	r3, [r7, #16]
 8025bf8:	2b09      	cmp	r3, #9
 8025bfa:	d10d      	bne.n	8025c18 <SDOS_SdoInfoInd+0x2e8>
 8025bfc:	7cfb      	ldrb	r3, [r7, #19]
 8025bfe:	2b00      	cmp	r3, #0
 8025c00:	d10a      	bne.n	8025c18 <SDOS_SdoInfoInd+0x2e8>
                        {
                            OBJTOMBXSTRCPY( ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Entry.Res)[1]), aSubindexDesc, SIZEOF(aSubindexDesc) );
 8025c02:	687b      	ldr	r3, [r7, #4]
 8025c04:	3310      	adds	r3, #16
 8025c06:	3306      	adds	r3, #6
 8025c08:	4618      	mov	r0, r3
 8025c0a:	4911      	ldr	r1, [pc, #68]	; (8025c50 <SDOS_SdoInfoInd+0x320>)
 8025c0c:	220d      	movs	r2, #13
 8025c0e:	f002 fb29 	bl	8028264 <memcpy>
                            size = 12 + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY); // 12: Length of "SubIndex 000"
 8025c12:	231c      	movs	r3, #28
 8025c14:	847b      	strh	r3, [r7, #34]	; 0x22
 8025c16:	e02b      	b.n	8025c70 <SDOS_SdoInfoInd+0x340>
                        else
                        {
                            /* the mailbox should be big enough that the maximum entry description
                            fits in the mailbox (the fragmentation is not done in the sample code),
                            so it will be checked only if the entry description fits */
                            size = OBJ_GetDesc(index, subindex, pObjEntry, NULL) + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 8025c18:	89ba      	ldrh	r2, [r7, #12]
 8025c1a:	7cfb      	ldrb	r3, [r7, #19]
 8025c1c:	4610      	mov	r0, r2
 8025c1e:	4619      	mov	r1, r3
 8025c20:	697a      	ldr	r2, [r7, #20]
 8025c22:	2300      	movs	r3, #0
 8025c24:	f7fe f84a 	bl	8023cbc <OBJ_GetDesc>
 8025c28:	4603      	mov	r3, r0
 8025c2a:	3310      	adds	r3, #16
 8025c2c:	847b      	strh	r3, [r7, #34]	; 0x22
                            if ( size > (u16SendMbxSize - MBX_HEADER_SIZE) )
 8025c2e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8025c30:	4b05      	ldr	r3, [pc, #20]	; (8025c48 <SDOS_SdoInfoInd+0x318>)
 8025c32:	881b      	ldrh	r3, [r3, #0]
 8025c34:	3b06      	subs	r3, #6
 8025c36:	429a      	cmp	r2, r3
 8025c38:	d90c      	bls.n	8025c54 <SDOS_SdoInfoInd+0x324>
                            {
                                /* size of the object description does not fit in the mailbox,
                                the object description will be sent without the name */
                                size =  SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 8025c3a:	2310      	movs	r3, #16
 8025c3c:	847b      	strh	r3, [r7, #34]	; 0x22
 8025c3e:	e017      	b.n	8025c70 <SDOS_SdoInfoInd+0x340>
 8025c40:	1fff28e0 	.word	0x1fff28e0
 8025c44:	1fff28cc 	.word	0x1fff28cc
 8025c48:	1fff2800 	.word	0x1fff2800
 8025c4c:	1fff28ac 	.word	0x1fff28ac
 8025c50:	1fff1360 	.word	0x1fff1360
                            }
                            else
                            {
                                /* object description fits in the mailbox, get the name of the entry */
                                size = OBJ_GetDesc(index, subindex, pObjEntry, ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Entry.Res)[1])) + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 8025c54:	89b9      	ldrh	r1, [r7, #12]
 8025c56:	687b      	ldr	r3, [r7, #4]
 8025c58:	3310      	adds	r3, #16
 8025c5a:	3306      	adds	r3, #6
 8025c5c:	7cfa      	ldrb	r2, [r7, #19]
 8025c5e:	4608      	mov	r0, r1
 8025c60:	4611      	mov	r1, r2
 8025c62:	697a      	ldr	r2, [r7, #20]
 8025c64:	f7fe f82a 	bl	8023cbc <OBJ_GetDesc>
 8025c68:	4603      	mov	r3, r0
 8025c6a:	3310      	adds	r3, #16
 8025c6c:	847b      	strh	r3, [r7, #34]	; 0x22
 8025c6e:	e002      	b.n	8025c76 <SDOS_SdoInfoInd+0x346>
 8025c70:	e001      	b.n	8025c76 <SDOS_SdoInfoInd+0x346>
                            }
                        }
                    }
                    else
                        abort = ABORTIDX_SUBINDEX_NOT_EXISTING;
 8025c72:	2311      	movs	r3, #17
 8025c74:	73fb      	strb	r3, [r7, #15]
                }

                if ( abort == 0 )
 8025c76:	7bfb      	ldrb	r3, [r7, #15]
 8025c78:	2b00      	cmp	r3, #0
 8025c7a:	d118      	bne.n	8025cae <SDOS_SdoInfoInd+0x37e>
                {
                    {
                        /* for the object and entry description the sample code does not support the fragmentation,
                        the mailbox has to be big enough */
                        pSdoInfoInd->SdoHeader.FragmentsLeft = 0;
 8025c7c:	687b      	ldr	r3, [r7, #4]
 8025c7e:	2200      	movs	r2, #0
 8025c80:	815a      	strh	r2, [r3, #10]
                        /* store the size of the mailbox data in the mailbox buffer */
                        pSdoInfoInd->MbxHeader.Length = size;
 8025c82:	687b      	ldr	r3, [r7, #4]
 8025c84:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8025c86:	801a      	strh	r2, [r3, #0]
                        /* set the opCode of the SDO Information response */
                        pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 8025c88:	687b      	ldr	r3, [r7, #4]
 8025c8a:	891b      	ldrh	r3, [r3, #8]
 8025c8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8025c90:	b29a      	uxth	r2, r3
 8025c92:	687b      	ldr	r3, [r7, #4]
 8025c94:	811a      	strh	r2, [r3, #8]
                        pSdoInfoInd->SdoHeader.InfoHead |= (UINT16)((opCode + 1) << INFOHEAD_OPCODE_SHIFT);
 8025c96:	687b      	ldr	r3, [r7, #4]
 8025c98:	891a      	ldrh	r2, [r3, #8]
 8025c9a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8025c9e:	b29b      	uxth	r3, r3
 8025ca0:	3301      	adds	r3, #1
 8025ca2:	b29b      	uxth	r3, r3
 8025ca4:	4313      	orrs	r3, r2
 8025ca6:	b29a      	uxth	r2, r3
 8025ca8:	687b      	ldr	r3, [r7, #4]
 8025caa:	811a      	strh	r2, [r3, #8]
 8025cac:	e003      	b.n	8025cb6 <SDOS_SdoInfoInd+0x386>
 8025cae:	e002      	b.n	8025cb6 <SDOS_SdoInfoInd+0x386>
                    }
                }
            }
            else
                abort = ABORTIDX_OBJECT_NOT_EXISTING;
 8025cb0:	2308      	movs	r3, #8
 8025cb2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8025cb4:	e002      	b.n	8025cbc <SDOS_SdoInfoInd+0x38c>
 8025cb6:	e001      	b.n	8025cbc <SDOS_SdoInfoInd+0x38c>
    default:
        abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8025cb8:	2303      	movs	r3, #3
 8025cba:	73fb      	strb	r3, [r7, #15]
    }

    if ( abort )
 8025cbc:	7bfb      	ldrb	r3, [r7, #15]
 8025cbe:	2b00      	cmp	r3, #0
 8025cc0:	d01d      	beq.n	8025cfe <SDOS_SdoInfoInd+0x3ce>
    {
        /* send a SDO Information Error response */
        pSdoInfoInd->MbxHeader.Length = SIZEOF_SDOINFOERRORSTRUCT;
 8025cc2:	687b      	ldr	r3, [r7, #4]
 8025cc4:	220a      	movs	r2, #10
 8025cc6:	801a      	strh	r2, [r3, #0]

        pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 8025cc8:	687b      	ldr	r3, [r7, #4]
 8025cca:	891b      	ldrh	r3, [r3, #8]
 8025ccc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8025cd0:	b29a      	uxth	r2, r3
 8025cd2:	687b      	ldr	r3, [r7, #4]
 8025cd4:	811a      	strh	r2, [r3, #8]
        pSdoInfoInd->SdoHeader.InfoHead |= (UINT16) ((SDOINFOSERVICE_ERROR_Q) << INFOHEAD_OPCODE_SHIFT);
 8025cd6:	687b      	ldr	r3, [r7, #4]
 8025cd8:	891b      	ldrh	r3, [r3, #8]
 8025cda:	f043 0307 	orr.w	r3, r3, #7
 8025cde:	b29a      	uxth	r2, r3
 8025ce0:	687b      	ldr	r3, [r7, #4]
 8025ce2:	811a      	strh	r2, [r3, #8]

        pSdoInfoInd->SdoHeader.FragmentsLeft = 0;
 8025ce4:	687b      	ldr	r3, [r7, #4]
 8025ce6:	2200      	movs	r2, #0
 8025ce8:	815a      	strh	r2, [r3, #10]
        pSdoInfoInd->SdoHeader.Data.Error.ErrorCode = SWAPDWORD(cAbortCode[abort]);
 8025cea:	7bfb      	ldrb	r3, [r7, #15]
 8025cec:	461a      	mov	r2, r3
 8025cee:	4b0c      	ldr	r3, [pc, #48]	; (8025d20 <SDOS_SdoInfoInd+0x3f0>)
 8025cf0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025cf4:	687b      	ldr	r3, [r7, #4]
 8025cf6:	60da      	str	r2, [r3, #12]

        nSdoInfoFragmentsLeft = 0;
 8025cf8:	4b0a      	ldr	r3, [pc, #40]	; (8025d24 <SDOS_SdoInfoInd+0x3f4>)
 8025cfa:	2200      	movs	r2, #0
 8025cfc:	801a      	strh	r2, [r3, #0]
    }

    if (MBX_MailboxSendReq((TMBX MBXMEM *) pSdoInfoInd, flags) != 0)
 8025cfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8025d02:	6878      	ldr	r0, [r7, #4]
 8025d04:	4619      	mov	r1, r3
 8025d06:	f7fd fc6b 	bl	80235e0 <MBX_MailboxSendReq>
 8025d0a:	4603      	mov	r3, r0
 8025d0c:	2b00      	cmp	r3, #0
 8025d0e:	d002      	beq.n	8025d16 <SDOS_SdoInfoInd+0x3e6>
    {
        /* if the mailbox response could not be sent (or stored), the response will be
           stored in the variable pCoeSendStored and will be sent automatically
            from the mailbox handler (COE_ContinueInd) when the send mailbox will be read
            the next time from the master */
        pCoeSendStored = (TMBX MBXMEM *) pSdoInfoInd;
 8025d10:	4a05      	ldr	r2, [pc, #20]	; (8025d28 <SDOS_SdoInfoInd+0x3f8>)
 8025d12:	687b      	ldr	r3, [r7, #4]
 8025d14:	6013      	str	r3, [r2, #0]
    }

    return 0;
 8025d16:	2300      	movs	r3, #0
}
 8025d18:	4618      	mov	r0, r3
 8025d1a:	3734      	adds	r7, #52	; 0x34
 8025d1c:	46bd      	mov	sp, r7
 8025d1e:	bd90      	pop	{r4, r7, pc}
 8025d20:	080289d4 	.word	0x080289d4
 8025d24:	1fff28cc 	.word	0x1fff28cc
 8025d28:	1fff2538 	.word	0x1fff2538

08025d2c <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 8025d2c:	b580      	push	{r7, lr}
 8025d2e:	b082      	sub	sp, #8
 8025d30:	af00      	add	r7, sp, #0
 8025d32:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 8025d34:	687b      	ldr	r3, [r7, #4]
 8025d36:	4a07      	ldr	r2, [pc, #28]	; (8025d54 <XMC_ERU_Enable+0x28>)
 8025d38:	4293      	cmp	r3, r2
 8025d3a:	d107      	bne.n	8025d4c <XMC_ERU_Enable+0x20>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
 8025d3c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8025d40:	f000 fb96 	bl	8026470 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 8025d44:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8025d48:	f000 fa1e 	bl	8026188 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
  #endif
}
 8025d4c:	3708      	adds	r7, #8
 8025d4e:	46bd      	mov	sp, r7
 8025d50:	bd80      	pop	{r7, pc}
 8025d52:	bf00      	nop
 8025d54:	40044000 	.word	0x40044000

08025d58 <XMC_FLASH_lEnterPageModeCommand>:

/*
 * Command to program the PFLASH in to page mode, so that assembly buffer is used 
 */
void XMC_FLASH_lEnterPageModeCommand(void)
{
 8025d58:	b480      	push	{r7}
 8025d5a:	b083      	sub	sp, #12
 8025d5c:	af00      	add	r7, sp, #0
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8025d5e:	4b05      	ldr	r3, [pc, #20]	; (8025d74 <XMC_FLASH_lEnterPageModeCommand+0x1c>)
 8025d60:	607b      	str	r3, [r7, #4]
  *address = (uint32_t)0x50U;
 8025d62:	687b      	ldr	r3, [r7, #4]
 8025d64:	2250      	movs	r2, #80	; 0x50
 8025d66:	601a      	str	r2, [r3, #0]
}
 8025d68:	370c      	adds	r7, #12
 8025d6a:	46bd      	mov	sp, r7
 8025d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d70:	4770      	bx	lr
 8025d72:	bf00      	nop
 8025d74:	0c005554 	.word	0x0c005554

08025d78 <XMC_FLASH_lLoadPageCommand>:

/*
 * Command to load the data into the page assembly buffer 
 */
void XMC_FLASH_lLoadPageCommand(uint32_t low_word, uint32_t high_word)
{
 8025d78:	b480      	push	{r7}
 8025d7a:	b085      	sub	sp, #20
 8025d7c:	af00      	add	r7, sp, #0
 8025d7e:	6078      	str	r0, [r7, #4]
 8025d80:	6039      	str	r1, [r7, #0]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f0U);
 8025d82:	4b07      	ldr	r3, [pc, #28]	; (8025da0 <XMC_FLASH_lLoadPageCommand+0x28>)
 8025d84:	60fb      	str	r3, [r7, #12]
  *address = low_word;
 8025d86:	68fb      	ldr	r3, [r7, #12]
 8025d88:	687a      	ldr	r2, [r7, #4]
 8025d8a:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 8025d8c:	4b05      	ldr	r3, [pc, #20]	; (8025da4 <XMC_FLASH_lLoadPageCommand+0x2c>)
 8025d8e:	60fb      	str	r3, [r7, #12]
  *address = high_word;
 8025d90:	68fb      	ldr	r3, [r7, #12]
 8025d92:	683a      	ldr	r2, [r7, #0]
 8025d94:	601a      	str	r2, [r3, #0]
}
 8025d96:	3714      	adds	r7, #20
 8025d98:	46bd      	mov	sp, r7
 8025d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d9e:	4770      	bx	lr
 8025da0:	0c0055f0 	.word	0x0c0055f0
 8025da4:	0c0055f4 	.word	0x0c0055f4

08025da8 <XMC_FLASH_lWritePageCommand>:

/*
 * Command to start the programming of one page with data from the assembly buffer
 */
void XMC_FLASH_lWritePageCommand(uint32_t *page_start_address)
{
 8025da8:	b480      	push	{r7}
 8025daa:	b085      	sub	sp, #20
 8025dac:	af00      	add	r7, sp, #0
 8025dae:	6078      	str	r0, [r7, #4]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8025db0:	4b0c      	ldr	r3, [pc, #48]	; (8025de4 <XMC_FLASH_lWritePageCommand+0x3c>)
 8025db2:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 8025db4:	68fb      	ldr	r3, [r7, #12]
 8025db6:	22aa      	movs	r2, #170	; 0xaa
 8025db8:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 8025dba:	4b0b      	ldr	r3, [pc, #44]	; (8025de8 <XMC_FLASH_lWritePageCommand+0x40>)
 8025dbc:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 8025dbe:	68fb      	ldr	r3, [r7, #12]
 8025dc0:	2255      	movs	r2, #85	; 0x55
 8025dc2:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8025dc4:	4b07      	ldr	r3, [pc, #28]	; (8025de4 <XMC_FLASH_lWritePageCommand+0x3c>)
 8025dc6:	60fb      	str	r3, [r7, #12]
  *address = 0xa0U;
 8025dc8:	68fb      	ldr	r3, [r7, #12]
 8025dca:	22a0      	movs	r2, #160	; 0xa0
 8025dcc:	601a      	str	r2, [r3, #0]
  address = page_start_address;
 8025dce:	687b      	ldr	r3, [r7, #4]
 8025dd0:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 8025dd2:	68fb      	ldr	r3, [r7, #12]
 8025dd4:	22aa      	movs	r2, #170	; 0xaa
 8025dd6:	601a      	str	r2, [r3, #0]
}
 8025dd8:	3714      	adds	r7, #20
 8025dda:	46bd      	mov	sp, r7
 8025ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025de0:	4770      	bx	lr
 8025de2:	bf00      	nop
 8025de4:	0c005554 	.word	0x0c005554
 8025de8:	0c00aaa8 	.word	0x0c00aaa8

08025dec <XMC_FLASH_lEraseSectorCommand>:

/*
 * Command to erase sector which is starting with the specified address
 */
void XMC_FLASH_lEraseSectorCommand(uint32_t *sector_start_address)
{
 8025dec:	b480      	push	{r7}
 8025dee:	b085      	sub	sp, #20
 8025df0:	af00      	add	r7, sp, #0
 8025df2:	6078      	str	r0, [r7, #4]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8025df4:	4b11      	ldr	r3, [pc, #68]	; (8025e3c <XMC_FLASH_lEraseSectorCommand+0x50>)
 8025df6:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 8025df8:	68fb      	ldr	r3, [r7, #12]
 8025dfa:	22aa      	movs	r2, #170	; 0xaa
 8025dfc:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 8025dfe:	4b10      	ldr	r3, [pc, #64]	; (8025e40 <XMC_FLASH_lEraseSectorCommand+0x54>)
 8025e00:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 8025e02:	68fb      	ldr	r3, [r7, #12]
 8025e04:	2255      	movs	r2, #85	; 0x55
 8025e06:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8025e08:	4b0c      	ldr	r3, [pc, #48]	; (8025e3c <XMC_FLASH_lEraseSectorCommand+0x50>)
 8025e0a:	60fb      	str	r3, [r7, #12]
  *address = 0x80U;
 8025e0c:	68fb      	ldr	r3, [r7, #12]
 8025e0e:	2280      	movs	r2, #128	; 0x80
 8025e10:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8025e12:	4b0a      	ldr	r3, [pc, #40]	; (8025e3c <XMC_FLASH_lEraseSectorCommand+0x50>)
 8025e14:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 8025e16:	68fb      	ldr	r3, [r7, #12]
 8025e18:	22aa      	movs	r2, #170	; 0xaa
 8025e1a:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 8025e1c:	4b08      	ldr	r3, [pc, #32]	; (8025e40 <XMC_FLASH_lEraseSectorCommand+0x54>)
 8025e1e:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 8025e20:	68fb      	ldr	r3, [r7, #12]
 8025e22:	2255      	movs	r2, #85	; 0x55
 8025e24:	601a      	str	r2, [r3, #0]
  address = sector_start_address;
 8025e26:	687b      	ldr	r3, [r7, #4]
 8025e28:	60fb      	str	r3, [r7, #12]
  *address = 0x30U;
 8025e2a:	68fb      	ldr	r3, [r7, #12]
 8025e2c:	2230      	movs	r2, #48	; 0x30
 8025e2e:	601a      	str	r2, [r3, #0]
}
 8025e30:	3714      	adds	r7, #20
 8025e32:	46bd      	mov	sp, r7
 8025e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e38:	4770      	bx	lr
 8025e3a:	bf00      	nop
 8025e3c:	0c005554 	.word	0x0c005554
 8025e40:	0c00aaa8 	.word	0x0c00aaa8

08025e44 <XMC_FLASH_lClearStatusCommand>:

/*
 * Command to clear FSR.PROG and FSR.ERASE and the error flags in FSR such as PFOPER, SQER, PROER, PFDBER, ORIER, VER
 */
void XMC_FLASH_lClearStatusCommand(void)
{
 8025e44:	b480      	push	{r7}
 8025e46:	b083      	sub	sp, #12
 8025e48:	af00      	add	r7, sp, #0
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8025e4a:	4b05      	ldr	r3, [pc, #20]	; (8025e60 <XMC_FLASH_lClearStatusCommand+0x1c>)
 8025e4c:	607b      	str	r3, [r7, #4]
  *address = 0xf5U;
 8025e4e:	687b      	ldr	r3, [r7, #4]
 8025e50:	22f5      	movs	r2, #245	; 0xf5
 8025e52:	601a      	str	r2, [r3, #0]
}
 8025e54:	370c      	adds	r7, #12
 8025e56:	46bd      	mov	sp, r7
 8025e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e5c:	4770      	bx	lr
 8025e5e:	bf00      	nop
 8025e60:	0c005554 	.word	0x0c005554

08025e64 <XMC_FLASH_ClearStatus>:

 /*
 * This API shall clear Program, erase and error flags(PFOPER, SQER, PROER, PFDBER, ORIER, VER) of FSR register.
 */
void XMC_FLASH_ClearStatus(void)
{
 8025e64:	b580      	push	{r7, lr}
 8025e66:	af00      	add	r7, sp, #0
  XMC_FLASH_lClearStatusCommand();
 8025e68:	f7ff ffec 	bl	8025e44 <XMC_FLASH_lClearStatusCommand>
}
 8025e6c:	bd80      	pop	{r7, pc}
 8025e6e:	bf00      	nop

08025e70 <XMC_FLASH_GetStatus>:

/*
 * This API returns the FSR register value
 */
uint32_t XMC_FLASH_GetStatus(void)
{
 8025e70:	b480      	push	{r7}
 8025e72:	af00      	add	r7, sp, #0
  return FLASH0->FSR;
 8025e74:	4b04      	ldr	r3, [pc, #16]	; (8025e88 <XMC_FLASH_GetStatus+0x18>)
 8025e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8025e7a:	3310      	adds	r3, #16
 8025e7c:	681b      	ldr	r3, [r3, #0]
}
 8025e7e:	4618      	mov	r0, r3
 8025e80:	46bd      	mov	sp, r7
 8025e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e86:	4770      	bx	lr
 8025e88:	58001000 	.word	0x58001000

08025e8c <XMC_FLASH_ProgramPage>:

/*
 * This API write the PFLASH page
 */
void XMC_FLASH_ProgramPage(uint32_t *address, const uint32_t *data)
{
 8025e8c:	b580      	push	{r7, lr}
 8025e8e:	b084      	sub	sp, #16
 8025e90:	af00      	add	r7, sp, #0
 8025e92:	6078      	str	r0, [r7, #4]
 8025e94:	6039      	str	r1, [r7, #0]
  uint32_t idx;

  XMC_FLASH_lClearStatusCommand();  
 8025e96:	f7ff ffd5 	bl	8025e44 <XMC_FLASH_lClearStatusCommand>
  XMC_FLASH_lEnterPageModeCommand();
 8025e9a:	f7ff ff5d 	bl	8025d58 <XMC_FLASH_lEnterPageModeCommand>

  for (idx = 0U; idx < XMC_FLASH_WORDS_PER_PAGE; idx += 2U)
 8025e9e:	2300      	movs	r3, #0
 8025ea0:	60fb      	str	r3, [r7, #12]
 8025ea2:	e011      	b.n	8025ec8 <XMC_FLASH_ProgramPage+0x3c>
  {
    XMC_FLASH_lLoadPageCommand(data[idx], data[idx + 1U]);
 8025ea4:	68fb      	ldr	r3, [r7, #12]
 8025ea6:	009b      	lsls	r3, r3, #2
 8025ea8:	683a      	ldr	r2, [r7, #0]
 8025eaa:	4413      	add	r3, r2
 8025eac:	6819      	ldr	r1, [r3, #0]
 8025eae:	68fb      	ldr	r3, [r7, #12]
 8025eb0:	3301      	adds	r3, #1
 8025eb2:	009b      	lsls	r3, r3, #2
 8025eb4:	683a      	ldr	r2, [r7, #0]
 8025eb6:	4413      	add	r3, r2
 8025eb8:	681b      	ldr	r3, [r3, #0]
 8025eba:	4608      	mov	r0, r1
 8025ebc:	4619      	mov	r1, r3
 8025ebe:	f7ff ff5b 	bl	8025d78 <XMC_FLASH_lLoadPageCommand>
  uint32_t idx;

  XMC_FLASH_lClearStatusCommand();  
  XMC_FLASH_lEnterPageModeCommand();

  for (idx = 0U; idx < XMC_FLASH_WORDS_PER_PAGE; idx += 2U)
 8025ec2:	68fb      	ldr	r3, [r7, #12]
 8025ec4:	3302      	adds	r3, #2
 8025ec6:	60fb      	str	r3, [r7, #12]
 8025ec8:	68fb      	ldr	r3, [r7, #12]
 8025eca:	2b3f      	cmp	r3, #63	; 0x3f
 8025ecc:	d9ea      	bls.n	8025ea4 <XMC_FLASH_ProgramPage+0x18>
  {
    XMC_FLASH_lLoadPageCommand(data[idx], data[idx + 1U]);
  }

  XMC_FLASH_lWritePageCommand(address);    
 8025ece:	6878      	ldr	r0, [r7, #4]
 8025ed0:	f7ff ff6a 	bl	8025da8 <XMC_FLASH_lWritePageCommand>

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 8025ed4:	bf00      	nop
 8025ed6:	4b06      	ldr	r3, [pc, #24]	; (8025ef0 <XMC_FLASH_ProgramPage+0x64>)
 8025ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8025edc:	3310      	adds	r3, #16
 8025ede:	681b      	ldr	r3, [r3, #0]
 8025ee0:	f003 0301 	and.w	r3, r3, #1
 8025ee4:	2b00      	cmp	r3, #0
 8025ee6:	d1f6      	bne.n	8025ed6 <XMC_FLASH_ProgramPage+0x4a>
}
 8025ee8:	3710      	adds	r7, #16
 8025eea:	46bd      	mov	sp, r7
 8025eec:	bd80      	pop	{r7, pc}
 8025eee:	bf00      	nop
 8025ef0:	58001000 	.word	0x58001000

08025ef4 <XMC_FLASH_EraseSector>:

/*
 * This API erase the logical sector
 */
void XMC_FLASH_EraseSector(uint32_t *address)
{
 8025ef4:	b580      	push	{r7, lr}
 8025ef6:	b082      	sub	sp, #8
 8025ef8:	af00      	add	r7, sp, #0
 8025efa:	6078      	str	r0, [r7, #4]
  XMC_FLASH_lClearStatusCommand();
 8025efc:	f7ff ffa2 	bl	8025e44 <XMC_FLASH_lClearStatusCommand>
  XMC_FLASH_lEraseSectorCommand(address);
 8025f00:	6878      	ldr	r0, [r7, #4]
 8025f02:	f7ff ff73 	bl	8025dec <XMC_FLASH_lEraseSectorCommand>

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 8025f06:	bf00      	nop
 8025f08:	4b05      	ldr	r3, [pc, #20]	; (8025f20 <XMC_FLASH_EraseSector+0x2c>)
 8025f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8025f0e:	3310      	adds	r3, #16
 8025f10:	681b      	ldr	r3, [r3, #0]
 8025f12:	f003 0301 	and.w	r3, r3, #1
 8025f16:	2b00      	cmp	r3, #0
 8025f18:	d1f6      	bne.n	8025f08 <XMC_FLASH_EraseSector+0x14>
}
 8025f1a:	3708      	adds	r7, #8
 8025f1c:	46bd      	mov	sp, r7
 8025f1e:	bd80      	pop	{r7, pc}
 8025f20:	58001000 	.word	0x58001000

08025f24 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8025f24:	b480      	push	{r7}
 8025f26:	b085      	sub	sp, #20
 8025f28:	af00      	add	r7, sp, #0
 8025f2a:	60f8      	str	r0, [r7, #12]
 8025f2c:	460b      	mov	r3, r1
 8025f2e:	607a      	str	r2, [r7, #4]
 8025f30:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8025f32:	7afb      	ldrb	r3, [r7, #11]
 8025f34:	089b      	lsrs	r3, r3, #2
 8025f36:	b2db      	uxtb	r3, r3
 8025f38:	4618      	mov	r0, r3
 8025f3a:	7afb      	ldrb	r3, [r7, #11]
 8025f3c:	089b      	lsrs	r3, r3, #2
 8025f3e:	b2db      	uxtb	r3, r3
 8025f40:	461a      	mov	r2, r3
 8025f42:	68fb      	ldr	r3, [r7, #12]
 8025f44:	3204      	adds	r2, #4
 8025f46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025f4a:	7afb      	ldrb	r3, [r7, #11]
 8025f4c:	f003 0303 	and.w	r3, r3, #3
 8025f50:	00db      	lsls	r3, r3, #3
 8025f52:	4619      	mov	r1, r3
 8025f54:	23f8      	movs	r3, #248	; 0xf8
 8025f56:	408b      	lsls	r3, r1
 8025f58:	43db      	mvns	r3, r3
 8025f5a:	ea02 0103 	and.w	r1, r2, r3
 8025f5e:	68fb      	ldr	r3, [r7, #12]
 8025f60:	1d02      	adds	r2, r0, #4
 8025f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8025f66:	68fb      	ldr	r3, [r7, #12]
 8025f68:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8025f6a:	7afb      	ldrb	r3, [r7, #11]
 8025f6c:	005b      	lsls	r3, r3, #1
 8025f6e:	4619      	mov	r1, r3
 8025f70:	2303      	movs	r3, #3
 8025f72:	408b      	lsls	r3, r1
 8025f74:	43db      	mvns	r3, r3
 8025f76:	401a      	ands	r2, r3
 8025f78:	68fb      	ldr	r3, [r7, #12]
 8025f7a:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8025f7c:	68fb      	ldr	r3, [r7, #12]
 8025f7e:	4a37      	ldr	r2, [pc, #220]	; (802605c <XMC_GPIO_Init+0x138>)
 8025f80:	4293      	cmp	r3, r2
 8025f82:	d003      	beq.n	8025f8c <XMC_GPIO_Init+0x68>
 8025f84:	68fb      	ldr	r3, [r7, #12]
 8025f86:	4a36      	ldr	r2, [pc, #216]	; (8026060 <XMC_GPIO_Init+0x13c>)
 8025f88:	4293      	cmp	r3, r2
 8025f8a:	d10a      	bne.n	8025fa2 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8025f8c:	68fb      	ldr	r3, [r7, #12]
 8025f8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8025f90:	7afb      	ldrb	r3, [r7, #11]
 8025f92:	2101      	movs	r1, #1
 8025f94:	fa01 f303 	lsl.w	r3, r1, r3
 8025f98:	43db      	mvns	r3, r3
 8025f9a:	401a      	ands	r2, r3
 8025f9c:	68fb      	ldr	r3, [r7, #12]
 8025f9e:	661a      	str	r2, [r3, #96]	; 0x60
 8025fa0:	e03c      	b.n	802601c <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8025fa2:	687b      	ldr	r3, [r7, #4]
 8025fa4:	685a      	ldr	r2, [r3, #4]
 8025fa6:	7afb      	ldrb	r3, [r7, #11]
 8025fa8:	409a      	lsls	r2, r3
 8025faa:	68fb      	ldr	r3, [r7, #12]
 8025fac:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8025fae:	7afb      	ldrb	r3, [r7, #11]
 8025fb0:	08db      	lsrs	r3, r3, #3
 8025fb2:	b2db      	uxtb	r3, r3
 8025fb4:	4618      	mov	r0, r3
 8025fb6:	7afb      	ldrb	r3, [r7, #11]
 8025fb8:	08db      	lsrs	r3, r3, #3
 8025fba:	b2db      	uxtb	r3, r3
 8025fbc:	461a      	mov	r2, r3
 8025fbe:	68fb      	ldr	r3, [r7, #12]
 8025fc0:	3210      	adds	r2, #16
 8025fc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025fc6:	7afb      	ldrb	r3, [r7, #11]
 8025fc8:	f003 0307 	and.w	r3, r3, #7
 8025fcc:	009b      	lsls	r3, r3, #2
 8025fce:	4619      	mov	r1, r3
 8025fd0:	2307      	movs	r3, #7
 8025fd2:	408b      	lsls	r3, r1
 8025fd4:	43db      	mvns	r3, r3
 8025fd6:	ea02 0103 	and.w	r1, r2, r3
 8025fda:	68fb      	ldr	r3, [r7, #12]
 8025fdc:	f100 0210 	add.w	r2, r0, #16
 8025fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8025fe4:	7afb      	ldrb	r3, [r7, #11]
 8025fe6:	08db      	lsrs	r3, r3, #3
 8025fe8:	b2db      	uxtb	r3, r3
 8025fea:	4618      	mov	r0, r3
 8025fec:	7afb      	ldrb	r3, [r7, #11]
 8025fee:	08db      	lsrs	r3, r3, #3
 8025ff0:	b2db      	uxtb	r3, r3
 8025ff2:	461a      	mov	r2, r3
 8025ff4:	68fb      	ldr	r3, [r7, #12]
 8025ff6:	3210      	adds	r2, #16
 8025ff8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025ffc:	687b      	ldr	r3, [r7, #4]
 8025ffe:	7a1b      	ldrb	r3, [r3, #8]
 8026000:	4619      	mov	r1, r3
 8026002:	7afb      	ldrb	r3, [r7, #11]
 8026004:	f003 0307 	and.w	r3, r3, #7
 8026008:	009b      	lsls	r3, r3, #2
 802600a:	fa01 f303 	lsl.w	r3, r1, r3
 802600e:	ea42 0103 	orr.w	r1, r2, r3
 8026012:	68fb      	ldr	r3, [r7, #12]
 8026014:	f100 0210 	add.w	r2, r0, #16
 8026018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 802601c:	7afb      	ldrb	r3, [r7, #11]
 802601e:	089b      	lsrs	r3, r3, #2
 8026020:	b2db      	uxtb	r3, r3
 8026022:	4618      	mov	r0, r3
 8026024:	7afb      	ldrb	r3, [r7, #11]
 8026026:	089b      	lsrs	r3, r3, #2
 8026028:	b2db      	uxtb	r3, r3
 802602a:	461a      	mov	r2, r3
 802602c:	68fb      	ldr	r3, [r7, #12]
 802602e:	3204      	adds	r2, #4
 8026030:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026034:	687b      	ldr	r3, [r7, #4]
 8026036:	781b      	ldrb	r3, [r3, #0]
 8026038:	4619      	mov	r1, r3
 802603a:	7afb      	ldrb	r3, [r7, #11]
 802603c:	f003 0303 	and.w	r3, r3, #3
 8026040:	00db      	lsls	r3, r3, #3
 8026042:	fa01 f303 	lsl.w	r3, r1, r3
 8026046:	ea42 0103 	orr.w	r1, r2, r3
 802604a:	68fb      	ldr	r3, [r7, #12]
 802604c:	1d02      	adds	r2, r0, #4
 802604e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8026052:	3714      	adds	r7, #20
 8026054:	46bd      	mov	sp, r7
 8026056:	f85d 7b04 	ldr.w	r7, [sp], #4
 802605a:	4770      	bx	lr
 802605c:	48028e00 	.word	0x48028e00
 8026060:	48028f00 	.word	0x48028f00

08026064 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8026064:	b580      	push	{r7, lr}
 8026066:	b084      	sub	sp, #16
 8026068:	af00      	add	r7, sp, #0
 802606a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 802606c:	f7f9 ffd8 	bl	8020020 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8026070:	4b0b      	ldr	r3, [pc, #44]	; (80260a0 <XMC_SCU_lDelay+0x3c>)
 8026072:	681b      	ldr	r3, [r3, #0]
 8026074:	4a0b      	ldr	r2, [pc, #44]	; (80260a4 <XMC_SCU_lDelay+0x40>)
 8026076:	fba2 2303 	umull	r2, r3, r2, r3
 802607a:	0c9a      	lsrs	r2, r3, #18
 802607c:	687b      	ldr	r3, [r7, #4]
 802607e:	fb02 f303 	mul.w	r3, r2, r3
 8026082:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8026084:	2300      	movs	r3, #0
 8026086:	60fb      	str	r3, [r7, #12]
 8026088:	e003      	b.n	8026092 <XMC_SCU_lDelay+0x2e>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 802608a:	bf00      	nop
 802608c:	68fb      	ldr	r3, [r7, #12]
 802608e:	3301      	adds	r3, #1
 8026090:	60fb      	str	r3, [r7, #12]
 8026092:	68fa      	ldr	r2, [r7, #12]
 8026094:	687b      	ldr	r3, [r7, #4]
 8026096:	429a      	cmp	r2, r3
 8026098:	d3f7      	bcc.n	802608a <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 802609a:	3710      	adds	r7, #16
 802609c:	46bd      	mov	sp, r7
 802609e:	bd80      	pop	{r7, pc}
 80260a0:	2000ffc0 	.word	0x2000ffc0
 80260a4:	431bde83 	.word	0x431bde83

080260a8 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80260a8:	b5b0      	push	{r4, r5, r7, lr}
 80260aa:	b084      	sub	sp, #16
 80260ac:	af02      	add	r7, sp, #8
 80260ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80260b0:	2000      	movs	r0, #0
 80260b2:	f000 f8a9 	bl	8026208 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80260b6:	f000 fa57 	bl	8026568 <XMC_SCU_HIB_EnableHibernateDomain>
  if (config->enable_osculp == true)
 80260ba:	687b      	ldr	r3, [r7, #4]
 80260bc:	79db      	ldrb	r3, [r3, #7]
 80260be:	2b00      	cmp	r3, #0
 80260c0:	d001      	beq.n	80260c6 <XMC_SCU_CLOCK_Init+0x1e>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80260c2:	f000 fa7d 	bl	80265c0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
  }
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 80260c6:	687b      	ldr	r3, [r7, #4]
 80260c8:	7a5b      	ldrb	r3, [r3, #9]
 80260ca:	4618      	mov	r0, r3
 80260cc:	f000 f916 	bl	80262fc <XMC_SCU_HIB_SetStandbyClockSource>

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80260d0:	687b      	ldr	r3, [r7, #4]
 80260d2:	7a1b      	ldrb	r3, [r3, #8]
 80260d4:	4618      	mov	r0, r3
 80260d6:	f000 fa21 	bl	802651c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80260da:	687b      	ldr	r3, [r7, #4]
 80260dc:	7c1b      	ldrb	r3, [r3, #16]
 80260de:	4618      	mov	r0, r3
 80260e0:	f000 f92a 	bl	8026338 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80260e4:	687b      	ldr	r3, [r7, #4]
 80260e6:	7c5b      	ldrb	r3, [r3, #17]
 80260e8:	4618      	mov	r0, r3
 80260ea:	f000 f94d 	bl	8026388 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80260ee:	687b      	ldr	r3, [r7, #4]
 80260f0:	7c9b      	ldrb	r3, [r3, #18]
 80260f2:	4618      	mov	r0, r3
 80260f4:	f000 f934 	bl	8026360 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80260f8:	687b      	ldr	r3, [r7, #4]
 80260fa:	7cdb      	ldrb	r3, [r3, #19]
 80260fc:	4618      	mov	r0, r3
 80260fe:	f000 f957 	bl	80263b0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8026102:	687b      	ldr	r3, [r7, #4]
 8026104:	799b      	ldrb	r3, [r3, #6]
 8026106:	2b00      	cmp	r3, #0
 8026108:	d001      	beq.n	802610e <XMC_SCU_CLOCK_Init+0x66>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 802610a:	f000 fa93 	bl	8026634 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 802610e:	687b      	ldr	r3, [r7, #4]
 8026110:	78db      	ldrb	r3, [r3, #3]
 8026112:	2b00      	cmp	r3, #0
 8026114:	d102      	bne.n	802611c <XMC_SCU_CLOCK_Init+0x74>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8026116:	f000 facd 	bl	80266b4 <XMC_SCU_CLOCK_DisableSystemPll>
 802611a:	e014      	b.n	8026146 <XMC_SCU_CLOCK_Init+0x9e>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 802611c:	f000 faba 	bl	8026694 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8026120:	687b      	ldr	r3, [r7, #4]
 8026122:	8899      	ldrh	r1, [r3, #4]
 8026124:	687b      	ldr	r3, [r7, #4]
 8026126:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8026128:	687b      	ldr	r3, [r7, #4]
 802612a:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 802612c:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 802612e:	687b      	ldr	r3, [r7, #4]
 8026130:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8026132:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8026134:	687b      	ldr	r3, [r7, #4]
 8026136:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8026138:	9300      	str	r3, [sp, #0]
 802613a:	4608      	mov	r0, r1
 802613c:	4611      	mov	r1, r2
 802613e:	462a      	mov	r2, r5
 8026140:	4623      	mov	r3, r4
 8026142:	f000 fac7 	bl	80266d4 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8026146:	687b      	ldr	r3, [r7, #4]
 8026148:	68db      	ldr	r3, [r3, #12]
 802614a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802614e:	d103      	bne.n	8026158 <XMC_SCU_CLOCK_Init+0xb0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8026150:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8026154:	f000 f858 	bl	8026208 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8026158:	f7f9 ff62 	bl	8020020 <SystemCoreClockUpdate>
}
 802615c:	3708      	adds	r7, #8
 802615e:	46bd      	mov	sp, r7
 8026160:	bdb0      	pop	{r4, r5, r7, pc}
 8026162:	bf00      	nop

08026164 <XMC_SCU_INTERRUPT_EnableNmiRequest>:
  SCU_PARITY->PETE &= (uint32_t)~memory; 
}

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8026164:	b480      	push	{r7}
 8026166:	b083      	sub	sp, #12
 8026168:	af00      	add	r7, sp, #0
 802616a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 802616c:	4905      	ldr	r1, [pc, #20]	; (8026184 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 802616e:	4b05      	ldr	r3, [pc, #20]	; (8026184 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8026170:	695a      	ldr	r2, [r3, #20]
 8026172:	687b      	ldr	r3, [r7, #4]
 8026174:	4313      	orrs	r3, r2
 8026176:	614b      	str	r3, [r1, #20]
}
 8026178:	370c      	adds	r7, #12
 802617a:	46bd      	mov	sp, r7
 802617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026180:	4770      	bx	lr
 8026182:	bf00      	nop
 8026184:	50004074 	.word	0x50004074

08026188 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8026188:	b480      	push	{r7}
 802618a:	b085      	sub	sp, #20
 802618c:	af00      	add	r7, sp, #0
 802618e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8026190:	687b      	ldr	r3, [r7, #4]
 8026192:	0f1b      	lsrs	r3, r3, #28
 8026194:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8026196:	687b      	ldr	r3, [r7, #4]
 8026198:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 802619c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 802619e:	68fa      	ldr	r2, [r7, #12]
 80261a0:	4613      	mov	r3, r2
 80261a2:	005b      	lsls	r3, r3, #1
 80261a4:	4413      	add	r3, r2
 80261a6:	009b      	lsls	r3, r3, #2
 80261a8:	461a      	mov	r2, r3
 80261aa:	4b04      	ldr	r3, [pc, #16]	; (80261bc <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80261ac:	4413      	add	r3, r2
 80261ae:	68ba      	ldr	r2, [r7, #8]
 80261b0:	601a      	str	r2, [r3, #0]
}
 80261b2:	3714      	adds	r7, #20
 80261b4:	46bd      	mov	sp, r7
 80261b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80261ba:	4770      	bx	lr
 80261bc:	50004414 	.word	0x50004414

080261c0 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80261c0:	b480      	push	{r7}
 80261c2:	b085      	sub	sp, #20
 80261c4:	af00      	add	r7, sp, #0
 80261c6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80261c8:	687b      	ldr	r3, [r7, #4]
 80261ca:	0f1b      	lsrs	r3, r3, #28
 80261cc:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80261ce:	687b      	ldr	r3, [r7, #4]
 80261d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80261d4:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80261d6:	68fa      	ldr	r2, [r7, #12]
 80261d8:	4613      	mov	r3, r2
 80261da:	005b      	lsls	r3, r3, #1
 80261dc:	4413      	add	r3, r2
 80261de:	009b      	lsls	r3, r3, #2
 80261e0:	461a      	mov	r2, r3
 80261e2:	4b08      	ldr	r3, [pc, #32]	; (8026204 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 80261e4:	4413      	add	r3, r2
 80261e6:	681a      	ldr	r2, [r3, #0]
 80261e8:	68bb      	ldr	r3, [r7, #8]
 80261ea:	4013      	ands	r3, r2
 80261ec:	2b00      	cmp	r3, #0
 80261ee:	bf14      	ite	ne
 80261f0:	2301      	movne	r3, #1
 80261f2:	2300      	moveq	r3, #0
 80261f4:	b2db      	uxtb	r3, r3
}
 80261f6:	4618      	mov	r0, r3
 80261f8:	3714      	adds	r7, #20
 80261fa:	46bd      	mov	sp, r7
 80261fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026200:	4770      	bx	lr
 8026202:	bf00      	nop
 8026204:	5000440c 	.word	0x5000440c

08026208 <XMC_SCU_CLOCK_SetSystemClockSource>:
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8026208:	b480      	push	{r7}
 802620a:	b083      	sub	sp, #12
 802620c:	af00      	add	r7, sp, #0
 802620e:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8026210:	4906      	ldr	r1, [pc, #24]	; (802622c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8026212:	4b06      	ldr	r3, [pc, #24]	; (802622c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8026214:	68db      	ldr	r3, [r3, #12]
 8026216:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802621a:	687b      	ldr	r3, [r7, #4]
 802621c:	4313      	orrs	r3, r2
 802621e:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8026220:	370c      	adds	r7, #12
 8026222:	46bd      	mov	sp, r7
 8026224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026228:	4770      	bx	lr
 802622a:	bf00      	nop
 802622c:	50004600 	.word	0x50004600

08026230 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8026230:	b480      	push	{r7}
 8026232:	b083      	sub	sp, #12
 8026234:	af00      	add	r7, sp, #0
 8026236:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8026238:	4906      	ldr	r1, [pc, #24]	; (8026254 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 802623a:	4b06      	ldr	r3, [pc, #24]	; (8026254 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 802623c:	699b      	ldr	r3, [r3, #24]
 802623e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8026242:	687b      	ldr	r3, [r7, #4]
 8026244:	4313      	orrs	r3, r2
 8026246:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8026248:	370c      	adds	r7, #12
 802624a:	46bd      	mov	sp, r7
 802624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026250:	4770      	bx	lr
 8026252:	bf00      	nop
 8026254:	50004600 	.word	0x50004600

08026258 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8026258:	b480      	push	{r7}
 802625a:	b083      	sub	sp, #12
 802625c:	af00      	add	r7, sp, #0
 802625e:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8026260:	4906      	ldr	r1, [pc, #24]	; (802627c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8026262:	4b06      	ldr	r3, [pc, #24]	; (802627c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8026264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026266:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 802626a:	687b      	ldr	r3, [r7, #4]
 802626c:	4313      	orrs	r3, r2
 802626e:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8026270:	370c      	adds	r7, #12
 8026272:	46bd      	mov	sp, r7
 8026274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026278:	4770      	bx	lr
 802627a:	bf00      	nop
 802627c:	50004600 	.word	0x50004600

08026280 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8026280:	b480      	push	{r7}
 8026282:	b083      	sub	sp, #12
 8026284:	af00      	add	r7, sp, #0
 8026286:	4603      	mov	r3, r0
 8026288:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 802628a:	88fb      	ldrh	r3, [r7, #6]
 802628c:	2b00      	cmp	r3, #0
 802628e:	d108      	bne.n	80262a2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8026290:	4a0a      	ldr	r2, [pc, #40]	; (80262bc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8026292:	4b0a      	ldr	r3, [pc, #40]	; (80262bc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8026294:	68db      	ldr	r3, [r3, #12]
 8026296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802629a:	f023 0301 	bic.w	r3, r3, #1
 802629e:	60d3      	str	r3, [r2, #12]
 80262a0:	e007      	b.n	80262b2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80262a2:	4a06      	ldr	r2, [pc, #24]	; (80262bc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80262a4:	4b05      	ldr	r3, [pc, #20]	; (80262bc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80262a6:	68db      	ldr	r3, [r3, #12]
 80262a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80262ac:	f043 0301 	orr.w	r3, r3, #1
 80262b0:	60d3      	str	r3, [r2, #12]
  }
}
 80262b2:	370c      	adds	r7, #12
 80262b4:	46bd      	mov	sp, r7
 80262b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262ba:	4770      	bx	lr
 80262bc:	50004710 	.word	0x50004710

080262c0 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 80262c0:	b480      	push	{r7}
 80262c2:	b083      	sub	sp, #12
 80262c4:	af00      	add	r7, sp, #0
 80262c6:	4603      	mov	r3, r0
 80262c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80262ca:	bf00      	nop
 80262cc:	4b09      	ldr	r3, [pc, #36]	; (80262f4 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80262ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80262d2:	f003 0308 	and.w	r3, r3, #8
 80262d6:	2b00      	cmp	r3, #0
 80262d8:	d1f8      	bne.n	80262cc <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80262da:	4907      	ldr	r1, [pc, #28]	; (80262f8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80262dc:	4b06      	ldr	r3, [pc, #24]	; (80262f8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80262de:	68db      	ldr	r3, [r3, #12]
 80262e0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80262e4:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80262e6:	4313      	orrs	r3, r2
 80262e8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80262ea:	370c      	adds	r7, #12
 80262ec:	46bd      	mov	sp, r7
 80262ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262f2:	4770      	bx	lr
 80262f4:	50004000 	.word	0x50004000
 80262f8:	50004300 	.word	0x50004300

080262fc <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80262fc:	b480      	push	{r7}
 80262fe:	b083      	sub	sp, #12
 8026300:	af00      	add	r7, sp, #0
 8026302:	4603      	mov	r3, r0
 8026304:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8026306:	bf00      	nop
 8026308:	4b09      	ldr	r3, [pc, #36]	; (8026330 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 802630a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 802630e:	f003 0308 	and.w	r3, r3, #8
 8026312:	2b00      	cmp	r3, #0
 8026314:	d1f8      	bne.n	8026308 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8026316:	4907      	ldr	r1, [pc, #28]	; (8026334 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8026318:	4b06      	ldr	r3, [pc, #24]	; (8026334 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 802631a:	68db      	ldr	r3, [r3, #12]
 802631c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8026320:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8026322:	4313      	orrs	r3, r2
 8026324:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8026326:	370c      	adds	r7, #12
 8026328:	46bd      	mov	sp, r7
 802632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802632e:	4770      	bx	lr
 8026330:	50004000 	.word	0x50004000
 8026334:	50004300 	.word	0x50004300

08026338 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8026338:	b480      	push	{r7}
 802633a:	b083      	sub	sp, #12
 802633c:	af00      	add	r7, sp, #0
 802633e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8026340:	4906      	ldr	r1, [pc, #24]	; (802635c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8026342:	4b06      	ldr	r3, [pc, #24]	; (802635c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8026344:	68db      	ldr	r3, [r3, #12]
 8026346:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 802634a:	687b      	ldr	r3, [r7, #4]
 802634c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 802634e:	4313      	orrs	r3, r2
 8026350:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8026352:	370c      	adds	r7, #12
 8026354:	46bd      	mov	sp, r7
 8026356:	f85d 7b04 	ldr.w	r7, [sp], #4
 802635a:	4770      	bx	lr
 802635c:	50004600 	.word	0x50004600

08026360 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8026360:	b480      	push	{r7}
 8026362:	b083      	sub	sp, #12
 8026364:	af00      	add	r7, sp, #0
 8026366:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8026368:	4906      	ldr	r1, [pc, #24]	; (8026384 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 802636a:	4b06      	ldr	r3, [pc, #24]	; (8026384 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 802636c:	6a1b      	ldr	r3, [r3, #32]
 802636e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8026372:	687b      	ldr	r3, [r7, #4]
 8026374:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8026376:	4313      	orrs	r3, r2
 8026378:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 802637a:	370c      	adds	r7, #12
 802637c:	46bd      	mov	sp, r7
 802637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026382:	4770      	bx	lr
 8026384:	50004600 	.word	0x50004600

08026388 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8026388:	b480      	push	{r7}
 802638a:	b083      	sub	sp, #12
 802638c:	af00      	add	r7, sp, #0
 802638e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8026390:	4906      	ldr	r1, [pc, #24]	; (80263ac <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8026392:	4b06      	ldr	r3, [pc, #24]	; (80263ac <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8026394:	691b      	ldr	r3, [r3, #16]
 8026396:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 802639a:	687b      	ldr	r3, [r7, #4]
 802639c:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 802639e:	4313      	orrs	r3, r2
 80263a0:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80263a2:	370c      	adds	r7, #12
 80263a4:	46bd      	mov	sp, r7
 80263a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263aa:	4770      	bx	lr
 80263ac:	50004600 	.word	0x50004600

080263b0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80263b0:	b480      	push	{r7}
 80263b2:	b083      	sub	sp, #12
 80263b4:	af00      	add	r7, sp, #0
 80263b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80263b8:	4906      	ldr	r1, [pc, #24]	; (80263d4 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80263ba:	4b06      	ldr	r3, [pc, #24]	; (80263d4 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80263bc:	695b      	ldr	r3, [r3, #20]
 80263be:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80263c2:	687b      	ldr	r3, [r7, #4]
 80263c4:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80263c6:	4313      	orrs	r3, r2
 80263c8:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80263ca:	370c      	adds	r7, #12
 80263cc:	46bd      	mov	sp, r7
 80263ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263d2:	4770      	bx	lr
 80263d4:	50004600 	.word	0x50004600

080263d8 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80263d8:	b480      	push	{r7}
 80263da:	b083      	sub	sp, #12
 80263dc:	af00      	add	r7, sp, #0
 80263de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80263e0:	4906      	ldr	r1, [pc, #24]	; (80263fc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80263e2:	4b06      	ldr	r3, [pc, #24]	; (80263fc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80263e4:	699b      	ldr	r3, [r3, #24]
 80263e6:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80263ea:	687b      	ldr	r3, [r7, #4]
 80263ec:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80263ee:	4313      	orrs	r3, r2
 80263f0:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 80263f2:	370c      	adds	r7, #12
 80263f4:	46bd      	mov	sp, r7
 80263f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263fa:	4770      	bx	lr
 80263fc:	50004600 	.word	0x50004600

08026400 <XMC_SCU_CLOCK_SetWdtClockDivider>:
}
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8026400:	b480      	push	{r7}
 8026402:	b083      	sub	sp, #12
 8026404:	af00      	add	r7, sp, #0
 8026406:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8026408:	4906      	ldr	r1, [pc, #24]	; (8026424 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 802640a:	4b06      	ldr	r3, [pc, #24]	; (8026424 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 802640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802640e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8026412:	687b      	ldr	r3, [r7, #4]
 8026414:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8026416:	4313      	orrs	r3, r2
 8026418:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 802641a:	370c      	adds	r7, #12
 802641c:	46bd      	mov	sp, r7
 802641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026422:	4770      	bx	lr
 8026424:	50004600 	.word	0x50004600

08026428 <XMC_SCU_CLOCK_SetECATClockDivider>:
}

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
 8026428:	b480      	push	{r7}
 802642a:	b083      	sub	sp, #12
 802642c:	af00      	add	r7, sp, #0
 802642e:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 8026430:	4906      	ldr	r1, [pc, #24]	; (802644c <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 8026432:	4b06      	ldr	r3, [pc, #24]	; (802644c <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 8026434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026436:	f023 0203 	bic.w	r2, r3, #3
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
 802643a:	687b      	ldr	r3, [r7, #4]
 802643c:	3b01      	subs	r3, #1

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 802643e:	4313      	orrs	r3, r2
 8026440:	638b      	str	r3, [r1, #56]	; 0x38
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
}
 8026442:	370c      	adds	r7, #12
 8026444:	46bd      	mov	sp, r7
 8026446:	f85d 7b04 	ldr.w	r7, [sp], #4
 802644a:	4770      	bx	lr
 802644c:	50004600 	.word	0x50004600

08026450 <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8026450:	b480      	push	{r7}
 8026452:	b083      	sub	sp, #12
 8026454:	af00      	add	r7, sp, #0
 8026456:	4603      	mov	r3, r0
 8026458:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 802645a:	4a04      	ldr	r2, [pc, #16]	; (802646c <XMC_SCU_CLOCK_EnableClock+0x1c>)
 802645c:	79fb      	ldrb	r3, [r7, #7]
 802645e:	6053      	str	r3, [r2, #4]
}
 8026460:	370c      	adds	r7, #12
 8026462:	46bd      	mov	sp, r7
 8026464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026468:	4770      	bx	lr
 802646a:	bf00      	nop
 802646c:	50004600 	.word	0x50004600

08026470 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8026470:	b480      	push	{r7}
 8026472:	b085      	sub	sp, #20
 8026474:	af00      	add	r7, sp, #0
 8026476:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8026478:	687b      	ldr	r3, [r7, #4]
 802647a:	0f1b      	lsrs	r3, r3, #28
 802647c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 802647e:	687b      	ldr	r3, [r7, #4]
 8026480:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8026484:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8026486:	68fa      	ldr	r2, [r7, #12]
 8026488:	4613      	mov	r3, r2
 802648a:	005b      	lsls	r3, r3, #1
 802648c:	4413      	add	r3, r2
 802648e:	009b      	lsls	r3, r3, #2
 8026490:	461a      	mov	r2, r3
 8026492:	4b04      	ldr	r3, [pc, #16]	; (80264a4 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8026494:	4413      	add	r3, r2
 8026496:	68ba      	ldr	r2, [r7, #8]
 8026498:	601a      	str	r2, [r3, #0]
}
 802649a:	3714      	adds	r7, #20
 802649c:	46bd      	mov	sp, r7
 802649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80264a2:	4770      	bx	lr
 80264a4:	50004648 	.word	0x50004648

080264a8 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80264a8:	b480      	push	{r7}
 80264aa:	b083      	sub	sp, #12
 80264ac:	af00      	add	r7, sp, #0
 80264ae:	6078      	str	r0, [r7, #4]
 80264b0:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80264b2:	4a19      	ldr	r2, [pc, #100]	; (8026518 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80264b4:	4b18      	ldr	r3, [pc, #96]	; (8026518 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80264b6:	695b      	ldr	r3, [r3, #20]
 80264b8:	f043 0301 	orr.w	r3, r3, #1
 80264bc:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80264be:	4a16      	ldr	r2, [pc, #88]	; (8026518 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80264c0:	4b15      	ldr	r3, [pc, #84]	; (8026518 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80264c2:	695b      	ldr	r3, [r3, #20]
 80264c4:	f043 0310 	orr.w	r3, r3, #16
 80264c8:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80264ca:	4913      	ldr	r1, [pc, #76]	; (8026518 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80264cc:	683b      	ldr	r3, [r7, #0]
 80264ce:	3b01      	subs	r3, #1
 80264d0:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80264d2:	687b      	ldr	r3, [r7, #4]
 80264d4:	3b01      	subs	r3, #1
 80264d6:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80264d8:	4313      	orrs	r3, r2
 80264da:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80264dc:	4a0e      	ldr	r2, [pc, #56]	; (8026518 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80264de:	4b0e      	ldr	r3, [pc, #56]	; (8026518 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80264e0:	695b      	ldr	r3, [r3, #20]
 80264e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80264e6:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80264e8:	4a0b      	ldr	r2, [pc, #44]	; (8026518 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80264ea:	4b0b      	ldr	r3, [pc, #44]	; (8026518 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80264ec:	695b      	ldr	r3, [r3, #20]
 80264ee:	f023 0310 	bic.w	r3, r3, #16
 80264f2:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80264f4:	4a08      	ldr	r2, [pc, #32]	; (8026518 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80264f6:	4b08      	ldr	r3, [pc, #32]	; (8026518 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80264f8:	695b      	ldr	r3, [r3, #20]
 80264fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80264fe:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8026500:	bf00      	nop
 8026502:	4b05      	ldr	r3, [pc, #20]	; (8026518 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026504:	691b      	ldr	r3, [r3, #16]
 8026506:	f003 0304 	and.w	r3, r3, #4
 802650a:	2b00      	cmp	r3, #0
 802650c:	d0f9      	beq.n	8026502 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 802650e:	370c      	adds	r7, #12
 8026510:	46bd      	mov	sp, r7
 8026512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026516:	4770      	bx	lr
 8026518:	50004710 	.word	0x50004710

0802651c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 802651c:	b580      	push	{r7, lr}
 802651e:	b082      	sub	sp, #8
 8026520:	af00      	add	r7, sp, #0
 8026522:	4603      	mov	r3, r0
 8026524:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8026526:	4a0f      	ldr	r2, [pc, #60]	; (8026564 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8026528:	4b0e      	ldr	r3, [pc, #56]	; (8026564 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 802652a:	685b      	ldr	r3, [r3, #4]
 802652c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8026530:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8026532:	79fb      	ldrb	r3, [r7, #7]
 8026534:	2b01      	cmp	r3, #1
 8026536:	d10e      	bne.n	8026556 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8026538:	4a0a      	ldr	r2, [pc, #40]	; (8026564 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 802653a:	4b0a      	ldr	r3, [pc, #40]	; (8026564 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 802653c:	685b      	ldr	r3, [r3, #4]
 802653e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8026542:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8026544:	2064      	movs	r0, #100	; 0x64
 8026546:	f7ff fd8d 	bl	8026064 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 802654a:	4a06      	ldr	r2, [pc, #24]	; (8026564 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 802654c:	4b05      	ldr	r3, [pc, #20]	; (8026564 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 802654e:	685b      	ldr	r3, [r3, #4]
 8026550:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8026554:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8026556:	2064      	movs	r0, #100	; 0x64
 8026558:	f7ff fd84 	bl	8026064 <XMC_SCU_lDelay>
}
 802655c:	3708      	adds	r7, #8
 802655e:	46bd      	mov	sp, r7
 8026560:	bd80      	pop	{r7, pc}
 8026562:	bf00      	nop
 8026564:	50004710 	.word	0x50004710

08026568 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8026568:	b480      	push	{r7}
 802656a:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 802656c:	4b12      	ldr	r3, [pc, #72]	; (80265b8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 802656e:	681b      	ldr	r3, [r3, #0]
 8026570:	f003 0301 	and.w	r3, r3, #1
 8026574:	2b00      	cmp	r3, #0
 8026576:	d109      	bne.n	802658c <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8026578:	4b0f      	ldr	r3, [pc, #60]	; (80265b8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 802657a:	2201      	movs	r2, #1
 802657c:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 802657e:	bf00      	nop
 8026580:	4b0d      	ldr	r3, [pc, #52]	; (80265b8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8026582:	681b      	ldr	r3, [r3, #0]
 8026584:	f003 0301 	and.w	r3, r3, #1
 8026588:	2b00      	cmp	r3, #0
 802658a:	d0f9      	beq.n	8026580 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 802658c:	4b0b      	ldr	r3, [pc, #44]	; (80265bc <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 802658e:	681b      	ldr	r3, [r3, #0]
 8026590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8026594:	2b00      	cmp	r3, #0
 8026596:	d00a      	beq.n	80265ae <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8026598:	4b08      	ldr	r3, [pc, #32]	; (80265bc <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 802659a:	f44f 7200 	mov.w	r2, #512	; 0x200
 802659e:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 80265a0:	bf00      	nop
 80265a2:	4b06      	ldr	r3, [pc, #24]	; (80265bc <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80265a4:	681b      	ldr	r3, [r3, #0]
 80265a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80265aa:	2b00      	cmp	r3, #0
 80265ac:	d1f9      	bne.n	80265a2 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 80265ae:	46bd      	mov	sp, r7
 80265b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265b4:	4770      	bx	lr
 80265b6:	bf00      	nop
 80265b8:	50004200 	.word	0x50004200
 80265bc:	50004400 	.word	0x50004400

080265c0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:
  }
}

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 80265c0:	b580      	push	{r7, lr}
 80265c2:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80265c4:	bf00      	nop
 80265c6:	4b19      	ldr	r3, [pc, #100]	; (802662c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80265c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80265cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80265d0:	2b00      	cmp	r3, #0
 80265d2:	d1f8      	bne.n	80265c6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until the update of OSCULCTRL register in hibernate domain is completed */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80265d4:	4a16      	ldr	r2, [pc, #88]	; (8026630 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 80265d6:	4b16      	ldr	r3, [pc, #88]	; (8026630 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 80265d8:	69db      	ldr	r3, [r3, #28]
 80265da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80265de:	61d3      	str	r3, [r2, #28]

  /* Check if the input clock is OK using OSCULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80265e0:	bf00      	nop
 80265e2:	4b12      	ldr	r3, [pc, #72]	; (802662c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80265e4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80265e8:	f003 0308 	and.w	r3, r3, #8
 80265ec:	2b00      	cmp	r3, #0
 80265ee:	d1f8      	bne.n	80265e2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 80265f0:	4a0f      	ldr	r2, [pc, #60]	; (8026630 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 80265f2:	4b0f      	ldr	r3, [pc, #60]	; (8026630 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 80265f4:	68db      	ldr	r3, [r3, #12]
 80265f6:	f043 0308 	orr.w	r3, r3, #8
 80265fa:	60d3      	str	r3, [r2, #12]

  /* wait till clock is stable */
  do
  {
    while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 80265fc:	bf00      	nop
 80265fe:	4b0b      	ldr	r3, [pc, #44]	; (802662c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8026600:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8026604:	f003 0302 	and.w	r3, r3, #2
 8026608:	2b00      	cmp	r3, #0
 802660a:	d1f8      	bne.n	80265fe <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    SCU_HIBERNATE->HDCLR |= (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 802660c:	4a08      	ldr	r2, [pc, #32]	; (8026630 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 802660e:	4b08      	ldr	r3, [pc, #32]	; (8026630 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8026610:	685b      	ldr	r3, [r3, #4]
 8026612:	f043 0308 	orr.w	r3, r3, #8
 8026616:	6053      	str	r3, [r2, #4]

    XMC_SCU_lDelay(50U);
 8026618:	2032      	movs	r0, #50	; 0x32
 802661a:	f7ff fd23 	bl	8026064 <XMC_SCU_lDelay>

  } while ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) != 0UL);
 802661e:	4b04      	ldr	r3, [pc, #16]	; (8026630 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8026620:	681b      	ldr	r3, [r3, #0]
 8026622:	f003 0308 	and.w	r3, r3, #8
 8026626:	2b00      	cmp	r3, #0
 8026628:	d1e8      	bne.n	80265fc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3c>

}
 802662a:	bd80      	pop	{r7, pc}
 802662c:	50004000 	.word	0x50004000
 8026630:	50004300 	.word	0x50004300

08026634 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8026634:	b5b0      	push	{r4, r5, r7, lr}
 8026636:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8026638:	4a13      	ldr	r2, [pc, #76]	; (8026688 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 802663a:	4b13      	ldr	r3, [pc, #76]	; (8026688 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 802663c:	685b      	ldr	r3, [r3, #4]
 802663e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8026642:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8026644:	4d11      	ldr	r5, [pc, #68]	; (802668c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x58>)
 8026646:	4b11      	ldr	r3, [pc, #68]	; (802668c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x58>)
 8026648:	685b      	ldr	r3, [r3, #4]
 802664a:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 802664e:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8026652:	f001 fcbb 	bl	8027fcc <OSCHP_GetFrequency>
 8026656:	4602      	mov	r2, r0
 8026658:	4b0d      	ldr	r3, [pc, #52]	; (8026690 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x5c>)
 802665a:	fba3 2302 	umull	r2, r3, r3, r2
 802665e:	0d1b      	lsrs	r3, r3, #20
 8026660:	3b01      	subs	r3, #1
 8026662:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8026664:	4323      	orrs	r3, r4
 8026666:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8026668:	4a07      	ldr	r2, [pc, #28]	; (8026688 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 802666a:	4b07      	ldr	r3, [pc, #28]	; (8026688 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 802666c:	685b      	ldr	r3, [r3, #4]
 802666e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8026672:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) != XMC_SCU_PLL_PLLSTAT_OSC_USABLE)
 8026674:	bf00      	nop
 8026676:	4b04      	ldr	r3, [pc, #16]	; (8026688 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8026678:	681b      	ldr	r3, [r3, #0]
 802667a:	f403 7360 	and.w	r3, r3, #896	; 0x380
 802667e:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8026682:	d1f8      	bne.n	8026676 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x42>
  {
      /* wait till OSC_HP output frequency is usable */
  }
}
 8026684:	bdb0      	pop	{r4, r5, r7, pc}
 8026686:	bf00      	nop
 8026688:	50004710 	.word	0x50004710
 802668c:	50004700 	.word	0x50004700
 8026690:	6b5fca6b 	.word	0x6b5fca6b

08026694 <XMC_SCU_CLOCK_EnableSystemPll>:
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8026694:	b480      	push	{r7}
 8026696:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8026698:	4a05      	ldr	r2, [pc, #20]	; (80266b0 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 802669a:	4b05      	ldr	r3, [pc, #20]	; (80266b0 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 802669c:	685b      	ldr	r3, [r3, #4]
 802669e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80266a2:	f023 0302 	bic.w	r3, r3, #2
 80266a6:	6053      	str	r3, [r2, #4]
}
 80266a8:	46bd      	mov	sp, r7
 80266aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266ae:	4770      	bx	lr
 80266b0:	50004710 	.word	0x50004710

080266b4 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 80266b4:	b480      	push	{r7}
 80266b6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80266b8:	4a05      	ldr	r2, [pc, #20]	; (80266d0 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 80266ba:	4b05      	ldr	r3, [pc, #20]	; (80266d0 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 80266bc:	685b      	ldr	r3, [r3, #4]
 80266be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80266c2:	f043 0302 	orr.w	r3, r3, #2
 80266c6:	6053      	str	r3, [r2, #4]
}
 80266c8:	46bd      	mov	sp, r7
 80266ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266ce:	4770      	bx	lr
 80266d0:	50004710 	.word	0x50004710

080266d4 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 80266d4:	b580      	push	{r7, lr}
 80266d6:	b086      	sub	sp, #24
 80266d8:	af00      	add	r7, sp, #0
 80266da:	60ba      	str	r2, [r7, #8]
 80266dc:	607b      	str	r3, [r7, #4]
 80266de:	4603      	mov	r3, r0
 80266e0:	81fb      	strh	r3, [r7, #14]
 80266e2:	460b      	mov	r3, r1
 80266e4:	737b      	strb	r3, [r7, #13]

  float vco_frequency;
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 80266e6:	89fb      	ldrh	r3, [r7, #14]
 80266e8:	4618      	mov	r0, r3
 80266ea:	f7ff fdc9 	bl	8026280 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 80266ee:	7b7b      	ldrb	r3, [r7, #13]
 80266f0:	2b01      	cmp	r3, #1
 80266f2:	f040 8099 	bne.w	8026828 <XMC_SCU_CLOCK_StartSystemPll+0x154>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 80266f6:	89fb      	ldrh	r3, [r7, #14]
 80266f8:	2b00      	cmp	r3, #0
 80266fa:	d108      	bne.n	802670e <XMC_SCU_CLOCK_StartSystemPll+0x3a>
    {
      vco_frequency = (float)OSCHP_GetFrequency();
 80266fc:	f001 fc66 	bl	8027fcc <OSCHP_GetFrequency>
 8026700:	ee07 0a90 	vmov	s15, r0
 8026704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8026708:	edc7 7a05 	vstr	s15, [r7, #20]
 802670c:	e001      	b.n	8026712 <XMC_SCU_CLOCK_StartSystemPll+0x3e>
    }
    else
    {
      vco_frequency = (float)OFI_FREQUENCY;
 802670e:	4b53      	ldr	r3, [pc, #332]	; (802685c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8026710:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = (float)((vco_frequency * (float)ndiv) / (float)pdiv);
 8026712:	687b      	ldr	r3, [r7, #4]
 8026714:	ee07 3a90 	vmov	s15, r3
 8026718:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 802671c:	edd7 7a05 	vldr	s15, [r7, #20]
 8026720:	ee27 7a27 	vmul.f32	s14, s14, s15
 8026724:	68bb      	ldr	r3, [r7, #8]
 8026726:	ee07 3a90 	vmov	s15, r3
 802672a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802672e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8026732:	edc7 7a05 	vstr	s15, [r7, #20]
    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / OFI_FREQUENCY);
 8026736:	edd7 7a05 	vldr	s15, [r7, #20]
 802673a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802673e:	ee17 2a90 	vmov	r2, s15
 8026742:	4b47      	ldr	r3, [pc, #284]	; (8026860 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8026744:	fba3 2302 	umull	r2, r3, r3, r2
 8026748:	0d5b      	lsrs	r3, r3, #21
 802674a:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 802674c:	4a45      	ldr	r2, [pc, #276]	; (8026864 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 802674e:	4b45      	ldr	r3, [pc, #276]	; (8026864 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8026750:	685b      	ldr	r3, [r3, #4]
 8026752:	f043 0301 	orr.w	r3, r3, #1
 8026756:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8026758:	4a42      	ldr	r2, [pc, #264]	; (8026864 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 802675a:	4b42      	ldr	r3, [pc, #264]	; (8026864 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 802675c:	685b      	ldr	r3, [r3, #4]
 802675e:	f043 0310 	orr.w	r3, r3, #16
 8026762:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8026764:	493f      	ldr	r1, [pc, #252]	; (8026864 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8026766:	4b3f      	ldr	r3, [pc, #252]	; (8026864 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8026768:	689a      	ldr	r2, [r3, #8]
 802676a:	4b3f      	ldr	r3, [pc, #252]	; (8026868 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 802676c:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 802676e:	687a      	ldr	r2, [r7, #4]
 8026770:	3a01      	subs	r2, #1
 8026772:	0212      	lsls	r2, r2, #8
 8026774:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8026776:	693b      	ldr	r3, [r7, #16]
 8026778:	3b01      	subs	r3, #1
 802677a:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 802677c:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 802677e:	68bb      	ldr	r3, [r7, #8]
 8026780:	3b01      	subs	r3, #1
 8026782:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8026784:	4313      	orrs	r3, r2
 8026786:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8026788:	4a36      	ldr	r2, [pc, #216]	; (8026864 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 802678a:	4b36      	ldr	r3, [pc, #216]	; (8026864 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 802678c:	685b      	ldr	r3, [r3, #4]
 802678e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026792:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8026794:	4a33      	ldr	r2, [pc, #204]	; (8026864 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8026796:	4b33      	ldr	r3, [pc, #204]	; (8026864 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8026798:	685b      	ldr	r3, [r3, #4]
 802679a:	f023 0310 	bic.w	r3, r3, #16
 802679e:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 80267a0:	4a30      	ldr	r2, [pc, #192]	; (8026864 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 80267a2:	4b30      	ldr	r3, [pc, #192]	; (8026864 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 80267a4:	685b      	ldr	r3, [r3, #4]
 80267a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80267aa:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80267ac:	bf00      	nop
 80267ae:	4b2d      	ldr	r3, [pc, #180]	; (8026864 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 80267b0:	681b      	ldr	r3, [r3, #0]
 80267b2:	f003 0304 	and.w	r3, r3, #4
 80267b6:	2b00      	cmp	r3, #0
 80267b8:	d0f9      	beq.n	80267ae <XMC_SCU_CLOCK_StartSystemPll+0xda>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80267ba:	4a2a      	ldr	r2, [pc, #168]	; (8026864 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 80267bc:	4b29      	ldr	r3, [pc, #164]	; (8026864 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 80267be:	685b      	ldr	r3, [r3, #4]
 80267c0:	f023 0301 	bic.w	r3, r3, #1
 80267c4:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80267c6:	bf00      	nop
 80267c8:	4b26      	ldr	r3, [pc, #152]	; (8026864 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 80267ca:	681b      	ldr	r3, [r3, #0]
 80267cc:	f003 0301 	and.w	r3, r3, #1
 80267d0:	2b00      	cmp	r3, #0
 80267d2:	d1f9      	bne.n	80267c8 <XMC_SCU_CLOCK_StartSystemPll+0xf4>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / 60000000UL);
 80267d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80267d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80267dc:	ee17 3a90 	vmov	r3, s15
 80267e0:	0a1b      	lsrs	r3, r3, #8
 80267e2:	4a22      	ldr	r2, [pc, #136]	; (802686c <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 80267e4:	fba2 2303 	umull	r2, r3, r2, r3
 80267e8:	0a9b      	lsrs	r3, r3, #10
 80267ea:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 80267ec:	6a3a      	ldr	r2, [r7, #32]
 80267ee:	693b      	ldr	r3, [r7, #16]
 80267f0:	429a      	cmp	r2, r3
 80267f2:	d202      	bcs.n	80267fa <XMC_SCU_CLOCK_StartSystemPll+0x126>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80267f4:	6938      	ldr	r0, [r7, #16]
 80267f6:	f000 f83d 	bl	8026874 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / 90000000UL);
 80267fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80267fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8026802:	ee17 3a90 	vmov	r3, s15
 8026806:	09db      	lsrs	r3, r3, #7
 8026808:	4a19      	ldr	r2, [pc, #100]	; (8026870 <XMC_SCU_CLOCK_StartSystemPll+0x19c>)
 802680a:	fba2 2303 	umull	r2, r3, r2, r3
 802680e:	0adb      	lsrs	r3, r3, #11
 8026810:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8026812:	6a3a      	ldr	r2, [r7, #32]
 8026814:	693b      	ldr	r3, [r7, #16]
 8026816:	429a      	cmp	r2, r3
 8026818:	d202      	bcs.n	8026820 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 802681a:	6938      	ldr	r0, [r7, #16]
 802681c:	f000 f82a 	bl	8026874 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8026820:	6a38      	ldr	r0, [r7, #32]
 8026822:	f000 f827 	bl	8026874 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8026826:	e015      	b.n	8026854 <XMC_SCU_CLOCK_StartSystemPll+0x180>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8026828:	490e      	ldr	r1, [pc, #56]	; (8026864 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 802682a:	4b0e      	ldr	r3, [pc, #56]	; (8026864 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 802682c:	689b      	ldr	r3, [r3, #8]
 802682e:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8026832:	6a3b      	ldr	r3, [r7, #32]
 8026834:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8026836:	4313      	orrs	r3, r2
 8026838:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 802683a:	4a0a      	ldr	r2, [pc, #40]	; (8026864 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 802683c:	4b09      	ldr	r3, [pc, #36]	; (8026864 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 802683e:	685b      	ldr	r3, [r3, #4]
 8026840:	f043 0301 	orr.w	r3, r3, #1
 8026844:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8026846:	bf00      	nop
 8026848:	4b06      	ldr	r3, [pc, #24]	; (8026864 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 802684a:	681b      	ldr	r3, [r3, #0]
 802684c:	f003 0301 	and.w	r3, r3, #1
 8026850:	2b00      	cmp	r3, #0
 8026852:	d0f9      	beq.n	8026848 <XMC_SCU_CLOCK_StartSystemPll+0x174>
    {
      /* wait for prescaler mode */
    }
  }
}
 8026854:	3718      	adds	r7, #24
 8026856:	46bd      	mov	sp, r7
 8026858:	bd80      	pop	{r7, pc}
 802685a:	bf00      	nop
 802685c:	4bb71b00 	.word	0x4bb71b00
 8026860:	165e9f81 	.word	0x165e9f81
 8026864:	50004710 	.word	0x50004710
 8026868:	f08080ff 	.word	0xf08080ff
 802686c:	011e54c7 	.word	0x011e54c7
 8026870:	00bee32f 	.word	0x00bee32f

08026874 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8026874:	b580      	push	{r7, lr}
 8026876:	b082      	sub	sp, #8
 8026878:	af00      	add	r7, sp, #0
 802687a:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 802687c:	4907      	ldr	r1, [pc, #28]	; (802689c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 802687e:	4b07      	ldr	r3, [pc, #28]	; (802689c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8026880:	689b      	ldr	r3, [r3, #8]
 8026882:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8026886:	687b      	ldr	r3, [r7, #4]
 8026888:	3b01      	subs	r3, #1
 802688a:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 802688c:	4313      	orrs	r3, r2
 802688e:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8026890:	2032      	movs	r0, #50	; 0x32
 8026892:	f7ff fbe7 	bl	8026064 <XMC_SCU_lDelay>
}
 8026896:	3708      	adds	r7, #8
 8026898:	46bd      	mov	sp, r7
 802689a:	bd80      	pop	{r7, pc}
 802689c:	50004710 	.word	0x50004710

080268a0 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80268a0:	b480      	push	{r7}
 80268a2:	b083      	sub	sp, #12
 80268a4:	af00      	add	r7, sp, #0
 80268a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80268a8:	687b      	ldr	r3, [r7, #4]
 80268aa:	68db      	ldr	r3, [r3, #12]
 80268ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80268b0:	687b      	ldr	r3, [r7, #4]
 80268b2:	60da      	str	r2, [r3, #12]
}
 80268b4:	370c      	adds	r7, #12
 80268b6:	46bd      	mov	sp, r7
 80268b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80268bc:	4770      	bx	lr
 80268be:	bf00      	nop

080268c0 <XMC_CCU4_lDeassertReset>:

  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 80268c0:	b580      	push	{r7, lr}
 80268c2:	b082      	sub	sp, #8
 80268c4:	af00      	add	r7, sp, #0
 80268c6:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)module)
 80268c8:	687b      	ldr	r3, [r7, #4]
 80268ca:	4a09      	ldr	r2, [pc, #36]	; (80268f0 <XMC_CCU4_lDeassertReset+0x30>)
 80268cc:	4293      	cmp	r3, r2
 80268ce:	d003      	beq.n	80268d8 <XMC_CCU4_lDeassertReset+0x18>
 80268d0:	4a08      	ldr	r2, [pc, #32]	; (80268f4 <XMC_CCU4_lDeassertReset+0x34>)
 80268d2:	4293      	cmp	r3, r2
 80268d4:	d004      	beq.n	80268e0 <XMC_CCU4_lDeassertReset+0x20>
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 80268d6:	e007      	b.n	80268e8 <XMC_CCU4_lDeassertReset+0x28>
__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU40:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 80268d8:	2004      	movs	r0, #4
 80268da:	f7ff fc55 	bl	8026188 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 80268de:	e003      	b.n	80268e8 <XMC_CCU4_lDeassertReset+0x28>
      
#if defined(CCU41)
    case (uint32_t)CCU41:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 80268e0:	2008      	movs	r0, #8
 80268e2:	f7ff fc51 	bl	8026188 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 80268e6:	bf00      	nop
    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   

  }
}
 80268e8:	3708      	adds	r7, #8
 80268ea:	46bd      	mov	sp, r7
 80268ec:	bd80      	pop	{r7, pc}
 80268ee:	bf00      	nop
 80268f0:	4000c000 	.word	0x4000c000
 80268f4:	40010000 	.word	0x40010000

080268f8 <XMC_CCU4_lUngateClock>:

  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 80268f8:	b580      	push	{r7, lr}
 80268fa:	b082      	sub	sp, #8
 80268fc:	af00      	add	r7, sp, #0
 80268fe:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)module)
 8026900:	687b      	ldr	r3, [r7, #4]
 8026902:	4a09      	ldr	r2, [pc, #36]	; (8026928 <XMC_CCU4_lUngateClock+0x30>)
 8026904:	4293      	cmp	r3, r2
 8026906:	d003      	beq.n	8026910 <XMC_CCU4_lUngateClock+0x18>
 8026908:	4a08      	ldr	r2, [pc, #32]	; (802692c <XMC_CCU4_lUngateClock+0x34>)
 802690a:	4293      	cmp	r3, r2
 802690c:	d004      	beq.n	8026918 <XMC_CCU4_lUngateClock+0x20>
      break;
#endif  

    default:
      XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
      break;   
 802690e:	e007      	b.n	8026920 <XMC_CCU4_lUngateClock+0x28>
__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU40:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8026910:	2004      	movs	r0, #4
 8026912:	f7ff fdad 	bl	8026470 <XMC_SCU_CLOCK_UngatePeripheralClock>
      break;
 8026916:	e003      	b.n	8026920 <XMC_CCU4_lUngateClock+0x28>
      
#if defined(CCU41)      
    case (uint32_t)CCU41:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8026918:	2008      	movs	r0, #8
 802691a:	f7ff fda9 	bl	8026470 <XMC_SCU_CLOCK_UngatePeripheralClock>
      break;
 802691e:	bf00      	nop
    default:
      XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
      break;   
    
  }
}
 8026920:	3708      	adds	r7, #8
 8026922:	46bd      	mov	sp, r7
 8026924:	bd80      	pop	{r7, pc}
 8026926:	bf00      	nop
 8026928:	4000c000 	.word	0x4000c000
 802692c:	40010000 	.word	0x40010000

08026930 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8026930:	b580      	push	{r7, lr}
 8026932:	b082      	sub	sp, #8
 8026934:	af00      	add	r7, sp, #0
 8026936:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8026938:	2010      	movs	r0, #16
 802693a:	f7ff fd89 	bl	8026450 <XMC_SCU_CLOCK_EnableClock>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 802693e:	6878      	ldr	r0, [r7, #4]
 8026940:	f7ff ffda 	bl	80268f8 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8026944:	6878      	ldr	r0, [r7, #4]
 8026946:	f7ff ffbb 	bl	80268c0 <XMC_CCU4_lDeassertReset>
#endif
}
 802694a:	3708      	adds	r7, #8
 802694c:	46bd      	mov	sp, r7
 802694e:	bd80      	pop	{r7, pc}

08026950 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8026950:	b580      	push	{r7, lr}
 8026952:	b084      	sub	sp, #16
 8026954:	af00      	add	r7, sp, #0
 8026956:	6078      	str	r0, [r7, #4]
 8026958:	460b      	mov	r3, r1
 802695a:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 802695c:	6878      	ldr	r0, [r7, #4]
 802695e:	f7ff ffe7 	bl	8026930 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8026962:	6878      	ldr	r0, [r7, #4]
 8026964:	f7ff ff9c 	bl	80268a0 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8026968:	687b      	ldr	r3, [r7, #4]
 802696a:	681b      	ldr	r3, [r3, #0]
 802696c:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 802696e:	68fb      	ldr	r3, [r7, #12]
 8026970:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8026974:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8026976:	78fb      	ldrb	r3, [r7, #3]
 8026978:	039b      	lsls	r3, r3, #14
 802697a:	68fa      	ldr	r2, [r7, #12]
 802697c:	4313      	orrs	r3, r2
 802697e:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8026980:	687b      	ldr	r3, [r7, #4]
 8026982:	68fa      	ldr	r2, [r7, #12]
 8026984:	601a      	str	r2, [r3, #0]
}
 8026986:	3710      	adds	r7, #16
 8026988:	46bd      	mov	sp, r7
 802698a:	bd80      	pop	{r7, pc}

0802698c <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
		                            const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 802698c:	b480      	push	{r7}
 802698e:	b083      	sub	sp, #12
 8026990:	af00      	add	r7, sp, #0
 8026992:	6078      	str	r0, [r7, #4]
 8026994:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8026996:	683b      	ldr	r3, [r7, #0]
 8026998:	681a      	ldr	r2, [r3, #0]
 802699a:	687b      	ldr	r3, [r7, #4]
 802699c:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 802699e:	683b      	ldr	r3, [r7, #0]
 80269a0:	795b      	ldrb	r3, [r3, #5]
 80269a2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80269a6:	b2db      	uxtb	r3, r3
 80269a8:	051a      	lsls	r2, r3, #20
 80269aa:	687b      	ldr	r3, [r7, #4]
 80269ac:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80269ae:	683b      	ldr	r3, [r7, #0]
 80269b0:	791b      	ldrb	r3, [r3, #4]
 80269b2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80269b6:	b2db      	uxtb	r3, r3
 80269b8:	461a      	mov	r2, r3
 80269ba:	687b      	ldr	r3, [r7, #4]
 80269bc:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80269be:	683b      	ldr	r3, [r7, #0]
 80269c0:	795b      	ldrb	r3, [r3, #5]
 80269c2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80269c6:	b2db      	uxtb	r3, r3
 80269c8:	461a      	mov	r2, r3
 80269ca:	687b      	ldr	r3, [r7, #4]
 80269cc:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 80269ce:	683b      	ldr	r3, [r7, #0]
 80269d0:	795b      	ldrb	r3, [r3, #5]
 80269d2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80269d6:	b2db      	uxtb	r3, r3
 80269d8:	461a      	mov	r2, r3
 80269da:	687b      	ldr	r3, [r7, #4]
 80269dc:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80269de:	683b      	ldr	r3, [r7, #0]
 80269e0:	791b      	ldrb	r3, [r3, #4]
 80269e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80269e6:	b2db      	uxtb	r3, r3
 80269e8:	461a      	mov	r2, r3
 80269ea:	687b      	ldr	r3, [r7, #4]
 80269ec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80269ee:	370c      	adds	r7, #12
 80269f0:	46bd      	mov	sp, r7
 80269f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80269f6:	4770      	bx	lr

080269f8 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 80269f8:	b480      	push	{r7}
 80269fa:	b087      	sub	sp, #28
 80269fc:	af00      	add	r7, sp, #0
 80269fe:	6078      	str	r0, [r7, #4]
 8026a00:	460b      	mov	r3, r1
 8026a02:	70fb      	strb	r3, [r7, #3]
 8026a04:	4613      	mov	r3, r2
 8026a06:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8026a08:	687b      	ldr	r3, [r7, #4]
 8026a0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8026a0e:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8026a10:	78fb      	ldrb	r3, [r7, #3]
 8026a12:	2b09      	cmp	r3, #9
 8026a14:	d82c      	bhi.n	8026a70 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8026a16:	a201      	add	r2, pc, #4	; (adr r2, 8026a1c <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8026a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026a1c:	08026a45 	.word	0x08026a45
 8026a20:	08026a45 	.word	0x08026a45
 8026a24:	08026a4f 	.word	0x08026a4f
 8026a28:	08026a4f 	.word	0x08026a4f
 8026a2c:	08026a71 	.word	0x08026a71
 8026a30:	08026a71 	.word	0x08026a71
 8026a34:	08026a71 	.word	0x08026a71
 8026a38:	08026a71 	.word	0x08026a71
 8026a3c:	08026a59 	.word	0x08026a59
 8026a40:	08026a65 	.word	0x08026a65
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8026a44:	2303      	movs	r3, #3
 8026a46:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8026a48:	2300      	movs	r3, #0
 8026a4a:	617b      	str	r3, [r7, #20]
      break;
 8026a4c:	e016      	b.n	8026a7c <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8026a4e:	230c      	movs	r3, #12
 8026a50:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8026a52:	2302      	movs	r3, #2
 8026a54:	617b      	str	r3, [r7, #20]
      break;
 8026a56:	e011      	b.n	8026a7c <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8026a58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8026a5c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8026a5e:	2308      	movs	r3, #8
 8026a60:	617b      	str	r3, [r7, #20]
      break;
 8026a62:	e00b      	b.n	8026a7c <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8026a64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8026a68:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8026a6a:	230a      	movs	r3, #10
 8026a6c:	617b      	str	r3, [r7, #20]
      break;
 8026a6e:	e005      	b.n	8026a7c <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8026a70:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8026a74:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8026a76:	230c      	movs	r3, #12
 8026a78:	617b      	str	r3, [r7, #20]
      break;
 8026a7a:	bf00      	nop
  }
  
  srs &= ~mask; 
 8026a7c:	693b      	ldr	r3, [r7, #16]
 8026a7e:	43db      	mvns	r3, r3
 8026a80:	68fa      	ldr	r2, [r7, #12]
 8026a82:	4013      	ands	r3, r2
 8026a84:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8026a86:	78ba      	ldrb	r2, [r7, #2]
 8026a88:	697b      	ldr	r3, [r7, #20]
 8026a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8026a8e:	68fa      	ldr	r2, [r7, #12]
 8026a90:	4313      	orrs	r3, r2
 8026a92:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8026a94:	687b      	ldr	r3, [r7, #4]
 8026a96:	68fa      	ldr	r2, [r7, #12]
 8026a98:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8026a9c:	371c      	adds	r7, #28
 8026a9e:	46bd      	mov	sp, r7
 8026aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026aa4:	4770      	bx	lr
 8026aa6:	bf00      	nop

08026aa8 <XMC_ECAT_Enable>:
  ECAT0->MII_PDI_ACS_STATE |= 0x01;
}

/* EtherCAT module clock ungating and deassert reset API (Enables ECAT) */
void XMC_ECAT_Enable(void)
{
 8026aa8:	b580      	push	{r7, lr}
 8026aaa:	af00      	add	r7, sp, #0
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ECAT0);
 8026aac:	4806      	ldr	r0, [pc, #24]	; (8026ac8 <XMC_ECAT_Enable+0x20>)
 8026aae:	f7ff fcdf 	bl	8026470 <XMC_SCU_CLOCK_UngatePeripheralClock>
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ECAT0);
 8026ab2:	4805      	ldr	r0, [pc, #20]	; (8026ac8 <XMC_ECAT_Enable+0x20>)
 8026ab4:	f7ff fb68 	bl	8026188 <XMC_SCU_RESET_DeassertPeripheralReset>

  while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_ECAT0) == true){}
 8026ab8:	bf00      	nop
 8026aba:	4803      	ldr	r0, [pc, #12]	; (8026ac8 <XMC_ECAT_Enable+0x20>)
 8026abc:	f7ff fb80 	bl	80261c0 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8026ac0:	4603      	mov	r3, r0
 8026ac2:	2b00      	cmp	r3, #0
 8026ac4:	d1f9      	bne.n	8026aba <XMC_ECAT_Enable+0x12>
}
 8026ac6:	bd80      	pop	{r7, pc}
 8026ac8:	20000400 	.word	0x20000400

08026acc <XMC_ECAT_Init>:
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ECAT0);
}

/* EtherCAT initialization function */
void XMC_ECAT_Init(XMC_ECAT_CONFIG_t *const config)
{
 8026acc:	b580      	push	{r7, lr}
 8026ace:	b082      	sub	sp, #8
 8026ad0:	af00      	add	r7, sp, #0
 8026ad2:	6078      	str	r0, [r7, #4]
  XMC_ECAT_Enable();
 8026ad4:	f7ff ffe8 	bl	8026aa8 <XMC_ECAT_Enable>

  /* The process memory is not accessible until the ESC Configuration Area is loaded successfully. */
  
  /* words 0x0-0x3 */
  ECAT0->EEP_DATA[0U] = config->dword[0U];
 8026ad8:	4a19      	ldr	r2, [pc, #100]	; (8026b40 <XMC_ECAT_Init+0x74>)
 8026ada:	687b      	ldr	r3, [r7, #4]
 8026adc:	681b      	ldr	r3, [r3, #0]
 8026ade:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  ECAT0->EEP_DATA[1U] = config->dword[1U];
 8026ae2:	4a17      	ldr	r2, [pc, #92]	; (8026b40 <XMC_ECAT_Init+0x74>)
 8026ae4:	687b      	ldr	r3, [r7, #4]
 8026ae6:	685b      	ldr	r3, [r3, #4]
 8026ae8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
  ECAT0->EEP_CONT_STAT |= (uint16_t)((uint16_t)0x4U << (uint16_t)ECAT_EEP_CONT_STAT_CMD_REG_Pos);
 8026aec:	4a14      	ldr	r2, [pc, #80]	; (8026b40 <XMC_ECAT_Init+0x74>)
 8026aee:	4b14      	ldr	r3, [pc, #80]	; (8026b40 <XMC_ECAT_Init+0x74>)
 8026af0:	f8b3 3502 	ldrh.w	r3, [r3, #1282]	; 0x502
 8026af4:	b29b      	uxth	r3, r3
 8026af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8026afa:	b29b      	uxth	r3, r3
 8026afc:	f8a2 3502 	strh.w	r3, [r2, #1282]	; 0x502

  /* words 0x4-0x7 */
  ECAT0->EEP_DATA[0U] = config->dword[2U];
 8026b00:	4a0f      	ldr	r2, [pc, #60]	; (8026b40 <XMC_ECAT_Init+0x74>)
 8026b02:	687b      	ldr	r3, [r7, #4]
 8026b04:	689b      	ldr	r3, [r3, #8]
 8026b06:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  ECAT0->EEP_DATA[1U] = config->dword[3U];
 8026b0a:	4a0d      	ldr	r2, [pc, #52]	; (8026b40 <XMC_ECAT_Init+0x74>)
 8026b0c:	687b      	ldr	r3, [r7, #4]
 8026b0e:	68db      	ldr	r3, [r3, #12]
 8026b10:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
  ECAT0->EEP_CONT_STAT |= (uint16_t)((uint16_t)0x4U << (uint16_t)ECAT_EEP_CONT_STAT_CMD_REG_Pos);
 8026b14:	4a0a      	ldr	r2, [pc, #40]	; (8026b40 <XMC_ECAT_Init+0x74>)
 8026b16:	4b0a      	ldr	r3, [pc, #40]	; (8026b40 <XMC_ECAT_Init+0x74>)
 8026b18:	f8b3 3502 	ldrh.w	r3, [r3, #1282]	; 0x502
 8026b1c:	b29b      	uxth	r3, r3
 8026b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8026b22:	b29b      	uxth	r3, r3
 8026b24:	f8a2 3502 	strh.w	r3, [r2, #1282]	; 0x502

  while (ECAT0->EEP_CONT_STAT & ECAT_EEP_CONT_STAT_L_STAT_Msk)
 8026b28:	bf00      	nop
 8026b2a:	4b05      	ldr	r3, [pc, #20]	; (8026b40 <XMC_ECAT_Init+0x74>)
 8026b2c:	f8b3 3502 	ldrh.w	r3, [r3, #1282]	; 0x502
 8026b30:	b29b      	uxth	r3, r3
 8026b32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026b36:	2b00      	cmp	r3, #0
 8026b38:	d1f7      	bne.n	8026b2a <XMC_ECAT_Init+0x5e>
  {
    /* Wait until the EEPROM_Loaded signal is active */
  }

}
 8026b3a:	3708      	adds	r7, #8
 8026b3c:	46bd      	mov	sp, r7
 8026b3e:	bd80      	pop	{r7, pc}
 8026b40:	54010000 	.word	0x54010000

08026b44 <XMC_ECAT_DisableEvent>:
{
  ECAT0->AL_EVENT_MASK |= event;
}
/* EtherCAT application event disable API */
void XMC_ECAT_DisableEvent(uint32_t event)
{
 8026b44:	b480      	push	{r7}
 8026b46:	b083      	sub	sp, #12
 8026b48:	af00      	add	r7, sp, #0
 8026b4a:	6078      	str	r0, [r7, #4]
  ECAT0->AL_EVENT_MASK &= ~event;
 8026b4c:	4906      	ldr	r1, [pc, #24]	; (8026b68 <XMC_ECAT_DisableEvent+0x24>)
 8026b4e:	4b06      	ldr	r3, [pc, #24]	; (8026b68 <XMC_ECAT_DisableEvent+0x24>)
 8026b50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8026b54:	687b      	ldr	r3, [r7, #4]
 8026b56:	43db      	mvns	r3, r3
 8026b58:	4013      	ands	r3, r2
 8026b5a:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
}
 8026b5e:	370c      	adds	r7, #12
 8026b60:	46bd      	mov	sp, r7
 8026b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b66:	4770      	bx	lr
 8026b68:	54010000 	.word	0x54010000

08026b6c <XMC_ECAT_DisableSyncManChannel>:
  return (ECAT0->AL_EVENT_REQ);
}

/* EtherCAT SyncManager channel disable function*/
void XMC_ECAT_DisableSyncManChannel(const uint8_t channel)
{
 8026b6c:	b480      	push	{r7}
 8026b6e:	b083      	sub	sp, #12
 8026b70:	af00      	add	r7, sp, #0
 8026b72:	4603      	mov	r3, r0
 8026b74:	71fb      	strb	r3, [r7, #7]
  ((ECAT0_SM_Type *)(void*)((uint8_t *)(void*)ECAT0_SM0 + (channel * 8U)))->SM_PDI_CTR |= 0x1U;
 8026b76:	79fb      	ldrb	r3, [r7, #7]
 8026b78:	00db      	lsls	r3, r3, #3
 8026b7a:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8026b7e:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8026b82:	79fa      	ldrb	r2, [r7, #7]
 8026b84:	00d2      	lsls	r2, r2, #3
 8026b86:	f102 42a8 	add.w	r2, r2, #1409286144	; 0x54000000
 8026b8a:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 8026b8e:	79d2      	ldrb	r2, [r2, #7]
 8026b90:	b2d2      	uxtb	r2, r2
 8026b92:	f042 0201 	orr.w	r2, r2, #1
 8026b96:	b2d2      	uxtb	r2, r2
 8026b98:	71da      	strb	r2, [r3, #7]
}
 8026b9a:	370c      	adds	r7, #12
 8026b9c:	46bd      	mov	sp, r7
 8026b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ba2:	4770      	bx	lr

08026ba4 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{ 
 8026ba4:	b580      	push	{r7, lr}
 8026ba6:	b084      	sub	sp, #16
 8026ba8:	af00      	add	r7, sp, #0
 8026baa:	60f8      	str	r0, [r7, #12]
 8026bac:	460b      	mov	r3, r1
 8026bae:	607a      	str	r2, [r7, #4]
 8026bb0:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 8026bb2:	68f8      	ldr	r0, [r7, #12]
 8026bb4:	f7ff f8ba 	bl	8025d2c <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL & 
 8026bb8:	68fb      	ldr	r3, [r7, #12]
 8026bba:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8026bbc:	7afb      	ldrb	r3, [r7, #11]
 8026bbe:	009b      	lsls	r3, r3, #2
 8026bc0:	4619      	mov	r1, r3
 8026bc2:	230f      	movs	r3, #15
 8026bc4:	408b      	lsls	r3, r1
 8026bc6:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8026bc8:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 8026bca:	687b      	ldr	r3, [r7, #4]
 8026bcc:	681b      	ldr	r3, [r3, #0]
 8026bce:	7af9      	ldrb	r1, [r7, #11]
 8026bd0:	0089      	lsls	r1, r1, #2
 8026bd2:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8026bd4:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8026bd6:	68fb      	ldr	r3, [r7, #12]
 8026bd8:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  
  eru->EXICON[channel] = config->raw;
 8026bda:	7afa      	ldrb	r2, [r7, #11]
 8026bdc:	687b      	ldr	r3, [r7, #4]
 8026bde:	6859      	ldr	r1, [r3, #4]
 8026be0:	68fb      	ldr	r3, [r7, #12]
 8026be2:	3204      	adds	r2, #4
 8026be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8026be8:	3710      	adds	r7, #16
 8026bea:	46bd      	mov	sp, r7
 8026bec:	bd80      	pop	{r7, pc}
 8026bee:	bf00      	nop

08026bf0 <XMC_ERU_OGU_Init>:

/* Initializes the selected ERU_OGUy channel with the config structure.  */
void XMC_ERU_OGU_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_OGU_CONFIG_t *const config)
{
 8026bf0:	b580      	push	{r7, lr}
 8026bf2:	b084      	sub	sp, #16
 8026bf4:	af00      	add	r7, sp, #0
 8026bf6:	60f8      	str	r0, [r7, #12]
 8026bf8:	460b      	mov	r3, r1
 8026bfa:	607a      	str	r2, [r7, #4]
 8026bfc:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 8026bfe:	68f8      	ldr	r0, [r7, #12]
 8026c00:	f7ff f894 	bl	8025d2c <XMC_ERU_Enable>

  eru->EXOCON[channel] = config->raw;
 8026c04:	7afa      	ldrb	r2, [r7, #11]
 8026c06:	687b      	ldr	r3, [r7, #4]
 8026c08:	6819      	ldr	r1, [r3, #0]
 8026c0a:	68fb      	ldr	r3, [r7, #12]
 8026c0c:	3208      	adds	r2, #8
 8026c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8026c12:	3710      	adds	r7, #16
 8026c14:	46bd      	mov	sp, r7
 8026c16:	bd80      	pop	{r7, pc}

08026c18 <XMC_FCE_Init>:
/*
 * Initialize the FCE peripheral:
 * Update FCE configuration and initialize seed value
 */
XMC_FCE_STATUS_t XMC_FCE_Init(const XMC_FCE_t *const engine)
{
 8026c18:	b480      	push	{r7}
 8026c1a:	b083      	sub	sp, #12
 8026c1c:	af00      	add	r7, sp, #0
 8026c1e:	6078      	str	r0, [r7, #4]
  engine->kernel_ptr->CFG = engine->fce_cfg_update.regval;
 8026c20:	687b      	ldr	r3, [r7, #4]
 8026c22:	681b      	ldr	r3, [r3, #0]
 8026c24:	687a      	ldr	r2, [r7, #4]
 8026c26:	6852      	ldr	r2, [r2, #4]
 8026c28:	609a      	str	r2, [r3, #8]
  engine->kernel_ptr->CRC = engine->seedvalue;
 8026c2a:	687b      	ldr	r3, [r7, #4]
 8026c2c:	681b      	ldr	r3, [r3, #0]
 8026c2e:	687a      	ldr	r2, [r7, #4]
 8026c30:	6892      	ldr	r2, [r2, #8]
 8026c32:	619a      	str	r2, [r3, #24]
  
  return XMC_FCE_STATUS_OK;
 8026c34:	2300      	movs	r3, #0
}
 8026c36:	4618      	mov	r0, r3
 8026c38:	370c      	adds	r7, #12
 8026c3a:	46bd      	mov	sp, r7
 8026c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c40:	4770      	bx	lr
 8026c42:	bf00      	nop

08026c44 <XMC_FCE_Enable>:

}

/* Enable FCE */
void XMC_FCE_Enable(void)
{
 8026c44:	b580      	push	{r7, lr}
 8026c46:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_FCE);
 8026c48:	4806      	ldr	r0, [pc, #24]	; (8026c64 <XMC_FCE_Enable+0x20>)
 8026c4a:	f7ff fc11 	bl	8026470 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif

  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_FCE);
 8026c4e:	4805      	ldr	r0, [pc, #20]	; (8026c64 <XMC_FCE_Enable+0x20>)
 8026c50:	f7ff fa9a 	bl	8026188 <XMC_SCU_RESET_DeassertPeripheralReset>

  FCE->CLC &= (uint32_t)~FCE_CLC_DISR_Msk;
 8026c54:	4a04      	ldr	r2, [pc, #16]	; (8026c68 <XMC_FCE_Enable+0x24>)
 8026c56:	4b04      	ldr	r3, [pc, #16]	; (8026c68 <XMC_FCE_Enable+0x24>)
 8026c58:	681b      	ldr	r3, [r3, #0]
 8026c5a:	f023 0301 	bic.w	r3, r3, #1
 8026c5e:	6013      	str	r3, [r2, #0]
}
 8026c60:	bd80      	pop	{r7, pc}
 8026c62:	bf00      	nop
 8026c64:	20000040 	.word	0x20000040
 8026c68:	50020000 	.word	0x50020000

08026c6c <XMC_FCE_CalculateCRC32>:
/* Calculate and return the IEEE 802.3 Ethernet CRC32 checksum */
XMC_FCE_STATUS_t XMC_FCE_CalculateCRC32(const XMC_FCE_t *const engine,
                                        const uint32_t *data,
										uint32_t length,
										uint32_t *result)
{
 8026c6c:	b480      	push	{r7}
 8026c6e:	b087      	sub	sp, #28
 8026c70:	af00      	add	r7, sp, #0
 8026c72:	60f8      	str	r0, [r7, #12]
 8026c74:	60b9      	str	r1, [r7, #8]
 8026c76:	607a      	str	r2, [r7, #4]
 8026c78:	603b      	str	r3, [r7, #0]
  XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 8026c7a:	2300      	movs	r3, #0
 8026c7c:	75fb      	strb	r3, [r7, #23]
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length field is empty", (length != 0));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length is not aligned", ((length & 0x03) == 0));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Buffer is not aligned", (((uint32_t)data % 4U) == 0));

  /* Check if data and length are word aligned */
  if (((length & 0x03U) != 0U) || (((uint32_t)length % 4U) != 0U))
 8026c7e:	687b      	ldr	r3, [r7, #4]
 8026c80:	f003 0303 	and.w	r3, r3, #3
 8026c84:	2b00      	cmp	r3, #0
 8026c86:	d104      	bne.n	8026c92 <XMC_FCE_CalculateCRC32+0x26>
 8026c88:	687b      	ldr	r3, [r7, #4]
 8026c8a:	f003 0303 	and.w	r3, r3, #3
 8026c8e:	2b00      	cmp	r3, #0
 8026c90:	d002      	beq.n	8026c98 <XMC_FCE_CalculateCRC32+0x2c>
  {
    status = XMC_FCE_STATUS_ERROR;
 8026c92:	2302      	movs	r3, #2
 8026c94:	75fb      	strb	r3, [r7, #23]
 8026c96:	e013      	b.n	8026cc0 <XMC_FCE_CalculateCRC32+0x54>
  }
  else
  {
    while (0UL != length)
 8026c98:	e00a      	b.n	8026cb0 <XMC_FCE_CalculateCRC32+0x44>
    {
      engine->kernel_ptr->IR = *data;
 8026c9a:	68fb      	ldr	r3, [r7, #12]
 8026c9c:	681b      	ldr	r3, [r3, #0]
 8026c9e:	68ba      	ldr	r2, [r7, #8]
 8026ca0:	6812      	ldr	r2, [r2, #0]
 8026ca2:	601a      	str	r2, [r3, #0]
      data++;
 8026ca4:	68bb      	ldr	r3, [r7, #8]
 8026ca6:	3304      	adds	r3, #4
 8026ca8:	60bb      	str	r3, [r7, #8]
      length -= 4U;
 8026caa:	687b      	ldr	r3, [r7, #4]
 8026cac:	3b04      	subs	r3, #4
 8026cae:	607b      	str	r3, [r7, #4]
  {
    status = XMC_FCE_STATUS_ERROR;
  }
  else
  {
    while (0UL != length)
 8026cb0:	687b      	ldr	r3, [r7, #4]
 8026cb2:	2b00      	cmp	r3, #0
 8026cb4:	d1f1      	bne.n	8026c9a <XMC_FCE_CalculateCRC32+0x2e>
      engine->kernel_ptr->IR = *data;
      data++;
      length -= 4U;
    }

    *result = engine->kernel_ptr->CRC;
 8026cb6:	68fb      	ldr	r3, [r7, #12]
 8026cb8:	681b      	ldr	r3, [r3, #0]
 8026cba:	699a      	ldr	r2, [r3, #24]
 8026cbc:	683b      	ldr	r3, [r7, #0]
 8026cbe:	601a      	str	r2, [r3, #0]
  }
  
  return status;
 8026cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8026cc2:	4618      	mov	r0, r3
 8026cc4:	371c      	adds	r7, #28
 8026cc6:	46bd      	mov	sp, r7
 8026cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ccc:	4770      	bx	lr
 8026cce:	bf00      	nop

08026cd0 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8026cd0:	b480      	push	{r7}
 8026cd2:	b083      	sub	sp, #12
 8026cd4:	af00      	add	r7, sp, #0
 8026cd6:	6078      	str	r0, [r7, #4]
 8026cd8:	460b      	mov	r3, r1
 8026cda:	70fb      	strb	r3, [r7, #3]
 8026cdc:	4613      	mov	r3, r2
 8026cde:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8026ce0:	78fb      	ldrb	r3, [r7, #3]
 8026ce2:	089b      	lsrs	r3, r3, #2
 8026ce4:	b2db      	uxtb	r3, r3
 8026ce6:	4618      	mov	r0, r3
 8026ce8:	78fb      	ldrb	r3, [r7, #3]
 8026cea:	089b      	lsrs	r3, r3, #2
 8026cec:	b2db      	uxtb	r3, r3
 8026cee:	461a      	mov	r2, r3
 8026cf0:	687b      	ldr	r3, [r7, #4]
 8026cf2:	3204      	adds	r2, #4
 8026cf4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026cf8:	78fb      	ldrb	r3, [r7, #3]
 8026cfa:	f003 0303 	and.w	r3, r3, #3
 8026cfe:	00db      	lsls	r3, r3, #3
 8026d00:	4619      	mov	r1, r3
 8026d02:	23f8      	movs	r3, #248	; 0xf8
 8026d04:	408b      	lsls	r3, r1
 8026d06:	43db      	mvns	r3, r3
 8026d08:	ea02 0103 	and.w	r1, r2, r3
 8026d0c:	687b      	ldr	r3, [r7, #4]
 8026d0e:	1d02      	adds	r2, r0, #4
 8026d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8026d14:	78fb      	ldrb	r3, [r7, #3]
 8026d16:	089b      	lsrs	r3, r3, #2
 8026d18:	b2db      	uxtb	r3, r3
 8026d1a:	4618      	mov	r0, r3
 8026d1c:	78fb      	ldrb	r3, [r7, #3]
 8026d1e:	089b      	lsrs	r3, r3, #2
 8026d20:	b2db      	uxtb	r3, r3
 8026d22:	461a      	mov	r2, r3
 8026d24:	687b      	ldr	r3, [r7, #4]
 8026d26:	3204      	adds	r2, #4
 8026d28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026d2c:	78bb      	ldrb	r3, [r7, #2]
 8026d2e:	78f9      	ldrb	r1, [r7, #3]
 8026d30:	f001 0103 	and.w	r1, r1, #3
 8026d34:	00c9      	lsls	r1, r1, #3
 8026d36:	408b      	lsls	r3, r1
 8026d38:	ea42 0103 	orr.w	r1, r2, r3
 8026d3c:	687b      	ldr	r3, [r7, #4]
 8026d3e:	1d02      	adds	r2, r0, #4
 8026d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8026d44:	370c      	adds	r7, #12
 8026d46:	46bd      	mov	sp, r7
 8026d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d4c:	4770      	bx	lr
 8026d4e:	bf00      	nop

08026d50 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8026d50:	b480      	push	{r7}
 8026d52:	b083      	sub	sp, #12
 8026d54:	af00      	add	r7, sp, #0
 8026d56:	6078      	str	r0, [r7, #4]
 8026d58:	460b      	mov	r3, r1
 8026d5a:	70fb      	strb	r3, [r7, #3]
 8026d5c:	4613      	mov	r3, r2
 8026d5e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8026d60:	687b      	ldr	r3, [r7, #4]
 8026d62:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8026d64:	78fb      	ldrb	r3, [r7, #3]
 8026d66:	005b      	lsls	r3, r3, #1
 8026d68:	4619      	mov	r1, r3
 8026d6a:	2303      	movs	r3, #3
 8026d6c:	408b      	lsls	r3, r1
 8026d6e:	43db      	mvns	r3, r3
 8026d70:	401a      	ands	r2, r3
 8026d72:	687b      	ldr	r3, [r7, #4]
 8026d74:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8026d76:	687b      	ldr	r3, [r7, #4]
 8026d78:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8026d7a:	78bb      	ldrb	r3, [r7, #2]
 8026d7c:	78f9      	ldrb	r1, [r7, #3]
 8026d7e:	0049      	lsls	r1, r1, #1
 8026d80:	408b      	lsls	r3, r1
 8026d82:	431a      	orrs	r2, r3
 8026d84:	687b      	ldr	r3, [r7, #4]
 8026d86:	675a      	str	r2, [r3, #116]	; 0x74
}
 8026d88:	370c      	adds	r7, #12
 8026d8a:	46bd      	mov	sp, r7
 8026d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d90:	4770      	bx	lr
 8026d92:	bf00      	nop

08026d94 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8026d94:	b580      	push	{r7, lr}
 8026d96:	b084      	sub	sp, #16
 8026d98:	af00      	add	r7, sp, #0
 8026d9a:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8026d9c:	4b14      	ldr	r3, [pc, #80]	; (8026df0 <_sbrk+0x5c>)
 8026d9e:	681b      	ldr	r3, [r3, #0]
 8026da0:	2b00      	cmp	r3, #0
 8026da2:	d102      	bne.n	8026daa <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8026da4:	4b12      	ldr	r3, [pc, #72]	; (8026df0 <_sbrk+0x5c>)
 8026da6:	4a13      	ldr	r2, [pc, #76]	; (8026df4 <_sbrk+0x60>)
 8026da8:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8026daa:	4b11      	ldr	r3, [pc, #68]	; (8026df0 <_sbrk+0x5c>)
 8026dac:	681b      	ldr	r3, [r3, #0]
 8026dae:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8026db0:	687b      	ldr	r3, [r7, #4]
 8026db2:	3303      	adds	r3, #3
 8026db4:	f023 0303 	bic.w	r3, r3, #3
 8026db8:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8026dba:	4b0d      	ldr	r3, [pc, #52]	; (8026df0 <_sbrk+0x5c>)
 8026dbc:	681a      	ldr	r2, [r3, #0]
 8026dbe:	687b      	ldr	r3, [r7, #4]
 8026dc0:	4413      	add	r3, r2
 8026dc2:	4a0d      	ldr	r2, [pc, #52]	; (8026df8 <_sbrk+0x64>)
 8026dc4:	4293      	cmp	r3, r2
 8026dc6:	d207      	bcs.n	8026dd8 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8026dc8:	4b09      	ldr	r3, [pc, #36]	; (8026df0 <_sbrk+0x5c>)
 8026dca:	681a      	ldr	r2, [r3, #0]
 8026dcc:	687b      	ldr	r3, [r7, #4]
 8026dce:	4413      	add	r3, r2
 8026dd0:	4a07      	ldr	r2, [pc, #28]	; (8026df0 <_sbrk+0x5c>)
 8026dd2:	6013      	str	r3, [r2, #0]
    return (base);
 8026dd4:	68fb      	ldr	r3, [r7, #12]
 8026dd6:	e006      	b.n	8026de6 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8026dd8:	f001 fa08 	bl	80281ec <__errno>
 8026ddc:	4602      	mov	r2, r0
 8026dde:	230c      	movs	r3, #12
 8026de0:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8026de2:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8026de6:	4618      	mov	r0, r3
 8026de8:	3710      	adds	r7, #16
 8026dea:	46bd      	mov	sp, r7
 8026dec:	bd80      	pop	{r7, pc}
 8026dee:	bf00      	nop
 8026df0:	1fff1470 	.word	0x1fff1470
 8026df4:	20000000 	.word	0x20000000
 8026df8:	2000ffc0 	.word	0x2000ffc0

08026dfc <_init>:

/* Init */
void _init(void)
{}
 8026dfc:	b480      	push	{r7}
 8026dfe:	af00      	add	r7, sp, #0
 8026e00:	46bd      	mov	sp, r7
 8026e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e06:	4770      	bx	lr

08026e08 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8026e08:	b480      	push	{r7}
 8026e0a:	b083      	sub	sp, #12
 8026e0c:	af00      	add	r7, sp, #0
 8026e0e:	6078      	str	r0, [r7, #4]
 8026e10:	460b      	mov	r3, r1
 8026e12:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8026e14:	687b      	ldr	r3, [r7, #4]
 8026e16:	68da      	ldr	r2, [r3, #12]
 8026e18:	78fb      	ldrb	r3, [r7, #3]
 8026e1a:	2101      	movs	r1, #1
 8026e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8026e20:	431a      	orrs	r2, r3
 8026e22:	687b      	ldr	r3, [r7, #4]
 8026e24:	60da      	str	r2, [r3, #12]
}
 8026e26:	370c      	adds	r7, #12
 8026e28:	46bd      	mov	sp, r7
 8026e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e2e:	4770      	bx	lr

08026e30 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8026e30:	b480      	push	{r7}
 8026e32:	b083      	sub	sp, #12
 8026e34:	af00      	add	r7, sp, #0
 8026e36:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8026e38:	687b      	ldr	r3, [r7, #4]
 8026e3a:	2201      	movs	r2, #1
 8026e3c:	60da      	str	r2, [r3, #12]
}
 8026e3e:	370c      	adds	r7, #12
 8026e40:	46bd      	mov	sp, r7
 8026e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e46:	4770      	bx	lr

08026e48 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8026e48:	b480      	push	{r7}
 8026e4a:	b083      	sub	sp, #12
 8026e4c:	af00      	add	r7, sp, #0
 8026e4e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR |= (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8026e50:	687b      	ldr	r3, [r7, #4]
 8026e52:	691b      	ldr	r3, [r3, #16]
 8026e54:	f043 0202 	orr.w	r2, r3, #2
 8026e58:	687b      	ldr	r3, [r7, #4]
 8026e5a:	611a      	str	r2, [r3, #16]
}
 8026e5c:	370c      	adds	r7, #12
 8026e5e:	46bd      	mov	sp, r7
 8026e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e64:	4770      	bx	lr
 8026e66:	bf00      	nop

08026e68 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8026e68:	b480      	push	{r7}
 8026e6a:	b083      	sub	sp, #12
 8026e6c:	af00      	add	r7, sp, #0
 8026e6e:	6078      	str	r0, [r7, #4]
 8026e70:	460b      	mov	r3, r1
 8026e72:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8026e74:	887a      	ldrh	r2, [r7, #2]
 8026e76:	687b      	ldr	r3, [r7, #4]
 8026e78:	635a      	str	r2, [r3, #52]	; 0x34
}
 8026e7a:	370c      	adds	r7, #12
 8026e7c:	46bd      	mov	sp, r7
 8026e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e82:	4770      	bx	lr

08026e84 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8026e84:	b480      	push	{r7}
 8026e86:	b083      	sub	sp, #12
 8026e88:	af00      	add	r7, sp, #0
 8026e8a:	6078      	str	r0, [r7, #4]
 8026e8c:	460b      	mov	r3, r1
 8026e8e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8026e90:	887a      	ldrh	r2, [r7, #2]
 8026e92:	687b      	ldr	r3, [r7, #4]
 8026e94:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8026e96:	370c      	adds	r7, #12
 8026e98:	46bd      	mov	sp, r7
 8026e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e9e:	4770      	bx	lr

08026ea0 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8026ea0:	b480      	push	{r7}
 8026ea2:	b083      	sub	sp, #12
 8026ea4:	af00      	add	r7, sp, #0
 8026ea6:	6078      	str	r0, [r7, #4]
 8026ea8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8026eaa:	687b      	ldr	r3, [r7, #4]
 8026eac:	683a      	ldr	r2, [r7, #0]
 8026eae:	611a      	str	r2, [r3, #16]
}
 8026eb0:	370c      	adds	r7, #12
 8026eb2:	46bd      	mov	sp, r7
 8026eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026eb8:	4770      	bx	lr
 8026eba:	bf00      	nop

08026ebc <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8026ebc:	b480      	push	{r7}
 8026ebe:	b083      	sub	sp, #12
 8026ec0:	af00      	add	r7, sp, #0
 8026ec2:	6078      	str	r0, [r7, #4]
 8026ec4:	460b      	mov	r3, r1
 8026ec6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8026ec8:	687b      	ldr	r3, [r7, #4]
 8026eca:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8026ece:	78fb      	ldrb	r3, [r7, #3]
 8026ed0:	2101      	movs	r1, #1
 8026ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8026ed6:	431a      	orrs	r2, r3
 8026ed8:	687b      	ldr	r3, [r7, #4]
 8026eda:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8026ede:	370c      	adds	r7, #12
 8026ee0:	46bd      	mov	sp, r7
 8026ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ee6:	4770      	bx	lr

08026ee8 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8026ee8:	b580      	push	{r7, lr}
 8026eea:	b084      	sub	sp, #16
 8026eec:	af00      	add	r7, sp, #0
 8026eee:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8026ef0:	2300      	movs	r3, #0
 8026ef2:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8026ef4:	687b      	ldr	r3, [r7, #4]
 8026ef6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8026efa:	f083 0301 	eor.w	r3, r3, #1
 8026efe:	b2db      	uxtb	r3, r3
 8026f00:	2b00      	cmp	r3, #0
 8026f02:	d009      	beq.n	8026f18 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8026f04:	687b      	ldr	r3, [r7, #4]
 8026f06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8026f0a:	2b00      	cmp	r3, #0
 8026f0c:	d104      	bne.n	8026f18 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 8026f0e:	6878      	ldr	r0, [r7, #4]
 8026f10:	f000 f826 	bl	8026f60 <TIMER_CCU4_lInit>
 8026f14:	4603      	mov	r3, r0
 8026f16:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8026f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8026f1a:	4618      	mov	r0, r3
 8026f1c:	3710      	adds	r7, #16
 8026f1e:	46bd      	mov	sp, r7
 8026f20:	bd80      	pop	{r7, pc}
 8026f22:	bf00      	nop

08026f24 <TIMER_Start>:

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
 8026f24:	b580      	push	{r7, lr}
 8026f26:	b084      	sub	sp, #16
 8026f28:	af00      	add	r7, sp, #0
 8026f2a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 8026f2c:	687b      	ldr	r3, [r7, #4]
 8026f2e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8026f32:	2b00      	cmp	r3, #0
 8026f34:	d00c      	beq.n	8026f50 <TIMER_Start+0x2c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8026f36:	687b      	ldr	r3, [r7, #4]
 8026f38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8026f3c:	2b00      	cmp	r3, #0
 8026f3e:	d104      	bne.n	8026f4a <TIMER_Start+0x26>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8026f40:	687b      	ldr	r3, [r7, #4]
 8026f42:	695b      	ldr	r3, [r3, #20]
 8026f44:	4618      	mov	r0, r3
 8026f46:	f7ff ff73 	bl	8026e30 <XMC_CCU4_SLICE_StartTimer>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8026f4a:	2300      	movs	r3, #0
 8026f4c:	73fb      	strb	r3, [r7, #15]
 8026f4e:	e001      	b.n	8026f54 <TIMER_Start+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8026f50:	2301      	movs	r3, #1
 8026f52:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8026f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8026f56:	4618      	mov	r0, r3
 8026f58:	3710      	adds	r7, #16
 8026f5a:	46bd      	mov	sp, r7
 8026f5c:	bd80      	pop	{r7, pc}
 8026f5e:	bf00      	nop

08026f60 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8026f60:	b580      	push	{r7, lr}
 8026f62:	b084      	sub	sp, #16
 8026f64:	af00      	add	r7, sp, #0
 8026f66:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8026f68:	687b      	ldr	r3, [r7, #4]
 8026f6a:	691b      	ldr	r3, [r3, #16]
 8026f6c:	4618      	mov	r0, r3
 8026f6e:	f000 f927 	bl	80271c0 <GLOBAL_CCU4_Init>
 8026f72:	4603      	mov	r3, r0
 8026f74:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8026f76:	687b      	ldr	r3, [r7, #4]
 8026f78:	691b      	ldr	r3, [r3, #16]
 8026f7a:	689a      	ldr	r2, [r3, #8]
 8026f7c:	687b      	ldr	r3, [r7, #4]
 8026f7e:	7e1b      	ldrb	r3, [r3, #24]
 8026f80:	4610      	mov	r0, r2
 8026f82:	4619      	mov	r1, r3
 8026f84:	f7ff ff40 	bl	8026e08 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8026f88:	687b      	ldr	r3, [r7, #4]
 8026f8a:	695a      	ldr	r2, [r3, #20]
 8026f8c:	687b      	ldr	r3, [r7, #4]
 8026f8e:	69db      	ldr	r3, [r3, #28]
 8026f90:	4610      	mov	r0, r2
 8026f92:	4619      	mov	r1, r3
 8026f94:	f7ff fcfa 	bl	802698c <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8026f98:	6878      	ldr	r0, [r7, #4]
 8026f9a:	f000 f82d 	bl	8026ff8 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8026f9e:	687b      	ldr	r3, [r7, #4]
 8026fa0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8026fa4:	2b00      	cmp	r3, #0
 8026fa6:	d00f      	beq.n	8026fc8 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8026fa8:	687b      	ldr	r3, [r7, #4]
 8026faa:	695a      	ldr	r2, [r3, #20]
 8026fac:	687b      	ldr	r3, [r7, #4]
 8026fae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8026fb2:	4610      	mov	r0, r2
 8026fb4:	2100      	movs	r1, #0
 8026fb6:	461a      	mov	r2, r3
 8026fb8:	f7ff fd1e 	bl	80269f8 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8026fbc:	687b      	ldr	r3, [r7, #4]
 8026fbe:	695b      	ldr	r3, [r3, #20]
 8026fc0:	4618      	mov	r0, r3
 8026fc2:	2100      	movs	r1, #0
 8026fc4:	f7ff ff7a 	bl	8026ebc <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8026fc8:	687b      	ldr	r3, [r7, #4]
 8026fca:	695b      	ldr	r3, [r3, #20]
 8026fcc:	4618      	mov	r0, r3
 8026fce:	f7ff ff3b 	bl	8026e48 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8026fd2:	687b      	ldr	r3, [r7, #4]
 8026fd4:	2201      	movs	r2, #1
 8026fd6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8026fda:	687b      	ldr	r3, [r7, #4]
 8026fdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8026fe0:	2b00      	cmp	r3, #0
 8026fe2:	d004      	beq.n	8026fee <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8026fe4:	687b      	ldr	r3, [r7, #4]
 8026fe6:	695b      	ldr	r3, [r3, #20]
 8026fe8:	4618      	mov	r0, r3
 8026fea:	f7ff ff21 	bl	8026e30 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 8026fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8026ff0:	4618      	mov	r0, r3
 8026ff2:	3710      	adds	r7, #16
 8026ff4:	46bd      	mov	sp, r7
 8026ff6:	bd80      	pop	{r7, pc}

08026ff8 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8026ff8:	b580      	push	{r7, lr}
 8026ffa:	b082      	sub	sp, #8
 8026ffc:	af00      	add	r7, sp, #0
 8026ffe:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8027000:	687b      	ldr	r3, [r7, #4]
 8027002:	695a      	ldr	r2, [r3, #20]
 8027004:	687b      	ldr	r3, [r7, #4]
 8027006:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8027008:	4610      	mov	r0, r2
 802700a:	4619      	mov	r1, r3
 802700c:	f7ff ff2c 	bl	8026e68 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8027010:	687b      	ldr	r3, [r7, #4]
 8027012:	695b      	ldr	r3, [r3, #20]
 8027014:	4618      	mov	r0, r3
 8027016:	2100      	movs	r1, #0
 8027018:	f7ff ff34 	bl	8026e84 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 802701c:	687b      	ldr	r3, [r7, #4]
 802701e:	691b      	ldr	r3, [r3, #16]
 8027020:	689a      	ldr	r2, [r3, #8]
 8027022:	687b      	ldr	r3, [r7, #4]
 8027024:	68db      	ldr	r3, [r3, #12]
 8027026:	4610      	mov	r0, r2
 8027028:	4619      	mov	r1, r3
 802702a:	f7ff ff39 	bl	8026ea0 <XMC_CCU4_EnableShadowTransfer>
}
 802702e:	3708      	adds	r7, #8
 8027030:	46bd      	mov	sp, r7
 8027032:	bd80      	pop	{r7, pc}

08027034 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8027034:	b480      	push	{r7}
 8027036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8027038:	4b04      	ldr	r3, [pc, #16]	; (802704c <NVIC_GetPriorityGrouping+0x18>)
 802703a:	68db      	ldr	r3, [r3, #12]
 802703c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8027040:	0a1b      	lsrs	r3, r3, #8
}
 8027042:	4618      	mov	r0, r3
 8027044:	46bd      	mov	sp, r7
 8027046:	f85d 7b04 	ldr.w	r7, [sp], #4
 802704a:	4770      	bx	lr
 802704c:	e000ed00 	.word	0xe000ed00

08027050 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8027050:	b480      	push	{r7}
 8027052:	b083      	sub	sp, #12
 8027054:	af00      	add	r7, sp, #0
 8027056:	4603      	mov	r3, r0
 8027058:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 802705a:	4908      	ldr	r1, [pc, #32]	; (802707c <NVIC_EnableIRQ+0x2c>)
 802705c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027060:	095b      	lsrs	r3, r3, #5
 8027062:	79fa      	ldrb	r2, [r7, #7]
 8027064:	f002 021f 	and.w	r2, r2, #31
 8027068:	2001      	movs	r0, #1
 802706a:	fa00 f202 	lsl.w	r2, r0, r2
 802706e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8027072:	370c      	adds	r7, #12
 8027074:	46bd      	mov	sp, r7
 8027076:	f85d 7b04 	ldr.w	r7, [sp], #4
 802707a:	4770      	bx	lr
 802707c:	e000e100 	.word	0xe000e100

08027080 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8027080:	b480      	push	{r7}
 8027082:	b083      	sub	sp, #12
 8027084:	af00      	add	r7, sp, #0
 8027086:	4603      	mov	r3, r0
 8027088:	6039      	str	r1, [r7, #0]
 802708a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 802708c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027090:	2b00      	cmp	r3, #0
 8027092:	da0b      	bge.n	80270ac <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8027094:	490d      	ldr	r1, [pc, #52]	; (80270cc <NVIC_SetPriority+0x4c>)
 8027096:	79fb      	ldrb	r3, [r7, #7]
 8027098:	f003 030f 	and.w	r3, r3, #15
 802709c:	3b04      	subs	r3, #4
 802709e:	683a      	ldr	r2, [r7, #0]
 80270a0:	b2d2      	uxtb	r2, r2
 80270a2:	0092      	lsls	r2, r2, #2
 80270a4:	b2d2      	uxtb	r2, r2
 80270a6:	440b      	add	r3, r1
 80270a8:	761a      	strb	r2, [r3, #24]
 80270aa:	e009      	b.n	80270c0 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80270ac:	4908      	ldr	r1, [pc, #32]	; (80270d0 <NVIC_SetPriority+0x50>)
 80270ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80270b2:	683a      	ldr	r2, [r7, #0]
 80270b4:	b2d2      	uxtb	r2, r2
 80270b6:	0092      	lsls	r2, r2, #2
 80270b8:	b2d2      	uxtb	r2, r2
 80270ba:	440b      	add	r3, r1
 80270bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 80270c0:	370c      	adds	r7, #12
 80270c2:	46bd      	mov	sp, r7
 80270c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270c8:	4770      	bx	lr
 80270ca:	bf00      	nop
 80270cc:	e000ed00 	.word	0xe000ed00
 80270d0:	e000e100 	.word	0xe000e100

080270d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80270d4:	b480      	push	{r7}
 80270d6:	b089      	sub	sp, #36	; 0x24
 80270d8:	af00      	add	r7, sp, #0
 80270da:	60f8      	str	r0, [r7, #12]
 80270dc:	60b9      	str	r1, [r7, #8]
 80270de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80270e0:	68fb      	ldr	r3, [r7, #12]
 80270e2:	f003 0307 	and.w	r3, r3, #7
 80270e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80270e8:	69fb      	ldr	r3, [r7, #28]
 80270ea:	f1c3 0307 	rsb	r3, r3, #7
 80270ee:	2b06      	cmp	r3, #6
 80270f0:	bf28      	it	cs
 80270f2:	2306      	movcs	r3, #6
 80270f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80270f6:	69fb      	ldr	r3, [r7, #28]
 80270f8:	3306      	adds	r3, #6
 80270fa:	2b06      	cmp	r3, #6
 80270fc:	d902      	bls.n	8027104 <NVIC_EncodePriority+0x30>
 80270fe:	69fb      	ldr	r3, [r7, #28]
 8027100:	3b01      	subs	r3, #1
 8027102:	e000      	b.n	8027106 <NVIC_EncodePriority+0x32>
 8027104:	2300      	movs	r3, #0
 8027106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8027108:	69bb      	ldr	r3, [r7, #24]
 802710a:	2201      	movs	r2, #1
 802710c:	fa02 f303 	lsl.w	r3, r2, r3
 8027110:	1e5a      	subs	r2, r3, #1
 8027112:	68bb      	ldr	r3, [r7, #8]
 8027114:	401a      	ands	r2, r3
 8027116:	697b      	ldr	r3, [r7, #20]
 8027118:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802711a:	697b      	ldr	r3, [r7, #20]
 802711c:	2101      	movs	r1, #1
 802711e:	fa01 f303 	lsl.w	r3, r1, r3
 8027122:	1e59      	subs	r1, r3, #1
 8027124:	687b      	ldr	r3, [r7, #4]
 8027126:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8027128:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 802712a:	4618      	mov	r0, r3
 802712c:	3724      	adds	r7, #36	; 0x24
 802712e:	46bd      	mov	sp, r7
 8027130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027134:	4770      	bx	lr
 8027136:	bf00      	nop

08027138 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8027138:	b580      	push	{r7, lr}
 802713a:	b082      	sub	sp, #8
 802713c:	af00      	add	r7, sp, #0
 802713e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8027140:	687b      	ldr	r3, [r7, #4]
 8027142:	781b      	ldrb	r3, [r3, #0]
 8027144:	b25b      	sxtb	r3, r3
 8027146:	4618      	mov	r0, r3
 8027148:	f7ff ff82 	bl	8027050 <NVIC_EnableIRQ>
}
 802714c:	3708      	adds	r7, #8
 802714e:	46bd      	mov	sp, r7
 8027150:	bd80      	pop	{r7, pc}
 8027152:	bf00      	nop

08027154 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8027154:	b590      	push	{r4, r7, lr}
 8027156:	b083      	sub	sp, #12
 8027158:	af00      	add	r7, sp, #0
 802715a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 802715c:	687b      	ldr	r3, [r7, #4]
 802715e:	781c      	ldrb	r4, [r3, #0]
 8027160:	f7ff ff68 	bl	8027034 <NVIC_GetPriorityGrouping>
 8027164:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8027166:	687b      	ldr	r3, [r7, #4]
 8027168:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 802716a:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 802716c:	687b      	ldr	r3, [r7, #4]
 802716e:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8027170:	4608      	mov	r0, r1
 8027172:	4611      	mov	r1, r2
 8027174:	461a      	mov	r2, r3
 8027176:	f7ff ffad 	bl	80270d4 <NVIC_EncodePriority>
 802717a:	4602      	mov	r2, r0
 802717c:	b263      	sxtb	r3, r4
 802717e:	4618      	mov	r0, r3
 8027180:	4611      	mov	r1, r2
 8027182:	f7ff ff7d 	bl	8027080 <NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8027186:	687b      	ldr	r3, [r7, #4]
 8027188:	78db      	ldrb	r3, [r3, #3]
 802718a:	2b00      	cmp	r3, #0
 802718c:	d002      	beq.n	8027194 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 802718e:	6878      	ldr	r0, [r7, #4]
 8027190:	f7ff ffd2 	bl	8027138 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8027194:	2300      	movs	r3, #0
}
 8027196:	4618      	mov	r0, r3
 8027198:	370c      	adds	r7, #12
 802719a:	46bd      	mov	sp, r7
 802719c:	bd90      	pop	{r4, r7, pc}
 802719e:	bf00      	nop

080271a0 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80271a0:	b480      	push	{r7}
 80271a2:	b083      	sub	sp, #12
 80271a4:	af00      	add	r7, sp, #0
 80271a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80271a8:	687b      	ldr	r3, [r7, #4]
 80271aa:	68db      	ldr	r3, [r3, #12]
 80271ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80271b0:	687b      	ldr	r3, [r7, #4]
 80271b2:	60da      	str	r2, [r3, #12]
}
 80271b4:	370c      	adds	r7, #12
 80271b6:	46bd      	mov	sp, r7
 80271b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80271bc:	4770      	bx	lr
 80271be:	bf00      	nop

080271c0 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 80271c0:	b580      	push	{r7, lr}
 80271c2:	b082      	sub	sp, #8
 80271c4:	af00      	add	r7, sp, #0
 80271c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80271c8:	687b      	ldr	r3, [r7, #4]
 80271ca:	7b5b      	ldrb	r3, [r3, #13]
 80271cc:	f083 0301 	eor.w	r3, r3, #1
 80271d0:	b2db      	uxtb	r3, r3
 80271d2:	2b00      	cmp	r3, #0
 80271d4:	d00f      	beq.n	80271f6 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 80271d6:	687b      	ldr	r3, [r7, #4]
 80271d8:	689a      	ldr	r2, [r3, #8]
 80271da:	687b      	ldr	r3, [r7, #4]
 80271dc:	7b1b      	ldrb	r3, [r3, #12]
 80271de:	4610      	mov	r0, r2
 80271e0:	4619      	mov	r1, r3
 80271e2:	f7ff fbb5 	bl	8026950 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 80271e6:	687b      	ldr	r3, [r7, #4]
 80271e8:	689b      	ldr	r3, [r3, #8]
 80271ea:	4618      	mov	r0, r3
 80271ec:	f7ff ffd8 	bl	80271a0 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80271f0:	687b      	ldr	r3, [r7, #4]
 80271f2:	2201      	movs	r2, #1
 80271f4:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 80271f6:	2300      	movs	r3, #0
}
 80271f8:	4618      	mov	r0, r3
 80271fa:	3708      	adds	r7, #8
 80271fc:	46bd      	mov	sp, r7
 80271fe:	bd80      	pop	{r7, pc}

08027200 <XMC_FLASH_SetMargin>:
 *
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_SetMargin(const XMC_FLASH_MARGIN_t margin)
{
 8027200:	b480      	push	{r7}
 8027202:	b083      	sub	sp, #12
 8027204:	af00      	add	r7, sp, #0
 8027206:	4603      	mov	r3, r0
 8027208:	71fb      	strb	r3, [r7, #7]
  FLASH0->MARP = (FLASH0->MARP & (uint32_t)~FLASH_MARP_MARGIN_Msk) | margin;
 802720a:	4909      	ldr	r1, [pc, #36]	; (8027230 <XMC_FLASH_SetMargin+0x30>)
 802720c:	4b08      	ldr	r3, [pc, #32]	; (8027230 <XMC_FLASH_SetMargin+0x30>)
 802720e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8027212:	3318      	adds	r3, #24
 8027214:	681b      	ldr	r3, [r3, #0]
 8027216:	f023 020f 	bic.w	r2, r3, #15
 802721a:	79fb      	ldrb	r3, [r7, #7]
 802721c:	431a      	orrs	r2, r3
 802721e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8027222:	3318      	adds	r3, #24
 8027224:	601a      	str	r2, [r3, #0]
}
 8027226:	370c      	adds	r7, #12
 8027228:	46bd      	mov	sp, r7
 802722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802722e:	4770      	bx	lr
 8027230:	58001000 	.word	0x58001000

08027234 <XMC_FLASH_EnableDoubleBitErrorTrap>:
 *
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_EnableDoubleBitErrorTrap(void)
{
 8027234:	b480      	push	{r7}
 8027236:	af00      	add	r7, sp, #0
  FLASH0->MARP &= (uint32_t)~FLASH_MARP_TRAPDIS_Msk;
 8027238:	4907      	ldr	r1, [pc, #28]	; (8027258 <XMC_FLASH_EnableDoubleBitErrorTrap+0x24>)
 802723a:	4b07      	ldr	r3, [pc, #28]	; (8027258 <XMC_FLASH_EnableDoubleBitErrorTrap+0x24>)
 802723c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8027240:	3318      	adds	r3, #24
 8027242:	681b      	ldr	r3, [r3, #0]
 8027244:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8027248:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 802724c:	3318      	adds	r3, #24
 802724e:	601a      	str	r2, [r3, #0]
}
 8027250:	46bd      	mov	sp, r7
 8027252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027256:	4770      	bx	lr
 8027258:	58001000 	.word	0x58001000

0802725c <XMC_FLASH_DisableDoubleBitErrorTrap>:
 *
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_DisableDoubleBitErrorTrap(void)
{
 802725c:	b480      	push	{r7}
 802725e:	af00      	add	r7, sp, #0
  FLASH0->MARP |= FLASH_MARP_TRAPDIS_Msk;
 8027260:	4907      	ldr	r1, [pc, #28]	; (8027280 <XMC_FLASH_DisableDoubleBitErrorTrap+0x24>)
 8027262:	4b07      	ldr	r3, [pc, #28]	; (8027280 <XMC_FLASH_DisableDoubleBitErrorTrap+0x24>)
 8027264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8027268:	3318      	adds	r3, #24
 802726a:	681b      	ldr	r3, [r3, #0]
 802726c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8027270:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8027274:	3318      	adds	r3, #24
 8027276:	601a      	str	r2, [r3, #0]
}
 8027278:	46bd      	mov	sp, r7
 802727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802727e:	4770      	bx	lr
 8027280:	58001000 	.word	0x58001000

08027284 <XMC_FCE_InitializeSeedValue>:
 *
 * \par
 * The function sets the initial CRC (seed) value in the CRC register.
 */
__STATIC_INLINE void XMC_FCE_InitializeSeedValue(const XMC_FCE_t *const engine, uint32_t seedvalue)
{
 8027284:	b480      	push	{r7}
 8027286:	b083      	sub	sp, #12
 8027288:	af00      	add	r7, sp, #0
 802728a:	6078      	str	r0, [r7, #4]
 802728c:	6039      	str	r1, [r7, #0]
  engine->kernel_ptr->CRC = seedvalue;
 802728e:	687b      	ldr	r3, [r7, #4]
 8027290:	681b      	ldr	r3, [r3, #0]
 8027292:	683a      	ldr	r2, [r7, #0]
 8027294:	619a      	str	r2, [r3, #24]
}
 8027296:	370c      	adds	r7, #12
 8027298:	46bd      	mov	sp, r7
 802729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802729e:	4770      	bx	lr

080272a0 <E_EEPROM_XMC4_Init>:

  return (version);
}

E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_Init(E_EEPROM_XMC4_t *const handle)
{
 80272a0:	b580      	push	{r7, lr}
 80272a2:	b084      	sub	sp, #16
 80272a4:	af00      	add	r7, sp, #0
 80272a6:	6078      	str	r0, [r7, #4]
  uint32_t sector_count;
  E_EEPROM_XMC4_STATUS_t status ;

  XMC_ASSERT("E_EEPROM_XMC4_Init:Invalid handle Pointer", (handle != NULL))

  status = E_EEPROM_XMC4_STATUS_OK;
 80272a8:	2300      	movs	r3, #0
 80272aa:	72fb      	strb	r3, [r7, #11]
  
  if (handle->initialized == (bool)false)
 80272ac:	687b      	ldr	r3, [r7, #4]
 80272ae:	781b      	ldrb	r3, [r3, #0]
 80272b0:	f083 0301 	eor.w	r3, r3, #1
 80272b4:	b2db      	uxtb	r3, r3
 80272b6:	2b00      	cmp	r3, #0
 80272b8:	d04c      	beq.n	8027354 <E_EEPROM_XMC4_Init+0xb4>
  {
    e_eeprom_xmc4_data_buffer.block_cycle_count = 0U;
 80272ba:	4b29      	ldr	r3, [pc, #164]	; (8027360 <E_EEPROM_XMC4_Init+0xc0>)
 80272bc:	2200      	movs	r2, #0
 80272be:	605a      	str	r2, [r3, #4]
    e_eeprom_xmc4_sector_info.flash_data_addr = E_EEPROM_XMC4_EMPTY;
 80272c0:	4b28      	ldr	r3, [pc, #160]	; (8027364 <E_EEPROM_XMC4_Init+0xc4>)
 80272c2:	2200      	movs	r2, #0
 80272c4:	605a      	str	r2, [r3, #4]
  
    XMC_FLASH_SetMargin(XMC_FLASH_MARGIN_TIGHT0);
 80272c6:	2001      	movs	r0, #1
 80272c8:	f7ff ff9a 	bl	8027200 <XMC_FLASH_SetMargin>
    XMC_FLASH_DisableDoubleBitErrorTrap();
 80272cc:	f7ff ffc6 	bl	802725c <XMC_FLASH_DisableDoubleBitErrorTrap>
  
    XMC_FCE_Enable();
 80272d0:	f7ff fcb8 	bl	8026c44 <XMC_FCE_Enable>

    /* Initialize FCE module for Hardware calculations */
    (void)XMC_FCE_Init(&e_eeprom_xmc4_fce);
 80272d4:	4824      	ldr	r0, [pc, #144]	; (8027368 <E_EEPROM_XMC4_Init+0xc8>)
 80272d6:	f7ff fc9f 	bl	8026c18 <XMC_FCE_Init>
  
    /* Iterate all 4 sectors to find out which is the active sector having the latest data block*/
    for (sector_count = 0U; sector_count < E_EEPROM_XMC4_MAX_SECTORS ; sector_count++)
 80272da:	2300      	movs	r3, #0
 80272dc:	60fb      	str	r3, [r7, #12]
 80272de:	e005      	b.n	80272ec <E_EEPROM_XMC4_Init+0x4c>
    {
      E_EEPROM_XMC4_lInitReadSectorInfo(sector_count);
 80272e0:	68f8      	ldr	r0, [r7, #12]
 80272e2:	f000 f935 	bl	8027550 <E_EEPROM_XMC4_lInitReadSectorInfo>

    /* Initialize FCE module for Hardware calculations */
    (void)XMC_FCE_Init(&e_eeprom_xmc4_fce);
  
    /* Iterate all 4 sectors to find out which is the active sector having the latest data block*/
    for (sector_count = 0U; sector_count < E_EEPROM_XMC4_MAX_SECTORS ; sector_count++)
 80272e6:	68fb      	ldr	r3, [r7, #12]
 80272e8:	3301      	adds	r3, #1
 80272ea:	60fb      	str	r3, [r7, #12]
 80272ec:	68fb      	ldr	r3, [r7, #12]
 80272ee:	2b03      	cmp	r3, #3
 80272f0:	d9f6      	bls.n	80272e0 <E_EEPROM_XMC4_Init+0x40>
    {
      E_EEPROM_XMC4_lInitReadSectorInfo(sector_count);
    }  
  
    XMC_FLASH_SetMargin(XMC_FLASH_MARGIN_DEFAULT);
 80272f2:	2000      	movs	r0, #0
 80272f4:	f7ff ff84 	bl	8027200 <XMC_FLASH_SetMargin>
  
    /* Implement the OVER ERASE CHECK code here and return the status*/
  
    /* If Read was successful*/
    if (status == E_EEPROM_XMC4_STATUS_OK)
 80272f8:	7afb      	ldrb	r3, [r7, #11]
 80272fa:	2b00      	cmp	r3, #0
 80272fc:	d125      	bne.n	802734a <E_EEPROM_XMC4_Init+0xaa>
    {
      /* Execute erase state machine to free up the unwanted sectors and keep
       * only the sector which has latest valid block. If no valid block found then all sectors are emptied.
       */
      status = E_EEPROM_XMC4_lInitEraseStateMachine();
 80272fe:	f000 f97d 	bl	80275fc <E_EEPROM_XMC4_lInitEraseStateMachine>
 8027302:	4603      	mov	r3, r0
 8027304:	72fb      	strb	r3, [r7, #11]
  
      /* If erase operations were successful, continue block data updates to RAM buffer */
      if (status == E_EEPROM_XMC4_STATUS_OK)
 8027306:	7afb      	ldrb	r3, [r7, #11]
 8027308:	2b00      	cmp	r3, #0
 802730a:	d11e      	bne.n	802734a <E_EEPROM_XMC4_Init+0xaa>
      {
  
        /* If a valid latest block were not detected, we shall assume that all sectors may be empty.
         * Then make Sector-0 as current sector and next free address as Sector0 start address
         */
        if (e_eeprom_xmc4_sector_info.flash_data_addr == E_EEPROM_XMC4_EMPTY)
 802730c:	4b15      	ldr	r3, [pc, #84]	; (8027364 <E_EEPROM_XMC4_Init+0xc4>)
 802730e:	685b      	ldr	r3, [r3, #4]
 8027310:	2b00      	cmp	r3, #0
 8027312:	d106      	bne.n	8027322 <E_EEPROM_XMC4_Init+0x82>
        {
          e_eeprom_xmc4_sector_info.current_sector = E_EEPROM_XMC4_SECTOR_0;
 8027314:	4b13      	ldr	r3, [pc, #76]	; (8027364 <E_EEPROM_XMC4_Init+0xc4>)
 8027316:	2200      	movs	r2, #0
 8027318:	609a      	str	r2, [r3, #8]
          e_eeprom_xmc4_sector_info.next_free_start_addr =  E_EEPROM_XMC4_SECTOR0_START_ADDR;
 802731a:	4b12      	ldr	r3, [pc, #72]	; (8027364 <E_EEPROM_XMC4_Init+0xc4>)
 802731c:	4a13      	ldr	r2, [pc, #76]	; (802736c <E_EEPROM_XMC4_Init+0xcc>)
 802731e:	601a      	str	r2, [r3, #0]
 8027320:	e013      	b.n	802734a <E_EEPROM_XMC4_Init+0xaa>
        }
        else
        {
          /* If a valid latest block was detected, copy the valid block from flash to RAM. */
          E_EEPROM_XMC4_lCopyFlashToRam();
 8027322:	f000 f9c3 	bl	80276ac <E_EEPROM_XMC4_lCopyFlashToRam>
  
          if ((e_eeprom_xmc4_sector_info.next_free_start_addr - e_eeprom_xmc4_sector_info.flash_data_addr) !=
 8027326:	4b0f      	ldr	r3, [pc, #60]	; (8027364 <E_EEPROM_XMC4_Init+0xc4>)
 8027328:	681a      	ldr	r2, [r3, #0]
 802732a:	4b0e      	ldr	r3, [pc, #56]	; (8027364 <E_EEPROM_XMC4_Init+0xc4>)
 802732c:	685b      	ldr	r3, [r3, #4]
 802732e:	1ad3      	subs	r3, r2, r3
 8027330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8027334:	d001      	beq.n	802733a <E_EEPROM_XMC4_Init+0x9a>
              E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE)
          {
            status = E_EEPROM_XMC4_STATUS_ERROR_OLD_DATA;
 8027336:	2301      	movs	r3, #1
 8027338:	72fb      	strb	r3, [r7, #11]
          }
  
          if (e_eeprom_xmc4_sector_info.next_free_start_addr >= E_EEPROM_XMC4_SECTOR4_START_ADDR)
 802733a:	4b0a      	ldr	r3, [pc, #40]	; (8027364 <E_EEPROM_XMC4_Init+0xc4>)
 802733c:	681b      	ldr	r3, [r3, #0]
 802733e:	4a0c      	ldr	r2, [pc, #48]	; (8027370 <E_EEPROM_XMC4_Init+0xd0>)
 8027340:	4293      	cmp	r3, r2
 8027342:	d902      	bls.n	802734a <E_EEPROM_XMC4_Init+0xaa>
          {
            e_eeprom_xmc4_sector_info.next_free_start_addr =  E_EEPROM_XMC4_SECTOR0_START_ADDR;
 8027344:	4b07      	ldr	r3, [pc, #28]	; (8027364 <E_EEPROM_XMC4_Init+0xc4>)
 8027346:	4a09      	ldr	r2, [pc, #36]	; (802736c <E_EEPROM_XMC4_Init+0xcc>)
 8027348:	601a      	str	r2, [r3, #0]
  
        }
      }
    }

    XMC_FLASH_EnableDoubleBitErrorTrap();
 802734a:	f7ff ff73 	bl	8027234 <XMC_FLASH_EnableDoubleBitErrorTrap>

    handle->initialized = (bool)true;
 802734e:	687b      	ldr	r3, [r7, #4]
 8027350:	2201      	movs	r2, #1
 8027352:	701a      	strb	r2, [r3, #0]
  }

  return (status);
 8027354:	7afb      	ldrb	r3, [r7, #11]
}
 8027356:	4618      	mov	r0, r3
 8027358:	3710      	adds	r7, #16
 802735a:	46bd      	mov	sp, r7
 802735c:	bd80      	pop	{r7, pc}
 802735e:	bf00      	nop
 8027360:	1fff1474 	.word	0x1fff1474
 8027364:	1fff13b0 	.word	0x1fff13b0
 8027368:	08028a58 	.word	0x08028a58
 802736c:	0c010000 	.word	0x0c010000
 8027370:	0c01ffff 	.word	0x0c01ffff

08027374 <E_EEPROM_XMC4_WriteArray>:



/* Update a set of bytes to RAM buffer*/
void E_EEPROM_XMC4_WriteArray(const uint16_t offset_address, const uint8_t *const data, const uint16_t length)
{
 8027374:	b480      	push	{r7}
 8027376:	b085      	sub	sp, #20
 8027378:	af00      	add	r7, sp, #0
 802737a:	4603      	mov	r3, r0
 802737c:	6039      	str	r1, [r7, #0]
 802737e:	80fb      	strh	r3, [r7, #6]
 8027380:	4613      	mov	r3, r2
 8027382:	80bb      	strh	r3, [r7, #4]

  XMC_ASSERT("E_EEPROM_XMC4_WriteArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))
  XMC_ASSERT("E_EEPROM_XMC4_WriteArray: Wrong length",
                                                    ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))

  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;
 8027384:	88fb      	ldrh	r3, [r7, #6]
 8027386:	3308      	adds	r3, #8
 8027388:	4a0c      	ldr	r2, [pc, #48]	; (80273bc <E_EEPROM_XMC4_WriteArray+0x48>)
 802738a:	4413      	add	r3, r2
 802738c:	60bb      	str	r3, [r7, #8]

  for (i = 0U; i < length; i++)
 802738e:	2300      	movs	r3, #0
 8027390:	81fb      	strh	r3, [r7, #14]
 8027392:	e00a      	b.n	80273aa <E_EEPROM_XMC4_WriteArray+0x36>
  {
    *(address_ptr + i) = *(data + i);
 8027394:	89fb      	ldrh	r3, [r7, #14]
 8027396:	68ba      	ldr	r2, [r7, #8]
 8027398:	4413      	add	r3, r2
 802739a:	89fa      	ldrh	r2, [r7, #14]
 802739c:	6839      	ldr	r1, [r7, #0]
 802739e:	440a      	add	r2, r1
 80273a0:	7812      	ldrb	r2, [r2, #0]
 80273a2:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("E_EEPROM_XMC4_WriteArray: Wrong length",
                                                    ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))

  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;

  for (i = 0U; i < length; i++)
 80273a4:	89fb      	ldrh	r3, [r7, #14]
 80273a6:	3301      	adds	r3, #1
 80273a8:	81fb      	strh	r3, [r7, #14]
 80273aa:	89fa      	ldrh	r2, [r7, #14]
 80273ac:	88bb      	ldrh	r3, [r7, #4]
 80273ae:	429a      	cmp	r2, r3
 80273b0:	d3f0      	bcc.n	8027394 <E_EEPROM_XMC4_WriteArray+0x20>
  {
    *(address_ptr + i) = *(data + i);
  }
}
 80273b2:	3714      	adds	r7, #20
 80273b4:	46bd      	mov	sp, r7
 80273b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80273ba:	4770      	bx	lr
 80273bc:	1fff1474 	.word	0x1fff1474

080273c0 <E_EEPROM_XMC4_ReadArray>:



/* Read a set of bytes from RAM Buffer */
void E_EEPROM_XMC4_ReadArray(const uint16_t offset_address, uint8_t *const data, const uint16_t length)
{
 80273c0:	b480      	push	{r7}
 80273c2:	b085      	sub	sp, #20
 80273c4:	af00      	add	r7, sp, #0
 80273c6:	4603      	mov	r3, r0
 80273c8:	6039      	str	r1, [r7, #0]
 80273ca:	80fb      	strh	r3, [r7, #6]
 80273cc:	4613      	mov	r3, r2
 80273ce:	80bb      	strh	r3, [r7, #4]
  uint16_t i;
  uint8_t  *address_ptr;
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong length",
                                                    ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))
  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;
 80273d0:	88fb      	ldrh	r3, [r7, #6]
 80273d2:	3308      	adds	r3, #8
 80273d4:	4a0c      	ldr	r2, [pc, #48]	; (8027408 <E_EEPROM_XMC4_ReadArray+0x48>)
 80273d6:	4413      	add	r3, r2
 80273d8:	60bb      	str	r3, [r7, #8]

  for (i=0U; i<length; i++)
 80273da:	2300      	movs	r3, #0
 80273dc:	81fb      	strh	r3, [r7, #14]
 80273de:	e00a      	b.n	80273f6 <E_EEPROM_XMC4_ReadArray+0x36>
  {
    *(data + i) = *(address_ptr + i);
 80273e0:	89fb      	ldrh	r3, [r7, #14]
 80273e2:	683a      	ldr	r2, [r7, #0]
 80273e4:	4413      	add	r3, r2
 80273e6:	89fa      	ldrh	r2, [r7, #14]
 80273e8:	68b9      	ldr	r1, [r7, #8]
 80273ea:	440a      	add	r2, r1
 80273ec:	7812      	ldrb	r2, [r2, #0]
 80273ee:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong length",
                                                    ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))
  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;

  for (i=0U; i<length; i++)
 80273f0:	89fb      	ldrh	r3, [r7, #14]
 80273f2:	3301      	adds	r3, #1
 80273f4:	81fb      	strh	r3, [r7, #14]
 80273f6:	89fa      	ldrh	r2, [r7, #14]
 80273f8:	88bb      	ldrh	r3, [r7, #4]
 80273fa:	429a      	cmp	r2, r3
 80273fc:	d3f0      	bcc.n	80273e0 <E_EEPROM_XMC4_ReadArray+0x20>
  {
    *(data + i) = *(address_ptr + i);
  }
}
 80273fe:	3714      	adds	r7, #20
 8027400:	46bd      	mov	sp, r7
 8027402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027406:	4770      	bx	lr
 8027408:	1fff1474 	.word	0x1fff1474

0802740c <E_EEPROM_XMC4_UpdateFlashContents>:



/* Copy data blocks from RAM to FLASH */
E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_UpdateFlashContents(void)
{
 802740c:	b580      	push	{r7, lr}
 802740e:	b082      	sub	sp, #8
 8027410:	af00      	add	r7, sp, #0
  E_EEPROM_XMC4_STATUS_t status;
  uint32_t sector_start_addr;

  status = E_EEPROM_XMC4_STATUS_OK;
 8027412:	2300      	movs	r3, #0
 8027414:	71fb      	strb	r3, [r7, #7]

  /* Calculate the starting address of the active sector from where the first write started for the current cycle*/
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR +
                     (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);
 8027416:	4b22      	ldr	r3, [pc, #136]	; (80274a0 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8027418:	689b      	ldr	r3, [r3, #8]
  uint32_t sector_start_addr;

  status = E_EEPROM_XMC4_STATUS_OK;

  /* Calculate the starting address of the active sector from where the first write started for the current cycle*/
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR +
 802741a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802741e:	3304      	adds	r3, #4
 8027420:	039b      	lsls	r3, r3, #14
 8027422:	603b      	str	r3, [r7, #0]
                     (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);

  /* If the next free address crosses current active sector starting address, then all the sectors are fully written*/
  if ((e_eeprom_xmc4_sector_info.next_free_start_addr == sector_start_addr) &&
 8027424:	4b1e      	ldr	r3, [pc, #120]	; (80274a0 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8027426:	681a      	ldr	r2, [r3, #0]
 8027428:	683b      	ldr	r3, [r7, #0]
 802742a:	429a      	cmp	r2, r3
 802742c:	d111      	bne.n	8027452 <E_EEPROM_XMC4_UpdateFlashContents+0x46>
     (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
 802742e:	4b1d      	ldr	r3, [pc, #116]	; (80274a4 <E_EEPROM_XMC4_UpdateFlashContents+0x98>)
 8027430:	685b      	ldr	r3, [r3, #4]
  /* Calculate the starting address of the active sector from where the first write started for the current cycle*/
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR +
                     (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);

  /* If the next free address crosses current active sector starting address, then all the sectors are fully written*/
  if ((e_eeprom_xmc4_sector_info.next_free_start_addr == sector_start_addr) &&
 8027432:	2b00      	cmp	r3, #0
 8027434:	d00d      	beq.n	8027452 <E_EEPROM_XMC4_UpdateFlashContents+0x46>
     (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
  {
    /* Update the current sector to the latest sector on which the last write was executed. */
    e_eeprom_xmc4_sector_info.current_sector =  ((e_eeprom_xmc4_sector_info.flash_data_addr &
 8027436:	4b1a      	ldr	r3, [pc, #104]	; (80274a0 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8027438:	685b      	ldr	r3, [r3, #4]
 802743a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
                                                E_EEPROM_XMC4_SECTOR_POSITION_MASK) >>
 802743e:	0b9b      	lsrs	r3, r3, #14
  /* If the next free address crosses current active sector starting address, then all the sectors are fully written*/
  if ((e_eeprom_xmc4_sector_info.next_free_start_addr == sector_start_addr) &&
     (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
  {
    /* Update the current sector to the latest sector on which the last write was executed. */
    e_eeprom_xmc4_sector_info.current_sector =  ((e_eeprom_xmc4_sector_info.flash_data_addr &
 8027440:	4a17      	ldr	r2, [pc, #92]	; (80274a0 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8027442:	6093      	str	r3, [r2, #8]
                                                E_EEPROM_XMC4_SECTOR_POSITION_MASK) >>
                                                E_EEPROM_XMC4_SECTOR_POSITION);

    /* Mark all the sectors as filled with data */
    e_eeprom_xmc4_sector_info.erase_state = E_EEPROM_XMC4_ALL_SECTORS_FILLED ;
 8027444:	4b16      	ldr	r3, [pc, #88]	; (80274a0 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8027446:	220f      	movs	r2, #15
 8027448:	60da      	str	r2, [r3, #12]

    /* Execute erase state machine to free up the unwanted sectors and keep only the sector which has latest block*/
    status = E_EEPROM_XMC4_lInitEraseStateMachine();
 802744a:	f000 f8d7 	bl	80275fc <E_EEPROM_XMC4_lInitEraseStateMachine>
 802744e:	4603      	mov	r3, r0
 8027450:	71fb      	strb	r3, [r7, #7]
  }

  if (status ==  E_EEPROM_XMC4_STATUS_OK)
 8027452:	79fb      	ldrb	r3, [r7, #7]
 8027454:	2b00      	cmp	r3, #0
 8027456:	d11d      	bne.n	8027494 <E_EEPROM_XMC4_UpdateFlashContents+0x88>
  {
    e_eeprom_xmc4_data_buffer.block_cycle_count++;
 8027458:	4b12      	ldr	r3, [pc, #72]	; (80274a4 <E_EEPROM_XMC4_UpdateFlashContents+0x98>)
 802745a:	685b      	ldr	r3, [r3, #4]
 802745c:	3301      	adds	r3, #1
 802745e:	4a11      	ldr	r2, [pc, #68]	; (80274a4 <E_EEPROM_XMC4_UpdateFlashContents+0x98>)
 8027460:	6053      	str	r3, [r2, #4]

    status = E_EEPROM_XMC4_lWriteToFlash();
 8027462:	f000 f839 	bl	80274d8 <E_EEPROM_XMC4_lWriteToFlash>
 8027466:	4603      	mov	r3, r0
 8027468:	71fb      	strb	r3, [r7, #7]

    /* If the flash write succeeds, update the latest flash data location in RAM for reference */
    if (status == E_EEPROM_XMC4_STATUS_OK)
 802746a:	79fb      	ldrb	r3, [r7, #7]
 802746c:	2b00      	cmp	r3, #0
 802746e:	d103      	bne.n	8027478 <E_EEPROM_XMC4_UpdateFlashContents+0x6c>
    {
      e_eeprom_xmc4_sector_info.flash_data_addr = e_eeprom_xmc4_sector_info.next_free_start_addr;
 8027470:	4b0b      	ldr	r3, [pc, #44]	; (80274a0 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8027472:	681b      	ldr	r3, [r3, #0]
 8027474:	4a0a      	ldr	r2, [pc, #40]	; (80274a0 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8027476:	6053      	str	r3, [r2, #4]
    }

    /* Update the next free address to write the new data block*/
    e_eeprom_xmc4_sector_info.next_free_start_addr += E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 8027478:	4b09      	ldr	r3, [pc, #36]	; (80274a0 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 802747a:	681b      	ldr	r3, [r3, #0]
 802747c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8027480:	4a07      	ldr	r2, [pc, #28]	; (80274a0 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8027482:	6013      	str	r3, [r2, #0]

    /* If the next free address crosses 3rd sector end address relocate the address to 0th sector starting address*/
    if (e_eeprom_xmc4_sector_info.next_free_start_addr >= E_EEPROM_XMC4_SECTOR4_START_ADDR)
 8027484:	4b06      	ldr	r3, [pc, #24]	; (80274a0 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8027486:	681b      	ldr	r3, [r3, #0]
 8027488:	4a07      	ldr	r2, [pc, #28]	; (80274a8 <E_EEPROM_XMC4_UpdateFlashContents+0x9c>)
 802748a:	4293      	cmp	r3, r2
 802748c:	d902      	bls.n	8027494 <E_EEPROM_XMC4_UpdateFlashContents+0x88>
    {
      e_eeprom_xmc4_sector_info.next_free_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR;
 802748e:	4b04      	ldr	r3, [pc, #16]	; (80274a0 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8027490:	4a06      	ldr	r2, [pc, #24]	; (80274ac <E_EEPROM_XMC4_UpdateFlashContents+0xa0>)
 8027492:	601a      	str	r2, [r3, #0]
    }
  }

  return (status);
 8027494:	79fb      	ldrb	r3, [r7, #7]
}
 8027496:	4618      	mov	r0, r3
 8027498:	3708      	adds	r7, #8
 802749a:	46bd      	mov	sp, r7
 802749c:	bd80      	pop	{r7, pc}
 802749e:	bf00      	nop
 80274a0:	1fff13b0 	.word	0x1fff13b0
 80274a4:	1fff1474 	.word	0x1fff1474
 80274a8:	0c01ffff 	.word	0x0c01ffff
 80274ac:	0c010000 	.word	0x0c010000

080274b0 <E_EEPROM_XMC4_IsFlashEmpty>:


/* Check the availability data in the flash emulated EEPROM area */
bool E_EEPROM_XMC4_IsFlashEmpty(void)
{
 80274b0:	b480      	push	{r7}
 80274b2:	b083      	sub	sp, #12
 80274b4:	af00      	add	r7, sp, #0
  bool status = false;
 80274b6:	2300      	movs	r3, #0
 80274b8:	71fb      	strb	r3, [r7, #7]

  /* If data available flash_data_addr will have a valid address*/
  if (e_eeprom_xmc4_sector_info.flash_data_addr == 0U)
 80274ba:	4b06      	ldr	r3, [pc, #24]	; (80274d4 <E_EEPROM_XMC4_IsFlashEmpty+0x24>)
 80274bc:	685b      	ldr	r3, [r3, #4]
 80274be:	2b00      	cmp	r3, #0
 80274c0:	d101      	bne.n	80274c6 <E_EEPROM_XMC4_IsFlashEmpty+0x16>
  {
    status = true;
 80274c2:	2301      	movs	r3, #1
 80274c4:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 80274c6:	79fb      	ldrb	r3, [r7, #7]
}
 80274c8:	4618      	mov	r0, r3
 80274ca:	370c      	adds	r7, #12
 80274cc:	46bd      	mov	sp, r7
 80274ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80274d2:	4770      	bx	lr
 80274d4:	1fff13b0 	.word	0x1fff13b0

080274d8 <E_EEPROM_XMC4_lWriteToFlash>:
 * LOCAL ROUTINES
 ********************************************************************************************************************/

/* Local function to program data blocks from RAM into FLASH */
static E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_lWriteToFlash(void)
{
 80274d8:	b580      	push	{r7, lr}
 80274da:	b084      	sub	sp, #16
 80274dc:	af00      	add	r7, sp, #0
  uint32_t *flash_addr_ptr;
  uint32_t *ram_addr_ptr;
  uint32_t  page_index;
  E_EEPROM_XMC4_STATUS_t status;

  status = E_EEPROM_XMC4_STATUS_OK;
 80274de:	2300      	movs	r3, #0
 80274e0:	70fb      	strb	r3, [r7, #3]
  flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.next_free_start_addr;
 80274e2:	4b18      	ldr	r3, [pc, #96]	; (8027544 <E_EEPROM_XMC4_lWriteToFlash+0x6c>)
 80274e4:	681b      	ldr	r3, [r3, #0]
 80274e6:	60fb      	str	r3, [r7, #12]
  ram_addr_ptr   = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;
 80274e8:	4b17      	ldr	r3, [pc, #92]	; (8027548 <E_EEPROM_XMC4_lWriteToFlash+0x70>)
 80274ea:	60bb      	str	r3, [r7, #8]

  e_eeprom_xmc4_data_buffer.crc = E_EEPROM_XMC4_lCalculateCRC((uint32_t*)(void*)
 80274ec:	4817      	ldr	r0, [pc, #92]	; (802754c <E_EEPROM_XMC4_lWriteToFlash+0x74>)
 80274ee:	f000 f8c5 	bl	802767c <E_EEPROM_XMC4_lCalculateCRC>
 80274f2:	4602      	mov	r2, r0
 80274f4:	4b14      	ldr	r3, [pc, #80]	; (8027548 <E_EEPROM_XMC4_lWriteToFlash+0x70>)
 80274f6:	601a      	str	r2, [r3, #0]
                                                             (&(e_eeprom_xmc4_data_buffer.block_cycle_count)));

  for (page_index = 0U ; page_index < E_EEPROM_XMC4_MAX_PAGES; page_index++)
 80274f8:	2300      	movs	r3, #0
 80274fa:	607b      	str	r3, [r7, #4]
 80274fc:	e019      	b.n	8027532 <E_EEPROM_XMC4_lWriteToFlash+0x5a>
  {
    XMC_FLASH_ClearStatus();
 80274fe:	f7fe fcb1 	bl	8025e64 <XMC_FLASH_ClearStatus>

    XMC_FLASH_ProgramPage(flash_addr_ptr,ram_addr_ptr);
 8027502:	68f8      	ldr	r0, [r7, #12]
 8027504:	68b9      	ldr	r1, [r7, #8]
 8027506:	f7fe fcc1 	bl	8025e8c <XMC_FLASH_ProgramPage>

    if (XMC_FLASH_GetStatus() == (uint32_t)XMC_FLASH_STATUS_VERIFY_ERROR)
 802750a:	f7fe fcb1 	bl	8025e70 <XMC_FLASH_GetStatus>
 802750e:	4603      	mov	r3, r0
 8027510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8027514:	d102      	bne.n	802751c <E_EEPROM_XMC4_lWriteToFlash+0x44>
    {
      status = E_EEPROM_XMC4_STATUS_WRITE_ERROR;
 8027516:	2303      	movs	r3, #3
 8027518:	70fb      	strb	r3, [r7, #3]
      break;
 802751a:	e00d      	b.n	8027538 <E_EEPROM_XMC4_lWriteToFlash+0x60>
    }
    ram_addr_ptr   += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
 802751c:	68bb      	ldr	r3, [r7, #8]
 802751e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8027522:	60bb      	str	r3, [r7, #8]
    flash_addr_ptr += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
 8027524:	68fb      	ldr	r3, [r7, #12]
 8027526:	f503 7380 	add.w	r3, r3, #256	; 0x100
 802752a:	60fb      	str	r3, [r7, #12]
  ram_addr_ptr   = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;

  e_eeprom_xmc4_data_buffer.crc = E_EEPROM_XMC4_lCalculateCRC((uint32_t*)(void*)
                                                             (&(e_eeprom_xmc4_data_buffer.block_cycle_count)));

  for (page_index = 0U ; page_index < E_EEPROM_XMC4_MAX_PAGES; page_index++)
 802752c:	687b      	ldr	r3, [r7, #4]
 802752e:	3301      	adds	r3, #1
 8027530:	607b      	str	r3, [r7, #4]
 8027532:	687b      	ldr	r3, [r7, #4]
 8027534:	2b0f      	cmp	r3, #15
 8027536:	d9e2      	bls.n	80274fe <E_EEPROM_XMC4_lWriteToFlash+0x26>
    }
    ram_addr_ptr   += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
    flash_addr_ptr += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
  }

  return (status);
 8027538:	78fb      	ldrb	r3, [r7, #3]
}
 802753a:	4618      	mov	r0, r3
 802753c:	3710      	adds	r7, #16
 802753e:	46bd      	mov	sp, r7
 8027540:	bd80      	pop	{r7, pc}
 8027542:	bf00      	nop
 8027544:	1fff13b0 	.word	0x1fff13b0
 8027548:	1fff1474 	.word	0x1fff1474
 802754c:	1fff1478 	.word	0x1fff1478

08027550 <E_EEPROM_XMC4_lInitReadSectorInfo>:



static void E_EEPROM_XMC4_lInitReadSectorInfo(const uint32_t sector)
{
 8027550:	b580      	push	{r7, lr}
 8027552:	b08a      	sub	sp, #40	; 0x28
 8027554:	af00      	add	r7, sp, #0
 8027556:	6078      	str	r0, [r7, #4]
  uint32_t block_cycle_count;
  uint32_t written_crc;
  uint32_t calculated_crc;

  /* Initialize starting address and last block address of the sector. */
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32_t)sector);
 8027558:	687b      	ldr	r3, [r7, #4]
 802755a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802755e:	3304      	adds	r3, #4
 8027560:	039b      	lsls	r3, r3, #14
 8027562:	61fb      	str	r3, [r7, #28]
  block_read_addr = (sector_start_addr + E_EEPROM_XMC4_SECTOR_SIZE) - E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 8027564:	69fb      	ldr	r3, [r7, #28]
 8027566:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802756a:	627b      	str	r3, [r7, #36]	; 0x24
  free_block_addr = E_EEPROM_XMC4_EMPTY;
 802756c:	2300      	movs	r3, #0
 802756e:	623b      	str	r3, [r7, #32]

  do
  {
    /* Read first 32 bit data from the block which indicates the block cycle counter. */
    data_ptr = (uint32_t*)block_read_addr;
 8027570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027572:	61bb      	str	r3, [r7, #24]
    block_cycle_count = *(data_ptr + E_EEPROM_XMC4_BCC_OFFSET);
 8027574:	69bb      	ldr	r3, [r7, #24]
 8027576:	685b      	ldr	r3, [r3, #4]
 8027578:	617b      	str	r3, [r7, #20]

    /* Check if block cycle count is a non zero value*/
    if (block_cycle_count != E_EEPROM_XMC4_EMPTY)
 802757a:	697b      	ldr	r3, [r7, #20]
 802757c:	2b00      	cmp	r3, #0
 802757e:	d02e      	beq.n	80275de <E_EEPROM_XMC4_lInitReadSectorInfo+0x8e>
    {
      /* Mark sector as non-empty sector*/
      e_eeprom_xmc4_sector_info.erase_state |= ((uint32_t)1U << sector);
 8027580:	4b1c      	ldr	r3, [pc, #112]	; (80275f4 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 8027582:	68da      	ldr	r2, [r3, #12]
 8027584:	687b      	ldr	r3, [r7, #4]
 8027586:	2101      	movs	r1, #1
 8027588:	fa01 f303 	lsl.w	r3, r1, r3
 802758c:	4313      	orrs	r3, r2
 802758e:	4a19      	ldr	r2, [pc, #100]	; (80275f4 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 8027590:	60d3      	str	r3, [r2, #12]

      /* If this is the first non empty block identified, then store the address as next free address */
      if (free_block_addr == E_EEPROM_XMC4_EMPTY)
 8027592:	6a3b      	ldr	r3, [r7, #32]
 8027594:	2b00      	cmp	r3, #0
 8027596:	d103      	bne.n	80275a0 <E_EEPROM_XMC4_lInitReadSectorInfo+0x50>
      {
        free_block_addr = block_read_addr + E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 8027598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802759a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802759e:	623b      	str	r3, [r7, #32]
      }

      /* Read the second 32bit data which indicates the CRC */
      written_crc = *data_ptr;
 80275a0:	69bb      	ldr	r3, [r7, #24]
 80275a2:	681b      	ldr	r3, [r3, #0]
 80275a4:	613b      	str	r3, [r7, #16]
      /* Calculate the CRC for the written data in flash (3rd word to the last word)*/
      calculated_crc = E_EEPROM_XMC4_lCalculateCRC(data_ptr + E_EEPROM_XMC4_BCC_OFFSET);
 80275a6:	69bb      	ldr	r3, [r7, #24]
 80275a8:	3304      	adds	r3, #4
 80275aa:	4618      	mov	r0, r3
 80275ac:	f000 f866 	bl	802767c <E_EEPROM_XMC4_lCalculateCRC>
 80275b0:	60f8      	str	r0, [r7, #12]

      if (calculated_crc == written_crc)
 80275b2:	68fa      	ldr	r2, [r7, #12]
 80275b4:	693b      	ldr	r3, [r7, #16]
 80275b6:	429a      	cmp	r2, r3
 80275b8:	d111      	bne.n	80275de <E_EEPROM_XMC4_lInitReadSectorInfo+0x8e>
      {
        /* If both CRC matches and the current block cycle counter is greater than the previous recorded value,
         * Update the Data structure with the current block as the "latest" one and the current sector as "active".
         * Exit from the function.
         */
        if (block_cycle_count > e_eeprom_xmc4_data_buffer.block_cycle_count)
 80275ba:	4b0f      	ldr	r3, [pc, #60]	; (80275f8 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa8>)
 80275bc:	685a      	ldr	r2, [r3, #4]
 80275be:	697b      	ldr	r3, [r7, #20]
 80275c0:	429a      	cmp	r2, r3
 80275c2:	d20c      	bcs.n	80275de <E_EEPROM_XMC4_lInitReadSectorInfo+0x8e>
        {
          e_eeprom_xmc4_data_buffer.block_cycle_count = block_cycle_count;
 80275c4:	4a0c      	ldr	r2, [pc, #48]	; (80275f8 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa8>)
 80275c6:	697b      	ldr	r3, [r7, #20]
 80275c8:	6053      	str	r3, [r2, #4]
          e_eeprom_xmc4_sector_info.current_sector = sector;
 80275ca:	4a0a      	ldr	r2, [pc, #40]	; (80275f4 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 80275cc:	687b      	ldr	r3, [r7, #4]
 80275ce:	6093      	str	r3, [r2, #8]
          e_eeprom_xmc4_sector_info.flash_data_addr = block_read_addr;
 80275d0:	4a08      	ldr	r2, [pc, #32]	; (80275f4 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 80275d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80275d4:	6053      	str	r3, [r2, #4]
          e_eeprom_xmc4_sector_info.next_free_start_addr = free_block_addr;
 80275d6:	4a07      	ldr	r2, [pc, #28]	; (80275f4 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 80275d8:	6a3b      	ldr	r3, [r7, #32]
 80275da:	6013      	str	r3, [r2, #0]
          break;
 80275dc:	e007      	b.n	80275ee <E_EEPROM_XMC4_lInitReadSectorInfo+0x9e>
        }
      }
    }
    /* Move the block read address to one block size up starting from the bottom of sector */
    block_read_addr -= E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 80275de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80275e0:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80275e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Iterate the read process until the block read address crosses sector start address or a
   * latest valid block is identified.
   */
  } while ( block_read_addr >= sector_start_addr );
 80275e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80275e8:	69fb      	ldr	r3, [r7, #28]
 80275ea:	429a      	cmp	r2, r3
 80275ec:	d2c0      	bcs.n	8027570 <E_EEPROM_XMC4_lInitReadSectorInfo+0x20>

}
 80275ee:	3728      	adds	r7, #40	; 0x28
 80275f0:	46bd      	mov	sp, r7
 80275f2:	bd80      	pop	{r7, pc}
 80275f4:	1fff13b0 	.word	0x1fff13b0
 80275f8:	1fff1474 	.word	0x1fff1474

080275fc <E_EEPROM_XMC4_lInitEraseStateMachine>:



static E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_lInitEraseStateMachine(void)
{
 80275fc:	b580      	push	{r7, lr}
 80275fe:	b084      	sub	sp, #16
 8027600:	af00      	add	r7, sp, #0
  uint32_t sector_count;
  uint32_t sector_start_addr;
  E_EEPROM_XMC4_STATUS_t status ;

  status = E_EEPROM_XMC4_STATUS_OK;
 8027602:	2300      	movs	r3, #0
 8027604:	72fb      	strb	r3, [r7, #11]
  sector_count = 0U;
 8027606:	2300      	movs	r3, #0
 8027608:	60fb      	str	r3, [r7, #12]

  do
  {
    /* If the non empty sector is the current active sector, then do not erase it*/
    if (e_eeprom_xmc4_sector_info.current_sector != sector_count)
 802760a:	4b1b      	ldr	r3, [pc, #108]	; (8027678 <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 802760c:	689a      	ldr	r2, [r3, #8]
 802760e:	68fb      	ldr	r3, [r7, #12]
 8027610:	429a      	cmp	r2, r3
 8027612:	d026      	beq.n	8027662 <E_EEPROM_XMC4_lInitEraseStateMachine+0x66>
    {
      /* Check if the sector was previously identified as non-empty. i.e It is having old data or corrupted data
       * If so erase the sector and mark it as erase attempted.
       */
      if ((e_eeprom_xmc4_sector_info.erase_state >> sector_count) & ((uint32_t)1U))
 8027614:	4b18      	ldr	r3, [pc, #96]	; (8027678 <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 8027616:	68da      	ldr	r2, [r3, #12]
 8027618:	68fb      	ldr	r3, [r7, #12]
 802761a:	fa22 f303 	lsr.w	r3, r2, r3
 802761e:	f003 0301 	and.w	r3, r3, #1
 8027622:	2b00      	cmp	r3, #0
 8027624:	d01d      	beq.n	8027662 <E_EEPROM_XMC4_lInitEraseStateMachine+0x66>
      {
        sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32_t)sector_count);
 8027626:	68fb      	ldr	r3, [r7, #12]
 8027628:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802762c:	3304      	adds	r3, #4
 802762e:	039b      	lsls	r3, r3, #14
 8027630:	607b      	str	r3, [r7, #4]

        XMC_FLASH_ClearStatus();
 8027632:	f7fe fc17 	bl	8025e64 <XMC_FLASH_ClearStatus>
        XMC_FLASH_EraseSector((uint32_t*)sector_start_addr);
 8027636:	687b      	ldr	r3, [r7, #4]
 8027638:	4618      	mov	r0, r3
 802763a:	f7fe fc5b 	bl	8025ef4 <XMC_FLASH_EraseSector>

        if (XMC_FLASH_GetStatus() != (uint32_t)XMC_FLASH_STATUS_ERASE_STATE)
 802763e:	f7fe fc17 	bl	8025e70 <XMC_FLASH_GetStatus>
 8027642:	4603      	mov	r3, r0
 8027644:	2b20      	cmp	r3, #32
 8027646:	d002      	beq.n	802764e <E_EEPROM_XMC4_lInitEraseStateMachine+0x52>
        {
          status = E_EEPROM_XMC4_STATUS_ERASE_ERROR;
 8027648:	2304      	movs	r3, #4
 802764a:	72fb      	strb	r3, [r7, #11]
          break;
 802764c:	e00f      	b.n	802766e <E_EEPROM_XMC4_lInitEraseStateMachine+0x72>
        }
        e_eeprom_xmc4_sector_info.erase_state &= ~(((uint32_t)1U << sector_count));
 802764e:	4b0a      	ldr	r3, [pc, #40]	; (8027678 <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 8027650:	68da      	ldr	r2, [r3, #12]
 8027652:	68fb      	ldr	r3, [r7, #12]
 8027654:	2101      	movs	r1, #1
 8027656:	fa01 f303 	lsl.w	r3, r1, r3
 802765a:	43db      	mvns	r3, r3
 802765c:	4013      	ands	r3, r2
 802765e:	4a06      	ldr	r2, [pc, #24]	; (8027678 <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 8027660:	60d3      	str	r3, [r2, #12]
      }
    }
    sector_count++;
 8027662:	68fb      	ldr	r3, [r7, #12]
 8027664:	3301      	adds	r3, #1
 8027666:	60fb      	str	r3, [r7, #12]
    /* Iterate the erase loop until all 4 sectors are checked. Break and return failure on any sector erase errors.*/
  } while ( sector_count < E_EEPROM_XMC4_MAX_SECTORS );
 8027668:	68fb      	ldr	r3, [r7, #12]
 802766a:	2b03      	cmp	r3, #3
 802766c:	d9cd      	bls.n	802760a <E_EEPROM_XMC4_lInitEraseStateMachine+0xe>

  return (status);
 802766e:	7afb      	ldrb	r3, [r7, #11]
}
 8027670:	4618      	mov	r0, r3
 8027672:	3710      	adds	r7, #16
 8027674:	46bd      	mov	sp, r7
 8027676:	bd80      	pop	{r7, pc}
 8027678:	1fff13b0 	.word	0x1fff13b0

0802767c <E_EEPROM_XMC4_lCalculateCRC>:

/* Local function to CRC */
static uint32_t E_EEPROM_XMC4_lCalculateCRC(const uint32_t *data_start_addr)
{
 802767c:	b580      	push	{r7, lr}
 802767e:	b084      	sub	sp, #16
 8027680:	af00      	add	r7, sp, #0
 8027682:	6078      	str	r0, [r7, #4]
  uint32_t result;

  /* Reset the CRC result register before new CRC calculation */
  XMC_FCE_InitializeSeedValue(&e_eeprom_xmc4_fce, 0U);
 8027684:	4808      	ldr	r0, [pc, #32]	; (80276a8 <E_EEPROM_XMC4_lCalculateCRC+0x2c>)
 8027686:	2100      	movs	r1, #0
 8027688:	f7ff fdfc 	bl	8027284 <XMC_FCE_InitializeSeedValue>

  (void)XMC_FCE_CalculateCRC32(&e_eeprom_xmc4_fce, data_start_addr, E_EEPROM_XMC4_DATA_SIZE_FOR_CRC, &result);
 802768c:	f107 030c 	add.w	r3, r7, #12
 8027690:	4805      	ldr	r0, [pc, #20]	; (80276a8 <E_EEPROM_XMC4_lCalculateCRC+0x2c>)
 8027692:	6879      	ldr	r1, [r7, #4]
 8027694:	f640 72fc 	movw	r2, #4092	; 0xffc
 8027698:	f7ff fae8 	bl	8026c6c <XMC_FCE_CalculateCRC32>

  return (result);
 802769c:	68fb      	ldr	r3, [r7, #12]
}
 802769e:	4618      	mov	r0, r3
 80276a0:	3710      	adds	r7, #16
 80276a2:	46bd      	mov	sp, r7
 80276a4:	bd80      	pop	{r7, pc}
 80276a6:	bf00      	nop
 80276a8:	08028a58 	.word	0x08028a58

080276ac <E_EEPROM_XMC4_lCopyFlashToRam>:



/* Local function to copy data blocks from FLASH to RAM */
static void E_EEPROM_XMC4_lCopyFlashToRam(void)
{
 80276ac:	b480      	push	{r7}
 80276ae:	b085      	sub	sp, #20
 80276b0:	af00      	add	r7, sp, #0
  uint32_t *flash_addr_ptr;
  uint32_t *ram_addr_ptr;
  uint32_t byte_index;

  flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.flash_data_addr;
 80276b2:	4b0f      	ldr	r3, [pc, #60]	; (80276f0 <E_EEPROM_XMC4_lCopyFlashToRam+0x44>)
 80276b4:	685b      	ldr	r3, [r3, #4]
 80276b6:	60bb      	str	r3, [r7, #8]
  ram_addr_ptr = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;
 80276b8:	4b0e      	ldr	r3, [pc, #56]	; (80276f4 <E_EEPROM_XMC4_lCopyFlashToRam+0x48>)
 80276ba:	607b      	str	r3, [r7, #4]

  for(byte_index = 0U ; byte_index < E_EEPROM_XMC4_MAX_WORDS; byte_index++)
 80276bc:	2300      	movs	r3, #0
 80276be:	60fb      	str	r3, [r7, #12]
 80276c0:	e00c      	b.n	80276dc <E_EEPROM_XMC4_lCopyFlashToRam+0x30>
  {
    *(ram_addr_ptr + byte_index) = *(flash_addr_ptr + byte_index);
 80276c2:	68fb      	ldr	r3, [r7, #12]
 80276c4:	009b      	lsls	r3, r3, #2
 80276c6:	687a      	ldr	r2, [r7, #4]
 80276c8:	4413      	add	r3, r2
 80276ca:	68fa      	ldr	r2, [r7, #12]
 80276cc:	0092      	lsls	r2, r2, #2
 80276ce:	68b9      	ldr	r1, [r7, #8]
 80276d0:	440a      	add	r2, r1
 80276d2:	6812      	ldr	r2, [r2, #0]
 80276d4:	601a      	str	r2, [r3, #0]
  uint32_t byte_index;

  flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.flash_data_addr;
  ram_addr_ptr = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;

  for(byte_index = 0U ; byte_index < E_EEPROM_XMC4_MAX_WORDS; byte_index++)
 80276d6:	68fb      	ldr	r3, [r7, #12]
 80276d8:	3301      	adds	r3, #1
 80276da:	60fb      	str	r3, [r7, #12]
 80276dc:	68fb      	ldr	r3, [r7, #12]
 80276de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80276e2:	d3ee      	bcc.n	80276c2 <E_EEPROM_XMC4_lCopyFlashToRam+0x16>
  {
    *(ram_addr_ptr + byte_index) = *(flash_addr_ptr + byte_index);
  }
}
 80276e4:	3714      	adds	r7, #20
 80276e6:	46bd      	mov	sp, r7
 80276e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80276ec:	4770      	bx	lr
 80276ee:	bf00      	nop
 80276f0:	1fff13b0 	.word	0x1fff13b0
 80276f4:	1fff1474 	.word	0x1fff1474

080276f8 <EVENT_GENERATOR_Init>:

/*
 * This function Initializes a EVENT_GENERATOR APP instances based on user configuration.
 */
EVENT_GENERATOR_STATUS_t EVENT_GENERATOR_Init(EVENT_GENERATOR_t *const handle)
{
 80276f8:	b580      	push	{r7, lr}
 80276fa:	b082      	sub	sp, #8
 80276fc:	af00      	add	r7, sp, #0
 80276fe:	6078      	str	r0, [r7, #4]
  /* Checking for null handle */
  XMC_ASSERT("EVENT_GENERATOR_Init:handle NULL" , (handle != NULL));
  
  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
 8027700:	687b      	ldr	r3, [r7, #4]
 8027702:	7b5b      	ldrb	r3, [r3, #13]
 8027704:	f083 0301 	eor.w	r3, r3, #1
 8027708:	b2db      	uxtb	r3, r3
 802770a:	2b00      	cmp	r3, #0
 802770c:	d012      	beq.n	8027734 <EVENT_GENERATOR_Init+0x3c>
  {
    /* Hardware initialization based on UI */
    XMC_ERU_OGU_Init(handle->eru, handle->channel, handle->config);
 802770e:	687b      	ldr	r3, [r7, #4]
 8027710:	6819      	ldr	r1, [r3, #0]
 8027712:	687b      	ldr	r3, [r7, #4]
 8027714:	7b1a      	ldrb	r2, [r3, #12]
 8027716:	687b      	ldr	r3, [r7, #4]
 8027718:	685b      	ldr	r3, [r3, #4]
 802771a:	4608      	mov	r0, r1
 802771c:	4611      	mov	r1, r2
 802771e:	461a      	mov	r2, r3
 8027720:	f7ff fa66 	bl	8026bf0 <XMC_ERU_OGU_Init>
    #if (EVENT_GENERATOR_NMI_SUPPORTED == 1U)
    /* Promote the eru event as NMI, Applicable only for XMC4000 devices */
    XMC_SCU_INTERRUPT_EnableNmiRequest(handle->nmi_eru_msk);
 8027724:	687b      	ldr	r3, [r7, #4]
 8027726:	689b      	ldr	r3, [r3, #8]
 8027728:	4618      	mov	r0, r3
 802772a:	f7fe fd1b 	bl	8026164 <XMC_SCU_INTERRUPT_EnableNmiRequest>
    #endif
    /* Update the init status of the instance */
    handle->init_status = true;
 802772e:	687b      	ldr	r3, [r7, #4]
 8027730:	2201      	movs	r2, #1
 8027732:	735a      	strb	r2, [r3, #13]
  }
  
  return EVENT_GENERATOR_STATUS_SUCCESS;
 8027734:	2300      	movs	r3, #0
}
 8027736:	4618      	mov	r0, r3
 8027738:	3708      	adds	r7, #8
 802773a:	46bd      	mov	sp, r7
 802773c:	bd80      	pop	{r7, pc}
 802773e:	bf00      	nop

08027740 <EVENT_DETECTOR_Init>:

/*
 * This function Initializes a EVENT_DETECTOR APP instances (ERSx+ETLx) based on user configuration.
 */
EVENT_DETECTOR_STATUS_t EVENT_DETECTOR_Init(EVENT_DETECTOR_t *const handle)
{
 8027740:	b580      	push	{r7, lr}
 8027742:	b082      	sub	sp, #8
 8027744:	af00      	add	r7, sp, #0
 8027746:	6078      	str	r0, [r7, #4]
  /* Checking for null handle */
  XMC_ASSERT("EVENT_DETECTOR_Init:handle NULL" , (handle != NULL));

  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
 8027748:	687b      	ldr	r3, [r7, #4]
 802774a:	7b1b      	ldrb	r3, [r3, #12]
 802774c:	f083 0301 	eor.w	r3, r3, #1
 8027750:	b2db      	uxtb	r3, r3
 8027752:	2b00      	cmp	r3, #0
 8027754:	d00d      	beq.n	8027772 <EVENT_DETECTOR_Init+0x32>
  {
    /* Hardware initialization based on UI */
    XMC_ERU_ETL_Init(handle->eru, handle->channel, handle->config);
 8027756:	687b      	ldr	r3, [r7, #4]
 8027758:	6819      	ldr	r1, [r3, #0]
 802775a:	687b      	ldr	r3, [r7, #4]
 802775c:	791a      	ldrb	r2, [r3, #4]
 802775e:	687b      	ldr	r3, [r7, #4]
 8027760:	689b      	ldr	r3, [r3, #8]
 8027762:	4608      	mov	r0, r1
 8027764:	4611      	mov	r1, r2
 8027766:	461a      	mov	r2, r3
 8027768:	f7ff fa1c 	bl	8026ba4 <XMC_ERU_ETL_Init>
    /* Update the init status of the instance */
    handle->init_status = true;
 802776c:	687b      	ldr	r3, [r7, #4]
 802776e:	2201      	movs	r2, #1
 8027770:	731a      	strb	r2, [r3, #12]
  }
  
  return EVENT_DETECTOR_STATUS_SUCCESS;
 8027772:	2300      	movs	r3, #0
}
 8027774:	4618      	mov	r0, r3
 8027776:	3708      	adds	r7, #8
 8027778:	46bd      	mov	sp, r7
 802777a:	bd80      	pop	{r7, pc}

0802777c <ECAT_SSC_Init>:

/*
 * This function intialize's the EtherCAT slave controller.
 */
ECAT_SSC_STATUS_t ECAT_SSC_Init(ECAT_SSC_t *handle)
{
 802777c:	b580      	push	{r7, lr}
 802777e:	b084      	sub	sp, #16
 8027780:	af00      	add	r7, sp, #0
 8027782:	6078      	str	r0, [r7, #4]
  uint32_t status;

  status = (uint32_t)ECAT_SSC_STATUS_FAILURE;
 8027784:	2301      	movs	r3, #1
 8027786:	60fb      	str	r3, [r7, #12]

  /* Initialize the Flash Emulated EEPROM and copy the latest content to the internal working RAM buffer*/
  status = (uint32_t)E_EEPROM_XMC4_Init(handle->eeprom);
 8027788:	687b      	ldr	r3, [r7, #4]
 802778a:	681b      	ldr	r3, [r3, #0]
 802778c:	4618      	mov	r0, r3
 802778e:	f7ff fd87 	bl	80272a0 <E_EEPROM_XMC4_Init>
 8027792:	4603      	mov	r3, r0
 8027794:	60fb      	str	r3, [r7, #12]

  if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 8027796:	68fb      	ldr	r3, [r7, #12]
 8027798:	2b00      	cmp	r3, #0
 802779a:	d141      	bne.n	8027820 <ECAT_SSC_Init+0xa4>
  {
    /* Check if the slave configuration data is available in the Flash Emulated EEPROM*/
    if (E_EEPROM_XMC4_IsFlashEmpty())
 802779c:	f7ff fe88 	bl	80274b0 <E_EEPROM_XMC4_IsFlashEmpty>
 80277a0:	4603      	mov	r3, r0
 80277a2:	2b00      	cmp	r3, #0
 80277a4:	d00a      	beq.n	80277bc <ECAT_SSC_Init+0x40>
    {
      /* Prepare the default configuration out of the SSC for EEPROM */
      E_EEPROM_XMC4_WriteArray(0U, aEepromData, (uint16_t)E_EEPROM_XMC4_DATA_BLOCK_SIZE);
 80277a6:	2000      	movs	r0, #0
 80277a8:	4920      	ldr	r1, [pc, #128]	; (802782c <ECAT_SSC_Init+0xb0>)
 80277aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80277ae:	f7ff fde1 	bl	8027374 <E_EEPROM_XMC4_WriteArray>

      /* Program the RAM contents to Emulated EEPROM*/
      status = (uint32_t)E_EEPROM_XMC4_UpdateFlashContents();
 80277b2:	f7ff fe2b 	bl	802740c <E_EEPROM_XMC4_UpdateFlashContents>
 80277b6:	4603      	mov	r3, r0
 80277b8:	60fb      	str	r3, [r7, #12]
 80277ba:	e005      	b.n	80277c8 <ECAT_SSC_Init+0x4c>
    }
    else
    {
      /* Read the latest contents from RAM buffer which has the latest contents of EEPROM */
      E_EEPROM_XMC4_ReadArray(0U,aEepromData,(uint16_t)E_EEPROM_XMC4_DATA_BLOCK_SIZE);
 80277bc:	2000      	movs	r0, #0
 80277be:	491b      	ldr	r1, [pc, #108]	; (802782c <ECAT_SSC_Init+0xb0>)
 80277c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80277c4:	f7ff fdfc 	bl	80273c0 <E_EEPROM_XMC4_ReadArray>
    }

    /* Initialize the 1 millisecond timer module*/
    if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 80277c8:	68fb      	ldr	r3, [r7, #12]
 80277ca:	2b00      	cmp	r3, #0
 80277cc:	d128      	bne.n	8027820 <ECAT_SSC_Init+0xa4>
    {
      status = (uint32_t)TIMER_Init(handle->timer);
 80277ce:	687b      	ldr	r3, [r7, #4]
 80277d0:	685b      	ldr	r3, [r3, #4]
 80277d2:	4618      	mov	r0, r3
 80277d4:	f7ff fb88 	bl	8026ee8 <TIMER_Init>
 80277d8:	4603      	mov	r3, r0
 80277da:	60fb      	str	r3, [r7, #12]
      /* Initialize the timer interrupt handler*/
      if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 80277dc:	68fb      	ldr	r3, [r7, #12]
 80277de:	2b00      	cmp	r3, #0
 80277e0:	d11e      	bne.n	8027820 <ECAT_SSC_Init+0xa4>
      {
        status = (uint32_t)INTERRUPT_Init(handle->timer_irqhandler);
 80277e2:	687b      	ldr	r3, [r7, #4]
 80277e4:	689b      	ldr	r3, [r3, #8]
 80277e6:	4618      	mov	r0, r3
 80277e8:	f7ff fcb4 	bl	8027154 <INTERRUPT_Init>
 80277ec:	4603      	mov	r3, r0
 80277ee:	60fb      	str	r3, [r7, #12]
        /* Call Beckhoff HW abstraction layer API to initialize the XMC4800 ESC and supporting functions*/
        if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 80277f0:	68fb      	ldr	r3, [r7, #12]
 80277f2:	2b00      	cmp	r3, #0
 80277f4:	d114      	bne.n	8027820 <ECAT_SSC_Init+0xa4>
        {
          status = HW_Init();
 80277f6:	f000 f8e5 	bl	80279c4 <HW_Init>
 80277fa:	4603      	mov	r3, r0
 80277fc:	60fb      	str	r3, [r7, #12]
          /* Call Beckhoff HW abstraction layer API to start the stack interface initialization*/
          if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 80277fe:	68fb      	ldr	r3, [r7, #12]
 8027800:	2b00      	cmp	r3, #0
 8027802:	d10d      	bne.n	8027820 <ECAT_SSC_Init+0xa4>
          {
            status = MainInit();
 8027804:	f7f9 face 	bl	8020da4 <MainInit>
 8027808:	4603      	mov	r3, r0
 802780a:	60fb      	str	r3, [r7, #12]
            if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 802780c:	68fb      	ldr	r3, [r7, #12]
 802780e:	2b00      	cmp	r3, #0
 8027810:	d106      	bne.n	8027820 <ECAT_SSC_Init+0xa4>
            {
              /*Start the 1 millisec timer*/
              status = (uint32_t)TIMER_Start(handle->timer);
 8027812:	687b      	ldr	r3, [r7, #4]
 8027814:	685b      	ldr	r3, [r3, #4]
 8027816:	4618      	mov	r0, r3
 8027818:	f7ff fb84 	bl	8026f24 <TIMER_Start>
 802781c:	4603      	mov	r3, r0
 802781e:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  }
  return ((ECAT_SSC_STATUS_t)status);
 8027820:	68fb      	ldr	r3, [r7, #12]
 8027822:	b2db      	uxtb	r3, r3
}
 8027824:	4618      	mov	r0, r3
 8027826:	3710      	adds	r7, #16
 8027828:	46bd      	mov	sp, r7
 802782a:	bd80      	pop	{r7, pc}
 802782c:	1fff0b54 	.word	0x1fff0b54

08027830 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8027830:	b480      	push	{r7}
 8027832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8027834:	4b04      	ldr	r3, [pc, #16]	; (8027848 <NVIC_GetPriorityGrouping+0x18>)
 8027836:	68db      	ldr	r3, [r3, #12]
 8027838:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802783c:	0a1b      	lsrs	r3, r3, #8
}
 802783e:	4618      	mov	r0, r3
 8027840:	46bd      	mov	sp, r7
 8027842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027846:	4770      	bx	lr
 8027848:	e000ed00 	.word	0xe000ed00

0802784c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802784c:	b480      	push	{r7}
 802784e:	b083      	sub	sp, #12
 8027850:	af00      	add	r7, sp, #0
 8027852:	4603      	mov	r3, r0
 8027854:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8027856:	4908      	ldr	r1, [pc, #32]	; (8027878 <NVIC_EnableIRQ+0x2c>)
 8027858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802785c:	095b      	lsrs	r3, r3, #5
 802785e:	79fa      	ldrb	r2, [r7, #7]
 8027860:	f002 021f 	and.w	r2, r2, #31
 8027864:	2001      	movs	r0, #1
 8027866:	fa00 f202 	lsl.w	r2, r0, r2
 802786a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 802786e:	370c      	adds	r7, #12
 8027870:	46bd      	mov	sp, r7
 8027872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027876:	4770      	bx	lr
 8027878:	e000e100 	.word	0xe000e100

0802787c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802787c:	b480      	push	{r7}
 802787e:	b083      	sub	sp, #12
 8027880:	af00      	add	r7, sp, #0
 8027882:	4603      	mov	r3, r0
 8027884:	6039      	str	r1, [r7, #0]
 8027886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8027888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802788c:	2b00      	cmp	r3, #0
 802788e:	da0b      	bge.n	80278a8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8027890:	490d      	ldr	r1, [pc, #52]	; (80278c8 <NVIC_SetPriority+0x4c>)
 8027892:	79fb      	ldrb	r3, [r7, #7]
 8027894:	f003 030f 	and.w	r3, r3, #15
 8027898:	3b04      	subs	r3, #4
 802789a:	683a      	ldr	r2, [r7, #0]
 802789c:	b2d2      	uxtb	r2, r2
 802789e:	0092      	lsls	r2, r2, #2
 80278a0:	b2d2      	uxtb	r2, r2
 80278a2:	440b      	add	r3, r1
 80278a4:	761a      	strb	r2, [r3, #24]
 80278a6:	e009      	b.n	80278bc <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80278a8:	4908      	ldr	r1, [pc, #32]	; (80278cc <NVIC_SetPriority+0x50>)
 80278aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80278ae:	683a      	ldr	r2, [r7, #0]
 80278b0:	b2d2      	uxtb	r2, r2
 80278b2:	0092      	lsls	r2, r2, #2
 80278b4:	b2d2      	uxtb	r2, r2
 80278b6:	440b      	add	r3, r1
 80278b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 80278bc:	370c      	adds	r7, #12
 80278be:	46bd      	mov	sp, r7
 80278c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80278c4:	4770      	bx	lr
 80278c6:	bf00      	nop
 80278c8:	e000ed00 	.word	0xe000ed00
 80278cc:	e000e100 	.word	0xe000e100

080278d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80278d0:	b480      	push	{r7}
 80278d2:	b089      	sub	sp, #36	; 0x24
 80278d4:	af00      	add	r7, sp, #0
 80278d6:	60f8      	str	r0, [r7, #12]
 80278d8:	60b9      	str	r1, [r7, #8]
 80278da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80278dc:	68fb      	ldr	r3, [r7, #12]
 80278de:	f003 0307 	and.w	r3, r3, #7
 80278e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80278e4:	69fb      	ldr	r3, [r7, #28]
 80278e6:	f1c3 0307 	rsb	r3, r3, #7
 80278ea:	2b06      	cmp	r3, #6
 80278ec:	bf28      	it	cs
 80278ee:	2306      	movcs	r3, #6
 80278f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80278f2:	69fb      	ldr	r3, [r7, #28]
 80278f4:	3306      	adds	r3, #6
 80278f6:	2b06      	cmp	r3, #6
 80278f8:	d902      	bls.n	8027900 <NVIC_EncodePriority+0x30>
 80278fa:	69fb      	ldr	r3, [r7, #28]
 80278fc:	3b01      	subs	r3, #1
 80278fe:	e000      	b.n	8027902 <NVIC_EncodePriority+0x32>
 8027900:	2300      	movs	r3, #0
 8027902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8027904:	69bb      	ldr	r3, [r7, #24]
 8027906:	2201      	movs	r2, #1
 8027908:	fa02 f303 	lsl.w	r3, r2, r3
 802790c:	1e5a      	subs	r2, r3, #1
 802790e:	68bb      	ldr	r3, [r7, #8]
 8027910:	401a      	ands	r2, r3
 8027912:	697b      	ldr	r3, [r7, #20]
 8027914:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8027916:	697b      	ldr	r3, [r7, #20]
 8027918:	2101      	movs	r1, #1
 802791a:	fa01 f303 	lsl.w	r3, r1, r3
 802791e:	1e59      	subs	r1, r3, #1
 8027920:	687b      	ldr	r3, [r7, #4]
 8027922:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8027924:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8027926:	4618      	mov	r0, r3
 8027928:	3724      	adds	r7, #36	; 0x24
 802792a:	46bd      	mov	sp, r7
 802792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027930:	4770      	bx	lr
 8027932:	bf00      	nop

08027934 <XMC_ECAT_SetPortControl>:
 * \par
 * The function sets the port control by writing the configuration into the ECAT CON register.
 *
 */
__STATIC_INLINE void XMC_ECAT_SetPortControl(const XMC_ECAT_PORT_CTRL_t port_ctrl)
{
 8027934:	b480      	push	{r7}
 8027936:	b085      	sub	sp, #20
 8027938:	af00      	add	r7, sp, #0
 802793a:	1d3b      	adds	r3, r7, #4
 802793c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  ECAT0_CON->CON = (uint32_t)port_ctrl.common.raw;
 8027940:	4a06      	ldr	r2, [pc, #24]	; (802795c <XMC_ECAT_SetPortControl+0x28>)
 8027942:	687b      	ldr	r3, [r7, #4]
 8027944:	6013      	str	r3, [r2, #0]
  ECAT0_CON->CONP0 = (uint32_t)port_ctrl.port0.raw;
 8027946:	4a05      	ldr	r2, [pc, #20]	; (802795c <XMC_ECAT_SetPortControl+0x28>)
 8027948:	68bb      	ldr	r3, [r7, #8]
 802794a:	6053      	str	r3, [r2, #4]
  ECAT0_CON->CONP1 = (uint32_t)port_ctrl.port1.raw;
 802794c:	4a03      	ldr	r2, [pc, #12]	; (802795c <XMC_ECAT_SetPortControl+0x28>)
 802794e:	68fb      	ldr	r3, [r7, #12]
 8027950:	6093      	str	r3, [r2, #8]
}
 8027952:	3714      	adds	r7, #20
 8027954:	46bd      	mov	sp, r7
 8027956:	f85d 7b04 	ldr.w	r7, [sp], #4
 802795a:	4770      	bx	lr
 802795c:	500041b0 	.word	0x500041b0

08027960 <HW_EscRead>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscRead(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8027960:	b580      	push	{r7, lr}
 8027962:	b082      	sub	sp, #8
 8027964:	af00      	add	r7, sp, #0
 8027966:	6078      	str	r0, [r7, #4]
 8027968:	460b      	mov	r3, r1
 802796a:	807b      	strh	r3, [r7, #2]
 802796c:	4613      	mov	r3, r2
 802796e:	803b      	strh	r3, [r7, #0]
  memcpy(pData, &pEsc[Address], Len);
 8027970:	887b      	ldrh	r3, [r7, #2]
 8027972:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8027976:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 802797a:	883a      	ldrh	r2, [r7, #0]
 802797c:	6878      	ldr	r0, [r7, #4]
 802797e:	4619      	mov	r1, r3
 8027980:	f000 fc70 	bl	8028264 <memcpy>
}
 8027984:	3708      	adds	r7, #8
 8027986:	46bd      	mov	sp, r7
 8027988:	bd80      	pop	{r7, pc}
 802798a:	bf00      	nop

0802798c <HW_EscWrite>:
 * \par<b>Description:</b><br>
 * Writes from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscWrite(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 802798c:	b580      	push	{r7, lr}
 802798e:	b082      	sub	sp, #8
 8027990:	af00      	add	r7, sp, #0
 8027992:	6078      	str	r0, [r7, #4]
 8027994:	460b      	mov	r3, r1
 8027996:	807b      	strh	r3, [r7, #2]
 8027998:	4613      	mov	r3, r2
 802799a:	803b      	strh	r3, [r7, #0]
  memcpy(&pEsc[Address], pData, Len);
 802799c:	887b      	ldrh	r3, [r7, #2]
 802799e:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 80279a2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80279a6:	883a      	ldrh	r2, [r7, #0]
 80279a8:	4618      	mov	r0, r3
 80279aa:	6879      	ldr	r1, [r7, #4]
 80279ac:	f000 fc5a 	bl	8028264 <memcpy>
}
 80279b0:	3708      	adds	r7, #8
 80279b2:	46bd      	mov	sp, r7
 80279b4:	bd80      	pop	{r7, pc}
 80279b6:	bf00      	nop

080279b8 <ENABLE_ESC_INT>:
 * \par<b>Description:</b><br>
 * Function to enable the XMC EtherCAT slave controller interrupt.
 *
 */
__STATIC_INLINE void ENABLE_ESC_INT(void)
{
 80279b8:	b580      	push	{r7, lr}
 80279ba:	af00      	add	r7, sp, #0
  NVIC_EnableIRQ(ECAT0_0_IRQn);
 80279bc:	206d      	movs	r0, #109	; 0x6d
 80279be:	f7ff ff45 	bl	802784c <NVIC_EnableIRQ>
}
 80279c2:	bd80      	pop	{r7, pc}

080279c4 <HW_Init>:
extern UINT16 (* pAPPL_EEPROM_Reload)(void);
extern UINT16 (* pAPPL_EEPROM_Write)(UINT32 wordaddr);

/* EtherCAT Beckhoff HW abstraction layer interface API to initialize XMC ESC */
UINT16 HW_Init(void)
{
 80279c4:	b580      	push	{r7, lr}
 80279c6:	b088      	sub	sp, #32
 80279c8:	af00      	add	r7, sp, #0
  uint8_t i;
  XMC_ECAT_PORT_CTRL_t port_control;
  XMC_GPIO_CONFIG_t gpio_config;

  /* EEPROM interface API registration */
  pEEPROM = &aEepromData[0U];
 80279ca:	4bdc      	ldr	r3, [pc, #880]	; (8027d3c <HW_Init+0x378>)
 80279cc:	4adc      	ldr	r2, [pc, #880]	; (8027d40 <HW_Init+0x37c>)
 80279ce:	601a      	str	r2, [r3, #0]
  pAPPL_EEPROM_Reload = HW_EepromReload;
 80279d0:	4bdc      	ldr	r3, [pc, #880]	; (8027d44 <HW_Init+0x380>)
 80279d2:	4add      	ldr	r2, [pc, #884]	; (8027d48 <HW_Init+0x384>)
 80279d4:	601a      	str	r2, [r3, #0]
  pAPPL_EEPROM_Write  = HW_EepromWrite;
 80279d6:	4bdd      	ldr	r3, [pc, #884]	; (8027d4c <HW_Init+0x388>)
 80279d8:	4add      	ldr	r2, [pc, #884]	; (8027d50 <HW_Init+0x38c>)
 80279da:	601a      	str	r2, [r3, #0]

  /* EtherCAT slave physical layer pin settings */
  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 80279dc:	2300      	movs	r3, #0
 80279de:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_LINK_STATUS, &gpio_config);
 80279e0:	1d3b      	adds	r3, r7, #4
 80279e2:	48dc      	ldr	r0, [pc, #880]	; (8027d54 <HW_Init+0x390>)
 80279e4:	210f      	movs	r1, #15
 80279e6:	461a      	mov	r2, r3
 80279e8:	f7fe fa9c 	bl	8025f24 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RXD3, &gpio_config);
 80279ec:	1d3b      	adds	r3, r7, #4
 80279ee:	48da      	ldr	r0, [pc, #872]	; (8027d58 <HW_Init+0x394>)
 80279f0:	2107      	movs	r1, #7
 80279f2:	461a      	mov	r2, r3
 80279f4:	f7fe fa96 	bl	8025f24 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RXD2, &gpio_config);
 80279f8:	1d3b      	adds	r3, r7, #4
 80279fa:	48d7      	ldr	r0, [pc, #860]	; (8027d58 <HW_Init+0x394>)
 80279fc:	2102      	movs	r1, #2
 80279fe:	461a      	mov	r2, r3
 8027a00:	f7fe fa90 	bl	8025f24 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RXD1, &gpio_config);
 8027a04:	1d3b      	adds	r3, r7, #4
 8027a06:	48d4      	ldr	r0, [pc, #848]	; (8027d58 <HW_Init+0x394>)
 8027a08:	2101      	movs	r1, #1
 8027a0a:	461a      	mov	r2, r3
 8027a0c:	f7fe fa8a 	bl	8025f24 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RXD0, &gpio_config);
 8027a10:	1d3b      	adds	r3, r7, #4
 8027a12:	48d0      	ldr	r0, [pc, #832]	; (8027d54 <HW_Init+0x390>)
 8027a14:	2104      	movs	r1, #4
 8027a16:	461a      	mov	r2, r3
 8027a18:	f7fe fa84 	bl	8025f24 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RX_DV, &gpio_config);
 8027a1c:	1d3b      	adds	r3, r7, #4
 8027a1e:	48cd      	ldr	r0, [pc, #820]	; (8027d54 <HW_Init+0x390>)
 8027a20:	2109      	movs	r1, #9
 8027a22:	461a      	mov	r2, r3
 8027a24:	f7fe fa7e 	bl	8025f24 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RX_CLK, &gpio_config);
 8027a28:	1d3b      	adds	r3, r7, #4
 8027a2a:	48ca      	ldr	r0, [pc, #808]	; (8027d54 <HW_Init+0x390>)
 8027a2c:	2101      	movs	r1, #1
 8027a2e:	461a      	mov	r2, r3
 8027a30:	f7fe fa78 	bl	8025f24 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RX_ERR, &gpio_config);
 8027a34:	1d3b      	adds	r3, r7, #4
 8027a36:	48c9      	ldr	r0, [pc, #804]	; (8027d5c <HW_Init+0x398>)
 8027a38:	2106      	movs	r1, #6
 8027a3a:	461a      	mov	r2, r3
 8027a3c:	f7fe fa72 	bl	8025f24 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_TX_CLK, &gpio_config);
 8027a40:	1d3b      	adds	r3, r7, #4
 8027a42:	48c4      	ldr	r0, [pc, #784]	; (8027d54 <HW_Init+0x390>)
 8027a44:	2100      	movs	r1, #0
 8027a46:	461a      	mov	r2, r3
 8027a48:	f7fe fa6c 	bl	8025f24 <XMC_GPIO_Init>

  XMC_GPIO_Init(ECAT_P1_LINK_STATUS, &gpio_config);
 8027a4c:	1d3b      	adds	r3, r7, #4
 8027a4e:	48c4      	ldr	r0, [pc, #784]	; (8027d60 <HW_Init+0x39c>)
 8027a50:	2103      	movs	r1, #3
 8027a52:	461a      	mov	r2, r3
 8027a54:	f7fe fa66 	bl	8025f24 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RXD3, &gpio_config);
 8027a58:	1d3b      	adds	r3, r7, #4
 8027a5a:	48c2      	ldr	r0, [pc, #776]	; (8027d64 <HW_Init+0x3a0>)
 8027a5c:	210e      	movs	r1, #14
 8027a5e:	461a      	mov	r2, r3
 8027a60:	f7fe fa60 	bl	8025f24 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RXD2, &gpio_config);
 8027a64:	1d3b      	adds	r3, r7, #4
 8027a66:	48bf      	ldr	r0, [pc, #764]	; (8027d64 <HW_Init+0x3a0>)
 8027a68:	210d      	movs	r1, #13
 8027a6a:	461a      	mov	r2, r3
 8027a6c:	f7fe fa5a 	bl	8025f24 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RXD1, &gpio_config);
 8027a70:	1d3b      	adds	r3, r7, #4
 8027a72:	48bc      	ldr	r0, [pc, #752]	; (8027d64 <HW_Init+0x3a0>)
 8027a74:	210c      	movs	r1, #12
 8027a76:	461a      	mov	r2, r3
 8027a78:	f7fe fa54 	bl	8025f24 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RXD0, &gpio_config);
 8027a7c:	1d3b      	adds	r3, r7, #4
 8027a7e:	48b9      	ldr	r0, [pc, #740]	; (8027d64 <HW_Init+0x3a0>)
 8027a80:	2107      	movs	r1, #7
 8027a82:	461a      	mov	r2, r3
 8027a84:	f7fe fa4e 	bl	8025f24 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RX_DV, &gpio_config);
 8027a88:	1d3b      	adds	r3, r7, #4
 8027a8a:	48b6      	ldr	r0, [pc, #728]	; (8027d64 <HW_Init+0x3a0>)
 8027a8c:	210f      	movs	r1, #15
 8027a8e:	461a      	mov	r2, r3
 8027a90:	f7fe fa48 	bl	8025f24 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RX_CLK, &gpio_config);
 8027a94:	1d3b      	adds	r3, r7, #4
 8027a96:	48b3      	ldr	r0, [pc, #716]	; (8027d64 <HW_Init+0x3a0>)
 8027a98:	2106      	movs	r1, #6
 8027a9a:	461a      	mov	r2, r3
 8027a9c:	f7fe fa42 	bl	8025f24 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RX_ERR, &gpio_config);
 8027aa0:	1d3b      	adds	r3, r7, #4
 8027aa2:	48af      	ldr	r0, [pc, #700]	; (8027d60 <HW_Init+0x39c>)
 8027aa4:	2102      	movs	r1, #2
 8027aa6:	461a      	mov	r2, r3
 8027aa8:	f7fe fa3c 	bl	8025f24 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_TX_CLK, &gpio_config);
 8027aac:	1d3b      	adds	r3, r7, #4
 8027aae:	48ae      	ldr	r0, [pc, #696]	; (8027d68 <HW_Init+0x3a4>)
 8027ab0:	210a      	movs	r1, #10
 8027ab2:	461a      	mov	r2, r3
 8027ab4:	f7fe fa36 	bl	8025f24 <XMC_GPIO_Init>

  port_control.common.enable_rstreq = false;
 8027ab8:	7c3b      	ldrb	r3, [r7, #16]
 8027aba:	f36f 0300 	bfc	r3, #0, #1
 8027abe:	743b      	strb	r3, [r7, #16]
  port_control.common.mdio = XMC_ECAT_PORT_CTRL_MDIO_P0_12;
 8027ac0:	7cbb      	ldrb	r3, [r7, #18]
 8027ac2:	f36f 1387 	bfc	r3, #6, #2
 8027ac6:	74bb      	strb	r3, [r7, #18]
  port_control.common.phyaddr_offset = 0;
 8027ac8:	7cbb      	ldrb	r3, [r7, #18]
 8027aca:	f36f 0304 	bfc	r3, #0, #5
 8027ace:	74bb      	strb	r3, [r7, #18]
  port_control.common.latch_input0 = XMC_ECAT_PORT_CTRL_LATCHIN0_P14_5;
 8027ad0:	7c7b      	ldrb	r3, [r7, #17]
 8027ad2:	f36f 0301 	bfc	r3, #0, #2
 8027ad6:	747b      	strb	r3, [r7, #17]
  port_control.common.latch_input1 = XMC_ECAT_PORT_CTRL_LATCHIN1_P14_4;
 8027ad8:	7c7b      	ldrb	r3, [r7, #17]
 8027ada:	f36f 1305 	bfc	r3, #4, #2
 8027ade:	747b      	strb	r3, [r7, #17]
  port_control.port0.rxd0 = XMC_ECAT_PORT0_CTRL_RXD0_P1_4;
 8027ae0:	7d3b      	ldrb	r3, [r7, #20]
 8027ae2:	f36f 0301 	bfc	r3, #0, #2
 8027ae6:	753b      	strb	r3, [r7, #20]
  port_control.port0.rxd1 = XMC_ECAT_PORT0_CTRL_RXD1_P5_1;
 8027ae8:	7d3b      	ldrb	r3, [r7, #20]
 8027aea:	2201      	movs	r2, #1
 8027aec:	f362 0383 	bfi	r3, r2, #2, #2
 8027af0:	753b      	strb	r3, [r7, #20]
  port_control.port0.rxd2 = XMC_ECAT_PORT0_CTRL_RXD2_P5_2;
 8027af2:	7d3b      	ldrb	r3, [r7, #20]
 8027af4:	2201      	movs	r2, #1
 8027af6:	f362 1305 	bfi	r3, r2, #4, #2
 8027afa:	753b      	strb	r3, [r7, #20]
  port_control.port0.rxd3 = XMC_ECAT_PORT0_CTRL_RXD3_P5_7;
 8027afc:	7d3b      	ldrb	r3, [r7, #20]
 8027afe:	2201      	movs	r2, #1
 8027b00:	f362 1387 	bfi	r3, r2, #6, #2
 8027b04:	753b      	strb	r3, [r7, #20]
  port_control.port0.rx_clk = XMC_ECAT_PORT0_CTRL_RX_CLK_P1_1;
 8027b06:	7d7b      	ldrb	r3, [r7, #21]
 8027b08:	f36f 1305 	bfc	r3, #4, #2
 8027b0c:	757b      	strb	r3, [r7, #21]
  port_control.port0.rx_dv = XMC_ECAT_PORT0_CTRL_RX_DV_P1_9;
 8027b0e:	7d7b      	ldrb	r3, [r7, #21]
 8027b10:	f36f 0383 	bfc	r3, #2, #2
 8027b14:	757b      	strb	r3, [r7, #21]
  port_control.port0.rx_err = XMC_ECAT_PORT0_CTRL_RX_ERR_P2_6;
 8027b16:	7d7b      	ldrb	r3, [r7, #21]
 8027b18:	2201      	movs	r2, #1
 8027b1a:	f362 0301 	bfi	r3, r2, #0, #2
 8027b1e:	757b      	strb	r3, [r7, #21]
  port_control.port0.link = XMC_ECAT_PORT0_CTRL_LINK_P1_15;
 8027b20:	7dbb      	ldrb	r3, [r7, #22]
 8027b22:	2201      	movs	r2, #1
 8027b24:	f362 0301 	bfi	r3, r2, #0, #2
 8027b28:	75bb      	strb	r3, [r7, #22]
  port_control.port0.tx_clk = XMC_ECAT_PORT0_CTRL_TX_CLK_P1_0;
 8027b2a:	7dfb      	ldrb	r3, [r7, #23]
 8027b2c:	f36f 1305 	bfc	r3, #4, #2
 8027b30:	75fb      	strb	r3, [r7, #23]
  port_control.port0.tx_shift = XMC_ECAT_PORT0_CTRL_TX_SHIFT_0NS; 
 8027b32:	7dfb      	ldrb	r3, [r7, #23]
 8027b34:	f36f 1387 	bfc	r3, #6, #2
 8027b38:	75fb      	strb	r3, [r7, #23]
  port_control.port1.rxd0 = XMC_ECAT_PORT1_CTRL_RXD0_P14_7;
 8027b3a:	7e3b      	ldrb	r3, [r7, #24]
 8027b3c:	2201      	movs	r2, #1
 8027b3e:	f362 0301 	bfi	r3, r2, #0, #2
 8027b42:	763b      	strb	r3, [r7, #24]
  port_control.port1.rxd1 = XMC_ECAT_PORT1_CTRL_RXD1_P14_12;
 8027b44:	7e3b      	ldrb	r3, [r7, #24]
 8027b46:	2201      	movs	r2, #1
 8027b48:	f362 0383 	bfi	r3, r2, #2, #2
 8027b4c:	763b      	strb	r3, [r7, #24]
  port_control.port1.rxd2 = XMC_ECAT_PORT1_CTRL_RXD2_P14_13;
 8027b4e:	7e3b      	ldrb	r3, [r7, #24]
 8027b50:	2201      	movs	r2, #1
 8027b52:	f362 1305 	bfi	r3, r2, #4, #2
 8027b56:	763b      	strb	r3, [r7, #24]
  port_control.port1.rxd3 = XMC_ECAT_PORT1_CTRL_RXD3_P14_14;
 8027b58:	7e3b      	ldrb	r3, [r7, #24]
 8027b5a:	2201      	movs	r2, #1
 8027b5c:	f362 1387 	bfi	r3, r2, #6, #2
 8027b60:	763b      	strb	r3, [r7, #24]
  port_control.port1.rx_clk = XMC_ECAT_PORT1_CTRL_RX_CLK_P14_6;
 8027b62:	7e7b      	ldrb	r3, [r7, #25]
 8027b64:	2201      	movs	r2, #1
 8027b66:	f362 1305 	bfi	r3, r2, #4, #2
 8027b6a:	767b      	strb	r3, [r7, #25]
  port_control.port1.rx_dv = XMC_ECAT_PORT1_CTRL_RX_DV_P14_15;
 8027b6c:	7e7b      	ldrb	r3, [r7, #25]
 8027b6e:	2201      	movs	r2, #1
 8027b70:	f362 0383 	bfi	r3, r2, #2, #2
 8027b74:	767b      	strb	r3, [r7, #25]
  port_control.port1.rx_err = XMC_ECAT_PORT1_CTRL_RX_ERR_P15_2;
 8027b76:	7e7b      	ldrb	r3, [r7, #25]
 8027b78:	2201      	movs	r2, #1
 8027b7a:	f362 0301 	bfi	r3, r2, #0, #2
 8027b7e:	767b      	strb	r3, [r7, #25]
  port_control.port1.link = XMC_ECAT_PORT1_CTRL_LINK_P15_3;
 8027b80:	7ebb      	ldrb	r3, [r7, #26]
 8027b82:	2201      	movs	r2, #1
 8027b84:	f362 0301 	bfi	r3, r2, #0, #2
 8027b88:	76bb      	strb	r3, [r7, #26]
  port_control.port1.tx_clk = XMC_ECAT_PORT1_CTRL_TX_CLK_P0_10;
 8027b8a:	7efb      	ldrb	r3, [r7, #27]
 8027b8c:	f36f 1305 	bfc	r3, #4, #2
 8027b90:	76fb      	strb	r3, [r7, #27]
  port_control.port1.tx_shift = XMC_ECAT_PORT1_CTRL_TX_SHIFT_0NS;
 8027b92:	7efb      	ldrb	r3, [r7, #27]
 8027b94:	f36f 1387 	bfc	r3, #6, #2
 8027b98:	76fb      	strb	r3, [r7, #27]
  XMC_ECAT_SetPortControl(port_control);
 8027b9a:	f107 0310 	add.w	r3, r7, #16
 8027b9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8027ba2:	f7ff fec7 	bl	8027934 <XMC_ECAT_SetPortControl>

  /* EtherCAT slave enable and intialization using LLD function */
  XMC_ECAT_Init((XMC_ECAT_CONFIG_t *)(void*)aEepromData);
 8027ba6:	4866      	ldr	r0, [pc, #408]	; (8027d40 <HW_Init+0x37c>)
 8027ba8:	f7fe ff90 	bl	8026acc <XMC_ECAT_Init>

  /* EtherCAT slave physical layer pin configurations */
  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE;
 8027bac:	2300      	movs	r3, #0
 8027bae:	733b      	strb	r3, [r7, #12]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8027bb0:	2388      	movs	r3, #136	; 0x88
 8027bb2:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_TXD3, &gpio_config);
 8027bb4:	1d3b      	adds	r3, r7, #4
 8027bb6:	4867      	ldr	r0, [pc, #412]	; (8027d54 <HW_Init+0x390>)
 8027bb8:	2102      	movs	r1, #2
 8027bba:	461a      	mov	r2, r3
 8027bbc:	f7fe f9b2 	bl	8025f24 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8027bc0:	2388      	movs	r3, #136	; 0x88
 8027bc2:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_TXD2, &gpio_config);
 8027bc4:	1d3b      	adds	r3, r7, #4
 8027bc6:	4863      	ldr	r0, [pc, #396]	; (8027d54 <HW_Init+0x390>)
 8027bc8:	2108      	movs	r1, #8
 8027bca:	461a      	mov	r2, r3
 8027bcc:	f7fe f9aa 	bl	8025f24 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8027bd0:	2388      	movs	r3, #136	; 0x88
 8027bd2:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_TXD1, &gpio_config);
 8027bd4:	1d3b      	adds	r3, r7, #4
 8027bd6:	485f      	ldr	r0, [pc, #380]	; (8027d54 <HW_Init+0x390>)
 8027bd8:	2107      	movs	r1, #7
 8027bda:	461a      	mov	r2, r3
 8027bdc:	f7fe f9a2 	bl	8025f24 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8027be0:	2388      	movs	r3, #136	; 0x88
 8027be2:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_TXD0, &gpio_config);
 8027be4:	1d3b      	adds	r3, r7, #4
 8027be6:	485b      	ldr	r0, [pc, #364]	; (8027d54 <HW_Init+0x390>)
 8027be8:	2106      	movs	r1, #6
 8027bea:	461a      	mov	r2, r3
 8027bec:	f7fe f99a 	bl	8025f24 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8027bf0:	2388      	movs	r3, #136	; 0x88
 8027bf2:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_TX_EN, &gpio_config);
 8027bf4:	1d3b      	adds	r3, r7, #4
 8027bf6:	4857      	ldr	r0, [pc, #348]	; (8027d54 <HW_Init+0x390>)
 8027bf8:	2103      	movs	r1, #3
 8027bfa:	461a      	mov	r2, r3
 8027bfc:	f7fe f992 	bl	8025f24 <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8027c00:	2388      	movs	r3, #136	; 0x88
 8027c02:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_TXD3, &gpio_config);
 8027c04:	1d3b      	adds	r3, r7, #4
 8027c06:	4858      	ldr	r0, [pc, #352]	; (8027d68 <HW_Init+0x3a4>)
 8027c08:	2103      	movs	r1, #3
 8027c0a:	461a      	mov	r2, r3
 8027c0c:	f7fe f98a 	bl	8025f24 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8027c10:	2388      	movs	r3, #136	; 0x88
 8027c12:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_TXD2, &gpio_config);
 8027c14:	1d3b      	adds	r3, r7, #4
 8027c16:	4854      	ldr	r0, [pc, #336]	; (8027d68 <HW_Init+0x3a4>)
 8027c18:	2102      	movs	r1, #2
 8027c1a:	461a      	mov	r2, r3
 8027c1c:	f7fe f982 	bl	8025f24 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3;
 8027c20:	2398      	movs	r3, #152	; 0x98
 8027c22:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_TXD1, &gpio_config);
 8027c24:	1d3b      	adds	r3, r7, #4
 8027c26:	4851      	ldr	r0, [pc, #324]	; (8027d6c <HW_Init+0x3a8>)
 8027c28:	2102      	movs	r1, #2
 8027c2a:	461a      	mov	r2, r3
 8027c2c:	f7fe f97a 	bl	8025f24 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3;
 8027c30:	2398      	movs	r3, #152	; 0x98
 8027c32:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_TXD0, &gpio_config);
 8027c34:	1d3b      	adds	r3, r7, #4
 8027c36:	484d      	ldr	r0, [pc, #308]	; (8027d6c <HW_Init+0x3a8>)
 8027c38:	2101      	movs	r1, #1
 8027c3a:	461a      	mov	r2, r3
 8027c3c:	f7fe f972 	bl	8025f24 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8027c40:	23a0      	movs	r3, #160	; 0xa0
 8027c42:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_TX_EN, &gpio_config);
 8027c44:	1d3b      	adds	r3, r7, #4
 8027c46:	4849      	ldr	r0, [pc, #292]	; (8027d6c <HW_Init+0x3a8>)
 8027c48:	2100      	movs	r1, #0
 8027c4a:	461a      	mov	r2, r3
 8027c4c:	f7fe f96a 	bl	8025f24 <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8027c50:	23a0      	movs	r3, #160	; 0xa0
 8027c52:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_CLK25, &gpio_config);
 8027c54:	1d3b      	adds	r3, r7, #4
 8027c56:	483f      	ldr	r0, [pc, #252]	; (8027d54 <HW_Init+0x390>)
 8027c58:	210d      	movs	r1, #13
 8027c5a:	461a      	mov	r2, r3
 8027c5c:	f7fe f962 	bl	8025f24 <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8027c60:	23a0      	movs	r3, #160	; 0xa0
 8027c62:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_MCLK, &gpio_config);
 8027c64:	1d3b      	adds	r3, r7, #4
 8027c66:	4841      	ldr	r0, [pc, #260]	; (8027d6c <HW_Init+0x3a8>)
 8027c68:	2103      	movs	r1, #3
 8027c6a:	461a      	mov	r2, r3
 8027c6c:	f7fe f95a 	bl	8025f24 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 8027c70:	2300      	movs	r3, #0
 8027c72:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_MDO, &gpio_config);
 8027c74:	1d3b      	adds	r3, r7, #4
 8027c76:	483c      	ldr	r0, [pc, #240]	; (8027d68 <HW_Init+0x3a4>)
 8027c78:	210c      	movs	r1, #12
 8027c7a:	461a      	mov	r2, r3
 8027c7c:	f7fe f952 	bl	8025f24 <XMC_GPIO_Init>
  XMC_GPIO_SetHardwareControl(ECAT_MDO, XMC_GPIO_HWCTRL_PERIPHERAL1);
 8027c80:	4839      	ldr	r0, [pc, #228]	; (8027d68 <HW_Init+0x3a4>)
 8027c82:	210c      	movs	r1, #12
 8027c84:	2201      	movs	r2, #1
 8027c86:	f7ff f863 	bl	8026d50 <XMC_GPIO_SetHardwareControl>

  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SOFT_EDGE;
 8027c8a:	2302      	movs	r3, #2
 8027c8c:	733b      	strb	r3, [r7, #12]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8027c8e:	23a0      	movs	r3, #160	; 0xa0
 8027c90:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_LED_LINK_ACT, &gpio_config);
 8027c92:	1d3b      	adds	r3, r7, #4
 8027c94:	482f      	ldr	r0, [pc, #188]	; (8027d54 <HW_Init+0x390>)
 8027c96:	210c      	movs	r1, #12
 8027c98:	461a      	mov	r2, r3
 8027c9a:	f7fe f943 	bl	8025f24 <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8027c9e:	2388      	movs	r3, #136	; 0x88
 8027ca0:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_LED_LINK_ACT, &gpio_config);
 8027ca2:	1d3b      	adds	r3, r7, #4
 8027ca4:	4830      	ldr	r0, [pc, #192]	; (8027d68 <HW_Init+0x3a4>)
 8027ca6:	210b      	movs	r1, #11
 8027ca8:	461a      	mov	r2, r3
 8027caa:	f7fe f93b 	bl	8025f24 <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8027cae:	23a0      	movs	r3, #160	; 0xa0
 8027cb0:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_LED_RUN, &gpio_config);
 8027cb2:	1d3b      	adds	r3, r7, #4
 8027cb4:	4827      	ldr	r0, [pc, #156]	; (8027d54 <HW_Init+0x390>)
 8027cb6:	210b      	movs	r1, #11
 8027cb8:	461a      	mov	r2, r3
 8027cba:	f7fe f933 	bl	8025f24 <XMC_GPIO_Init>
  XMC_GPIO_SetHardwareControl(ECAT_LED_RUN, XMC_GPIO_HWCTRL_DISABLED);
 8027cbe:	4825      	ldr	r0, [pc, #148]	; (8027d54 <HW_Init+0x390>)
 8027cc0:	210b      	movs	r1, #11
 8027cc2:	2200      	movs	r2, #0
 8027cc4:	f7ff f844 	bl	8026d50 <XMC_GPIO_SetHardwareControl>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8027cc8:	23a0      	movs	r3, #160	; 0xa0
 8027cca:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_LED_ERR, &gpio_config);
 8027ccc:	1d3b      	adds	r3, r7, #4
 8027cce:	4821      	ldr	r0, [pc, #132]	; (8027d54 <HW_Init+0x390>)
 8027cd0:	210a      	movs	r1, #10
 8027cd2:	461a      	mov	r2, r3
 8027cd4:	f7fe f926 	bl	8025f24 <XMC_GPIO_Init>
  XMC_GPIO_SetHardwareControl(ECAT_LED_ERR, XMC_GPIO_HWCTRL_DISABLED);
 8027cd8:	481e      	ldr	r0, [pc, #120]	; (8027d54 <HW_Init+0x390>)
 8027cda:	210a      	movs	r1, #10
 8027cdc:	2200      	movs	r2, #0
 8027cde:	f7ff f837 	bl	8026d50 <XMC_GPIO_SetHardwareControl>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3;
 8027ce2:	2398      	movs	r3, #152	; 0x98
 8027ce4:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_PHY_RESET, &gpio_config);
 8027ce6:	1d3b      	adds	r3, r7, #4
 8027ce8:	481c      	ldr	r0, [pc, #112]	; (8027d5c <HW_Init+0x398>)
 8027cea:	210a      	movs	r1, #10
 8027cec:	461a      	mov	r2, r3
 8027cee:	f7fe f919 	bl	8025f24 <XMC_GPIO_Init>

  /* Disable all supported sync manager channels */
  for (i = 0U; i < MAX_SYNC_MAN; i++)
 8027cf2:	2300      	movs	r3, #0
 8027cf4:	77fb      	strb	r3, [r7, #31]
 8027cf6:	e006      	b.n	8027d06 <HW_Init+0x342>
  {
    XMC_ECAT_DisableSyncManChannel(i);
 8027cf8:	7ffb      	ldrb	r3, [r7, #31]
 8027cfa:	4618      	mov	r0, r3
 8027cfc:	f7fe ff36 	bl	8026b6c <XMC_ECAT_DisableSyncManChannel>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3;
  XMC_GPIO_Init(ECAT_PHY_RESET, &gpio_config);

  /* Disable all supported sync manager channels */
  for (i = 0U; i < MAX_SYNC_MAN; i++)
 8027d00:	7ffb      	ldrb	r3, [r7, #31]
 8027d02:	3301      	adds	r3, #1
 8027d04:	77fb      	strb	r3, [r7, #31]
 8027d06:	7ffb      	ldrb	r3, [r7, #31]
 8027d08:	2b07      	cmp	r3, #7
 8027d0a:	d9f5      	bls.n	8027cf8 <HW_Init+0x334>
  {
    XMC_ECAT_DisableSyncManChannel(i);
  }

  /* EtherCAT slave event disable */
  XMC_ECAT_DisableEvent(0xffffffffU);
 8027d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8027d10:	f7fe ff18 	bl	8026b44 <XMC_ECAT_DisableEvent>

  /* ECAT interrupt priority settings */
  NVIC_SetPriority(ECAT0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8027d14:	f7ff fd8c 	bl	8027830 <NVIC_GetPriorityGrouping>
 8027d18:	4603      	mov	r3, r0
 8027d1a:	4618      	mov	r0, r3
 8027d1c:	213f      	movs	r1, #63	; 0x3f
 8027d1e:	2200      	movs	r2, #0
 8027d20:	f7ff fdd6 	bl	80278d0 <NVIC_EncodePriority>
 8027d24:	4603      	mov	r3, r0
 8027d26:	206d      	movs	r0, #109	; 0x6d
 8027d28:	4619      	mov	r1, r3
 8027d2a:	f7ff fda7 	bl	802787c <NVIC_SetPriority>
                                                     63U,
                                                     0U));

  /* EtherCAT slave interrupt enable */
  ENABLE_ESC_INT();
 8027d2e:	f7ff fe43 	bl	80279b8 <ENABLE_ESC_INT>

  return ((uint16_t)0U);
 8027d32:	2300      	movs	r3, #0
}
 8027d34:	4618      	mov	r0, r3
 8027d36:	3720      	adds	r7, #32
 8027d38:	46bd      	mov	sp, r7
 8027d3a:	bd80      	pop	{r7, pc}
 8027d3c:	1fff2528 	.word	0x1fff2528
 8027d40:	1fff0b54 	.word	0x1fff0b54
 8027d44:	1fff2530 	.word	0x1fff2530
 8027d48:	08027dfd 	.word	0x08027dfd
 8027d4c:	1fff2494 	.word	0x1fff2494
 8027d50:	08027d71 	.word	0x08027d71
 8027d54:	48028100 	.word	0x48028100
 8027d58:	48028500 	.word	0x48028500
 8027d5c:	48028200 	.word	0x48028200
 8027d60:	48028f00 	.word	0x48028f00
 8027d64:	48028e00 	.word	0x48028e00
 8027d68:	48028000 	.word	0x48028000
 8027d6c:	48028300 	.word	0x48028300

08027d70 <HW_EepromWrite>:
}


/* Beckhoff Hw abstraction layer interface API to write new configuration parameters to slave EEPROM area */
UINT16 HW_EepromWrite(UINT32 wordaddr)
{
 8027d70:	b580      	push	{r7, lr}
 8027d72:	b086      	sub	sp, #24
 8027d74:	af00      	add	r7, sp, #0
 8027d76:	6078      	str	r0, [r7, #4]
  UINT32 status;
  UINT16 EEPROMReg = 0U; /* Regvalue 0x502 - 0x5003 */
 8027d78:	2300      	movs	r3, #0
 8027d7a:	827b      	strh	r3, [r7, #18]
  status = 0U;
 8027d7c:	2300      	movs	r3, #0
 8027d7e:	617b      	str	r3, [r7, #20]
  if ((wordaddr <= (uint32_t)ESC_EEPROM_SIZE) && (pEEPROM != NULL))
 8027d80:	687b      	ldr	r3, [r7, #4]
 8027d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8027d86:	d82d      	bhi.n	8027de4 <HW_EepromWrite+0x74>
 8027d88:	4b19      	ldr	r3, [pc, #100]	; (8027df0 <HW_EepromWrite+0x80>)
 8027d8a:	681b      	ldr	r3, [r3, #0]
 8027d8c:	2b00      	cmp	r3, #0
 8027d8e:	d029      	beq.n	8027de4 <HW_EepromWrite+0x74>
  {
     UINT16 *pData = (UINT16 *)(void*)pEEPROM;
 8027d90:	4b17      	ldr	r3, [pc, #92]	; (8027df0 <HW_EepromWrite+0x80>)
 8027d92:	681b      	ldr	r3, [r3, #0]
 8027d94:	60fb      	str	r3, [r7, #12]
     HW_EscRead((MEM_ADDR *)(void*)&pData[(wordaddr)], (uint16_t)ESC_EEPROM_DATA_OFFSET, (uint16_t)EEPROM_WRITE_SIZE);
 8027d96:	687b      	ldr	r3, [r7, #4]
 8027d98:	005b      	lsls	r3, r3, #1
 8027d9a:	68fa      	ldr	r2, [r7, #12]
 8027d9c:	4413      	add	r3, r2
 8027d9e:	4618      	mov	r0, r3
 8027da0:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 8027da4:	2202      	movs	r2, #2
 8027da6:	f7ff fddb 	bl	8027960 <HW_EscRead>
     if ( (wordaddr == (uint32_t)7U) || (wordaddr ==  (((uint32_t)ESC_EEPROM_SIZE >> (uint32_t)1U) - (uint32_t)1U)) )
 8027daa:	687b      	ldr	r3, [r7, #4]
 8027dac:	2b07      	cmp	r3, #7
 8027dae:	d004      	beq.n	8027dba <HW_EepromWrite+0x4a>
 8027db0:	687b      	ldr	r3, [r7, #4]
 8027db2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8027db6:	4293      	cmp	r3, r2
 8027db8:	d114      	bne.n	8027de4 <HW_EepromWrite+0x74>
     {
  	   /*lets program the complete EEPROM new prepare Data for EEPROM */
  	   E_EEPROM_XMC4_WriteArray((uint16_t)0U,aEepromData,(uint16_t)ESC_EEPROM_SIZE);
 8027dba:	2000      	movs	r0, #0
 8027dbc:	490d      	ldr	r1, [pc, #52]	; (8027df4 <HW_EepromWrite+0x84>)
 8027dbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8027dc2:	f7ff fad7 	bl	8027374 <E_EEPROM_XMC4_WriteArray>

      HW_EscReadWord(EEPROMReg,ESC_EEPROM_CONTROL_OFFSET);
 8027dc6:	4b0c      	ldr	r3, [pc, #48]	; (8027df8 <HW_EepromWrite+0x88>)
 8027dc8:	881b      	ldrh	r3, [r3, #0]
 8027dca:	827b      	strh	r3, [r7, #18]
      HW_EscWriteWord(EEPROMReg & (~ESC_EEPROM_BUSY_MASK),ESC_EEPROM_CONTROL_OFFSET);
 8027dcc:	4a0a      	ldr	r2, [pc, #40]	; (8027df8 <HW_EepromWrite+0x88>)
 8027dce:	8a7b      	ldrh	r3, [r7, #18]
 8027dd0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8027dd4:	b29b      	uxth	r3, r3
 8027dd6:	8013      	strh	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8027dd8:	b672      	cpsid	i

      __disable_irq();
  	   /* Program the RAM contents to Emulated EEPROM*/
  	   status = (uint32_t)E_EEPROM_XMC4_UpdateFlashContents();
 8027dda:	f7ff fb17 	bl	802740c <E_EEPROM_XMC4_UpdateFlashContents>
 8027dde:	4603      	mov	r3, r0
 8027de0:	617b      	str	r3, [r7, #20]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8027de2:	b662      	cpsie	i
      __enable_irq();
     }
  }

  return (uint16_t)status;
 8027de4:	697b      	ldr	r3, [r7, #20]
 8027de6:	b29b      	uxth	r3, r3
}
 8027de8:	4618      	mov	r0, r3
 8027dea:	3718      	adds	r7, #24
 8027dec:	46bd      	mov	sp, r7
 8027dee:	bd80      	pop	{r7, pc}
 8027df0:	1fff2528 	.word	0x1fff2528
 8027df4:	1fff0b54 	.word	0x1fff0b54
 8027df8:	54010502 	.word	0x54010502

08027dfc <HW_EepromReload>:

/* Beckhoff Hw abstraction layer interface API to reload slave EEPROM area */
UINT16 HW_EepromReload(void)
{
 8027dfc:	b580      	push	{r7, lr}
 8027dfe:	b084      	sub	sp, #16
 8027e00:	af00      	add	r7, sp, #0
  UINT16 EEPROMReg = 0U; /* Regvalue 0x502 - 0x5003 */
 8027e02:	2300      	movs	r3, #0
 8027e04:	81fb      	strh	r3, [r7, #14]
  UINT32 cmd = (uint32_t)EEPROMReg  & (uint32_t)ESC_EEPROM_CMD_MASK;
 8027e06:	89fb      	ldrh	r3, [r7, #14]
 8027e08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8027e0c:	607b      	str	r3, [r7, #4]
  UINT32 addr;
  HW_EscReadDWord(addr,(uint32_t)ESC_EEPROM_ADDRESS_OFFSET);
 8027e0e:	4b1b      	ldr	r3, [pc, #108]	; (8027e7c <HW_EepromReload+0x80>)
 8027e10:	681b      	ldr	r3, [r3, #0]
 8027e12:	60bb      	str	r3, [r7, #8]
  addr = SWAPDWORD(addr);

  /* EEPROM emulation ( 8Bytes EEPROM data) */
  if ((addr <= (uint32_t)ESC_EEPROM_SIZE) && (pEEPROM != NULL))
 8027e14:	68bb      	ldr	r3, [r7, #8]
 8027e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8027e1a:	d826      	bhi.n	8027e6a <HW_EepromReload+0x6e>
 8027e1c:	4b18      	ldr	r3, [pc, #96]	; (8027e80 <HW_EepromReload+0x84>)
 8027e1e:	681b      	ldr	r3, [r3, #0]
 8027e20:	2b00      	cmp	r3, #0
 8027e22:	d022      	beq.n	8027e6a <HW_EepromReload+0x6e>
  {
    UINT16 *pData = (UINT16 *)(void*)pEEPROM;
 8027e24:	4b16      	ldr	r3, [pc, #88]	; (8027e80 <HW_EepromReload+0x84>)
 8027e26:	681b      	ldr	r3, [r3, #0]
 8027e28:	603b      	str	r3, [r7, #0]
    do
    {
	  HW_EscWrite((MEM_ADDR *)(void*)&pData[(addr)], (uint16_t)ESC_EEPROM_DATA_OFFSET, (uint16_t)EEPROM_READ_SIZE);
 8027e2a:	68bb      	ldr	r3, [r7, #8]
 8027e2c:	005b      	lsls	r3, r3, #1
 8027e2e:	683a      	ldr	r2, [r7, #0]
 8027e30:	4413      	add	r3, r2
 8027e32:	4618      	mov	r0, r3
 8027e34:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 8027e38:	2208      	movs	r2, #8
 8027e3a:	f7ff fda7 	bl	802798c <HW_EscWrite>

  	  /*Clear error bits */
  	  EEPROMReg &= (uint16_t)(~(uint16_t)(ESC_EEPROM_ERROR_MASK));
 8027e3e:	89fb      	ldrh	r3, [r7, #14]
 8027e40:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8027e44:	81fb      	strh	r3, [r7, #14]

  	  /*ack current reload segment */
  	  HW_EscWriteWord(EEPROMReg,(uint32_t)ESC_EEPROM_CONTROL_OFFSET);
 8027e46:	4a0f      	ldr	r2, [pc, #60]	; (8027e84 <HW_EepromReload+0x88>)
 8027e48:	89fb      	ldrh	r3, [r7, #14]
 8027e4a:	8013      	strh	r3, [r2, #0]

  	  /* read EEPROM control (to check if the reload is still pending) */
  	  HW_EscReadWord(EEPROMReg,ESC_EEPROM_CONTROL_OFFSET);
 8027e4c:	4b0d      	ldr	r3, [pc, #52]	; (8027e84 <HW_EepromReload+0x88>)
 8027e4e:	881b      	ldrh	r3, [r3, #0]
 8027e50:	81fb      	strh	r3, [r7, #14]
  	  cmd = (uint32_t)EEPROMReg  & (uint32_t)ESC_EEPROM_CMD_MASK;
 8027e52:	89fb      	ldrh	r3, [r7, #14]
 8027e54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8027e58:	607b      	str	r3, [r7, #4]

 	  HW_EscReadDWord(addr,(uint32_t)ESC_EEPROM_ADDRESS_OFFSET);
 8027e5a:	4b08      	ldr	r3, [pc, #32]	; (8027e7c <HW_EepromReload+0x80>)
 8027e5c:	681b      	ldr	r3, [r3, #0]
 8027e5e:	60bb      	str	r3, [r7, #8]

    } while(cmd == (uint32_t)ESC_EEPROM_CMD_RELOAD_MASK);
 8027e60:	687b      	ldr	r3, [r7, #4]
 8027e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027e66:	d0e0      	beq.n	8027e2a <HW_EepromReload+0x2e>
  HW_EscReadDWord(addr,(uint32_t)ESC_EEPROM_ADDRESS_OFFSET);
  addr = SWAPDWORD(addr);

  /* EEPROM emulation ( 8Bytes EEPROM data) */
  if ((addr <= (uint32_t)ESC_EEPROM_SIZE) && (pEEPROM != NULL))
  {
 8027e68:	e003      	b.n	8027e72 <HW_EepromReload+0x76>
    } while(cmd == (uint32_t)ESC_EEPROM_CMD_RELOAD_MASK);
  }
  else
  {
    /* Set Error  */
    EEPROMReg |= (uint16_t)ESC_EEPROM_ERROR_CMD_ACK;
 8027e6a:	89fb      	ldrh	r3, [r7, #14]
 8027e6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8027e70:	81fb      	strh	r3, [r7, #14]
  }
  return 0U;
 8027e72:	2300      	movs	r3, #0
}
 8027e74:	4618      	mov	r0, r3
 8027e76:	3710      	adds	r7, #16
 8027e78:	46bd      	mov	sp, r7
 8027e7a:	bd80      	pop	{r7, pc}
 8027e7c:	54010504 	.word	0x54010504
 8027e80:	1fff2528 	.word	0x1fff2528
 8027e84:	54010502 	.word	0x54010502

08027e88 <ECAT0_0_IRQHandler>:

/* ECAT slave interrupt handler function */
void ECAT0_0_IRQHandler(void)
{
 8027e88:	b580      	push	{r7, lr}
 8027e8a:	af00      	add	r7, sp, #0
  PDI_Isr();
 8027e8c:	f7f8 fe0a 	bl	8020aa4 <PDI_Isr>
}
 8027e90:	bd80      	pop	{r7, pc}
 8027e92:	bf00      	nop

08027e94 <CCU41_1_IRQHandler>:

/* ECAT slave timer interrupt handler function */
void ecat_ssc_timer_handler(void)
{
 8027e94:	b580      	push	{r7, lr}
 8027e96:	af00      	add	r7, sp, #0
  ticks++;
 8027e98:	4b03      	ldr	r3, [pc, #12]	; (8027ea8 <CCU41_1_IRQHandler+0x14>)
 8027e9a:	681b      	ldr	r3, [r3, #0]
 8027e9c:	3301      	adds	r3, #1
 8027e9e:	4a02      	ldr	r2, [pc, #8]	; (8027ea8 <CCU41_1_IRQHandler+0x14>)
 8027ea0:	6013      	str	r3, [r2, #0]
  ECAT_CheckTimer();
 8027ea2:	f7f8 fd69 	bl	8020978 <ECAT_CheckTimer>
}
 8027ea6:	bd80      	pop	{r7, pc}
 8027ea8:	1fff2478 	.word	0x1fff2478

08027eac <HW_GetTimer>:

/* Beckhoff Hw abstraction layer interface API to get the current timer value in ticks */
UINT32 HW_GetTimer(void)
{
 8027eac:	b480      	push	{r7}
 8027eae:	af00      	add	r7, sp, #0
  return ticks;
 8027eb0:	4b03      	ldr	r3, [pc, #12]	; (8027ec0 <HW_GetTimer+0x14>)
 8027eb2:	681b      	ldr	r3, [r3, #0]
}
 8027eb4:	4618      	mov	r0, r3
 8027eb6:	46bd      	mov	sp, r7
 8027eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ebc:	4770      	bx	lr
 8027ebe:	bf00      	nop
 8027ec0:	1fff2478 	.word	0x1fff2478

08027ec4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8027ec4:	b480      	push	{r7}
 8027ec6:	b085      	sub	sp, #20
 8027ec8:	af00      	add	r7, sp, #0
 8027eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8027ecc:	687b      	ldr	r3, [r7, #4]
 8027ece:	f003 0307 	and.w	r3, r3, #7
 8027ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8027ed4:	4b0c      	ldr	r3, [pc, #48]	; (8027f08 <NVIC_SetPriorityGrouping+0x44>)
 8027ed6:	68db      	ldr	r3, [r3, #12]
 8027ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8027eda:	68ba      	ldr	r2, [r7, #8]
 8027edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8027ee0:	4013      	ands	r3, r2
 8027ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8027ee4:	68fb      	ldr	r3, [r7, #12]
 8027ee6:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8027ee8:	68bb      	ldr	r3, [r7, #8]
 8027eea:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8027eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8027ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027ef4:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8027ef6:	4a04      	ldr	r2, [pc, #16]	; (8027f08 <NVIC_SetPriorityGrouping+0x44>)
 8027ef8:	68bb      	ldr	r3, [r7, #8]
 8027efa:	60d3      	str	r3, [r2, #12]
}
 8027efc:	3714      	adds	r7, #20
 8027efe:	46bd      	mov	sp, r7
 8027f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f04:	4770      	bx	lr
 8027f06:	bf00      	nop
 8027f08:	e000ed00 	.word	0xe000ed00

08027f0c <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8027f0c:	b580      	push	{r7, lr}
 8027f0e:	b082      	sub	sp, #8
 8027f10:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8027f12:	2001      	movs	r0, #1
 8027f14:	f7ff ffd6 	bl	8027ec4 <NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8027f18:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8027f1a:	4b21      	ldr	r3, [pc, #132]	; (8027fa0 <SystemCoreSetup+0x94>)
 8027f1c:	4a21      	ldr	r2, [pc, #132]	; (8027fa4 <SystemCoreSetup+0x98>)
 8027f1e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8027f20:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8027f24:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8027f26:	4a1e      	ldr	r2, [pc, #120]	; (8027fa0 <SystemCoreSetup+0x94>)
 8027f28:	4b1d      	ldr	r3, [pc, #116]	; (8027fa0 <SystemCoreSetup+0x94>)
 8027f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027f2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8027f32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8027f36:	4b1c      	ldr	r3, [pc, #112]	; (8027fa8 <SystemCoreSetup+0x9c>)
 8027f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8027f3c:	3314      	adds	r3, #20
 8027f3e:	681b      	ldr	r3, [r3, #0]
 8027f40:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8027f42:	687b      	ldr	r3, [r7, #4]
 8027f44:	f023 030f 	bic.w	r3, r3, #15
 8027f48:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8027f4a:	687b      	ldr	r3, [r7, #4]
 8027f4c:	f043 0302 	orr.w	r3, r3, #2
 8027f50:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8027f52:	4b15      	ldr	r3, [pc, #84]	; (8027fa8 <SystemCoreSetup+0x9c>)
 8027f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8027f58:	3314      	adds	r3, #20
 8027f5a:	687a      	ldr	r2, [r7, #4]
 8027f5c:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8027f5e:	4a10      	ldr	r2, [pc, #64]	; (8027fa0 <SystemCoreSetup+0x94>)
 8027f60:	4b0f      	ldr	r3, [pc, #60]	; (8027fa0 <SystemCoreSetup+0x94>)
 8027f62:	695b      	ldr	r3, [r3, #20]
 8027f64:	f023 0310 	bic.w	r3, r3, #16
 8027f68:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8027f6a:	4a0d      	ldr	r2, [pc, #52]	; (8027fa0 <SystemCoreSetup+0x94>)
 8027f6c:	4b0c      	ldr	r3, [pc, #48]	; (8027fa0 <SystemCoreSetup+0x94>)
 8027f6e:	695b      	ldr	r3, [r3, #20]
 8027f70:	f023 0308 	bic.w	r3, r3, #8
 8027f74:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8027f76:	4a0a      	ldr	r2, [pc, #40]	; (8027fa0 <SystemCoreSetup+0x94>)
 8027f78:	4b09      	ldr	r3, [pc, #36]	; (8027fa0 <SystemCoreSetup+0x94>)
 8027f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8027f80:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8027f82:	4a07      	ldr	r2, [pc, #28]	; (8027fa0 <SystemCoreSetup+0x94>)
 8027f84:	4b06      	ldr	r3, [pc, #24]	; (8027fa0 <SystemCoreSetup+0x94>)
 8027f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027f88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8027f8c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8027f8e:	4a04      	ldr	r2, [pc, #16]	; (8027fa0 <SystemCoreSetup+0x94>)
 8027f90:	4b03      	ldr	r3, [pc, #12]	; (8027fa0 <SystemCoreSetup+0x94>)
 8027f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8027f98:	6253      	str	r3, [r2, #36]	; 0x24
}
 8027f9a:	3708      	adds	r7, #8
 8027f9c:	46bd      	mov	sp, r7
 8027f9e:	bd80      	pop	{r7, pc}
 8027fa0:	e000ed00 	.word	0xe000ed00
 8027fa4:	08000000 	.word	0x08000000
 8027fa8:	58001000 	.word	0x58001000

08027fac <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8027fac:	b480      	push	{r7}
 8027fae:	b085      	sub	sp, #20
 8027fb0:	af00      	add	r7, sp, #0
 8027fb2:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8027fb4:	2300      	movs	r3, #0
 8027fb6:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8027fb8:	687b      	ldr	r3, [r7, #4]
 8027fba:	2201      	movs	r2, #1
 8027fbc:	701a      	strb	r2, [r3, #0]

  return (status);
 8027fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8027fc0:	4618      	mov	r0, r3
 8027fc2:	3714      	adds	r7, #20
 8027fc4:	46bd      	mov	sp, r7
 8027fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fca:	4770      	bx	lr

08027fcc <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8027fcc:	b480      	push	{r7}
 8027fce:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8027fd0:	4b02      	ldr	r3, [pc, #8]	; (8027fdc <OSCHP_GetFrequency+0x10>)
}
 8027fd2:	4618      	mov	r0, r3
 8027fd4:	46bd      	mov	sp, r7
 8027fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fda:	4770      	bx	lr
 8027fdc:	00b71b00 	.word	0x00b71b00

08027fe0 <XMC_SCU_CLOCK_SetECATClockSource>:
 * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
 */
__STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
{
 8027fe0:	b480      	push	{r7}
 8027fe2:	b083      	sub	sp, #12
 8027fe4:	af00      	add	r7, sp, #0
 8027fe6:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
 8027fe8:	4906      	ldr	r1, [pc, #24]	; (8028004 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 8027fea:	4b06      	ldr	r3, [pc, #24]	; (8028004 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 8027fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027fee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8027ff2:	687b      	ldr	r3, [r7, #4]
 8027ff4:	4313      	orrs	r3, r2
 8027ff6:	638b      	str	r3, [r1, #56]	; 0x38
                      ((uint32_t)source);
}
 8027ff8:	370c      	adds	r7, #12
 8027ffa:	46bd      	mov	sp, r7
 8027ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028000:	4770      	bx	lr
 8028002:	bf00      	nop
 8028004:	50004600 	.word	0x50004600

08028008 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8028008:	b5b0      	push	{r4, r5, r7, lr}
 802800a:	b086      	sub	sp, #24
 802800c:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 802800e:	4b14      	ldr	r3, [pc, #80]	; (8028060 <SystemCoreClockSetup+0x58>)
 8028010:	1d3c      	adds	r4, r7, #4
 8028012:	461d      	mov	r5, r3
 8028014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8028016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8028018:	682b      	ldr	r3, [r5, #0]
 802801a:	6023      	str	r3, [r4, #0]
    .fccu_clkdiv = 1U,
#endif
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 802801c:	1d3b      	adds	r3, r7, #4
 802801e:	4618      	mov	r0, r3
 8028020:	f7fe f842 	bl	80260a8 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8028024:	2000      	movs	r0, #0
 8028026:	f7fe f94b 	bl	80262c0 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_SYSPLL);
 802802a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 802802e:	f7fe f8ff 	bl	8026230 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(6U);
 8028032:	2006      	movs	r0, #6
 8028034:	f7fe f9d0 	bl	80263d8 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(3U, 100U);
 8028038:	2003      	movs	r0, #3
 802803a:	2164      	movs	r1, #100	; 0x64
 802803c:	f7fe fa34 	bl	80264a8 <XMC_SCU_CLOCK_StartUsbPll>
  
#ifdef CLOCK_XMC4_ECATCLK_ENABLED    
  /* ECAT source clock */
  XMC_SCU_CLOCK_SetECATClockSource(XMC_SCU_CLOCK_ECATCLKSRC_USBPLL);
 8028040:	2000      	movs	r0, #0
 8028042:	f7ff ffcd 	bl	8027fe0 <XMC_SCU_CLOCK_SetECATClockSource>
  /* ECAT divider setting */
  XMC_SCU_CLOCK_SetECATClockDivider(2U);
 8028046:	2002      	movs	r0, #2
 8028048:	f7fe f9ee 	bl	8026428 <XMC_SCU_CLOCK_SetECATClockDivider>
#endif

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 802804c:	2000      	movs	r0, #0
 802804e:	f7fe f903 	bl	8026258 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8028052:	2001      	movs	r0, #1
 8028054:	f7fe f9d4 	bl	8026400 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

}
 8028058:	3718      	adds	r7, #24
 802805a:	46bd      	mov	sp, r7
 802805c:	bdb0      	pop	{r4, r5, r7, pc}
 802805e:	bf00      	nop
 8028060:	08028a88 	.word	0x08028a88

08028064 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8028064:	b580      	push	{r7, lr}
 8028066:	b082      	sub	sp, #8
 8028068:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 802806a:	2300      	movs	r3, #0
 802806c:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 802806e:	4821      	ldr	r0, [pc, #132]	; (80280f4 <DAVE_Init+0x90>)
 8028070:	f7ff ff9c 	bl	8027fac <CLOCK_XMC4_Init>
 8028074:	4603      	mov	r3, r0
 8028076:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8028078:	79fb      	ldrb	r3, [r7, #7]
 802807a:	2b00      	cmp	r3, #0
 802807c:	d104      	bne.n	8028088 <DAVE_Init+0x24>
  {
	 /**  Initialization of INTERRUPT APP instance INT_SYNC1 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INT_SYNC1); 
 802807e:	481e      	ldr	r0, [pc, #120]	; (80280f8 <DAVE_Init+0x94>)
 8028080:	f7ff f868 	bl	8027154 <INTERRUPT_Init>
 8028084:	4603      	mov	r3, r0
 8028086:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8028088:	79fb      	ldrb	r3, [r7, #7]
 802808a:	2b00      	cmp	r3, #0
 802808c:	d104      	bne.n	8028098 <DAVE_Init+0x34>
  {
	 /**  Initialization of INTERRUPT APP instance INT_SYNC0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INT_SYNC0); 
 802808e:	481b      	ldr	r0, [pc, #108]	; (80280fc <DAVE_Init+0x98>)
 8028090:	f7ff f860 	bl	8027154 <INTERRUPT_Init>
 8028094:	4603      	mov	r3, r0
 8028096:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8028098:	79fb      	ldrb	r3, [r7, #7]
 802809a:	2b00      	cmp	r3, #0
 802809c:	d104      	bne.n	80280a8 <DAVE_Init+0x44>
  {
	 /**  Initialization of EVENT_DETECTOR APP instance ED_SYNC0 */
	 init_status = (DAVE_STATUS_t)EVENT_DETECTOR_Init(&ED_SYNC0); 
 802809e:	4818      	ldr	r0, [pc, #96]	; (8028100 <DAVE_Init+0x9c>)
 80280a0:	f7ff fb4e 	bl	8027740 <EVENT_DETECTOR_Init>
 80280a4:	4603      	mov	r3, r0
 80280a6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80280a8:	79fb      	ldrb	r3, [r7, #7]
 80280aa:	2b00      	cmp	r3, #0
 80280ac:	d104      	bne.n	80280b8 <DAVE_Init+0x54>
  {
	 /**  Initialization of EVENT_GENERATOR APP instance EG_SYNC0 */
	 init_status = (DAVE_STATUS_t)EVENT_GENERATOR_Init(&EG_SYNC0); 
 80280ae:	4815      	ldr	r0, [pc, #84]	; (8028104 <DAVE_Init+0xa0>)
 80280b0:	f7ff fb22 	bl	80276f8 <EVENT_GENERATOR_Init>
 80280b4:	4603      	mov	r3, r0
 80280b6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80280b8:	79fb      	ldrb	r3, [r7, #7]
 80280ba:	2b00      	cmp	r3, #0
 80280bc:	d104      	bne.n	80280c8 <DAVE_Init+0x64>
  {
	 /**  Initialization of EVENT_GENERATOR APP instance EG_SYNC1 */
	 init_status = (DAVE_STATUS_t)EVENT_GENERATOR_Init(&EG_SYNC1); 
 80280be:	4812      	ldr	r0, [pc, #72]	; (8028108 <DAVE_Init+0xa4>)
 80280c0:	f7ff fb1a 	bl	80276f8 <EVENT_GENERATOR_Init>
 80280c4:	4603      	mov	r3, r0
 80280c6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80280c8:	79fb      	ldrb	r3, [r7, #7]
 80280ca:	2b00      	cmp	r3, #0
 80280cc:	d104      	bne.n	80280d8 <DAVE_Init+0x74>
  {
	 /**  Initialization of EVENT_DETECTOR APP instance ED_SYNC1 */
	 init_status = (DAVE_STATUS_t)EVENT_DETECTOR_Init(&ED_SYNC1); 
 80280ce:	480f      	ldr	r0, [pc, #60]	; (802810c <DAVE_Init+0xa8>)
 80280d0:	f7ff fb36 	bl	8027740 <EVENT_DETECTOR_Init>
 80280d4:	4603      	mov	r3, r0
 80280d6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80280d8:	79fb      	ldrb	r3, [r7, #7]
 80280da:	2b00      	cmp	r3, #0
 80280dc:	d104      	bne.n	80280e8 <DAVE_Init+0x84>
  {
	 /**  Initialization of ECAT_SSC APP instance ECAT_SSC_0 */
	 init_status = (DAVE_STATUS_t)ECAT_SSC_Init(&ECAT_SSC_0); 
 80280de:	480c      	ldr	r0, [pc, #48]	; (8028110 <DAVE_Init+0xac>)
 80280e0:	f7ff fb4c 	bl	802777c <ECAT_SSC_Init>
 80280e4:	4603      	mov	r3, r0
 80280e6:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80280e8:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80280ea:	4618      	mov	r0, r3
 80280ec:	3708      	adds	r7, #8
 80280ee:	46bd      	mov	sp, r7
 80280f0:	bd80      	pop	{r7, pc}
 80280f2:	bf00      	nop
 80280f4:	1fff247c 	.word	0x1fff247c
 80280f8:	08028a4c 	.word	0x08028a4c
 80280fc:	08028a50 	.word	0x08028a50
 8028100:	1fff13e0 	.word	0x1fff13e0
 8028104:	1fff13c0 	.word	0x1fff13c0
 8028108:	1fff13d0 	.word	0x1fff13d0
 802810c:	1fff13f0 	.word	0x1fff13f0
 8028110:	08028a7c 	.word	0x08028a7c

08028114 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8028114:	b480      	push	{r7}
 8028116:	b083      	sub	sp, #12
 8028118:	af00      	add	r7, sp, #0
 802811a:	6078      	str	r0, [r7, #4]
 802811c:	460b      	mov	r3, r1
 802811e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8028120:	78fb      	ldrb	r3, [r7, #3]
 8028122:	2201      	movs	r2, #1
 8028124:	409a      	lsls	r2, r3
 8028126:	687b      	ldr	r3, [r7, #4]
 8028128:	605a      	str	r2, [r3, #4]
}
 802812a:	370c      	adds	r7, #12
 802812c:	46bd      	mov	sp, r7
 802812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028132:	4770      	bx	lr

08028134 <XMC_GPIO_EnableDigitalInput>:
 * Enable digital input path for analog pins and configures Pn_PDISC register.This configuration is applicable only for
 * analog port pins.
 *
 */
__STATIC_INLINE void XMC_GPIO_EnableDigitalInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8028134:	b480      	push	{r7}
 8028136:	b083      	sub	sp, #12
 8028138:	af00      	add	r7, sp, #0
 802813a:	6078      	str	r0, [r7, #4]
 802813c:	460b      	mov	r3, r1
 802813e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_EnableDigitalInput: Invalid analog port", XMC_GPIO_CHECK_ANALOG_PORT(port));
  
  port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8028140:	687b      	ldr	r3, [r7, #4]
 8028142:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8028144:	78fb      	ldrb	r3, [r7, #3]
 8028146:	2101      	movs	r1, #1
 8028148:	fa01 f303 	lsl.w	r3, r1, r3
 802814c:	43db      	mvns	r3, r3
 802814e:	401a      	ands	r2, r3
 8028150:	687b      	ldr	r3, [r7, #4]
 8028152:	661a      	str	r2, [r3, #96]	; 0x60
}
 8028154:	370c      	adds	r7, #12
 8028156:	46bd      	mov	sp, r7
 8028158:	f85d 7b04 	ldr.w	r7, [sp], #4
 802815c:	4770      	bx	lr
 802815e:	bf00      	nop

08028160 <Init_ECAT_Adapt_LED>:
#define P_LED2 P4_1

#define MAP2LEVEL(x) ((x==0)?XMC_GPIO_OUTPUT_LEVEL_LOW:XMC_GPIO_OUTPUT_LEVEL_HIGH)

void Init_ECAT_Adapt_LED ()
{
 8028160:	b580      	push	{r7, lr}
 8028162:	af00      	add	r7, sp, #0
  /* Set mode of all LED ports to push-pull and output level to low*/
  XMC_GPIO_SetMode(P_LED1, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 8028164:	4809      	ldr	r0, [pc, #36]	; (802818c <Init_ECAT_Adapt_LED+0x2c>)
 8028166:	2100      	movs	r1, #0
 8028168:	2280      	movs	r2, #128	; 0x80
 802816a:	f7fe fdb1 	bl	8026cd0 <XMC_GPIO_SetMode>
  XMC_GPIO_SetOutputHigh(P_LED1);
 802816e:	4807      	ldr	r0, [pc, #28]	; (802818c <Init_ECAT_Adapt_LED+0x2c>)
 8028170:	2100      	movs	r1, #0
 8028172:	f7ff ffcf 	bl	8028114 <XMC_GPIO_SetOutputHigh>
  XMC_GPIO_SetMode(P_LED2, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 8028176:	4805      	ldr	r0, [pc, #20]	; (802818c <Init_ECAT_Adapt_LED+0x2c>)
 8028178:	2101      	movs	r1, #1
 802817a:	2280      	movs	r2, #128	; 0x80
 802817c:	f7fe fda8 	bl	8026cd0 <XMC_GPIO_SetMode>
  XMC_GPIO_SetOutputHigh(P_LED2);
 8028180:	4802      	ldr	r0, [pc, #8]	; (802818c <Init_ECAT_Adapt_LED+0x2c>)
 8028182:	2101      	movs	r1, #1
 8028184:	f7ff ffc6 	bl	8028114 <XMC_GPIO_SetOutputHigh>
}
 8028188:	bd80      	pop	{r7, pc}
 802818a:	bf00      	nop
 802818c:	48028400 	.word	0x48028400

08028190 <Init_Relax_Button>:

void Init_Relax_Button ()
{
 8028190:	b580      	push	{r7, lr}
 8028192:	af00      	add	r7, sp, #0
  /* INITIALIZE BUTTON1 ON PORT 3.4 FOR INPUT */
  /* Set mode to input tristate */
  XMC_GPIO_SetMode(P3_4, XMC_GPIO_MODE_INPUT_TRISTATE);
 8028194:	4804      	ldr	r0, [pc, #16]	; (80281a8 <Init_Relax_Button+0x18>)
 8028196:	2104      	movs	r1, #4
 8028198:	2200      	movs	r2, #0
 802819a:	f7fe fd99 	bl	8026cd0 <XMC_GPIO_SetMode>
  /* Enable digital input. Only needed because P15.13 is an analog port */
  XMC_GPIO_EnableDigitalInput(P3_4);
 802819e:	4802      	ldr	r0, [pc, #8]	; (80281a8 <Init_Relax_Button+0x18>)
 80281a0:	2104      	movs	r1, #4
 80281a2:	f7ff ffc7 	bl	8028134 <XMC_GPIO_EnableDigitalInput>
}
 80281a6:	bd80      	pop	{r7, pc}
 80281a8:	48028300 	.word	0x48028300

080281ac <main>:
  else
    IN_GENERIC->IN_GEN_Bit1 = 0;
}
#endif
int main(void)
{
 80281ac:	b580      	push	{r7, lr}
 80281ae:	b082      	sub	sp, #8
 80281b0:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;
  uint32_t timer=0;
 80281b2:	2300      	movs	r3, #0
 80281b4:	607b      	str	r3, [r7, #4]
  status = DAVE_Init();                     /* Initialization of DAVE APPs  */
 80281b6:	f7ff ff55 	bl	8028064 <DAVE_Init>
 80281ba:	4603      	mov	r3, r0
 80281bc:	70fb      	strb	r3, [r7, #3]

  Init_ECAT_Adapt_LED ();                   /* Initialize the ports which drive LEDs on EtherCat shield*/
 80281be:	f7ff ffcf 	bl	8028160 <Init_ECAT_Adapt_LED>
  Init_Relax_Button();                      /* Initialize buttons on XMC4800 */
 80281c2:	f7ff ffe5 	bl	8028190 <Init_Relax_Button>

  if(status == DAVE_STATUS_FAILURE)
 80281c6:	78fb      	ldrb	r3, [r7, #3]
 80281c8:	2b01      	cmp	r3, #1
 80281ca:	d100      	bne.n	80281ce <main+0x22>
  {
    /* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
    XMC_DEBUG("DAVE APPs initialization failed\n");
    while(1U)
    {
    }
 80281cc:	e7fe      	b.n	80281cc <main+0x20>
  }

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
    MainLoop();
 80281ce:	f7f8 fe13 	bl	8020df8 <MainLoop>
  }
 80281d2:	e7fc      	b.n	80281ce <main+0x22>

080281d4 <ERU1_3_IRQHandler>:
 *
 * <b>Details of function</b><br>
 * This routine is handling the SYNC0 Interrupts and need to call the SSC Stack
 */
void SYNC0IRQHandler (void)
{
 80281d4:	b580      	push	{r7, lr}
 80281d6:	af00      	add	r7, sp, #0
	Sync0_Isr();
 80281d8:	f7f8 fd14 	bl	8020c04 <Sync0_Isr>
}
 80281dc:	bd80      	pop	{r7, pc}
 80281de:	bf00      	nop

080281e0 <ERU1_0_IRQHandler>:
 *
 * <b>Details of function</b><br>
 * This routine is handling the SYNC1 Interrupts and need to call the SSC Stack
 */
void SYNC1IRQHandler (void)
{
 80281e0:	b580      	push	{r7, lr}
 80281e2:	af00      	add	r7, sp, #0
	Sync1_Isr();
 80281e4:	f7f8 fdbc 	bl	8020d60 <Sync1_Isr>
}
 80281e8:	bd80      	pop	{r7, pc}
 80281ea:	bf00      	nop

080281ec <__errno>:
 80281ec:	4b01      	ldr	r3, [pc, #4]	; (80281f4 <__errno+0x8>)
 80281ee:	6818      	ldr	r0, [r3, #0]
 80281f0:	4770      	bx	lr
 80281f2:	bf00      	nop
 80281f4:	1fff1460 	.word	0x1fff1460

080281f8 <__libc_init_array>:
 80281f8:	b570      	push	{r4, r5, r6, lr}
 80281fa:	4b0e      	ldr	r3, [pc, #56]	; (8028234 <__libc_init_array+0x3c>)
 80281fc:	4c0e      	ldr	r4, [pc, #56]	; (8028238 <__libc_init_array+0x40>)
 80281fe:	1ae4      	subs	r4, r4, r3
 8028200:	10a4      	asrs	r4, r4, #2
 8028202:	2500      	movs	r5, #0
 8028204:	461e      	mov	r6, r3
 8028206:	42a5      	cmp	r5, r4
 8028208:	d004      	beq.n	8028214 <__libc_init_array+0x1c>
 802820a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802820e:	4798      	blx	r3
 8028210:	3501      	adds	r5, #1
 8028212:	e7f8      	b.n	8028206 <__libc_init_array+0xe>
 8028214:	f7fe fdf2 	bl	8026dfc <_init>
 8028218:	4c08      	ldr	r4, [pc, #32]	; (802823c <__libc_init_array+0x44>)
 802821a:	4b09      	ldr	r3, [pc, #36]	; (8028240 <__libc_init_array+0x48>)
 802821c:	1ae4      	subs	r4, r4, r3
 802821e:	10a4      	asrs	r4, r4, #2
 8028220:	2500      	movs	r5, #0
 8028222:	461e      	mov	r6, r3
 8028224:	42a5      	cmp	r5, r4
 8028226:	d004      	beq.n	8028232 <__libc_init_array+0x3a>
 8028228:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802822c:	4798      	blx	r3
 802822e:	3501      	adds	r5, #1
 8028230:	e7f8      	b.n	8028224 <__libc_init_array+0x2c>
 8028232:	bd70      	pop	{r4, r5, r6, pc}
 8028234:	1fff1464 	.word	0x1fff1464
 8028238:	1fff1464 	.word	0x1fff1464
 802823c:	1fff1464 	.word	0x1fff1464
 8028240:	1fff1464 	.word	0x1fff1464

08028244 <malloc>:
 8028244:	4b02      	ldr	r3, [pc, #8]	; (8028250 <malloc+0xc>)
 8028246:	4601      	mov	r1, r0
 8028248:	6818      	ldr	r0, [r3, #0]
 802824a:	f000 b863 	b.w	8028314 <_malloc_r>
 802824e:	bf00      	nop
 8028250:	1fff1460 	.word	0x1fff1460

08028254 <free>:
 8028254:	4b02      	ldr	r3, [pc, #8]	; (8028260 <free+0xc>)
 8028256:	4601      	mov	r1, r0
 8028258:	6818      	ldr	r0, [r3, #0]
 802825a:	f000 b817 	b.w	802828c <_free_r>
 802825e:	bf00      	nop
 8028260:	1fff1460 	.word	0x1fff1460

08028264 <memcpy>:
 8028264:	b510      	push	{r4, lr}
 8028266:	1e43      	subs	r3, r0, #1
 8028268:	440a      	add	r2, r1
 802826a:	4291      	cmp	r1, r2
 802826c:	d004      	beq.n	8028278 <memcpy+0x14>
 802826e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028272:	f803 4f01 	strb.w	r4, [r3, #1]!
 8028276:	e7f8      	b.n	802826a <memcpy+0x6>
 8028278:	bd10      	pop	{r4, pc}

0802827a <memset>:
 802827a:	4402      	add	r2, r0
 802827c:	4603      	mov	r3, r0
 802827e:	4293      	cmp	r3, r2
 8028280:	d002      	beq.n	8028288 <memset+0xe>
 8028282:	f803 1b01 	strb.w	r1, [r3], #1
 8028286:	e7fa      	b.n	802827e <memset+0x4>
 8028288:	4770      	bx	lr
	...

0802828c <_free_r>:
 802828c:	b530      	push	{r4, r5, lr}
 802828e:	2900      	cmp	r1, #0
 8028290:	d03d      	beq.n	802830e <_free_r+0x82>
 8028292:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8028296:	1f0b      	subs	r3, r1, #4
 8028298:	491d      	ldr	r1, [pc, #116]	; (8028310 <_free_r+0x84>)
 802829a:	2a00      	cmp	r2, #0
 802829c:	bfb8      	it	lt
 802829e:	189b      	addlt	r3, r3, r2
 80282a0:	680a      	ldr	r2, [r1, #0]
 80282a2:	460c      	mov	r4, r1
 80282a4:	b912      	cbnz	r2, 80282ac <_free_r+0x20>
 80282a6:	605a      	str	r2, [r3, #4]
 80282a8:	600b      	str	r3, [r1, #0]
 80282aa:	bd30      	pop	{r4, r5, pc}
 80282ac:	4293      	cmp	r3, r2
 80282ae:	d20d      	bcs.n	80282cc <_free_r+0x40>
 80282b0:	6819      	ldr	r1, [r3, #0]
 80282b2:	1858      	adds	r0, r3, r1
 80282b4:	4290      	cmp	r0, r2
 80282b6:	bf01      	itttt	eq
 80282b8:	585a      	ldreq	r2, [r3, r1]
 80282ba:	1852      	addeq	r2, r2, r1
 80282bc:	601a      	streq	r2, [r3, #0]
 80282be:	6842      	ldreq	r2, [r0, #4]
 80282c0:	605a      	str	r2, [r3, #4]
 80282c2:	6023      	str	r3, [r4, #0]
 80282c4:	bd30      	pop	{r4, r5, pc}
 80282c6:	4299      	cmp	r1, r3
 80282c8:	d803      	bhi.n	80282d2 <_free_r+0x46>
 80282ca:	460a      	mov	r2, r1
 80282cc:	6851      	ldr	r1, [r2, #4]
 80282ce:	2900      	cmp	r1, #0
 80282d0:	d1f9      	bne.n	80282c6 <_free_r+0x3a>
 80282d2:	6814      	ldr	r4, [r2, #0]
 80282d4:	1915      	adds	r5, r2, r4
 80282d6:	429d      	cmp	r5, r3
 80282d8:	d10a      	bne.n	80282f0 <_free_r+0x64>
 80282da:	681b      	ldr	r3, [r3, #0]
 80282dc:	4423      	add	r3, r4
 80282de:	18d0      	adds	r0, r2, r3
 80282e0:	4288      	cmp	r0, r1
 80282e2:	6013      	str	r3, [r2, #0]
 80282e4:	d113      	bne.n	802830e <_free_r+0x82>
 80282e6:	6808      	ldr	r0, [r1, #0]
 80282e8:	4403      	add	r3, r0
 80282ea:	6013      	str	r3, [r2, #0]
 80282ec:	684b      	ldr	r3, [r1, #4]
 80282ee:	e00d      	b.n	802830c <_free_r+0x80>
 80282f0:	d902      	bls.n	80282f8 <_free_r+0x6c>
 80282f2:	230c      	movs	r3, #12
 80282f4:	6003      	str	r3, [r0, #0]
 80282f6:	bd30      	pop	{r4, r5, pc}
 80282f8:	681c      	ldr	r4, [r3, #0]
 80282fa:	1918      	adds	r0, r3, r4
 80282fc:	4288      	cmp	r0, r1
 80282fe:	bf04      	itt	eq
 8028300:	6808      	ldreq	r0, [r1, #0]
 8028302:	6849      	ldreq	r1, [r1, #4]
 8028304:	6059      	str	r1, [r3, #4]
 8028306:	bf04      	itt	eq
 8028308:	1900      	addeq	r0, r0, r4
 802830a:	6018      	streq	r0, [r3, #0]
 802830c:	6053      	str	r3, [r2, #4]
 802830e:	bd30      	pop	{r4, r5, pc}
 8028310:	1fff2484 	.word	0x1fff2484

08028314 <_malloc_r>:
 8028314:	b570      	push	{r4, r5, r6, lr}
 8028316:	1ccc      	adds	r4, r1, #3
 8028318:	f024 0403 	bic.w	r4, r4, #3
 802831c:	3408      	adds	r4, #8
 802831e:	2c0c      	cmp	r4, #12
 8028320:	bf38      	it	cc
 8028322:	240c      	movcc	r4, #12
 8028324:	2c00      	cmp	r4, #0
 8028326:	4606      	mov	r6, r0
 8028328:	da03      	bge.n	8028332 <_malloc_r+0x1e>
 802832a:	230c      	movs	r3, #12
 802832c:	6033      	str	r3, [r6, #0]
 802832e:	2000      	movs	r0, #0
 8028330:	bd70      	pop	{r4, r5, r6, pc}
 8028332:	428c      	cmp	r4, r1
 8028334:	d3f9      	bcc.n	802832a <_malloc_r+0x16>
 8028336:	4a20      	ldr	r2, [pc, #128]	; (80283b8 <_malloc_r+0xa4>)
 8028338:	6813      	ldr	r3, [r2, #0]
 802833a:	4610      	mov	r0, r2
 802833c:	4619      	mov	r1, r3
 802833e:	b1a1      	cbz	r1, 802836a <_malloc_r+0x56>
 8028340:	680a      	ldr	r2, [r1, #0]
 8028342:	1b12      	subs	r2, r2, r4
 8028344:	d40e      	bmi.n	8028364 <_malloc_r+0x50>
 8028346:	2a0b      	cmp	r2, #11
 8028348:	d903      	bls.n	8028352 <_malloc_r+0x3e>
 802834a:	600a      	str	r2, [r1, #0]
 802834c:	188b      	adds	r3, r1, r2
 802834e:	508c      	str	r4, [r1, r2]
 8028350:	e01f      	b.n	8028392 <_malloc_r+0x7e>
 8028352:	428b      	cmp	r3, r1
 8028354:	bf0d      	iteet	eq
 8028356:	685a      	ldreq	r2, [r3, #4]
 8028358:	684a      	ldrne	r2, [r1, #4]
 802835a:	605a      	strne	r2, [r3, #4]
 802835c:	6002      	streq	r2, [r0, #0]
 802835e:	bf18      	it	ne
 8028360:	460b      	movne	r3, r1
 8028362:	e016      	b.n	8028392 <_malloc_r+0x7e>
 8028364:	460b      	mov	r3, r1
 8028366:	6849      	ldr	r1, [r1, #4]
 8028368:	e7e9      	b.n	802833e <_malloc_r+0x2a>
 802836a:	4d14      	ldr	r5, [pc, #80]	; (80283bc <_malloc_r+0xa8>)
 802836c:	682b      	ldr	r3, [r5, #0]
 802836e:	b91b      	cbnz	r3, 8028378 <_malloc_r+0x64>
 8028370:	4630      	mov	r0, r6
 8028372:	f000 f825 	bl	80283c0 <_sbrk_r>
 8028376:	6028      	str	r0, [r5, #0]
 8028378:	4630      	mov	r0, r6
 802837a:	4621      	mov	r1, r4
 802837c:	f000 f820 	bl	80283c0 <_sbrk_r>
 8028380:	1c42      	adds	r2, r0, #1
 8028382:	4603      	mov	r3, r0
 8028384:	d0d1      	beq.n	802832a <_malloc_r+0x16>
 8028386:	1cc5      	adds	r5, r0, #3
 8028388:	f025 0503 	bic.w	r5, r5, #3
 802838c:	4285      	cmp	r5, r0
 802838e:	d10a      	bne.n	80283a6 <_malloc_r+0x92>
 8028390:	601c      	str	r4, [r3, #0]
 8028392:	f103 000b 	add.w	r0, r3, #11
 8028396:	1d1a      	adds	r2, r3, #4
 8028398:	f020 0007 	bic.w	r0, r0, #7
 802839c:	1a82      	subs	r2, r0, r2
 802839e:	d00a      	beq.n	80283b6 <_malloc_r+0xa2>
 80283a0:	4251      	negs	r1, r2
 80283a2:	5099      	str	r1, [r3, r2]
 80283a4:	bd70      	pop	{r4, r5, r6, pc}
 80283a6:	4630      	mov	r0, r6
 80283a8:	1ae9      	subs	r1, r5, r3
 80283aa:	f000 f809 	bl	80283c0 <_sbrk_r>
 80283ae:	3001      	adds	r0, #1
 80283b0:	d0bb      	beq.n	802832a <_malloc_r+0x16>
 80283b2:	462b      	mov	r3, r5
 80283b4:	e7ec      	b.n	8028390 <_malloc_r+0x7c>
 80283b6:	bd70      	pop	{r4, r5, r6, pc}
 80283b8:	1fff2484 	.word	0x1fff2484
 80283bc:	1fff2480 	.word	0x1fff2480

080283c0 <_sbrk_r>:
 80283c0:	b538      	push	{r3, r4, r5, lr}
 80283c2:	4c06      	ldr	r4, [pc, #24]	; (80283dc <_sbrk_r+0x1c>)
 80283c4:	2300      	movs	r3, #0
 80283c6:	4605      	mov	r5, r0
 80283c8:	4608      	mov	r0, r1
 80283ca:	6023      	str	r3, [r4, #0]
 80283cc:	f7fe fce2 	bl	8026d94 <_sbrk>
 80283d0:	1c43      	adds	r3, r0, #1
 80283d2:	d102      	bne.n	80283da <_sbrk_r+0x1a>
 80283d4:	6823      	ldr	r3, [r4, #0]
 80283d6:	b103      	cbz	r3, 80283da <_sbrk_r+0x1a>
 80283d8:	602b      	str	r3, [r5, #0]
 80283da:	bd38      	pop	{r3, r4, r5, pc}
 80283dc:	1fff28fc 	.word	0x1fff28fc

080283e0 <strlen>:
 80283e0:	4603      	mov	r3, r0
 80283e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80283e6:	2a00      	cmp	r2, #0
 80283e8:	d1fb      	bne.n	80283e2 <strlen+0x2>
 80283ea:	1a18      	subs	r0, r3, r0
 80283ec:	3801      	subs	r0, #1
 80283ee:	4770      	bx	lr

080283f0 <asEntryDesc0x1600>:
 80283f0:	0005 0008 0007 0007 0020 0007 0007 0020     ........ ..... .
 8028400:	0007 0007 0020 0007                         .... ...

08028408 <aName0x1600>:
 8028408:	6144 6174 754f 2074 7270 636f 7365 2073     DataOut process 
 8028418:	6164 6174 6d20 7061 6970 676e 5300 6275     data mapping.Sub
 8028428:	6e49 6564 2078 3030 0031 7553 4962 646e     Index 001.SubInd
 8028438:	7865 3020 3230 5300 6275 6e49 6564 2078     ex 002.SubIndex 
 8028448:	3030 0033 00ff 0000                         003.....

08028450 <asEntryDesc0x1A00>:
 8028450:	0005 0008 0007 0007 0020 0007 0007 0020     ........ ..... .
 8028460:	0007 0007 0020 0007 0007 0020 0007 0000     .... ..... .....

08028470 <aName0x1A00>:
 8028470:	6144 6174 6e49 7570 2074 7270 636f 7365     DataInput proces
 8028480:	2073 6164 6174 6d20 7061 6970 676e 5300     s data mapping.S
 8028490:	6275 6e49 6564 2078 3030 0031 7553 4962     ubIndex 001.SubI
 80284a0:	646e 7865 3020 3230 5300 6275 6e49 6564     ndex 002.SubInde
 80284b0:	2078 3030 0033 7553 4962 646e 7865 3020     x 003.SubIndex 0
 80284c0:	3430 ff00 0000 0000                         04......

080284c8 <asEntryDesc0x1C12>:
 80284c8:	0005 0008 0007 0006 0010 0007               ............

080284d4 <aName0x1C12>:
 80284d4:	7953 636e 614d 616e 6567 2072 2032 7361     SyncManager 2 as
 80284e4:	6973 6e67 656d 746e ff00 0000               signment....

080284f0 <asEntryDesc0x1C13>:
 80284f0:	0005 0008 0007 0006 0010 0007               ............

080284fc <aName0x1C13>:
 80284fc:	7953 636e 614d 616e 6567 2072 2033 7361     SyncManager 3 as
 802850c:	6973 6e67 656d 746e ff00 0000               signment....

08028518 <asEntryDesc0x6000>:
 8028518:	0005 0008 0007 0007 0020 0087 0007 0020     ........ ..... .
 8028528:	0087 0007 0020 0087 0007 0020 0087 0000     .... ..... .....

08028538 <aName0x6000>:
 8028538:	6144 6174 6e49 7570 0074 6f50 6973 6974     DataInput.Positi
 8028548:	6e6f 0031 6f50 6973 6974 6e6f 0032 6f50     on1.Position2.Po
 8028558:	6973 6974 6e6f 0033 796d 6574 7473 6164     sition3.mytestda
 8028568:	6174 ff00 0000 0000                         ta......

08028570 <asEntryDesc0x7000>:
 8028570:	0005 0008 0007 0007 0020 007f 0007 0020     ........ ..... .
 8028580:	007f 0007 0020 007f                         .... ...

08028588 <aName0x7000>:
 8028588:	6144 6174 754f 0074 6d43 3164 4300 646d     DataOut.Cmd1.Cmd
 8028598:	0032 6d43 3364 ff00 0000 0000               2.Cmd3......

080285a4 <sEntryDesc0x1000>:
 80285a4:	0007 0020 0007 0000                         .. .....

080285ac <aName0x1000>:
 80285ac:	6544 6976 6563 7420 7079 0065               Device type.

080285b8 <sEntryDesc0x1001>:
 80285b8:	0005 0008 0007 0000                         ........

080285c0 <aName0x1001>:
 80285c0:	7245 6f72 2072 6572 6967 7473 7265 0000     Error register..

080285d0 <sEntryDesc0x1008>:
 80285d0:	0009 0038 0007 0000                         ..8.....

080285d8 <aName0x1008>:
 80285d8:	6544 6976 6563 6e20 6d61 0065               Device name.

080285e4 <sEntryDesc0x1009>:
 80285e4:	0009 0018 0007 0000                         ........

080285ec <aName0x1009>:
 80285ec:	6148 6472 6177 6572 7620 7265 6973 6e6f     Hardware version
 80285fc:	0000 0000                                   ....

08028600 <sEntryDesc0x100A>:
 8028600:	0009 0020 0007 0000                         .. .....

08028608 <aName0x100A>:
 8028608:	6f53 7466 6177 6572 7620 7265 6973 6e6f     Software version
 8028618:	0000 0000                                   ....

0802861c <asEntryDesc0x1018>:
 802861c:	0005 0008 0007 0007 0020 0007 0007 0020     ........ ..... .
 802862c:	0007 0007 0020 0007 0007 0020 0007 0000     .... ..... .....

0802863c <aName0x1018>:
 802863c:	6449 6e65 6974 7974 5600 6e65 6f64 2072     Identity.Vendor 
 802864c:	4449 5000 6f72 7564 7463 6320 646f 0065     ID.Product code.
 802865c:	6552 6976 6973 6e6f 5300 7265 6169 206c     Revision.Serial 
 802866c:	756e 626d 7265 ff00 0000 0000               number......

08028678 <asEntryDesc0x10F1>:
 8028678:	0005 0008 0007 0007 0020 003f 0006 0010     ........ .?.....
 8028688:	003f 0000                                   ?...

0802868c <aName0x10F1>:
 802868c:	7245 6f72 2072 6553 7474 6e69 7367 4c00     Error Settings.L
 802869c:	636f 6c61 4520 7272 726f 5220 6165 7463     ocal Error React
 80286ac:	6f69 006e 7953 636e 4520 7272 726f 4320     ion.Sync Error C
 80286bc:	756f 746e 7265 4c20 6d69 7469 ff00 0000     ounter Limit....

080286cc <asEntryDesc0x1C00>:
 80286cc:	0005 0008 0007 0005 0008 0007               ............

080286d8 <aName0x1C00>:
 80286d8:	7953 636e 6d20 6e61 6761 7265 7420 7079     Sync manager typ
 80286e8:	0065 0000                                   e...

080286ec <asEntryDesc0x1C3x>:
 80286ec:	0005 0008 0007 0006 0010 000f 0007 0020     .............. .
 80286fc:	0007 0000 0020 0000 0006 0010 0007 0007     .... ...........
 802870c:	0020 0007 0007 0020 0007 0000 0020 0000      ..... ..... ...
 802871c:	0006 0010 003f 0007 0020 0007 0007 0020     ....?... ..... .
 802872c:	003f 0006 0010 0007 0006 0010 0007 0000     ?...............
 802873c:	0010 0000 0000 0010 0000 0000 0020 0000     ............ ...
 802874c:	0000 0020 0000 0000 0020 0000 0000 0020     .. ..... ..... .
	...
 80287ac:	0001 0001 0007 0000                         ........

080287b4 <aName0x1C32>:
 80287b4:	4d53 6f20 7475 7570 2074 6170 6172 656d     SM output parame
 80287c4:	6574 0072 7953 636e 7268 6e6f 7a69 7461     ter.Synchronizat
 80287d4:	6f69 206e 7954 6570 4300 6379 656c 5420     ion Type.Cycle T
 80287e4:	6d69 0065 5300 6e79 6863 6f72 696e 617a     ime..Synchroniza
 80287f4:	6974 6e6f 5420 7079 7365 7320 7075 6f70     tion Types suppo
 8028804:	7472 6465 4d00 6e69 6d69 6d75 4320 6379     rted.Minimum Cyc
 8028814:	656c 5420 6d69 0065 6143 636c 6120 646e     le Time.Calc and
 8028824:	4320 706f 2079 6954 656d 0000 6547 2074      Copy Time..Get 
 8028834:	7943 6c63 2065 6954 656d 4400 6c65 7961     Cycle Time.Delay
 8028844:	5420 6d69 0065 7953 636e 2030 7943 6c63      Time.Sync0 Cycl
 8028854:	2065 6954 656d 5300 2d4d 7645 6e65 2074     e Time.SM-Event 
 8028864:	694d 7373 6465 4300 6379 656c 5420 6d69     Missed.Cycle Tim
 8028874:	2065 6f54 206f 6d53 6c61 006c 6853 6669     e Too Small.Shif
 8028884:	2074 6954 656d 5420 6f6f 5320 6f68 7472     t Time Too Short
	...
 80288a4:	0000 5300 6e79 2063 7245 6f72 0072 00ff     ...Sync Error...

080288b4 <aName0x1C33>:
 80288b4:	4d53 6920 706e 7475 7020 7261 6d61 7465     SM input paramet
 80288c4:	7265 5300 6e79 6863 6f72 696e 617a 6974     er.Synchronizati
 80288d4:	6e6f 5420 7079 0065 7943 6c63 2065 6954     on Type.Cycle Ti
 80288e4:	656d 0000 7953 636e 7268 6e6f 7a69 7461     me..Synchronizat
 80288f4:	6f69 206e 7954 6570 2073 7573 7070 726f     ion Types suppor
 8028904:	6574 0064 694d 696e 756d 206d 7943 6c63     ted.Minimum Cycl
 8028914:	2065 6954 656d 4300 6c61 2063 6e61 2064     e Time.Calc and 
 8028924:	6f43 7970 5420 6d69 0065 4700 7465 4320     Copy Time..Get C
 8028934:	6379 656c 5420 6d69 0065 6544 616c 2079     ycle Time.Delay 
 8028944:	6954 656d 5300 6e79 3063 4320 6379 656c     Time.Sync0 Cycle
 8028954:	5420 6d69 0065 4d53 452d 6576 746e 4d20      Time.SM-Event M
 8028964:	7369 6573 0064 7943 6c63 2065 6954 656d     issed.Cycle Time
 8028974:	5420 6f6f 5320 616d 6c6c 5300 6968 7466      Too Small.Shift
 8028984:	5420 6d69 2065 6f54 206f 6853 726f 0074      Time Too Short.
	...
 80289a4:	0000 7953 636e 4520 7272 726f ff00 0000     ..Sync Error....

080289b4 <cBitMask>:
 80289b4:	0000 0001 0003 0007 000f 001f 003f 007f     ............?...
 80289c4:	00ff 01ff 03ff 07ff 0fff 1fff 3fff 7fff     .............?..

080289d4 <cAbortCode>:
 80289d4:	0000 0000 0000 0503 0000 0504 0001 0504     ................
 80289e4:	0005 0504 0000 0601 0001 0601 0002 0601     ................
 80289f4:	0000 0602 0041 0604 0042 0604 0043 0604     ....A...B...C...
 8028a04:	0047 0604 0000 0606 0010 0607 0012 0607     G...............
 8028a14:	0013 0607 0011 0609 0030 0609 0031 0609     ........0...1...
 8028a24:	0032 0609 0033 0609 0036 0609 0000 0800     2...3...6.......
 8028a34:	0020 0800 0021 0800 0022 0800 0023 0800      ...!..."...#...
 8028a44:	0003 0601 0004 0601                         ........

08028a4c <INT_SYNC1>:
 8028a4c:	3f05 0100                                   .?..

08028a50 <INT_SYNC0>:
 8028a50:	3f08 0100                                   .?..

08028a54 <INTERRUPT_2>:
 8028a54:	3f31 0100                                   1?..

08028a58 <e_eeprom_xmc4_fce>:
 8028a58:	0020 5002 0700 0000 0000 0000                ..P........

08028a64 <EG_SYNC0_OGU_Config>:
 8028a64:	0010 0000                                   ....

08028a68 <EG_SYNC1_OGU_Config>:
 8028a68:	0010 0000                                   ....

08028a6c <ED_SYNC0_ETL_Config>:
 8028a6c:	000c 0000 0135 0000                         ....5...

08028a74 <ED_SYNC1_ETL_Config>:
 8028a74:	0003 0000 0005 0000                         ........

08028a7c <ECAT_SSC_0>:
 8028a7c:	2474 1fff 1378 1fff 8a54 0802 0230 0101     t$..x...T...0...
 8028a8c:	0000 0001 0000 0000 0000 0001 0102 0101     ................
 8028a9c:	0043 0000                                   C...
