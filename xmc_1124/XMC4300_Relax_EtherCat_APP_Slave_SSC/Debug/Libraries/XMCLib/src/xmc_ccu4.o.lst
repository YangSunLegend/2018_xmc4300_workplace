   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_ccu4.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_CCU4_StartPrescaler,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_CCU4_StartPrescaler:
  25              	.LFB130:
  26              	 .file 1 "E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc/xmc_ccu4.h"
   1:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
   2:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @file xmc_ccu4.h
   3:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @date 2016-03-09
   4:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
   5:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @cond
   6:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
   7:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
   9:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * All rights reserved.                        
  11:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                             
  12:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * following conditions are met:   
  14:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  15:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * disclaimer.                        
  17:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
  18:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
  21:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * products derived from this software without specific prior written permission.                  
  23:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  24:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  32:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
  35:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  36:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Change History
  37:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * --------------
  38:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  39:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-02-20:
  40:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Initial <br>
  41:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Documentation updates <br>
  42:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  43:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-06-20:
  44:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  45:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  46:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-07-22:
  47:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  48:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  49:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-08-17:
  50:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_PRESCALER_t enum is added to set the prescaler divider. <br>
  51:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t enum item names are updated according to the guideli
  52:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_EnableShadowTransfer() API is made as inline, to improve the speed. <br>
  53:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  54:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-09-29:
  55:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - In XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t, two more enum items are added to support exte
  56:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *       settings.
  57:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  58:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-10-07:
  59:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_GetEvent() is made as inline.
  60:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_MULTI_IRQ_ID_t is added to support the XMC_CCU4_SLICE_EnableMultipleEvents(
  61:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *       XMC_CCU4_SLICE_DisableMultipleEvents() APIs.
  62:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - DOC updates for the newly added APIs.
  63:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  64:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2016-03-09:
  65:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Optimization of write only registers 
  66:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @endcond
  67:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
  68:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  69:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #ifndef XMC_CCU4_H
  70:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #define XMC_CCU4_H
  71:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  
  72:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
  73:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * HEADER FILES
  74:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
  75:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #include "xmc_common.h"
  76:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40)
  77:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  78:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if UC_FAMILY == XMC1
  79:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  #include "xmc1_ccu4_map.h"
  80:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
  81:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  82:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if UC_FAMILY == XMC4
  83:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  #include "xmc4_ccu4_map.h"
  84:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
  85:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  86:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
  87:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @addtogroup XMClib XMC Peripheral Library
  88:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @{
  89:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
  90:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  
  91:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
  92:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @addtogroup CCU4
  93:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @brief Capture Compare Unit 4 (CCU4) low level driver for XMC family of microcontrollers<br>
  94:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  95:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The CCU4 peripheral is a major component for systems that need general purpose timers for signal
  96:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * monitoring/conditioning and Pulse Width Modulation (PWM) signal generation. Power electronic con
  97:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * switched mode power supplies or interruptible power supplies, can easily be implemented with the
  98:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CCU4 peripheral.\n
  99:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Each CCU4 module is comprised of four identical 16 bit Capture/Compare Timer slices, CC4y (where
 100:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * timer slice can work in compare mode or in capture mode.
 101:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 102:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * APIs provided in this file cover the following functional blocks of CCU4:\n
 103:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -- Timer configuration, Capture configuration, Function/Event configuration, Interrupt configura
 104:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Note:
 105:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 1. SLICE (APIs prefixed with e.g. XMC_CCU4_SLICE_)
 106:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2. Module (APIs are not having any prefix e.g. XMC_CCU4_)
 107:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 108:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Timer(Compare mode) configuration:
 109:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_COMPARE_CONFIG_t and
 110:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * function XMC_CCU4_SLICE_CompareInit().
 111:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 112:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 113:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Start and Stop the timer. (XMC_CCU4_SLICE_StartTimer(), XMC_CCU4_SLICE_StopTimer())
 114:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Update the period, compare, Dither, Prescaler  and Passive values. (XMC_CCU4_SLICE_SetTimerPe
 115:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_SetTimerCompareMatch(), XMC_CCU4_SLICE_SetPrescaler(), XMC_CCU4_SLICE_SetDithe
 116:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_SetPassiveLevel())
 117:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Enable the slices to support multichannel mode. (XMC_CCU4_SLICE_EnableMultiChannelMode())
 118:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 119:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Capture configuration:
 120:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_CAPTURE_CONFIG_t and
 121:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * function XMC_CCU4_SLICE_CaptureInit().
 122:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 123:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 124:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Configure the capture functionality. (XMC_CCU4_SLICE_Capture0Config(), XMC_CCU4_SLICE_Capture
 125:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Read the captured values along with the status, which indicate the value is latest or not.
 126:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    (XMC_CCU4_SLICE_GetCaptureRegisterValue())
 127:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 128:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Function/Event configuration:
 129:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_EVENT_CONFIG_t.\n
 130:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 131:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 132:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Enable and Disable the events. (XMC_CCU4_SLICE_EnableEvent(), XMC_CCU4_SLICE_DisableEvent())
 133:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Configure to start and stop the timer on external events.(XMC_CCU4_SLICE_StartConfig(), XMC_C
 134:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Modulation, external load and Gating of the timer output.(XMC_CCU4_SLICE_ModulationConfig(), 
 135:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_LoadConfig(), XMC_CCU4_SLICE_GateConfig())
 136:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Control the count direction of the timer based on the external event. (XMC_CCU4_SLICE_Directi
 137:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Count the external events.(XMC_CCU4_SLICE_CountConfig())
 138:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# External Trap. Which can be used as protective feature.(XMC_CCU4_SLICE_EnableTrap(), XMC_CCU4
 139:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_TrapConfig())
 140:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 141:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Interrupt configuration:
 142:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the function to configure the interrupt node to each event (XMC
 143:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @{
 144:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 145:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  
 146:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 147:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * MACROS
 148:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 149:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /* Macro to check if the interrupt enum passed is valid */
 150:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #define XMC_CCU4_SLICE_CHECK_INTERRUPT(interrupt) \
 151:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****     ((interrupt == XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH)           || \
 152:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH)              || \
 153:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP)  || \
 154:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN)|| \
 155:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT0)                 || \
 156:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT1)                 || \
 157:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT2)                 || \
 158:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_TRAP))
 159:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 160:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 161:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * ENUMS
 162:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 163:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 164:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 165:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Typedef for CCU4 Global data structure
 166:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 167:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef CCU4_GLOBAL_TypeDef XMC_CCU4_MODULE_t;
 168:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 169:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 170:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Typedef for CCU4 Slice data structure
 171:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 172:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef CCU4_CC4_TypeDef XMC_CCU4_SLICE_t;
 173:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 174:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 175:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Return Value of an API
 176:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 177:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_STATUS
 178:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 179:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_OK      = 0U, /**< API fulfils request */
 180:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_ERROR       , /**< API cannot fulfil the request */
 181:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_RUNNING     , /**< The timer slice is currently running */
 182:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_IDLE          /**< The timer slice is currently idle */
 183:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_STATUS_t;
 184:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 185:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 186:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  CCU4 module clock
 187:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 188:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_CLOCK
 189:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 190:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_SCU        = 0U, /**< Select the fCCU as the clock */
 191:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_A     , /**< External clock-A */
 192:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_B     , /**< External clock-B */
 193:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_C       /**< External clock-C */
 194:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_CLOCK_t;
 195:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 196:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 197:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CCU4 set the shadow transfer type for multichannel mode
 198:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 199:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER
 200:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 201:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE0       = (uint32_t)0x4000000, /**< Shadow transfe
 202:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      only for slice
 203:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE0  = (uint32_t)0x4000400, /**< Shadow transfe
 204:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      and hardware f
 205:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE1       = (uint32_t)0x8000000, /**< Shadow transfe
 206:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      only for slice
 207:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE1  = (uint32_t)0x8000800, /**< Shadow transfe
 208:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      and hardware f
 209:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE2       = (uint32_t)0x10000000, /**< Shadow transf
 210:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       only for slic
 211:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE2  = (uint32_t)0x10001000, /**< Shadow transf
 212:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       and hardware 
 213:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE3       = (uint32_t)0x20000000, /**< Shadow transf
 214:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       only for slic
 215:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE3  = (uint32_t)0x20002000  /**< Shadow transf
 216:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       and hardware 
 217:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_t;
 218:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 219:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 220:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Operational modes of CCU4 slice
 221:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 222:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MODE
 223:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 224:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODE_COMPARE  = 0U, /**< slice(CC4y) operates in Compare Mode */
 225:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODE_CAPTURE        /**< slice(CC4y) operates in Capture Mode */
 226:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MODE_t;
 227:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 228:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 229:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer counting modes for the slice
 230:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 231:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_COUNT_MODE
 232:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 233:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA  = 0U, /**< Edge Aligned Mode */
 234:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA        /**< Center Aligned Mode */
 235:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_COUNT_MODE_t;
 236:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 237:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 238:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer repetition mode for the slice
 239:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 240:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_REPEAT_MODE
 241:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 242:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT = 0U,  /**< Repetitive mode: continuous mode of operation
 243:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE        /**< Single shot mode: Once a Period match/One mat
 244:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                       occurs timer goes to idle state */
 245:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t;
 246:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 247:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 248:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer counting direction for the CCU4 slice
 249:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 250:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_COUNT_DIR
 251:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 252:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_DIR_UP   = 0U, /**< Counting up */
 253:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_DIR_DOWN       /**< Counting down */
 254:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_COUNT_DIR_t;
 255:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 256:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 257:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Capture mode register sets
 258:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 259:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_CAP_REG_SET
 260:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 261:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_CAP_REG_SET_LOW  = 0U, /**< Capture register-0, Capture register-1 used */
 262:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_CAP_REG_SET_HIGH       /**< Capture register-2, Capture register-3 used */
 263:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_CAP_REG_SET_t;
 264:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 265:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 266:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Prescaler mode
 267:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 268:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_PRESCALER_MODE
 269:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 270:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_MODE_NORMAL = 0U, /**< Fixed division of module clock */
 271:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_MODE_FLOAT        /**< Floating divider. */
 272:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_PRESCALER_MODE_t;
 273:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 274:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 275:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer output passive level
 276:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 277:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL
 278:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 279:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW  = 0U, /**< Passive level = Low */
 280:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH       /**< Passive level = High */
 281:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t;
 282:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 283:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 284:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer clock Divider
 285:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 286:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_PRESCALER
 287:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 288:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_1  = 0U, /**< Slice Clock = fccu4 */
 289:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_2      , /**< Slice Clock = fccu4/2 */
 290:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_4      , /**< Slice Clock = fccu4/4 */
 291:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_8      , /**< Slice Clock = fccu4/8 */
 292:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_16     , /**< Slice Clock = fccu4/16 */
 293:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_32     , /**< Slice Clock = fccu4/32 */
 294:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_64     , /**< Slice Clock = fccu4/64 */
 295:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_128    , /**< Slice Clock = fccu4/128 */
 296:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_256    , /**< Slice Clock = fccu4/256 */
 297:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_512    , /**< Slice Clock = fccu4/512 */
 298:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_1024   , /**< Slice Clock = fccu4/1024 */
 299:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_2048   , /**< Slice Clock = fccu4/2048 */
 300:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_4096   , /**< Slice Clock = fccu4/4096 */
 301:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_8192   , /**< Slice Clock = fccu4/8192 */
 302:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_16384  , /**< Slice Clock = fccu4/16384 */
 303:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_32768    /**< Slice Clock = fccu4/32768 */
 304:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_PRESCALER_t;
 305:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 306:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 307:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Function list
 308:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 309:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_FUNCTION
 310:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 311:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_START           = 0U, /**< Start function */
 312:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_STOP                , /**< Stop function */
 313:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_CAPTURE_EVENT0      , /**< Capture Event-0 function, CCycapt0 signal is u
 314:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                      generation */
 315:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_CAPTURE_EVENT1      , /**< Capture Event-1 function, CCycapt1 signal is u
 316:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                      generation */
 317:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_GATING              , /**< Gating function */
 318:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_DIRECTION           , /**< Direction function */
 319:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_LOAD                , /**< Load function */
 320:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_COUNT               , /**< Counting function */
 321:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_OVERRIDE            , /**< Override function */
 322:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_MODULATION          , /**< Modulation function */
 323:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_TRAP                  /**< Trap function */
 324:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_FUNCTION_t;
 325:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 326:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 327:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event list
 328:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 329:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT
 330:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 331:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_NONE  = 0U, /**< None */
 332:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_0         , /**< Event-0 */
 333:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_1         , /**< Event-1 */
 334:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_2           /**< Event-2 */
 335:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_t;
 336:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 337:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 338:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event trigger criteria  - Edge sensitivity
 339:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 340:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY
 341:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 342:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_NONE         = 0U, /**< None */
 343:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE      , /**< Rising Edge of the input signal gen
 344:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE     , /**< Falling Edge of the input signal ge
 345:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 trigger */
 346:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE          /**< Both Rising and Falling edges cause
 347:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_t;
 348:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 349:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 350:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event trigger criteria  - Level sensitivity
 351:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 352:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY
 353:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 354:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH = 0U, /**< Level sensitive functions react to 
 355:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW  = 1U, /**< Level sensitive functions react to 
 356:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   /* Below enum items can be utilised specific to the functionality */
 357:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_LOW = 0U, /**< Timer counts up, during Low sta
 358:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_HIGH = 1U /**< Timer counts up, during High st
 359:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t;
 360:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 361:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 362:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Low pass filter Configuration. The External Event input should be stable for a selected number 
 363:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 364:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_FILTER
 365:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 366:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_DISABLED  = 0U, /**< No Low Pass Filter */
 367:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_3_CYCLES      , /**< 3 clock cycles */
 368:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_5_CYCLES      , /**< 5 clock cycles */
 369:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_7_CYCLES        /**< 7 clock cycles */
 370:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_FILTER_t;
 371:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 372:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 373:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event Input list. This list depicts the possible input connections to the CCU4 slice.
 374:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Interconnects are specific to each device.
 375:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 376:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef uint8_t XMC_CCU4_SLICE_INPUT_t;
 377:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 378:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 379:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Actions that can be performed upon detection of an external Timer STOP event
 380:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 381:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_END_MODE
 382:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 383:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_STOP       = 0U, /**< Stops the timer, without clearing TIMER regis
 384:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_CLEAR          , /**< Without stopping timer, clears the TIMER regi
 385:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_STOP_CLEAR       /**< Stops the timer and clears the TIMER register
 386:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_END_MODE_t;
 387:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 388:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 389:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Actions that can be performed upon detection of an external Timer START event
 390:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 391:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_START_MODE
 392:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 393:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_START_MODE_TIMER_START       = 0U, /**< Start the timer from the current count of 
 394:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR       /**< Clears the TIMER register and start the ti
 395:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_START_MODE_t;
 396:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 397:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 398:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Modulation of timer output signals
 399:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 400:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MODULATION_MODE
 401:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 402:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT  = 0U, /**< Clear ST and OUT signals */
 403:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT           /**< Clear only the OUT signal */
 404:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MODULATION_MODE_t;
 405:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 406:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 407:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Trap exit mode
 408:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 409:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TRAP_EXIT_MODE
 410:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 411:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC = 0U, /**< Clear trap state as soon as the trap signal is
 412:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW              /**< Clear only when acknowledged by software */
 413:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TRAP_EXIT_MODE_t;
 414:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 415:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 416:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer clear on capture
 417:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 418:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_CLEAR_MODE
 419:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 420:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_NEVER    = 0U, /**< Never clear the timer on any capture event */
 421:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_CAP_HIGH     , /**< Clear only when timer value has been captured
 422:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_CAP_LOW      , /**< Clear only when timer value has been captured
 423:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_ALWAYS         /**< Always clear the timer upon detection of any 
 424:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_CLEAR_MODE_t;
 425:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 426:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 427:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Multi Channel Shadow transfer request configuration options
 428:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 429:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MCMS_ACTION
 430:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 431:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR          = 0U, /**< Transfer Compare and Period Shadow 
 432:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 the actual registers upon MCS xfer 
 433:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP     = 1U, /**< Transfer Compare, Period and Presca
 434:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 register values to the actual regis
 435:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 request */
 436:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT = 3U  /**< Transfer Compare, Period ,Prescaler
 437:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 Compare register values to the actu
 438:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 MCS xfer request */
 439:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MCMS_ACTION_t;
 440:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 441:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 442:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Available Interrupt Event Ids
 443:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 444:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_IRQ_ID
 445:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 446:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH       = 0U , /**< Period match counting up */
 447:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH          = 1U , /**< Period match -> One match counting down */
 448:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP   = 2U , /**< Compare match counting up */
 449:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN = 3U , /**< Compare match counting down */
 450:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT0             = 8U , /**< Event-0 occurrence */
 451:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT1             = 9U , /**< Event-1 occurrence */
 452:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT2             = 10U, /**< Event-2 occurrence */
 453:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_TRAP               = 11U  /**< Trap occurrence */
 454:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_IRQ_ID_t;
 455:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 456:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 457:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Available Interrupt Event Ids, which is added to support multi event APIs
 458:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 459:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MULTI_IRQ_ID
 460:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 461:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_PERIOD_MATCH       = 0x1U,   /**< Period match counting up */
 462:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_ONE_MATCH          = 0x2U,   /**< Period match -> One match counting 
 463:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP   = 0x4U,   /**< Compare match counting up */
 464:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN = 0x8U,   /**< Compare match counting down */
 465:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT0             = 0x100U, /**< Event-0 occurrence */
 466:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT1             = 0x200U, /**< Event-1 occurrence */
 467:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT2             = 0x400U, /**< Event-2 occurrence */
 468:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MULTI_IRQ_ID_t;
 469:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 470:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 471:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Service Request Lines for CCU4. Event are mapped to these SR lines and these are used to generat
 472:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 473:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_SR_ID
 474:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 475:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_0    = 0U, /**< Service Request Line-0 selected  */
 476:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_1        , /**< Service Request Line-1 selected  */
 477:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_2        , /**< Service Request Line-2 selected  */
 478:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_3          /**< Service Request Line-3 selected  */
 479:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_SR_ID_t;
 480:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 481:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 482:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Slice shadow transfer options.
 483:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 484:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SHADOW_TRANSFER
 485:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 486:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_0            = CCU4_GCSS_S0SE_Msk, /**< Transfer Period, Compare a
 487:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 488:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-0 */
 489:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_0     = CCU4_GCSS_S0DSE_Msk, /**< Transfer Dither compare s
 490:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 491:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_0  = CCU4_GCSS_S0PSE_Msk, /**< Transfer Prescaler shadow
 492:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 493:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_1            = CCU4_GCSS_S1SE_Msk, /**< Transfer Period, Compare a
 494:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 495:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-1 */
 496:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_1     = CCU4_GCSS_S1DSE_Msk, /**< Transfer Dither compare s
 497:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual registers for S
 498:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_1  = CCU4_GCSS_S1PSE_Msk, /**< Transfer Prescaler shadow
 499:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 500:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_2            = CCU4_GCSS_S2SE_Msk, /**< Transfer Period, Compare a
 501:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 502:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-2 */
 503:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_2     = CCU4_GCSS_S2DSE_Msk, /**< Transfer Dither compare s
 504:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 505:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_2  = CCU4_GCSS_S2PSE_Msk, /**< Transfer Prescaler shadow
 506:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 507:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_3            = CCU4_GCSS_S3SE_Msk, /**< Transfer Period, Compare a
 508:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 509:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-3 */
 510:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_3     = CCU4_GCSS_S3DSE_Msk, /**< Transfer Dither compare s
 511:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 512:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_3  = CCU4_GCSS_S3PSE_Msk  /**< Transfer Prescaler shadow
 513:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 514:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SHADOW_TRANSFER_t;
 515:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 516:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU4V3) || defined(DOXYGEN)/* Defined for XMC1400 devices only */
 517:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 518:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Slice shadow transfer mode options.
 519:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @note Only available for XMC1400 series
 520:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 521:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE
 522:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 523:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_IN_PERIOD_MATCH_AND_ONE_MATCH = 0U,  /**< Shadow transfer is 
 524:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                 One match. */
 525:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_PERIOD_MATCH = 1U,  /**< Shadow transfer is done only
 526:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_ONE_MATCH = 2U  /**< Shadow transfer is done only in 
 527:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t; 
 528:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 529:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 530:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 531:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Immediate write into configuration register
 532:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC1400 series
 533:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 534:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_WRITE_INTO
 535:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 536:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_PERIOD_CONFIGURATION = CCU4_CC4_STC_IRPC_Msk,                  /**< Imm
 537:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 538:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Con
 539:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_COMPARE_CONFIGURATION = CCU4_CC4_STC_IRCC_Msk,                 /**< Imm
 540:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 541:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Con
 542:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_PASSIVE_LEVEL_CONFIGURATION = CCU4_CC4_STC_IRLC_Msk,           /**< Imm
 543:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 544:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                            Config
 545:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_DITHER_VALUE_CONFIGURATION = CCU4_CC4_STC_IRDC_Msk,            /**< Imm
 546:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 547:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                            Config
 548:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_FLOATING_PRESCALER_VALUE_CONFIGURATION = CCU4_CC4_STC_IRFC_Msk /**< Imm
 549:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 550:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Val
 551:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_WRITE_INTO_t;
 552:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 553:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 554:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 555:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Automatic Shadow Transfer request when writing into shadow register
 556:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC1400 series
 557:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 558:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO
 559:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 560:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PERIOD_SHADOW = CCU4_CC4_STC_ASPC_Msk,        
 561:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 562:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 563:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 564:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE_SHADOW = CCU4_CC4_STC_ASCC_Msk,       
 565:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 566:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 567:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 568:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PASSIVE_LEVEL = CCU4_CC4_STC_ASLC_Msk,        
 569:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 570:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 571:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_DITHER_SHADOW = CCU4_CC4_STC_ASDC_Msk,        
 572:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 573:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 574:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_FLOATING_PRESCALER_SHADOW = CCU4_CC4_STC_ASFC_
 575:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 576:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 577:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 578:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 579:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_t;
 580:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 581:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 582:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Used to create Mask needed for Multi-channel Shadow transfer enable/disable
 583:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 584:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MASK
 585:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 586:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_0  = 1U , /**< SLICE-0 */
 587:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_1  = 2U , /**< SLICE-1 */
 588:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_2  = 4U , /**< SLICE-2 */
 589:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_3  = 8U   /**< SLICE-3 */
 590:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MASK_t;
 591:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 592:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 593:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 594:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * DATA STRUCTURES
 595:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 596:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 597:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 598:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure of an External Event(Event-0/1/2).
 599:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Needed to configure the various aspects of an External Event.
 600:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This structure will not connect the external event with an external function.
 601:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 602:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_EVENT_CONFIG
 603:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 604:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_INPUT_t                   mapped_input; /**< Required input signal for the Event *
 605:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_t  edge;         /**< Select the event edge of the input si
 606:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                               This is needed for an edge sensitive 
 607:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t level;        /**< Select the event level of the input s
 608:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                               This is needed for an level sensitive
 609:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_t            duration;     /**< Low Pass filter duration in terms of 
 610:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_CONFIG_t;
 611:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 612:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /*Anonymous structure/union guard start*/
 613:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(__CC_ARM)
 614:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma push
 615:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma anon_unions
 616:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #elif defined(__TASKING__)
 617:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma warning 586
 618:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 619:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 620:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 621:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure for CCU4 slice. Specifically configures the CCU4 slice to compare 
 622:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This excludes event and function configuration.
 623:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 624:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_COMPARE_CONFIG
 625:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 626:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   union
 627:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   {
 628:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****     struct
 629:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****     {
 630:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t timer_mode : 1;         /**< Edge aligned or Centre Aligned.
 631:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum ::XMC_CCU4_SLICE_TIMER_COUNT_MODE_t */
 632:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t monoshot : 1;           /**< Single shot or Continuous mode .
 633:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t*/
 634:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t shadow_xfer_clear : 1;  /**< Should PR and CR shadow xfer happen when timer is clear
 635:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 10;
 636:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t dither_timer_period: 1; /**< Can the period of the timer dither? */
 637:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t dither_duty_cycle : 1;  /**< Can the compare match of the timer dither? */
 638:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 1;
 639:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t prescaler_mode: 1;      /**< Normal or floating prescaler mode.
 640:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_PRESCALER_MODE_t*/
 641:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 8;
 642:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t mcm_enable : 1;         /**< Multi-Channel mode enable? */
 643:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 6;
 644:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****     };
 645:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****     uint32_t tc;
 646:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   };
 647:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t prescaler_initval : 4;      /**< Initial prescaler divider value 
 648:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                             Accepts enum :: XMC_CCU4_SLICE_PRESCALER_t */
 649:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t float_limit : 4;            /**< The max value which the prescaler divider can increment
 650:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t dither_limit : 4;           /**< The value that determines the spreading of dithering */
 651:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t passive_level : 1;          /**< Configuration of ST and OUT passive levels.
 652:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t*
 653:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer if true.*/
 654:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_COMPARE_CONFIG_t;
 655:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 656:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 657:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure for CCU4 slice. Specifically configures the CCU4 slice to capture 
 658:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This excludes event and function configuration.
 659:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 660:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_CAPTURE_CONFIG
 661:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 662:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   union
 663:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   {
 664:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****     struct
 665:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****     {
 666:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 4;
 667:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t fifo_enable : 1;      /**< Should the capture registers be setup as a FIFO?(Extended
 668:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t timer_clear_mode : 2; /**< How should the timer register be cleared upon detection o
 669:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                           Accepts enum ::XMC_CCU4_SLICE_TIMER_CLEAR_MODE_t*/
 670:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 4;
 671:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t same_event : 1;       /**< Should the capture event for C1V/C0V and C3V/C2V be same 
 672:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t ignore_full_flag : 1; /**< Should updates to capture registers follow full flag rule
 673:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 3;
 674:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t prescaler_mode: 1;    /**< Normal or floating prescaler Accepts enum :: XMC_CCU4_SLI
 675:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 15;
 676:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****     };
 677:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****     uint32_t tc;
 678:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   };
 679:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t prescaler_initval : 4;    /**< Prescaler divider value */
 680:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t float_limit : 4;          /**< The max value which the prescaler divider can increment t
 681:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t timer_concatenation : 1;  /**< Enables the concatenation of the timer */
 682:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_CAPTURE_CONFIG_t;
 683:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /*Anonymous structure/union guard end*/
 684:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(__CC_ARM)
 685:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma pop
 686:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #elif defined(__TASKING__)
 687:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma warning restore
 688:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 689:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 690:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * API Prototypes
 691:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 692:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 693:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #ifdef __cplusplus
 694:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** extern "C" {
 695:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 696:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 697:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsValidModule(const XMC_CCU4_MODULE_t *const module)
 698:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 699:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   bool tmp = false;
 700:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 701:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = (module == CCU40);
 702:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 703:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41) 
 704:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU41);
 705:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 706:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 707:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42)
 708:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU42);
 709:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 710:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 711:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43)
 712:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU43);
 713:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 714:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 715:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return tmp;  
 716:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } 
 717:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 718:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsValidSlice(const XMC_CCU4_SLICE_t *const slice)
 719:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 720:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   bool tmp = false;
 721:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 722:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = (slice == CCU40_CC40);
 723:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC41)  
 724:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC41);
 725:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 726:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC42)  
 727:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC42);
 728:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 729:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC43)  
 730:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC43);
 731:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 732:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41)  
 733:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC40);
 734:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC41)  
 735:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC41);
 736:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 737:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC42)  
 738:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC42);
 739:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 740:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC43)  
 741:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC43);
 742:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 743:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif 
 744:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42)  
 745:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC40);
 746:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC41)  
 747:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC41);
 748:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 749:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC42)  
 750:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC42);
 751:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 752:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC43)  
 753:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC43);
 754:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 755:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 756:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43)  
 757:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC40);
 758:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC41)  
 759:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC41);
 760:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 761:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC42)  
 762:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC42);
 763:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 764:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC43)  
 765:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC43);
 766:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 767:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif 
 768:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 769:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return tmp;  
 770:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** } 
 771:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 772:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 773:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 774:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mcs_action multi-channel shadow transfer request configuration
 775:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 776:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 777:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 778:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 779:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Initialization of global register GCTRL.<br>\n
 780:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  As part of module initialization, behaviour of the module upon detection
 781:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Multi-Channel Mode trigger is configured. Will also invoke the XMC_CCU4_EnableModule().
 782:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  The API call would bring up the required CCU4 module and also initialize the module for
 783:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  the required multi-channel shadow transfer.
 784:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 785:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 786:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_CompareInit()<BR> XMC_CCU4_SLICE_CaptureInit().
 787:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 788:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action);
 789:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 790:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 791:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 792:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param clock Choice of input clock to the module
 793:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 794:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 795:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 796:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 797:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Selects the Module Clock by configuring GCTRL.PCIS bits.<BR>\n
 798:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  There are 3 potential clock sources. This API helps to select the required clock source.
 799:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Call to this API is valid after the XMC_CCU4_Init().
 800:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 801:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 802:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * None.<BR>
 803:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 804:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock);
 805:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 806:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 807:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 808:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 809:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 810:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 811:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 812:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the CCU4 module and brings it to active state.<BR>\n
 813:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Also disables the gating of the clock signal (if applicable depending on the device being select
 814:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Invoke this API before any operations are done on the CCU4 module. Invoked from  XMC_CCU4_Init()
 815:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 816:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 817:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SetModuleClock()<BR> XMC_CCU4_DisableModule()<BR> XMC_CCU4_StartPrescaler().
 818:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 819:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module);
 820:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 821:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 822:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 823:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 824:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 825:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 826:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 827:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Brings the CCU4 module to reset state and enables gating of the clock signal(if applicable depen
 828:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * on the device being selected).<BR>\n
 829:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Invoke this API when a CCU4 module needs to be disabled completely.
 830:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Any operation on the CCU4 module will have no effect after this API is called.
 831:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 832:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 833:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableModule()<BR> XMC_CCU4_DisableModule().
 834:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 835:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module);
 836:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 837:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 838:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 839:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 840:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 841:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 842:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 843:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Starts the prescaler and restores clocks to the timer slices, by setting GIDLC.SPRB bit.<BR>\n
 844:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Once the input to the prescaler has been chosen and the prescaler divider of all slices program
 845:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  the prescaler itself may be started. Invoke this  API after XMC_CCU4_Init()
 846:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  (Mandatory to fully initialize the module).Directly accessed register is GIDLC.
 847:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 848:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 849:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescal
 850:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_StopPrescaler().
 851:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 852:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
 853:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
  27              	 .loc 1 853 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
 854:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 855:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
  43              	 .loc 1 855 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a DB68     	 ldr r3,[r3,#12]
  46 000c 43F48072 	 orr r2,r3,#256
  47 0010 7B68     	 ldr r3,[r7,#4]
  48 0012 DA60     	 str r2,[r3,#12]
 856:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
  49              	 .loc 1 856 0
  50 0014 0C37     	 adds r7,r7,#12
  51              	.LCFI3:
  52              	 .cfi_def_cfa_offset 4
  53 0016 BD46     	 mov sp,r7
  54              	.LCFI4:
  55              	 .cfi_def_cfa_register 13
  56              	 
  57 0018 5DF8047B 	 ldr r7,[sp],#4
  58              	.LCFI5:
  59              	 .cfi_restore 7
  60              	 .cfi_def_cfa_offset 0
  61 001c 7047     	 bx lr
  62              	 .cfi_endproc
  63              	.LFE130:
  65 001e 00BF     	 .section .text.XMC_CCU4_SLICE_SetDitherCompareValue,"ax",%progbits
  66              	 .align 2
  67              	 .thumb
  68              	 .thumb_func
  70              	XMC_CCU4_SLICE_SetDitherCompareValue:
  71              	.LFB157:
 857:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 858:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 859:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 860:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 861:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 862:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 863:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 864:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops the prescaler and blocks clocks to the timer slices, by setting GIDLS.CPRB bit.<BR>\n
 865:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Opposite of the StartPrescaler routine.
 866:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Clears the run bit of the prescaler. Ensures that the module clock is not supplied to
 867:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the slices of the module.Registers directly accessed is GIDLS.
 868:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 869:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 870:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_St
 871:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 872:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_StopPrescaler(XMC_CCU4_MODULE_t *const module)
 873:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 874:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_StopPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 875:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLS |= (uint32_t) CCU4_GIDLS_CPRB_Msk;
 876:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 877:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 878:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 879:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 880:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 881:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 882:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 883:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 884:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the state of the prescaler, by reading GSTAT.PRB bit.<BR>\n
 885:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This will return true if the prescaler is running. If clock is being supplied to the slices of t
 886:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * module then returns as true.
 887:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 888:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 889:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_D
 890:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 891:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsPrescalerRunning(XMC_CCU4_MODULE_t *const module)
 892:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 893:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_IsPrescalerRunning:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 894:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((bool)((module->GSTAT & (uint32_t) CCU4_GSTAT_PRB_Msk) == (uint32_t)CCU4_GSTAT_PRB_Msk));
 895:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 896:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 897:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 898:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 899:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param clock_mask Slices whose clocks are to be enabled simultaneously.
 900:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Bit location 0/1/2/3 represents slice-0/1/2/3 respectively.
 901:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x1 to 0xF]
 902:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 903:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 904:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 905:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 906:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables clocks of multiple slices at a time, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
 907:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * GIDLC.CS3I bits.\n\n
 908:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Takes an input clock_mask, which determines the slices that would receive the clock. Bring them 
 909:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * of the idle state simultaneously.
 910:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 911:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 912:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock().
 913:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 914:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableMultipleClocks(XMC_CCU4_MODULE_t *const module, const uint8_t c
 915:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 916:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU4_IsValidModule(module)
 917:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Wrong clock mask", (clock_mask < 16U));
 918:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 919:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC |= (uint32_t) clock_mask;
 920:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 921:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 922:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 923:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 924:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number Slice for which the clock should be Enabled.
 925:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x0 to 0x3]
 926:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 927:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 928:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 929:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 930:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Enables the slice timer clock, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
 931:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  GIDLC.CS3I bits according to the selected \a slice_number.\n\n
 932:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  It is possible to enable/disable clock at slice level. This uses the \b slice_number to indicat
 933:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  slice whose clock needs to be enabled.
 934:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 935:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 936:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XM
 937:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 938:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_numb
 939:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 940:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 941:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));
 942:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 943:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC |= ((uint32_t) 1) << slice_number;
 944:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 945:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 946:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 947:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 948:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number Slice for which the clock should be disabled.
 949:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x0 to 0x3]
 950:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 951:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 952:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 953:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 954:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the slice timer clock, by configuring GIDLS.SS0I, GIDLS.SSS1I, GIDLS.SSS2I, 
 955:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * GIDLS.SSS3I bits according to the selected \a slice_number .\n\n
 956:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is possible to disable clock at slice level using the module pointer.
 957:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \b slice_number is used to disable the clock to a given slice of the module.
 958:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is GIDLS.
 959:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 960:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 961:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC
 962:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 963:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_DisableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_num
 964:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 965:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 966:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Slice Number", (slice_number < 4U));
 967:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 968:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLS |= ((uint32_t) 1) << slice_number;
 969:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 970:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 971:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 972:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
 973:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param compare_init Pointer to slice configuration structure
 974:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 975:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 976:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 977:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 978:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Initialization of a CC4 slice to compare mode, by configuring CC4yTC, CC4yCMC, CC4yPSC, CC4yDITH
 979:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yFPCS, CC4yCHC registers.\n\n 
 980:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4 slice is configured with Timer configurations in this routine.
 981:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After initialization user has to explicitly enable the shadow transfer for the required values b
 982:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableShadowTransfer() with appropriate mask.
 983:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 984:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 985:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * None.
 986:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 987:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
 988:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init);
 989:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 990:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 991:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
 992:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param capture_init Pointer to slice configuration structure
 993:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 994:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 995:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 996:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 997:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Initialization of a CC4 slice to capture mode, by configuring CC4yTC, CC4yCMC, CC4yPSC,CC4yFPCS 
 998:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4 slice is configured with Capture configurations in  this routine.After initialization user h
 999:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * enable the shadow transfer for the required  values by calling XMC_CCU4_EnableShadowTransfer()
1000:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * with appropriate mask.
1001:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1002:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1003:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config().
1004:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1005:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
1006:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init);
1007:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1008:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1009:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1010:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1011:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Start Function
1012:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param start_mode Behavior of slice when the start function is activated
1013:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1014:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1015:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1016:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1017:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configures the Start Function of the slice, by configuring CC4yCMC.ENDS and CC4yTC.ENDM bits.\n
1018:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Start function is mapped with one of the 3 events. An external signal can control when a CC4 ti
1019:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Additionally, the behaviour of the slice upon activation of the start function is configured as
1020:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1021:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1022:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1023:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1024:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
1025:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_EVENT_t event,
1026:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_START_MODE_t start_mode);
1027:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1028:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1029:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1030:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Stop Function
1031:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param end_mode Behavior of slice when the stop function is activated
1032:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1033:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1034:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1035:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1036:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Stop function for the slice, by configuring CC4yCMC.STRTS and CC4yTC.STRM bits.\n
1037:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stop function is mapped with one of the 3 events. An external signal can control when a CCU4 tim
1038:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Additionally, the behaviour of the slice upon activation of the stop function is configured as w
1039:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1040:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1041:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1042:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1043:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
1044:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_EVENT_t event,
1045:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_END_MODE_t end_mode);
1046:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1047:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1048:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1049:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External load Function
1050:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1051:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1052:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1053:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1054:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configures the Load Function for the slice, by configuring CC4yCMC.LDS bit.\n\n
1055:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Load function is mapped with one of the 3 events. Up on occurrence of the event,\n
1056:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  if CC4yTCST.CDIR set to 0,CC4yTIMER register is reloaded with the value from compare register\n
1057:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  if CC4yTCST.CDIR set to 1,CC4yTIMER register is reloaded with the value from period register\n
1058:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1059:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1060:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1061:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1062:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1063:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1064:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1065:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1066:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1067:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Modulation Function
1068:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mod_mode Desired Modulation mode
1069:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param synch_with_pwm Option to synchronize modulation with PWM start
1070:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                       Pass \b true if the modulation needs to be synchronized with PWM signal.
1071:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1072:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1073:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1074:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1075:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Output Modulation Function of the slice, by configuring CCeyCMC.MOS, CC4yTC.EMT a
1076:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTC.EMS bits.\n\n
1077:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Modulation function is mapped with one of the 3 events. The output signal of the CCU can
1078:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * be modulated according to a external input.  Additionally, the behaviour of the slice upon activ
1079:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * of the modulation function is configured as well.
1080:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1081:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1082:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1083:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1084:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
1085:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const XMC_CCU4_SLICE_EVENT_t event,
1086:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
1087:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const bool synch_with_pwm);
1088:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1089:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1090:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1091:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Count Function
1092:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1093:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1094:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1095:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1096:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Count Function of the slice, by configuring CC4yCMC.CNTS bit.\n\n
1097:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Count function is mapped with one of the 3 events. CCU4 slice can take an external
1098:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * signal to act as the counting event. The CCU4 slice would count the
1099:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * edges present on the \b event selected.
1100:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1101:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1102:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1103:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1104:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1105:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1106:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1107:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1108:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event  Map an External event to the External Gating Function
1109:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1110:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1111:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1112:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1113:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Gating Function of the slice, by configuring CC4yCMC.GATES bit.\n\n
1114:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Gating function is mapped with one of the 3 events.  A CCU4 slice can use an input signal that w
1115:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * operate as counter gating. If the configured Active level is detected the counter will gate all 
1116:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1117:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1118:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1119:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1120:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1121:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1122:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1123:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1124:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the Capture-0 Function
1125:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1126:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1127:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1128:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1129:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Capture-0 Function of the slice, by configuring CC4yCMC.CAP0S bit.\n\n
1130:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Capture function is mapped with one of the 3 events.  A CCU4 slice can be configured into captur
1131:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * with the selected \b event. In this mode the CCU4 will capture the timer value into CC4yC0V and 
1132:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1133:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1134:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1135:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1136:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
1137:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1138:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1139:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1140:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the Capture-1 Function
1141:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1142:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1143:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1144:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1145:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Capture-1 Function of the slice, by configuring CC4yCMC.CAP1S bit.\n\n
1146:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Capture function is mapped with one of the 3 events. A CCU4 slice can be configured into capture
1147:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode with the selected \b event. In this mode the CCU4 will capture the timer value into CC4yC2V
1148:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1149:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1150:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1151:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1152:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
1153:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1154:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1155:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1156:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1157:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    bool would return true if the extended capture read back mode is enabled<BR>
1158:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1159:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1160:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Checks if Extended capture mode read is enabled for particular slice or not, by reading CC4yTC.E
1161:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * In this mode the there is only one associated read address for all the capture registers.
1162:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Individual capture registers can still be accessed in this mode.
1163:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1164:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1165:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_GetCapturedValueFromFifo().
1166:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1167:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsExtendedCapReadEnabled(const XMC_CCU4_SLICE_t *const slice)
1168:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1169:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_IsExtendedCapReadEnabled:Invalid Module Pointer", XMC_CCU4_IsValidSlic
1170:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((bool)((slice->TC & (uint32_t) CCU4_CC4_TC_ECM_Msk) == (uint32_t)CCU4_CC4_TC_ECM_Msk));
1171:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1172:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1173:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU4V1) /* Defined for XMC4500, XMC4400, XMC4200, XMC4100 devices only */
1174:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1175:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1176:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number to check whether read value belongs to required slice or not
1177:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1178:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   int32_t   Returns -1 if the FIFO value being retrieved is not from the \b slice_number.
1179:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             Returns the value captured in the \b slice_number, if captured value is from the cor
1180:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                     Range: [0x0 to 0xFFFF]
1181:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1182:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1183:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Read captured value from FIFO(ECRD register).\n\n
1184:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1185:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1186:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1187:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * derived/inferred from the captured values.
1188:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1189:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1190:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_IsExtendedCapReadEnabled().
1191:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC4500, XMC4400, XMC4200 and XMC4100 series 
1192:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1193:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** int32_t XMC_CCU4_GetCapturedValueFromFifo(const XMC_CCU4_MODULE_t *const module, const uint8_t slic
1194:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #else
1195:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1196:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1197:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param set The capture register set from which the captured value is to be retrieved
1198:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1199:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    uint32_t Returns the value captured in the \b slice_number
1200:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             Range: [0x0 to 0xFFFF]
1201:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1202:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1203:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Read captured value from FIFO(CC4yECRD0 and CC4yECRD1).\n\n
1204:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1205:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1206:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1207:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * derived/inferred from the captured values.
1208:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1209:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1210:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_IsExtendedCapReadEnabled().
1211:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @note Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices only. For other d
1212:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1213:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** uint32_t XMC_CCU4_SLICE_GetCapturedValueFromFifo(const XMC_CCU4_SLICE_t *const slice,
1214:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 		                                             const XMC_CCU4_SLICE_CAP_REG_SET_t set);
1215:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
1216:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1217:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1218:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1219:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Count Direction Function
1220:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1221:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1222:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1223:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1224:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Count Direction of the slice, by configuring CC4yCMC.UDS bit.\n\n
1225:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Count direction function is mapped with one of the 3 events. A slice can be configured to change
1226:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTIMER count direction depending on an external signal.
1227:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1228:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1229:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1230:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1231:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t eve
1232:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1233:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1234:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1235:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1236:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1237:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1238:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1239:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the status bit override Function of the slice, by configuring CC4yCMC.OFS bit.\n\n
1240:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Status bit override function is mapped with one of the 3 events. A slice can be configured to ch
1241:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * output of the timer's CC4yST signal depending on an external signal. 
1242:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1243:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1244:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent().
1245:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1246:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice);
1247:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1248:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1249:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1250:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param exit_mode How should a previously logged trap state be exited?
1251:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param synch_with_pwm Should exit of trap state be synchronized with PWM cycle start?
1252:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1253:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1254:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1255:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1256:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Trap Function of the slice, by configuring CC4yCMC.TS, CC4yTC.TRPSE, and CC4yTC.T
1257:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Trap function is mapped with Event-2. Criteria for exiting the trap state is configured.
1258:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This trap function allows PWM outputs to react on the state of an input pin.
1259:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Thus PWM output can be forced to inactive state upon detection of a trap.
1260:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is also possible to synchronize the trap function with the PWM signal using the \b synch_with
1261:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1262:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1263:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1264:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1265:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
1266:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
1267:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                bool synch_with_pwm);
1268:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1269:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1270:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1271:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1272:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param ev1_config Pointer to event 1 configuration data
1273:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param ev2_config Pointer to event 2 configuration data
1274:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1275:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1276:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1277:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1278:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1279:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Map Status bit override function with an Event1 & Event 2 of the slice and configure CC4yINS reg
1280:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Details such as the input mapped to the event, event detection criteria and Low Pass filter opti
1281:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * by this routine for the events 1 & 2.  Event-1 input would be the trigger to override the value.
1282:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Event-2 input would be the override value.
1283:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1284:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1285:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig().
1286:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1287:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
1288:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_
1289:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_
1290:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1291:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1292:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1293:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event The External Event which needs to be configured.
1294:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param config Pointer to event configuration data.
1295:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1296:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1297:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1298:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1299:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures an External Event of the slice, by updating CC4yINS register .\n\n
1300:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Details such as the input mapped to the event, event detection criteria and low pass filter
1301:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * options are programmed by this routine. The Event \b config  will configure the input selection,
1302:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the edge selection, the level selection and the Low pass filter for the  event.
1303:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1304:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1305:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_LoadConfig()<BR
1306:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ModulationConfig()<BR> XMC_CCU4_SLICE_CountConfig()<BR> XMC_CCU4_SLICE_GateConfi
1307:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config()<BR> XMC_CCU4_SLICE_Directio
1308:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig()<BR> XMC_CCU4_SLICE_TrapConfig().
1309:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1310:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
1311:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                    const XMC_CCU4_SLICE_EVENT_t event,
1312:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config);
1313:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1314:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1315:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1316:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event The External Event which needs to be configured.
1317:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param input One of the 16 inputs meant to be mapped to the desired event
1318:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1319:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1320:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1321:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1322:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1323:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Selects an input for an external event, by configuring CC4yINS register.\n\n
1324:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is possible to select one of the possible 16 input signals for a given Event.
1325:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This configures the CC4yINS.EVxIS for the selected event.
1326:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1327:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1328:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_LoadConfig()<BR
1329:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ModulationConfig()<BR> XMC_CCU4_SLICE_CountConfig()<BR> XMC_CCU4_SLICE_GateConfi
1330:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config()<BR> XMC_CCU4_SLICE_Directio
1331:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig()<BR> XMC_CCU4_SLICE_TrapConfig().
1332:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1333:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
1334:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                              const XMC_CCU4_SLICE_EVENT_t event,
1335:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                              const XMC_CCU4_SLICE_INPUT_t input);
1336:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1337:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1338:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1339:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1340:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1341:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1342:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1343:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the trap feature, by setting CC4yTC.TRAPE0, CC4yTC.TRAPE1, CC4yTC.TRAPE2 and CC4yTC.TRAP
1344:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \a out_mask.\n\n
1345:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * A particularly useful feature where the PWM output can be forced inactive upon detection of a tr
1346:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * can be the output of a sensing element which has just detected an abnormal electrical condition.
1347:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1348:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1349:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_TrapConfig()<BR> XMC_CCU4_SLICE_DisableTrap()<BR> XMC_CCU4_SLICE_ConfigureEvent(
1350:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInput().
1351:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1352:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableTrap(XMC_CCU4_SLICE_t *const slice)
1353:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1354:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1355:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC |= (uint32_t) CCU4_CC4_TC_TRAPE_Msk;
1356:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1357:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1358:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1359:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1360:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1361:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1362:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1363:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1364:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the trap feature, by clearing CC4yTC.TRAPE0, CC4yTC.TRAPE1, CC4yTC.TRAPE2 and CC4yTC.TR
1365:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \a out_mask.\n\n.\n\n
1366:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will revert the changes done by XMC_CCU4_SLICE_EnableTrap().
1367:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This Ensures that the TRAP function has no effect on the output of the CCU4 slice.
1368:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1369:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1370:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableTrap().
1371:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1372:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableTrap(XMC_CCU4_SLICE_t *const slice)
1373:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1374:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1375:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_TRAPE_Msk);
1376:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1377:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1378:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1379:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1380:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1381:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    bool returns \b true if the Timer is running else it returns \b false.
1382:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1383:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1384:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the state of the timer (Either Running or stopped(idle)), by reading CC4yTCST.TRB bit.
1385:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1386:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1387:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
1388:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1389:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
1390:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1391:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1392:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
1393:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1394:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1395:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1396:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1397:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1398:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   ::XMC_CCU4_SLICE_TIMER_COUNT_DIR_t returns the direction in which the timer is counting.
1399:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1400:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1401:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the timer counting direction, by reading CC4yTCST.CDIR bit.\n\n
1402:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will return the direction in which the timer is currently
1403:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * incrementing(XMC_CCU4_SLICE_TIMER_COUNT_DIR_UP) or decrementing (XMC_CCU4_SLICE_TIMER_COUNT_DIR_
1404:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1405:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1406:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1407:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1408:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_COUNT_DIR_t XMC_CCU4_SLICE_GetCountingDir(const XMC_CCU4_SLICE
1409:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1410:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCountingDir:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1411:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_COUNT_DIR_t)(((slice->TCST) & CCU4_CC4_TCST_CDIR_Msk) >> CCU4_CC4_TC
1412:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1413:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1414:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1415:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1416:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1417:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1418:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1419:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1420:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Starts the timer counting operation, by setting CC4yTCSET.TRBS bit.\n\n
1421:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is necessary to have configured the CC4 slice before starting its timer.
1422:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Before the Timer is started ensure that the clock is provided to the slice.
1423:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1424:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1425:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StopTimer().
1426:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1427:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
1428:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1429:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1430:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
1431:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1432:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1433:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1434:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1435:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1436:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1437:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1438:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1439:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops the Timer.<BR>\n
1440:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer counting operation can be stopped by invoking this API, by setting CC4yTCCLR.TRBC bit.
1441:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1442:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1443:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1444:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1445:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
1446:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1447:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1448:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR |= (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
1449:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1450:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1451:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1452:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1453:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1454:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1455:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1456:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1457:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Resets the timer count to zero, by setting CC4yTCCLR.TCC bit.\n\n
1458:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * A timer which has been stopped can still retain the last counted value.
1459:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After invoking this API the timer value will be cleared.
1460:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1461:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1462:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1463:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1464:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
1465:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1466:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1467:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR |= (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
1468:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1469:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1470:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1471:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1472:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1473:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    ::XMC_CCU4_SLICE_MODE_t returns XMC_CCU4_SLICE_MODE_COMPARE if the slice is operating in comp
1474:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                          returns XMC_CCU4_SLICE_MODE_CAPTURE if the slice is operating in captur
1475:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1476:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1477:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the current mode of operation in the slice (either Capture mode or Compare mode), by r
1478:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTC.CMOD bit.\n\n
1479:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Ensure that before invoking this API the CCU4 slice should be configured otherwise the output of
1480:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * invalid.
1481:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1482:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1483:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1484:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1485:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_MODE_t XMC_CCU4_SLICE_GetSliceMode(const XMC_CCU4_SLICE_t *const sli
1486:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1487:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetSliceMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1488:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_MODE_t)(((slice->TC) & CCU4_CC4_TC_CMOD_Msk) >> CCU4_CC4_TC_CMOD_Pos));
1489:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1490:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1491:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1492:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mode Desired repetition mode (Either single shot or Continuous)
1493:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1494:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1495:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1496:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1497:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Timer to either Single shot mode or continuous mode, by configuring CC4yTC.TSSM b
1498:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1499:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode has been set to single shot. In the continuous mode of operation, the timer starts counting
1500:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * reaching the terminal count.
1501:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1502:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1503:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerRepeatMode().
1504:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1505:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetTimerRepeatMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_RE
1506:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1507:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1508:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1509:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <br>
1510:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  ::XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t returns XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT if continu
1511:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                     returns XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE if single sh
1512:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1513:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1514:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the Timer repeat mode, either Single shot mode or continuous mode, by reading CC4yTC.T
1515:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1516:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode has been set to single shot mode. In the continuous mode of operation, the timer starts cou
1517:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * all over again after reaching the terminal count.
1518:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1519:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1520:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerRepeatMode().
1521:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1522:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t XMC_CCU4_SLICE_GetTimerRepeatMode(
1523:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 		                                                                            const XMC_CCU4_SLICE_
1524:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1525:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice
1526:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t)(((slice->TC) & CCU4_CC4_TC_TSSM_Msk) >> CCU4_CC4_TC_T
1527:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1528:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1529:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1530:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mode Desired counting mode (Either Edge Aligned or Center Aligned)
1531:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1532:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1533:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1534:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1535:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the timer counting mode either Edge Aligned or Center Aligned, by configuring CC4yTC.
1536:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * In the edge aligned mode, the timer counts from 0 to the terminal count. Once the timer count ha
1537:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * compare value, the timer status output asserts itself. It will now deassert only after the timer
1538:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * terminal count.\n In the center aligned mode, the timer first counts from 0 to the terminal coun
1539:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * During this upward and downward counting, the timer status output stays asserted as long as the 
1540:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * greater than the compare value.
1541:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1542:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1543:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerCountingMode().
1544:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1545:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_
1546:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1547:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1548:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1549:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <br>
1550:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  ::XMC_CCU4_SLICE_TIMER_COUNT_MODE_t returns XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA if edge aligned 
1551:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                     returns XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA if center aligned
1552:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1553:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1554:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves timer counting mode either Edge aligned or Center Aligned, by reading CC4yTC.TCM bit.\
1555:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1556:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1557:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerCountingMode().
1558:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1559:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_COUNT_MODE_t XMC_CCU4_SLICE_GetTimerCountingMode(
1560:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 		                                                                           const XMC_CCU4_SLICE_t
1561:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1562:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1563:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_COUNT_MODE_t)(((slice->TC) & CCU4_CC4_TC_TCM_Msk) >> CCU4_CC4_TC_TCM
1564:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1565:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1566:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1567:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param period_val Timer period value
1568:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *        Range: [0x0 to 0xFFFF]
1569:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1570:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1571:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1572:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1573:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the timer period, by writing CC4yPRS register.\n\n
1574:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The frequency of counting/ PWM frequency is determined by this value. The period value is writte
1575:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * register. Explicitly enable the shadow transfer for the the period value by calling
1576:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableShadowTransfer() with appropriate mask. If shadow transfer is enabled and the tim
1577:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * a period match transfers the value from the shadow register to the actual period register.
1578:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1579:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1580:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
1581:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1582:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16
1583:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1584:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slic
1585:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->PRS = (uint32_t) period_val;
1586:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1587:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1588:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1589:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1590:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1591:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer period value
1592:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1593:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1594:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1595:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the timer period value currently effective, by reading CC4yPR register.\n\n
1596:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * If the timer is active then the value being returned is currently being used for the PWM period.
1597:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1598:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1599:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The XMC_CCU4_SLICE_SetTimerPeriodMatch() would set the new period value to a shadow register.
1600:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would only transfer the new values into the actual period register if the shadow transfer r
1601:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU4_SLICE_GetTimerPeri
1602:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * would not reflect the new values until the shadow transfer completes.
1603:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1604:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1605:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerPeriodMatch().
1606:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1607:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerPeriodMatch(const XMC_CCU4_SLICE_t *const slice)
1608:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1609:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slic
1610:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->PR);
1611:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1612:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1613:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1614:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1615:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param compare_val Timer compare value
1616:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1617:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1618:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1619:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1620:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the timer compare value, by writing CC4yCRS register.<BR>\n
1621:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  The PWM duty cycle is determined by this value.
1622:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
1623:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the the period/compare value by calling XMC_CCU4_EnableShadowTransfer() with
1624:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * appropriate mask.If shadow transfer is enabled and the timer is running,
1625:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * a period match transfers the value from the shadow register to the actual compare register.
1626:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1627:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1628:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
1629:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1630:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint1
1631:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1632:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1633:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->CRS = (uint32_t) compare_val;
1634:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1635:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1636:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1637:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1638:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1639:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer compare value
1640:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1641:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1642:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1643:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the timer compare value currently effective, by reading CC4yCRS register.\n\n
1644:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * If the timer is active then the value being returned is currently being for the PWM duty cycle( 
1645:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1646:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1647:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The XMC_CCU4_SLICE_SetTimerCompareMatch() would set the new compare value to a shadow register.
1648:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would only transfer the new values into the actual compare register if the shadow transfer 
1649:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU4_SLICE_GetTimerComp
1650:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * would not reflect the new values until the shadow transfer completes.
1651:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is CC4yCR.
1652:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1653:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1654:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerCompareMatch().
1655:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1656:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerCompareMatch(const XMC_CCU4_SLICE_t *const slice)
1657:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1658:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1659:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->CR);
1660:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1661:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1662:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1663:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1664:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param shadow_transfer_msk Shadow transfer request mask for various transfers.
1665:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                             Use ::XMC_CCU4_SHADOW_TRANSFER_t enum items to create a mask of choi
1666:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                              using a bit wise OR operation.
1667:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1668:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1669:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1670:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1671:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Requests of shadow transfer for Period, Compare, Passive level, dither and prescaler, by configu
1672:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the GCSS register.\n\n
1673:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The transfer from the shadow registers to the actual registers is done in the immediate next occ
1674:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * shadow transfer trigger after the API is called.
1675:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1676:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Any call to XMC_CCU4_SLICE_SetTimerPeriodMatch()<BR> XMC_CCU4_SLICE_SetTimerCompareMatch()<BR>
1677:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_SetPrescaler()<BR> XMC_CCU4_SLICE_CompareInit()<BR> XMC_CCU4_SLICE_CaptureInit().
1678:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be succeeded by this API.
1679:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is GCSS.
1680:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1681:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1682:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1683:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1684:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t 
1685:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1686:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module))
1687:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GCSS = (uint32_t)shadow_transfer_msk;  
1688:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1689:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1690:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1691:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1692:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1693:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer value
1694:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1695:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1696:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1697:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the latest timer value, from CC4yTIMER register.\n\n
1698:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1699:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1700:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerValue().
1701:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1702:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerValue(const XMC_CCU4_SLICE_t *const slice)
1703:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1704:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1705:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->TIMER);
1706:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1707:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1708:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1709:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param timer_val The new timer value that has to be loaded into the TIMER register.
1710:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                  Range: [0x0 to 0xFFFF]
1711:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1712:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1713:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1714:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1715:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Loads a new timer value, by setting CC4yTIMER register.\n\n
1716:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1717:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1718:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Request to load is ignored if the timer is running.
1719:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1720:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1721:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerValue().
1722:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1723:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerValue(XMC_CCU4_SLICE_t *const slice, const uint16_t tim
1724:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1725:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1726:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TIMER = (uint32_t) timer_val;
1727:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1728:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1729:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1730:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param period_dither Boolean instruction on dithering of period match
1731:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param duty_dither Boolean instruction on dithering of compare match
1732:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param spread Dither compare value
1733:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1734:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1735:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1736:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1737:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables dithering of PWM frequency and duty cycle, by configuring CC4yTC.DITHE and CC4yDITS bits
1738:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Some control loops are slow in updating PWM frequency and duty cycle. In such a case, a Bresenha
1739:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * can help reduce long term errors. Dithering can be applied to period and duty individually,
1740:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * this can be selected using the parameter \b period_dither and \b duty_dither.
1741:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The \b spread would provide the dither compare value. If the dither counter value is less than t
1742:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the period/compare values would be dithered according to the dither mode selected. This API woul
1743:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_SetDitherCompareValue().
1744:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1745:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1746:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After this API call, XMC_CCU4_EnableShadowTransfer() has to be called with appropriate mask
1747:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * to transfer the dither value.
1748:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1749:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1750:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableDithering().
1751:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1752:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_EnableDithering(XMC_CCU4_SLICE_t *const slice,
1753:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                     const bool period_dither,
1754:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                     const bool duty_dither,
1755:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****                                     const uint8_t spread);
1756:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1757:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1758:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1759:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1760:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1761:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1762:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1763:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables dithering of PWM frequency and duty cycle, by clearing CC4yTC.DITHE bits.\n\n
1764:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This disables the Dither mode that was set in XMC_CCU4_SLICE_EnableDithering().
1765:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will not clear the dither compare value.
1766:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1767:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1768:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableDithering().
1769:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1770:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableDithering(XMC_CCU4_SLICE_t *const slice)
1771:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1772:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableDithering:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice))
1773:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_DITHE_Msk);
1774:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1775:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1776:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1777:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1778:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1779:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1780:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1781:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1782:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the floating prescaler, by setting CC4yTC.FPE bit.\n\n
1783:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The prescaler divider starts with an initial value and increments upon every period match. It ke
1784:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * until a ceiling (prescaler compare value) is hit and thereafter rolls back to the original presc
1785:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is necessary to have programmed an initial divider value and a compare value before the featu
1786:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1787:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1788:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetFloatingPrescalerCompareValue()<BR> XMC_CCU4_SLICE_DisableFloatingPrescaler()
1789:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetPrescaler().
1790:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1791:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableFloatingPrescaler(XMC_CCU4_SLICE_t *const slice)
1792:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1793:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(
1794:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC |= (uint32_t) CCU4_CC4_TC_FPE_Msk;
1795:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1796:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1797:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1798:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1799:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1800:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1801:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1802:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1803:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the floating prescaler, by clearing CC4yTC.FPE bit.\n\n
1804:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would return the prescaler to the normal mode.
1805:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The prescaler that would be applied is the value present in CC4yPSC.
1806:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1807:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   * \par<b>Related APIs:</b><br>
1808:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableFloatingPrescaler().
1809:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1810:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableFloatingPrescaler(XMC_CCU4_SLICE_t *const slice)
1811:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1812:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice
1813:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_FPE_Msk);
1814:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1815:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1816:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1817:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1818:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param comp_val Dither compare value
1819:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                 Range: [0x0 to 0xF]
1820:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1821:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1822:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1823:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1824:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Sets the dither spread/compare value, by setting CC4yDITS.DCVS bits.\n\n
1825:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This value is the cornerstone of PWM dithering feature. Dithering is applied/done when the value
1826:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * dithering counter is less than this compare/spread value. For all dithering counter values great
1827:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the spread value, there is no dithering. After setting the value XMC_CCU4_EnableShadowTransfer()
1828:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  * called with appropriate mask.
1829:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1830:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   * \par<b>Related APIs:</b><br>
1831:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableDithering().
1832:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1833:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetDitherCompareValue(XMC_CCU4_SLICE_t *const slice, const uint
1834:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** {
  72              	 .loc 1 1834 0
  73              	 .cfi_startproc
  74              	 
  75              	 
  76              	 
  77 0000 80B4     	 push {r7}
  78              	.LCFI6:
  79              	 .cfi_def_cfa_offset 4
  80              	 .cfi_offset 7,-4
  81 0002 83B0     	 sub sp,sp,#12
  82              	.LCFI7:
  83              	 .cfi_def_cfa_offset 16
  84 0004 00AF     	 add r7,sp,#0
  85              	.LCFI8:
  86              	 .cfi_def_cfa_register 7
  87 0006 7860     	 str r0,[r7,#4]
  88 0008 0B46     	 mov r3,r1
  89 000a FB70     	 strb r3,[r7,#3]
1835:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetDitherCompareValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sl
1836:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->DITS = comp_val;
  90              	 .loc 1 1836 0
  91 000c FA78     	 ldrb r2,[r7,#3]
  92 000e 7B68     	 ldr r3,[r7,#4]
  93 0010 1A62     	 str r2,[r3,#32]
1837:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_ccu4.h **** }
  94              	 .loc 1 1837 0
  95 0012 0C37     	 adds r7,r7,#12
  96              	.LCFI9:
  97              	 .cfi_def_cfa_offset 4
  98 0014 BD46     	 mov sp,r7
  99              	.LCFI10:
 100              	 .cfi_def_cfa_register 13
 101              	 
 102 0016 5DF8047B 	 ldr r7,[sp],#4
 103              	.LCFI11:
 104              	 .cfi_restore 7
 105              	 .cfi_def_cfa_offset 0
 106 001a 7047     	 bx lr
 107              	 .cfi_endproc
 108              	.LFE157:
 110              	 .section .text.XMC_CCU4_lAssertReset,"ax",%progbits
 111              	 .align 2
 112              	 .thumb
 113              	 .thumb_func
 115              	XMC_CCU4_lAssertReset:
 116              	.LFB200:
 117              	 .file 2 "../Libraries/XMCLib/src/xmc_ccu4.c"
   1:../Libraries/XMCLib/src/xmc_ccu4.c **** /**
   2:../Libraries/XMCLib/src/xmc_ccu4.c ****  * @file xmc_ccu4.c
   3:../Libraries/XMCLib/src/xmc_ccu4.c ****  * @date 2015-10-07
   4:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
   5:../Libraries/XMCLib/src/xmc_ccu4.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_ccu4.c ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
   9:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_ccu4.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_ccu4.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_ccu4.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_ccu4.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_ccu4.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 
  18:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_ccu4.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 
  21:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_ccu4.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_ccu4.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_ccu4.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_ccu4.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_ccu4.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_ccu4.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_ccu4.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_ccu4.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_ccu4.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_ccu4.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_ccu4.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  36:../Libraries/XMCLib/src/xmc_ccu4.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_ccu4.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  39:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  42:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-06-20:
  43:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - Removed definition of GetDriverVersion API <br>
  44:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  45:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-07-01:
  46:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - In XMC_CCU4_SLICE_StartConfig(), Options in XMC_ASSERT check for start mode is corrected. 
  47:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  48:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-07-24:
  49:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  50:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  51:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-08-17:
  52:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - Start of prescaler XMC_CCU4_StartPrescaler() is invoked in XMC_CCU4_Init() API. <br>
  53:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - Bug fix XMC_CCU4_SLICE_ConfigureEvent() during the level setting for XMC14 devices. <br>
  54:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - XMC_CCU4_EnableShadowTransfer() definition is removed, since the API is made as inline. <b
  55:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  56:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  57:../Libraries/XMCLib/src/xmc_ccu4.c ****  * 2015-10-07:
  58:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - XMC_CCU4_SLICE_GetEvent() is made as inline.
  59:../Libraries/XMCLib/src/xmc_ccu4.c ****  *     - DOC updates for the newly added APIs.
  60:../Libraries/XMCLib/src/xmc_ccu4.c ****  *
  61:../Libraries/XMCLib/src/xmc_ccu4.c ****  * @endcond
  62:../Libraries/XMCLib/src/xmc_ccu4.c ****  */
  63:../Libraries/XMCLib/src/xmc_ccu4.c ****  
  64:../Libraries/XMCLib/src/xmc_ccu4.c **** /**************************************************************************************************
  65:../Libraries/XMCLib/src/xmc_ccu4.c ****  * HEADER FILES
  66:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
  67:../Libraries/XMCLib/src/xmc_ccu4.c **** #include "xmc_ccu4.h"
  68:../Libraries/XMCLib/src/xmc_ccu4.c **** 
  69:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU40)
  70:../Libraries/XMCLib/src/xmc_ccu4.c **** #include "xmc_scu.h"
  71:../Libraries/XMCLib/src/xmc_ccu4.c **** /**************************************************************************************************
  72:../Libraries/XMCLib/src/xmc_ccu4.c ****  * MACROS
  73:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
  74:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_NUM_SLICES_PER_MODULE          (4U)
  75:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_DITHER_PERIOD_MASK       (1U)
  76:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_DITHER_DUTYCYCLE_MASK    (2U)
  77:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK   (3U)
  78:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK  (1U)
  79:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK (3U)
  80:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU4V3) /* Defined for XMC1400 devices only */
  81:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK  CCU4_CC4_INS1_EV0IS_Msk
  82:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
  83:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK  CCU4_CC4_INS_EV0IS_Msk
  84:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
  85:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_GIDLC_CLOCK_MASK               (15U)
  86:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_GCSS_SLICE0_MASK               (1U)
  87:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_GCSS_SLICE1_MASK               (16U)
  88:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_GCSS_SLICE2_MASK               (256U)
  89:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_GCSS_SLICE3_MASK               (4096U)
  90:../Libraries/XMCLib/src/xmc_ccu4.c **** 
  91:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro to check if the clock selected enum passed is valid */
  92:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_CLOCK(clock) \
  93:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((clock == XMC_CCU4_CLOCK_SCU)        || \
  94:../Libraries/XMCLib/src/xmc_ccu4.c ****      (clock == XMC_CCU4_CLOCK_EXTERNAL_A) || \
  95:../Libraries/XMCLib/src/xmc_ccu4.c ****      (clock == XMC_CCU4_CLOCK_EXTERNAL_B) || \
  96:../Libraries/XMCLib/src/xmc_ccu4.c ****      (clock == XMC_CCU4_CLOCK_EXTERNAL_C))
  97:../Libraries/XMCLib/src/xmc_ccu4.c **** 
  98:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro used to check if the event ID is valid*/
  99:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_EVENT_ID(event_id) \
 100:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((event_id == XMC_CCU4_SLICE_EVENT_NONE)|| \
 101:../Libraries/XMCLib/src/xmc_ccu4.c ****      (event_id == XMC_CCU4_SLICE_EVENT_0)   || \
 102:../Libraries/XMCLib/src/xmc_ccu4.c ****      (event_id == XMC_CCU4_SLICE_EVENT_1)   || \
 103:../Libraries/XMCLib/src/xmc_ccu4.c ****      (event_id == XMC_CCU4_SLICE_EVENT_2))
 104:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 105:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro used to check if the edge sensitivity is valid*/
 106:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_EDGE_SENSITIVITY(edge) \
 107:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((edge == XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_NONE)        || \
 108:../Libraries/XMCLib/src/xmc_ccu4.c ****      (edge == XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE) || \
 109:../Libraries/XMCLib/src/xmc_ccu4.c ****      (edge == XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE)|| \
 110:../Libraries/XMCLib/src/xmc_ccu4.c ****      (edge == XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE))
 111:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 112:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro used to check if the filter clock cycles are valid */
 113:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_EVENT_FILTER(cycles) \
 114:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((cycles == XMC_CCU4_SLICE_EVENT_FILTER_DISABLED) || \
 115:../Libraries/XMCLib/src/xmc_ccu4.c ****      (cycles == XMC_CCU4_SLICE_EVENT_FILTER_3_CYCLES) || \
 116:../Libraries/XMCLib/src/xmc_ccu4.c ****      (cycles == XMC_CCU4_SLICE_EVENT_FILTER_5_CYCLES) || \
 117:../Libraries/XMCLib/src/xmc_ccu4.c ****      (cycles == XMC_CCU4_SLICE_EVENT_FILTER_7_CYCLES))
 118:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 119:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro used to check if the Multi-channel input related action is valid*/
 120:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action) \
 121:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((mcs_action == XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR)      || \
 122:../Libraries/XMCLib/src/xmc_ccu4.c ****      (mcs_action == XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP) || \
 123:../Libraries/XMCLib/src/xmc_ccu4.c ****      (mcs_action == XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT))
 124:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 125:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro used to check if the SR line is valid*/
 126:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_SLICE_CHECK_SR_ID(id) \
 127:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((id == XMC_CCU4_SLICE_SR_ID_0) || \
 128:../Libraries/XMCLib/src/xmc_ccu4.c ****      (id == XMC_CCU4_SLICE_SR_ID_1) || \
 129:../Libraries/XMCLib/src/xmc_ccu4.c ****      (id == XMC_CCU4_SLICE_SR_ID_2) || \
 130:../Libraries/XMCLib/src/xmc_ccu4.c ****      (id == XMC_CCU4_SLICE_SR_ID_3))
 131:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 132:../Libraries/XMCLib/src/xmc_ccu4.c **** /** Macro to check if the end mode enum passed is valid */
 133:../Libraries/XMCLib/src/xmc_ccu4.c **** #define XMC_CCU4_CHECK_END_MODE(end_mode) \
 134:../Libraries/XMCLib/src/xmc_ccu4.c ****     ((end_mode == XMC_CCU4_SLICE_END_MODE_TIMER_STOP) || \
 135:../Libraries/XMCLib/src/xmc_ccu4.c ****      (end_mode == XMC_CCU4_SLICE_END_MODE_TIMER_CLEAR) || \
 136:../Libraries/XMCLib/src/xmc_ccu4.c ****      (end_mode == XMC_CCU4_SLICE_END_MODE_TIMER_STOP_CLEAR))
 137:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 138:../Libraries/XMCLib/src/xmc_ccu4.c **** /**************************************************************************************************
 139:../Libraries/XMCLib/src/xmc_ccu4.c ****  * LOCAL ROUTINES
 140:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
 141:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 142:../Libraries/XMCLib/src/xmc_ccu4.c **** __STATIC_INLINE void XMC_CCU4_lAssertReset(const XMC_CCU4_MODULE_t *const module)
 143:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 118              	 .loc 2 143 0
 119              	 .cfi_startproc
 120              	 
 121              	 
 122 0000 80B5     	 push {r7,lr}
 123              	.LCFI12:
 124              	 .cfi_def_cfa_offset 8
 125              	 .cfi_offset 7,-8
 126              	 .cfi_offset 14,-4
 127 0002 82B0     	 sub sp,sp,#8
 128              	.LCFI13:
 129              	 .cfi_def_cfa_offset 16
 130 0004 00AF     	 add r7,sp,#0
 131              	.LCFI14:
 132              	 .cfi_def_cfa_register 7
 133 0006 7860     	 str r0,[r7,#4]
 144:../Libraries/XMCLib/src/xmc_ccu4.c ****   switch ((uint32_t)module)
 134              	 .loc 2 144 0
 135 0008 7B68     	 ldr r3,[r7,#4]
 136 000a 094A     	 ldr r2,.L8
 137 000c 9342     	 cmp r3,r2
 138 000e 03D0     	 beq .L5
 139 0010 084A     	 ldr r2,.L8+4
 140 0012 9342     	 cmp r3,r2
 141 0014 04D0     	 beq .L6
 145:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 146:../Libraries/XMCLib/src/xmc_ccu4.c ****     case (uint32_t)CCU40:
 147:../Libraries/XMCLib/src/xmc_ccu4.c ****       XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 148:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 149:../Libraries/XMCLib/src/xmc_ccu4.c ****       
 150:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU41)
 151:../Libraries/XMCLib/src/xmc_ccu4.c ****     case (uint32_t)CCU41:
 152:../Libraries/XMCLib/src/xmc_ccu4.c ****       XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 153:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 154:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 155:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 156:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU42)
 157:../Libraries/XMCLib/src/xmc_ccu4.c ****     case (uint32_t)CCU42:
 158:../Libraries/XMCLib/src/xmc_ccu4.c ****       XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 159:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 160:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 161:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 162:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU43)
 163:../Libraries/XMCLib/src/xmc_ccu4.c ****     case (uint32_t)CCU43:
 164:../Libraries/XMCLib/src/xmc_ccu4.c ****       XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 165:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 166:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 167:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 168:../Libraries/XMCLib/src/xmc_ccu4.c ****     default:
 169:../Libraries/XMCLib/src/xmc_ccu4.c ****       XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
 170:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;   
 142              	 .loc 2 170 0
 143 0016 07E0     	 b .L3
 144              	.L5:
 147:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 145              	 .loc 2 147 0
 146 0018 0420     	 movs r0,#4
 147 001a FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 148:../Libraries/XMCLib/src/xmc_ccu4.c ****       
 148              	 .loc 2 148 0
 149 001e 03E0     	 b .L3
 150              	.L6:
 152:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 151              	 .loc 2 152 0
 152 0020 0820     	 movs r0,#8
 153 0022 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 153:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 154              	 .loc 2 153 0
 155 0026 00BF     	 nop
 156              	.L3:
 171:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 172:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 173:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 157              	 .loc 2 173 0
 158 0028 0837     	 adds r7,r7,#8
 159              	.LCFI15:
 160              	 .cfi_def_cfa_offset 8
 161 002a BD46     	 mov sp,r7
 162              	.LCFI16:
 163              	 .cfi_def_cfa_register 13
 164              	 
 165 002c 80BD     	 pop {r7,pc}
 166              	.L9:
 167 002e 00BF     	 .align 2
 168              	.L8:
 169 0030 00C00040 	 .word 1073790976
 170 0034 00000140 	 .word 1073807360
 171              	 .cfi_endproc
 172              	.LFE200:
 174              	 .section .text.XMC_CCU4_lDeassertReset,"ax",%progbits
 175              	 .align 2
 176              	 .thumb
 177              	 .thumb_func
 179              	XMC_CCU4_lDeassertReset:
 180              	.LFB201:
 174:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 175:../Libraries/XMCLib/src/xmc_ccu4.c **** __STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
 176:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 181              	 .loc 2 176 0
 182              	 .cfi_startproc
 183              	 
 184              	 
 185 0000 80B5     	 push {r7,lr}
 186              	.LCFI17:
 187              	 .cfi_def_cfa_offset 8
 188              	 .cfi_offset 7,-8
 189              	 .cfi_offset 14,-4
 190 0002 82B0     	 sub sp,sp,#8
 191              	.LCFI18:
 192              	 .cfi_def_cfa_offset 16
 193 0004 00AF     	 add r7,sp,#0
 194              	.LCFI19:
 195              	 .cfi_def_cfa_register 7
 196 0006 7860     	 str r0,[r7,#4]
 177:../Libraries/XMCLib/src/xmc_ccu4.c ****   switch ((uint32_t)module)
 197              	 .loc 2 177 0
 198 0008 7B68     	 ldr r3,[r7,#4]
 199 000a 094A     	 ldr r2,.L15
 200 000c 9342     	 cmp r3,r2
 201 000e 03D0     	 beq .L12
 202 0010 084A     	 ldr r2,.L15+4
 203 0012 9342     	 cmp r3,r2
 204 0014 04D0     	 beq .L13
 178:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 179:../Libraries/XMCLib/src/xmc_ccu4.c ****     case (uint32_t)CCU40:
 180:../Libraries/XMCLib/src/xmc_ccu4.c ****       XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 181:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 182:../Libraries/XMCLib/src/xmc_ccu4.c ****       
 183:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU41)
 184:../Libraries/XMCLib/src/xmc_ccu4.c ****     case (uint32_t)CCU41:
 185:../Libraries/XMCLib/src/xmc_ccu4.c ****       XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 186:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 187:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 188:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 189:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU42)
 190:../Libraries/XMCLib/src/xmc_ccu4.c ****     case (uint32_t)CCU42:
 191:../Libraries/XMCLib/src/xmc_ccu4.c ****       XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 192:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 193:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 194:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 195:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU43)
 196:../Libraries/XMCLib/src/xmc_ccu4.c ****     case (uint32_t)CCU43:
 197:../Libraries/XMCLib/src/xmc_ccu4.c ****       XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 198:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 199:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 200:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 201:../Libraries/XMCLib/src/xmc_ccu4.c ****     default:
 202:../Libraries/XMCLib/src/xmc_ccu4.c ****       XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
 203:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;   
 205              	 .loc 2 203 0
 206 0016 07E0     	 b .L10
 207              	.L12:
 180:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 208              	 .loc 2 180 0
 209 0018 0420     	 movs r0,#4
 210 001a FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 181:../Libraries/XMCLib/src/xmc_ccu4.c ****       
 211              	 .loc 2 181 0
 212 001e 03E0     	 b .L10
 213              	.L13:
 185:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 214              	 .loc 2 185 0
 215 0020 0820     	 movs r0,#8
 216 0022 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 186:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 217              	 .loc 2 186 0
 218 0026 00BF     	 nop
 219              	.L10:
 204:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 205:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 206:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 220              	 .loc 2 206 0
 221 0028 0837     	 adds r7,r7,#8
 222              	.LCFI20:
 223              	 .cfi_def_cfa_offset 8
 224 002a BD46     	 mov sp,r7
 225              	.LCFI21:
 226              	 .cfi_def_cfa_register 13
 227              	 
 228 002c 80BD     	 pop {r7,pc}
 229              	.L16:
 230 002e 00BF     	 .align 2
 231              	.L15:
 232 0030 00C00040 	 .word 1073790976
 233 0034 00000140 	 .word 1073807360
 234              	 .cfi_endproc
 235              	.LFE201:
 237              	 .section .text.XMC_CCU4_lGateClock,"ax",%progbits
 238              	 .align 2
 239              	 .thumb
 240              	 .thumb_func
 242              	XMC_CCU4_lGateClock:
 243              	.LFB202:
 207:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 208:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 209:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CLOCK_GATING_SUPPORTED)
 210:../Libraries/XMCLib/src/xmc_ccu4.c **** __STATIC_INLINE void XMC_CCU4_lGateClock(const XMC_CCU4_MODULE_t *const module)
 211:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 244              	 .loc 2 211 0
 245              	 .cfi_startproc
 246              	 
 247              	 
 248 0000 80B5     	 push {r7,lr}
 249              	.LCFI22:
 250              	 .cfi_def_cfa_offset 8
 251              	 .cfi_offset 7,-8
 252              	 .cfi_offset 14,-4
 253 0002 82B0     	 sub sp,sp,#8
 254              	.LCFI23:
 255              	 .cfi_def_cfa_offset 16
 256 0004 00AF     	 add r7,sp,#0
 257              	.LCFI24:
 258              	 .cfi_def_cfa_register 7
 259 0006 7860     	 str r0,[r7,#4]
 212:../Libraries/XMCLib/src/xmc_ccu4.c ****   switch ((uint32_t)module)
 260              	 .loc 2 212 0
 261 0008 7B68     	 ldr r3,[r7,#4]
 262 000a 094A     	 ldr r2,.L22
 263 000c 9342     	 cmp r3,r2
 264 000e 03D0     	 beq .L19
 265 0010 084A     	 ldr r2,.L22+4
 266 0012 9342     	 cmp r3,r2
 267 0014 04D0     	 beq .L20
 213:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 214:../Libraries/XMCLib/src/xmc_ccu4.c ****     case (uint32_t)CCU40:
 215:../Libraries/XMCLib/src/xmc_ccu4.c ****       XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 216:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 217:../Libraries/XMCLib/src/xmc_ccu4.c ****       
 218:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU41)      
 219:../Libraries/XMCLib/src/xmc_ccu4.c ****     case (uint32_t)CCU41:
 220:../Libraries/XMCLib/src/xmc_ccu4.c ****       XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 221:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 222:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 223:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 224:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU42)      
 225:../Libraries/XMCLib/src/xmc_ccu4.c ****     case (uint32_t)CCU42:
 226:../Libraries/XMCLib/src/xmc_ccu4.c ****       XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 227:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 228:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 229:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 230:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU43)      
 231:../Libraries/XMCLib/src/xmc_ccu4.c ****     case (uint32_t)CCU43:
 232:../Libraries/XMCLib/src/xmc_ccu4.c ****       XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 233:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 234:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif     
 235:../Libraries/XMCLib/src/xmc_ccu4.c ****  
 236:../Libraries/XMCLib/src/xmc_ccu4.c ****     default:
 237:../Libraries/XMCLib/src/xmc_ccu4.c ****       XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
 238:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;   
 268              	 .loc 2 238 0
 269 0016 07E0     	 b .L17
 270              	.L19:
 215:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 271              	 .loc 2 215 0
 272 0018 0420     	 movs r0,#4
 273 001a FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 216:../Libraries/XMCLib/src/xmc_ccu4.c ****       
 274              	 .loc 2 216 0
 275 001e 03E0     	 b .L17
 276              	.L20:
 220:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 277              	 .loc 2 220 0
 278 0020 0820     	 movs r0,#8
 279 0022 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 221:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 280              	 .loc 2 221 0
 281 0026 00BF     	 nop
 282              	.L17:
 239:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 240:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 241:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 283              	 .loc 2 241 0
 284 0028 0837     	 adds r7,r7,#8
 285              	.LCFI25:
 286              	 .cfi_def_cfa_offset 8
 287 002a BD46     	 mov sp,r7
 288              	.LCFI26:
 289              	 .cfi_def_cfa_register 13
 290              	 
 291 002c 80BD     	 pop {r7,pc}
 292              	.L23:
 293 002e 00BF     	 .align 2
 294              	.L22:
 295 0030 00C00040 	 .word 1073790976
 296 0034 00000140 	 .word 1073807360
 297              	 .cfi_endproc
 298              	.LFE202:
 300              	 .section .text.XMC_CCU4_lUngateClock,"ax",%progbits
 301              	 .align 2
 302              	 .thumb
 303              	 .thumb_func
 305              	XMC_CCU4_lUngateClock:
 306              	.LFB203:
 242:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 243:../Libraries/XMCLib/src/xmc_ccu4.c **** __STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
 244:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 307              	 .loc 2 244 0
 308              	 .cfi_startproc
 309              	 
 310              	 
 311 0000 80B5     	 push {r7,lr}
 312              	.LCFI27:
 313              	 .cfi_def_cfa_offset 8
 314              	 .cfi_offset 7,-8
 315              	 .cfi_offset 14,-4
 316 0002 82B0     	 sub sp,sp,#8
 317              	.LCFI28:
 318              	 .cfi_def_cfa_offset 16
 319 0004 00AF     	 add r7,sp,#0
 320              	.LCFI29:
 321              	 .cfi_def_cfa_register 7
 322 0006 7860     	 str r0,[r7,#4]
 245:../Libraries/XMCLib/src/xmc_ccu4.c ****   switch ((uint32_t)module)
 323              	 .loc 2 245 0
 324 0008 7B68     	 ldr r3,[r7,#4]
 325 000a 094A     	 ldr r2,.L29
 326 000c 9342     	 cmp r3,r2
 327 000e 03D0     	 beq .L26
 328 0010 084A     	 ldr r2,.L29+4
 329 0012 9342     	 cmp r3,r2
 330 0014 04D0     	 beq .L27
 246:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 247:../Libraries/XMCLib/src/xmc_ccu4.c ****     case (uint32_t)CCU40:
 248:../Libraries/XMCLib/src/xmc_ccu4.c ****       XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 249:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 250:../Libraries/XMCLib/src/xmc_ccu4.c ****       
 251:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU41)      
 252:../Libraries/XMCLib/src/xmc_ccu4.c ****     case (uint32_t)CCU41:
 253:../Libraries/XMCLib/src/xmc_ccu4.c ****       XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 254:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 255:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 256:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 257:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU42)      
 258:../Libraries/XMCLib/src/xmc_ccu4.c ****     case (uint32_t)CCU42:
 259:../Libraries/XMCLib/src/xmc_ccu4.c ****       XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 260:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 261:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 262:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 263:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU43)      
 264:../Libraries/XMCLib/src/xmc_ccu4.c ****     case (uint32_t)CCU43:
 265:../Libraries/XMCLib/src/xmc_ccu4.c ****       XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 266:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 267:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif  
 268:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 269:../Libraries/XMCLib/src/xmc_ccu4.c ****     default:
 270:../Libraries/XMCLib/src/xmc_ccu4.c ****       XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
 271:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;   
 331              	 .loc 2 271 0
 332 0016 07E0     	 b .L24
 333              	.L26:
 248:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 334              	 .loc 2 248 0
 335 0018 0420     	 movs r0,#4
 336 001a FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 249:../Libraries/XMCLib/src/xmc_ccu4.c ****       
 337              	 .loc 2 249 0
 338 001e 03E0     	 b .L24
 339              	.L27:
 253:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 340              	 .loc 2 253 0
 341 0020 0820     	 movs r0,#8
 342 0022 FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 254:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 343              	 .loc 2 254 0
 344 0026 00BF     	 nop
 345              	.L24:
 272:../Libraries/XMCLib/src/xmc_ccu4.c ****     
 273:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 274:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 346              	 .loc 2 274 0
 347 0028 0837     	 adds r7,r7,#8
 348              	.LCFI30:
 349              	 .cfi_def_cfa_offset 8
 350 002a BD46     	 mov sp,r7
 351              	.LCFI31:
 352              	 .cfi_def_cfa_register 13
 353              	 
 354 002c 80BD     	 pop {r7,pc}
 355              	.L30:
 356 002e 00BF     	 .align 2
 357              	.L29:
 358 0030 00C00040 	 .word 1073790976
 359 0034 00000140 	 .word 1073807360
 360              	 .cfi_endproc
 361              	.LFE203:
 363              	 .section .text.XMC_CCU4_EnableModule,"ax",%progbits
 364              	 .align 2
 365              	 .global XMC_CCU4_EnableModule
 366              	 .thumb
 367              	 .thumb_func
 369              	XMC_CCU4_EnableModule:
 370              	.LFB204:
 275:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 276:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 277:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined (XMC_ASSERT_ENABLE)
 278:../Libraries/XMCLib/src/xmc_ccu4.c **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsInputvalid(XMC_CCU4_SLICE_INPUT_t input)
 279:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 280:../Libraries/XMCLib/src/xmc_ccu4.c **** #if (UC_SERIES == XMC14)
 281:../Libraries/XMCLib/src/xmc_ccu4.c ****   return (input < 48U);
 282:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
 283:../Libraries/XMCLib/src/xmc_ccu4.c ****   return (input < 16U);
 284:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 285:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 286:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 287:../Libraries/XMCLib/src/xmc_ccu4.c **** /**************************************************************************************************
 288:../Libraries/XMCLib/src/xmc_ccu4.c ****  * API IMPLEMENTATION
 289:../Libraries/XMCLib/src/xmc_ccu4.c ****  **************************************************************************************************
 290:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 291:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
 292:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 371              	 .loc 2 292 0
 372              	 .cfi_startproc
 373              	 
 374              	 
 375 0000 80B5     	 push {r7,lr}
 376              	.LCFI32:
 377              	 .cfi_def_cfa_offset 8
 378              	 .cfi_offset 7,-8
 379              	 .cfi_offset 14,-4
 380 0002 82B0     	 sub sp,sp,#8
 381              	.LCFI33:
 382              	 .cfi_def_cfa_offset 16
 383 0004 00AF     	 add r7,sp,#0
 384              	.LCFI34:
 385              	 .cfi_def_cfa_register 7
 386 0006 7860     	 str r0,[r7,#4]
 293:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 294:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 295:../Libraries/XMCLib/src/xmc_ccu4.c **** #if UC_FAMILY == XMC4
 296:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Enable CCU4 module clock */
 297:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 387              	 .loc 2 297 0
 388 0008 1020     	 movs r0,#16
 389 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_EnableClock
 298:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 299:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 300:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CLOCK_GATING_SUPPORTED)
 301:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_lUngateClock(module);
 390              	 .loc 2 301 0
 391 000e 7868     	 ldr r0,[r7,#4]
 392 0010 FFF7FEFF 	 bl XMC_CCU4_lUngateClock
 302:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 303:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 304:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 305:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_lDeassertReset(module);
 393              	 .loc 2 305 0
 394 0014 7868     	 ldr r0,[r7,#4]
 395 0016 FFF7FEFF 	 bl XMC_CCU4_lDeassertReset
 306:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 307:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 396              	 .loc 2 307 0
 397 001a 0837     	 adds r7,r7,#8
 398              	.LCFI35:
 399              	 .cfi_def_cfa_offset 8
 400 001c BD46     	 mov sp,r7
 401              	.LCFI36:
 402              	 .cfi_def_cfa_register 13
 403              	 
 404 001e 80BD     	 pop {r7,pc}
 405              	 .cfi_endproc
 406              	.LFE204:
 408              	 .section .text.XMC_CCU4_DisableModule,"ax",%progbits
 409              	 .align 2
 410              	 .global XMC_CCU4_DisableModule
 411              	 .thumb
 412              	 .thumb_func
 414              	XMC_CCU4_DisableModule:
 415              	.LFB205:
 308:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 309:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module)
 310:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 416              	 .loc 2 310 0
 417              	 .cfi_startproc
 418              	 
 419              	 
 420 0000 80B5     	 push {r7,lr}
 421              	.LCFI37:
 422              	 .cfi_def_cfa_offset 8
 423              	 .cfi_offset 7,-8
 424              	 .cfi_offset 14,-4
 425 0002 82B0     	 sub sp,sp,#8
 426              	.LCFI38:
 427              	 .cfi_def_cfa_offset 16
 428 0004 00AF     	 add r7,sp,#0
 429              	.LCFI39:
 430              	 .cfi_def_cfa_register 7
 431 0006 7860     	 str r0,[r7,#4]
 311:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_DisableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 312:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 313:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 314:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_lAssertReset(module);
 432              	 .loc 2 314 0
 433 0008 7868     	 ldr r0,[r7,#4]
 434 000a FFF7FEFF 	 bl XMC_CCU4_lAssertReset
 315:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 316:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 317:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CLOCK_GATING_SUPPORTED)
 318:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_lGateClock(module);
 435              	 .loc 2 318 0
 436 000e 7868     	 ldr r0,[r7,#4]
 437 0010 FFF7FEFF 	 bl XMC_CCU4_lGateClock
 319:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 320:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 438              	 .loc 2 320 0
 439 0014 0837     	 adds r7,r7,#8
 440              	.LCFI40:
 441              	 .cfi_def_cfa_offset 8
 442 0016 BD46     	 mov sp,r7
 443              	.LCFI41:
 444              	 .cfi_def_cfa_register 13
 445              	 
 446 0018 80BD     	 pop {r7,pc}
 447              	 .cfi_endproc
 448              	.LFE205:
 450 001a 00BF     	 .section .text.XMC_CCU4_Init,"ax",%progbits
 451              	 .align 2
 452              	 .global XMC_CCU4_Init
 453              	 .thumb
 454              	 .thumb_func
 456              	XMC_CCU4_Init:
 457              	.LFB206:
 321:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 322:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to initialize CCU4 global resources  */
 323:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
 324:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 458              	 .loc 2 324 0
 459              	 .cfi_startproc
 460              	 
 461              	 
 462 0000 80B5     	 push {r7,lr}
 463              	.LCFI42:
 464              	 .cfi_def_cfa_offset 8
 465              	 .cfi_offset 7,-8
 466              	 .cfi_offset 14,-4
 467 0002 84B0     	 sub sp,sp,#16
 468              	.LCFI43:
 469              	 .cfi_def_cfa_offset 24
 470 0004 00AF     	 add r7,sp,#0
 471              	.LCFI44:
 472              	 .cfi_def_cfa_register 7
 473 0006 7860     	 str r0,[r7,#4]
 474 0008 0B46     	 mov r3,r1
 475 000a FB70     	 strb r3,[r7,#3]
 325:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t gctrl;
 326:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 327:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
 328:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));
 329:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 330:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Enable CCU4 module */
 331:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_EnableModule(module);
 476              	 .loc 2 331 0
 477 000c 7868     	 ldr r0,[r7,#4]
 478 000e FFF7FEFF 	 bl XMC_CCU4_EnableModule
 332:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Start the prescaler */
 333:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_StartPrescaler(module);
 479              	 .loc 2 333 0
 480 0012 7868     	 ldr r0,[r7,#4]
 481 0014 FFF7FEFF 	 bl XMC_CCU4_StartPrescaler
 334:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 335:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl = module->GCTRL;
 482              	 .loc 2 335 0
 483 0018 7B68     	 ldr r3,[r7,#4]
 484 001a 1B68     	 ldr r3,[r3]
 485 001c FB60     	 str r3,[r7,#12]
 336:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 486              	 .loc 2 336 0
 487 001e FB68     	 ldr r3,[r7,#12]
 488 0020 23F44043 	 bic r3,r3,#49152
 489 0024 FB60     	 str r3,[r7,#12]
 337:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 490              	 .loc 2 337 0
 491 0026 FB78     	 ldrb r3,[r7,#3]
 492 0028 9B03     	 lsls r3,r3,#14
 493 002a FA68     	 ldr r2,[r7,#12]
 494 002c 1343     	 orrs r3,r3,r2
 495 002e FB60     	 str r3,[r7,#12]
 338:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 339:../Libraries/XMCLib/src/xmc_ccu4.c ****   module->GCTRL = gctrl;
 496              	 .loc 2 339 0
 497 0030 7B68     	 ldr r3,[r7,#4]
 498 0032 FA68     	 ldr r2,[r7,#12]
 499 0034 1A60     	 str r2,[r3]
 340:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 500              	 .loc 2 340 0
 501 0036 1037     	 adds r7,r7,#16
 502              	.LCFI45:
 503              	 .cfi_def_cfa_offset 8
 504 0038 BD46     	 mov sp,r7
 505              	.LCFI46:
 506              	 .cfi_def_cfa_register 13
 507              	 
 508 003a 80BD     	 pop {r7,pc}
 509              	 .cfi_endproc
 510              	.LFE206:
 512              	 .section .text.XMC_CCU4_SetModuleClock,"ax",%progbits
 513              	 .align 2
 514              	 .global XMC_CCU4_SetModuleClock
 515              	 .thumb
 516              	 .thumb_func
 518              	XMC_CCU4_SetModuleClock:
 519              	.LFB207:
 341:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 342:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to select CCU4 module clock */
 343:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
 344:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 520              	 .loc 2 344 0
 521              	 .cfi_startproc
 522              	 
 523              	 
 524              	 
 525 0000 80B4     	 push {r7}
 526              	.LCFI47:
 527              	 .cfi_def_cfa_offset 4
 528              	 .cfi_offset 7,-4
 529 0002 85B0     	 sub sp,sp,#20
 530              	.LCFI48:
 531              	 .cfi_def_cfa_offset 24
 532 0004 00AF     	 add r7,sp,#0
 533              	.LCFI49:
 534              	 .cfi_def_cfa_register 7
 535 0006 7860     	 str r0,[r7,#4]
 536 0008 0B46     	 mov r3,r1
 537 000a FB70     	 strb r3,[r7,#3]
 345:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t gctrl;
 346:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 347:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 348:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));
 349:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 350:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl = module->GCTRL;
 538              	 .loc 2 350 0
 539 000c 7B68     	 ldr r3,[r7,#4]
 540 000e 1B68     	 ldr r3,[r3]
 541 0010 FB60     	 str r3,[r7,#12]
 351:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 542              	 .loc 2 351 0
 543 0012 FB68     	 ldr r3,[r7,#12]
 544 0014 23F03003 	 bic r3,r3,#48
 545 0018 FB60     	 str r3,[r7,#12]
 352:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 546              	 .loc 2 352 0
 547 001a FB78     	 ldrb r3,[r7,#3]
 548 001c 1B01     	 lsls r3,r3,#4
 549 001e FA68     	 ldr r2,[r7,#12]
 550 0020 1343     	 orrs r3,r3,r2
 551 0022 FB60     	 str r3,[r7,#12]
 353:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 354:../Libraries/XMCLib/src/xmc_ccu4.c ****   module->GCTRL = gctrl;
 552              	 .loc 2 354 0
 553 0024 7B68     	 ldr r3,[r7,#4]
 554 0026 FA68     	 ldr r2,[r7,#12]
 555 0028 1A60     	 str r2,[r3]
 355:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 556              	 .loc 2 355 0
 557 002a 1437     	 adds r7,r7,#20
 558              	.LCFI50:
 559              	 .cfi_def_cfa_offset 4
 560 002c BD46     	 mov sp,r7
 561              	.LCFI51:
 562              	 .cfi_def_cfa_register 13
 563              	 
 564 002e 5DF8047B 	 ldr r7,[sp],#4
 565              	.LCFI52:
 566              	 .cfi_restore 7
 567              	 .cfi_def_cfa_offset 0
 568 0032 7047     	 bx lr
 569              	 .cfi_endproc
 570              	.LFE207:
 572              	 .section .text.XMC_CCU4_SetMultiChannelShadowTransferMode,"ax",%progbits
 573              	 .align 2
 574              	 .global XMC_CCU4_SetMultiChannelShadowTransferMode
 575              	 .thumb
 576              	 .thumb_func
 578              	XMC_CCU4_SetMultiChannelShadowTransferMode:
 579              	.LFB208:
 356:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 357:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the multichannel shadow transfer request via SW and via the CCU4x.MCSS input. *
 358:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t sli
 359:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 580              	 .loc 2 359 0
 581              	 .cfi_startproc
 582              	 
 583              	 
 584              	 
 585 0000 80B4     	 push {r7}
 586              	.LCFI53:
 587              	 .cfi_def_cfa_offset 4
 588              	 .cfi_offset 7,-4
 589 0002 85B0     	 sub sp,sp,#20
 590              	.LCFI54:
 591              	 .cfi_def_cfa_offset 24
 592 0004 00AF     	 add r7,sp,#0
 593              	.LCFI55:
 594              	 .cfi_def_cfa_register 7
 595 0006 7860     	 str r0,[r7,#4]
 596 0008 3960     	 str r1,[r7]
 360:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t gctrl;
 361:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 362:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidM
 363:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 364:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl = module->GCTRL;
 597              	 .loc 2 364 0
 598 000a 7B68     	 ldr r3,[r7,#4]
 599 000c 1B68     	 ldr r3,[r3]
 600 000e FB60     	 str r3,[r7,#12]
 365:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 601              	 .loc 2 365 0
 602 0010 3B68     	 ldr r3,[r7]
 603 0012 1B0C     	 lsrs r3,r3,#16
 604 0014 DB43     	 mvns r3,r3
 605 0016 FA68     	 ldr r2,[r7,#12]
 606 0018 1340     	 ands r3,r3,r2
 607 001a FB60     	 str r3,[r7,#12]
 366:../Libraries/XMCLib/src/xmc_ccu4.c ****   gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 608              	 .loc 2 366 0
 609 001c 3B68     	 ldr r3,[r7]
 610 001e 9BB2     	 uxth r3,r3
 611 0020 FA68     	 ldr r2,[r7,#12]
 612 0022 1343     	 orrs r3,r3,r2
 613 0024 FB60     	 str r3,[r7,#12]
 367:../Libraries/XMCLib/src/xmc_ccu4.c ****   module->GCTRL = gctrl;
 614              	 .loc 2 367 0
 615 0026 7B68     	 ldr r3,[r7,#4]
 616 0028 FA68     	 ldr r2,[r7,#12]
 617 002a 1A60     	 str r2,[r3]
 368:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 618              	 .loc 2 368 0
 619 002c 1437     	 adds r7,r7,#20
 620              	.LCFI56:
 621              	 .cfi_def_cfa_offset 4
 622 002e BD46     	 mov sp,r7
 623              	.LCFI57:
 624              	 .cfi_def_cfa_register 13
 625              	 
 626 0030 5DF8047B 	 ldr r7,[sp],#4
 627              	.LCFI58:
 628              	 .cfi_restore 7
 629              	 .cfi_def_cfa_offset 0
 630 0034 7047     	 bx lr
 631              	 .cfi_endproc
 632              	.LFE208:
 634 0036 00BF     	 .section .text.XMC_CCU4_SLICE_CompareInit,"ax",%progbits
 635              	 .align 2
 636              	 .global XMC_CCU4_SLICE_CompareInit
 637              	 .thumb
 638              	 .thumb_func
 640              	XMC_CCU4_SLICE_CompareInit:
 641              	.LFB209:
 369:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 370:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure CC4 Slice as Timer */
 371:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
 372:../Libraries/XMCLib/src/xmc_ccu4.c **** 		                            const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
 373:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 642              	 .loc 2 373 0
 643              	 .cfi_startproc
 644              	 
 645              	 
 646              	 
 647 0000 80B4     	 push {r7}
 648              	.LCFI59:
 649              	 .cfi_def_cfa_offset 4
 650              	 .cfi_offset 7,-4
 651 0002 83B0     	 sub sp,sp,#12
 652              	.LCFI60:
 653              	 .cfi_def_cfa_offset 16
 654 0004 00AF     	 add r7,sp,#0
 655              	.LCFI61:
 656              	 .cfi_def_cfa_register 7
 657 0006 7860     	 str r0,[r7,#4]
 658 0008 3960     	 str r1,[r7]
 374:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 375:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
 376:../Libraries/XMCLib/src/xmc_ccu4.c ****              (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
 377:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 378:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program the timer mode */
 379:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = compare_init->tc;
 659              	 .loc 2 379 0
 660 000a 3B68     	 ldr r3,[r7]
 661 000c 1A68     	 ldr r2,[r3]
 662 000e 7B68     	 ldr r3,[r7,#4]
 663 0010 5A61     	 str r2,[r3,#20]
 380:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Enable the timer concatenation */
 381:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 664              	 .loc 2 381 0
 665 0012 3B68     	 ldr r3,[r7]
 666 0014 5B79     	 ldrb r3,[r3,#5]
 667 0016 C3F34013 	 ubfx r3,r3,#5,#1
 668 001a DBB2     	 uxtb r3,r3
 669 001c 1A05     	 lsls r2,r3,#20
 670 001e 7B68     	 ldr r3,[r7,#4]
 671 0020 5A60     	 str r2,[r3,#4]
 382:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program initial prescaler divider value */
 383:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->PSC = (uint32_t) compare_init->prescaler_initval;
 672              	 .loc 2 383 0
 673 0022 3B68     	 ldr r3,[r7]
 674 0024 1B79     	 ldrb r3,[r3,#4]
 675 0026 C3F30303 	 ubfx r3,r3,#0,#4
 676 002a DBB2     	 uxtb r3,r3
 677 002c 1A46     	 mov r2,r3
 678 002e 7B68     	 ldr r3,[r7,#4]
 679 0030 5A62     	 str r2,[r3,#36]
 384:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program the dither compare value */
 385:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->DITS = (uint32_t) compare_init->dither_limit;
 680              	 .loc 2 385 0
 681 0032 3B68     	 ldr r3,[r7]
 682 0034 5B79     	 ldrb r3,[r3,#5]
 683 0036 C3F30303 	 ubfx r3,r3,#0,#4
 684 003a DBB2     	 uxtb r3,r3
 685 003c 1A46     	 mov r2,r3
 686 003e 7B68     	 ldr r3,[r7,#4]
 687 0040 1A62     	 str r2,[r3,#32]
 386:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program timer output passive level */
 387:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->PSL = (uint32_t) compare_init->passive_level;
 688              	 .loc 2 387 0
 689 0042 3B68     	 ldr r3,[r7]
 690 0044 5B79     	 ldrb r3,[r3,#5]
 691 0046 C3F30013 	 ubfx r3,r3,#4,#1
 692 004a DBB2     	 uxtb r3,r3
 693 004c 1A46     	 mov r2,r3
 694 004e 7B68     	 ldr r3,[r7,#4]
 695 0050 9A61     	 str r2,[r3,#24]
 388:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program floating prescaler compare value */
 389:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->FPCS = (uint32_t) compare_init->float_limit;
 696              	 .loc 2 389 0
 697 0052 3B68     	 ldr r3,[r7]
 698 0054 1B79     	 ldrb r3,[r3,#4]
 699 0056 C3F30313 	 ubfx r3,r3,#4,#4
 700 005a DBB2     	 uxtb r3,r3
 701 005c 1A46     	 mov r2,r3
 702 005e 7B68     	 ldr r3,[r7,#4]
 703 0060 DA62     	 str r2,[r3,#44]
 390:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 704              	 .loc 2 390 0
 705 0062 0C37     	 adds r7,r7,#12
 706              	.LCFI62:
 707              	 .cfi_def_cfa_offset 4
 708 0064 BD46     	 mov sp,r7
 709              	.LCFI63:
 710              	 .cfi_def_cfa_register 13
 711              	 
 712 0066 5DF8047B 	 ldr r7,[sp],#4
 713              	.LCFI64:
 714              	 .cfi_restore 7
 715              	 .cfi_def_cfa_offset 0
 716 006a 7047     	 bx lr
 717              	 .cfi_endproc
 718              	.LFE209:
 720              	 .section .text.XMC_CCU4_SLICE_CaptureInit,"ax",%progbits
 721              	 .align 2
 722              	 .global XMC_CCU4_SLICE_CaptureInit
 723              	 .thumb
 724              	 .thumb_func
 726              	XMC_CCU4_SLICE_CaptureInit:
 727              	.LFB210:
 391:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 392:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure CC4 Slice for Capture */
 393:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
 394:../Libraries/XMCLib/src/xmc_ccu4.c **** 		                        const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init)
 395:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 728              	 .loc 2 395 0
 729              	 .cfi_startproc
 730              	 
 731              	 
 732              	 
 733 0000 80B4     	 push {r7}
 734              	.LCFI65:
 735              	 .cfi_def_cfa_offset 4
 736              	 .cfi_offset 7,-4
 737 0002 83B0     	 sub sp,sp,#12
 738              	.LCFI66:
 739              	 .cfi_def_cfa_offset 16
 740 0004 00AF     	 add r7,sp,#0
 741              	.LCFI67:
 742              	 .cfi_def_cfa_register 7
 743 0006 7860     	 str r0,[r7,#4]
 744 0008 3960     	 str r1,[r7]
 396:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 397:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Capture Init Pointer is NULL",
 398:../Libraries/XMCLib/src/xmc_ccu4.c ****              (XMC_CCU4_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);
 399:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 400:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program the capture mode */
 401:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = capture_init->tc;
 745              	 .loc 2 401 0
 746 000a 3B68     	 ldr r3,[r7]
 747 000c 1A68     	 ldr r2,[r3]
 748 000e 7B68     	 ldr r3,[r7,#4]
 749 0010 5A61     	 str r2,[r3,#20]
 402:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Enable the timer concatenation */
 403:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = ((uint32_t)capture_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 750              	 .loc 2 403 0
 751 0012 3B68     	 ldr r3,[r7]
 752 0014 5B79     	 ldrb r3,[r3,#5]
 753 0016 C3F30003 	 ubfx r3,r3,#0,#1
 754 001a DBB2     	 uxtb r3,r3
 755 001c 1A05     	 lsls r2,r3,#20
 756 001e 7B68     	 ldr r3,[r7,#4]
 757 0020 5A60     	 str r2,[r3,#4]
 404:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program initial prescaler divider value */
 405:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->PSC = (uint32_t) capture_init->prescaler_initval;
 758              	 .loc 2 405 0
 759 0022 3B68     	 ldr r3,[r7]
 760 0024 1B79     	 ldrb r3,[r3,#4]
 761 0026 C3F30303 	 ubfx r3,r3,#0,#4
 762 002a DBB2     	 uxtb r3,r3
 763 002c 1A46     	 mov r2,r3
 764 002e 7B68     	 ldr r3,[r7,#4]
 765 0030 5A62     	 str r2,[r3,#36]
 406:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program initial floating prescaler compare value */
 407:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->FPCS = (uint32_t) capture_init->float_limit;
 766              	 .loc 2 407 0
 767 0032 3B68     	 ldr r3,[r7]
 768 0034 1B79     	 ldrb r3,[r3,#4]
 769 0036 C3F30313 	 ubfx r3,r3,#4,#4
 770 003a DBB2     	 uxtb r3,r3
 771 003c 1A46     	 mov r2,r3
 772 003e 7B68     	 ldr r3,[r7,#4]
 773 0040 DA62     	 str r2,[r3,#44]
 408:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 774              	 .loc 2 408 0
 775 0042 0C37     	 adds r7,r7,#12
 776              	.LCFI68:
 777              	 .cfi_def_cfa_offset 4
 778 0044 BD46     	 mov sp,r7
 779              	.LCFI69:
 780              	 .cfi_def_cfa_register 13
 781              	 
 782 0046 5DF8047B 	 ldr r7,[sp],#4
 783              	.LCFI70:
 784              	 .cfi_restore 7
 785              	 .cfi_def_cfa_offset 0
 786 004a 7047     	 bx lr
 787              	 .cfi_endproc
 788              	.LFE210:
 790              	 .section .text.XMC_CCU4_SLICE_StartConfig,"ax",%progbits
 791              	 .align 2
 792              	 .global XMC_CCU4_SLICE_StartConfig
 793              	 .thumb
 794              	 .thumb_func
 796              	XMC_CCU4_SLICE_StartConfig:
 797              	.LFB211:
 409:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 410:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 411:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the Start trigger function of a slice */
 412:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
 413:../Libraries/XMCLib/src/xmc_ccu4.c **** 		                        const XMC_CCU4_SLICE_EVENT_t event,
 414:../Libraries/XMCLib/src/xmc_ccu4.c ****                                 const XMC_CCU4_SLICE_START_MODE_t start_mode)
 415:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 798              	 .loc 2 415 0
 799              	 .cfi_startproc
 800              	 
 801              	 
 802              	 
 803 0000 80B4     	 push {r7}
 804              	.LCFI71:
 805              	 .cfi_def_cfa_offset 4
 806              	 .cfi_offset 7,-4
 807 0002 85B0     	 sub sp,sp,#20
 808              	.LCFI72:
 809              	 .cfi_def_cfa_offset 24
 810 0004 00AF     	 add r7,sp,#0
 811              	.LCFI73:
 812              	 .cfi_def_cfa_register 7
 813 0006 7860     	 str r0,[r7,#4]
 814 0008 0B46     	 mov r3,r1
 815 000a FB70     	 strb r3,[r7,#3]
 816 000c 1346     	 mov r3,r2
 817 000e BB70     	 strb r3,[r7,#2]
 416:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 417:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t tc;
 418:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 419:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 420:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 421:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
 422:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
 423:../Libraries/XMCLib/src/xmc_ccu4.c **** 		          (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
 424:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, Bind the event with the stop function */
 425:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 818              	 .loc 2 425 0
 819 0010 7B68     	 ldr r3,[r7,#4]
 820 0012 5B68     	 ldr r3,[r3,#4]
 821 0014 BB60     	 str r3,[r7,#8]
 426:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 822              	 .loc 2 426 0
 823 0016 BB68     	 ldr r3,[r7,#8]
 824 0018 23F00303 	 bic r3,r3,#3
 825 001c BB60     	 str r3,[r7,#8]
 427:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 826              	 .loc 2 427 0
 827 001e FB78     	 ldrb r3,[r7,#3]
 828 0020 BA68     	 ldr r2,[r7,#8]
 829 0022 1343     	 orrs r3,r3,r2
 830 0024 BB60     	 str r3,[r7,#8]
 428:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 429:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 831              	 .loc 2 429 0
 832 0026 7B68     	 ldr r3,[r7,#4]
 833 0028 BA68     	 ldr r2,[r7,#8]
 834 002a 5A60     	 str r2,[r3,#4]
 430:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 431:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc  = slice->TC;
 835              	 .loc 2 431 0
 836 002c 7B68     	 ldr r3,[r7,#4]
 837 002e 5B69     	 ldr r3,[r3,#20]
 838 0030 FB60     	 str r3,[r7,#12]
 432:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, Configure the start mode */
 433:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 839              	 .loc 2 433 0
 840 0032 BB78     	 ldrb r3,[r7,#2]
 841 0034 012B     	 cmp r3,#1
 842 0036 04D1     	 bne .L39
 434:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 435:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 843              	 .loc 2 435 0
 844 0038 FB68     	 ldr r3,[r7,#12]
 845 003a 43F48063 	 orr r3,r3,#1024
 846 003e FB60     	 str r3,[r7,#12]
 847 0040 03E0     	 b .L40
 848              	.L39:
 436:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 437:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 438:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 439:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 849              	 .loc 2 439 0
 850 0042 FB68     	 ldr r3,[r7,#12]
 851 0044 23F48063 	 bic r3,r3,#1024
 852 0048 FB60     	 str r3,[r7,#12]
 853              	.L40:
 440:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 441:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 442:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = tc;
 854              	 .loc 2 442 0
 855 004a 7B68     	 ldr r3,[r7,#4]
 856 004c FA68     	 ldr r2,[r7,#12]
 857 004e 5A61     	 str r2,[r3,#20]
 443:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 858              	 .loc 2 443 0
 859 0050 1437     	 adds r7,r7,#20
 860              	.LCFI74:
 861              	 .cfi_def_cfa_offset 4
 862 0052 BD46     	 mov sp,r7
 863              	.LCFI75:
 864              	 .cfi_def_cfa_register 13
 865              	 
 866 0054 5DF8047B 	 ldr r7,[sp],#4
 867              	.LCFI76:
 868              	 .cfi_restore 7
 869              	 .cfi_def_cfa_offset 0
 870 0058 7047     	 bx lr
 871              	 .cfi_endproc
 872              	.LFE211:
 874 005a 00BF     	 .section .text.XMC_CCU4_SLICE_StopConfig,"ax",%progbits
 875              	 .align 2
 876              	 .global XMC_CCU4_SLICE_StopConfig
 877              	 .thumb
 878              	 .thumb_func
 880              	XMC_CCU4_SLICE_StopConfig:
 881              	.LFB212:
 444:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 445:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the Stop trigger function of a slice */
 446:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
 447:../Libraries/XMCLib/src/xmc_ccu4.c **** 		                       const XMC_CCU4_SLICE_EVENT_t event,
 448:../Libraries/XMCLib/src/xmc_ccu4.c ****                                const XMC_CCU4_SLICE_END_MODE_t end_mode)
 449:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 882              	 .loc 2 449 0
 883              	 .cfi_startproc
 884              	 
 885              	 
 886              	 
 887 0000 80B4     	 push {r7}
 888              	.LCFI77:
 889              	 .cfi_def_cfa_offset 4
 890              	 .cfi_offset 7,-4
 891 0002 85B0     	 sub sp,sp,#20
 892              	.LCFI78:
 893              	 .cfi_def_cfa_offset 24
 894 0004 00AF     	 add r7,sp,#0
 895              	.LCFI79:
 896              	 .cfi_def_cfa_register 7
 897 0006 7860     	 str r0,[r7,#4]
 898 0008 0B46     	 mov r3,r1
 899 000a FB70     	 strb r3,[r7,#3]
 900 000c 1346     	 mov r3,r2
 901 000e BB70     	 strb r3,[r7,#2]
 450:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 451:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t tc;
 452:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 453:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 454:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 455:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
 456:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 457:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, Bind the event with the stop function */
 458:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 902              	 .loc 2 458 0
 903 0010 7B68     	 ldr r3,[r7,#4]
 904 0012 5B68     	 ldr r3,[r3,#4]
 905 0014 FB60     	 str r3,[r7,#12]
 459:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
 906              	 .loc 2 459 0
 907 0016 FB68     	 ldr r3,[r7,#12]
 908 0018 23F00C03 	 bic r3,r3,#12
 909 001c FB60     	 str r3,[r7,#12]
 460:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
 910              	 .loc 2 460 0
 911 001e FB78     	 ldrb r3,[r7,#3]
 912 0020 9B00     	 lsls r3,r3,#2
 913 0022 FA68     	 ldr r2,[r7,#12]
 914 0024 1343     	 orrs r3,r3,r2
 915 0026 FB60     	 str r3,[r7,#12]
 461:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 462:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 916              	 .loc 2 462 0
 917 0028 7B68     	 ldr r3,[r7,#4]
 918 002a FA68     	 ldr r2,[r7,#12]
 919 002c 5A60     	 str r2,[r3,#4]
 463:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 464:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, Configure the stop mode */
 465:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc = slice->TC;
 920              	 .loc 2 465 0
 921 002e 7B68     	 ldr r3,[r7,#4]
 922 0030 5B69     	 ldr r3,[r3,#20]
 923 0032 BB60     	 str r3,[r7,#8]
 466:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
 924              	 .loc 2 466 0
 925 0034 BB68     	 ldr r3,[r7,#8]
 926 0036 23F44073 	 bic r3,r3,#768
 927 003a BB60     	 str r3,[r7,#8]
 467:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
 928              	 .loc 2 467 0
 929 003c BB78     	 ldrb r3,[r7,#2]
 930 003e 1B02     	 lsls r3,r3,#8
 931 0040 BA68     	 ldr r2,[r7,#8]
 932 0042 1343     	 orrs r3,r3,r2
 933 0044 BB60     	 str r3,[r7,#8]
 468:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 469:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = tc;
 934              	 .loc 2 469 0
 935 0046 7B68     	 ldr r3,[r7,#4]
 936 0048 BA68     	 ldr r2,[r7,#8]
 937 004a 5A61     	 str r2,[r3,#20]
 470:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 938              	 .loc 2 470 0
 939 004c 1437     	 adds r7,r7,#20
 940              	.LCFI80:
 941              	 .cfi_def_cfa_offset 4
 942 004e BD46     	 mov sp,r7
 943              	.LCFI81:
 944              	 .cfi_def_cfa_register 13
 945              	 
 946 0050 5DF8047B 	 ldr r7,[sp],#4
 947              	.LCFI82:
 948              	 .cfi_restore 7
 949              	 .cfi_def_cfa_offset 0
 950 0054 7047     	 bx lr
 951              	 .cfi_endproc
 952              	.LFE212:
 954 0056 00BF     	 .section .text.XMC_CCU4_SLICE_LoadConfig,"ax",%progbits
 955              	 .align 2
 956              	 .global XMC_CCU4_SLICE_LoadConfig
 957              	 .thumb
 958              	 .thumb_func
 960              	XMC_CCU4_SLICE_LoadConfig:
 961              	.LFB213:
 471:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 472:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the Load trigger function of a slice */
 473:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
 474:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 962              	 .loc 2 474 0
 963              	 .cfi_startproc
 964              	 
 965              	 
 966              	 
 967 0000 80B4     	 push {r7}
 968              	.LCFI83:
 969              	 .cfi_def_cfa_offset 4
 970              	 .cfi_offset 7,-4
 971 0002 85B0     	 sub sp,sp,#20
 972              	.LCFI84:
 973              	 .cfi_def_cfa_offset 24
 974 0004 00AF     	 add r7,sp,#0
 975              	.LCFI85:
 976              	 .cfi_def_cfa_register 7
 977 0006 7860     	 str r0,[r7,#4]
 978 0008 0B46     	 mov r3,r1
 979 000a FB70     	 strb r3,[r7,#3]
 475:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 476:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 477:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 478:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 479:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 480:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the load function */
 481:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 980              	 .loc 2 481 0
 981 000c 7B68     	 ldr r3,[r7,#4]
 982 000e 5B68     	 ldr r3,[r3,#4]
 983 0010 FB60     	 str r3,[r7,#12]
 482:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
 984              	 .loc 2 482 0
 985 0012 FB68     	 ldr r3,[r7,#12]
 986 0014 23F44053 	 bic r3,r3,#12288
 987 0018 FB60     	 str r3,[r7,#12]
 483:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
 988              	 .loc 2 483 0
 989 001a FB78     	 ldrb r3,[r7,#3]
 990 001c 1B03     	 lsls r3,r3,#12
 991 001e FA68     	 ldr r2,[r7,#12]
 992 0020 1343     	 orrs r3,r3,r2
 993 0022 FB60     	 str r3,[r7,#12]
 484:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 485:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 994              	 .loc 2 485 0
 995 0024 7B68     	 ldr r3,[r7,#4]
 996 0026 FA68     	 ldr r2,[r7,#12]
 997 0028 5A60     	 str r2,[r3,#4]
 486:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 998              	 .loc 2 486 0
 999 002a 1437     	 adds r7,r7,#20
 1000              	.LCFI86:
 1001              	 .cfi_def_cfa_offset 4
 1002 002c BD46     	 mov sp,r7
 1003              	.LCFI87:
 1004              	 .cfi_def_cfa_register 13
 1005              	 
 1006 002e 5DF8047B 	 ldr r7,[sp],#4
 1007              	.LCFI88:
 1008              	 .cfi_restore 7
 1009              	 .cfi_def_cfa_offset 0
 1010 0032 7047     	 bx lr
 1011              	 .cfi_endproc
 1012              	.LFE213:
 1014              	 .section .text.XMC_CCU4_SLICE_ModulationConfig,"ax",%progbits
 1015              	 .align 2
 1016              	 .global XMC_CCU4_SLICE_ModulationConfig
 1017              	 .thumb
 1018              	 .thumb_func
 1020              	XMC_CCU4_SLICE_ModulationConfig:
 1021              	.LFB214:
 487:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 488:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the slice modulation function */
 489:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
 490:../Libraries/XMCLib/src/xmc_ccu4.c ****                                      const XMC_CCU4_SLICE_EVENT_t event,
 491:../Libraries/XMCLib/src/xmc_ccu4.c ****                                      const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
 492:../Libraries/XMCLib/src/xmc_ccu4.c ****                                      const bool synch_with_pwm)
 493:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1022              	 .loc 2 493 0
 1023              	 .cfi_startproc
 1024              	 
 1025              	 
 1026              	 
 1027 0000 80B4     	 push {r7}
 1028              	.LCFI89:
 1029              	 .cfi_def_cfa_offset 4
 1030              	 .cfi_offset 7,-4
 1031 0002 85B0     	 sub sp,sp,#20
 1032              	.LCFI90:
 1033              	 .cfi_def_cfa_offset 24
 1034 0004 00AF     	 add r7,sp,#0
 1035              	.LCFI91:
 1036              	 .cfi_def_cfa_register 7
 1037 0006 7860     	 str r0,[r7,#4]
 1038 0008 0846     	 mov r0,r1
 1039 000a 1146     	 mov r1,r2
 1040 000c 1A46     	 mov r2,r3
 1041 000e 0346     	 mov r3,r0
 1042 0010 FB70     	 strb r3,[r7,#3]
 1043 0012 0B46     	 mov r3,r1
 1044 0014 BB70     	 strb r3,[r7,#2]
 1045 0016 1346     	 mov r3,r2
 1046 0018 7B70     	 strb r3,[r7,#1]
 494:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 495:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t tc;
 496:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 497:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice))
 498:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(even
 499:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
 500:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) ||\
 501:../Libraries/XMCLib/src/xmc_ccu4.c **** 		          (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));
 502:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 503:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc  = slice->TC;
 1047              	 .loc 2 503 0
 1048 001a 7B68     	 ldr r3,[r7,#4]
 1049 001c 5B69     	 ldr r3,[r3,#20]
 1050 001e FB60     	 str r3,[r7,#12]
 504:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 1051              	 .loc 2 504 0
 1052 0020 7B68     	 ldr r3,[r7,#4]
 1053 0022 5B68     	 ldr r3,[r3,#4]
 1054 0024 BB60     	 str r3,[r7,#8]
 505:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 506:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, Bind the event with the modulation function */
 507:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
 1055              	 .loc 2 507 0
 1056 0026 BB68     	 ldr r3,[r7,#8]
 1057 0028 23F44023 	 bic r3,r3,#786432
 1058 002c BB60     	 str r3,[r7,#8]
 508:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
 1059              	 .loc 2 508 0
 1060 002e FB78     	 ldrb r3,[r7,#3]
 1061 0030 9B04     	 lsls r3,r3,#18
 1062 0032 BA68     	 ldr r2,[r7,#8]
 1063 0034 1343     	 orrs r3,r3,r2
 1064 0036 BB60     	 str r3,[r7,#8]
 509:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 1065              	 .loc 2 509 0
 1066 0038 7B68     	 ldr r3,[r7,#4]
 1067 003a BA68     	 ldr r2,[r7,#8]
 1068 003c 5A60     	 str r2,[r3,#4]
 510:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 511:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, Modulation mode */
 512:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
 1069              	 .loc 2 512 0
 1070 003e BB78     	 ldrb r3,[r7,#2]
 1071 0040 012B     	 cmp r3,#1
 1072 0042 04D1     	 bne .L44
 513:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 514:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
 1073              	 .loc 2 514 0
 1074 0044 FB68     	 ldr r3,[r7,#12]
 1075 0046 43F08073 	 orr r3,r3,#16777216
 1076 004a FB60     	 str r3,[r7,#12]
 1077 004c 03E0     	 b .L45
 1078              	.L44:
 515:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 516:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 517:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 518:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
 1079              	 .loc 2 518 0
 1080 004e FB68     	 ldr r3,[r7,#12]
 1081 0050 23F08073 	 bic r3,r3,#16777216
 1082 0054 FB60     	 str r3,[r7,#12]
 1083              	.L45:
 519:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 520:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 521:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Synchronization of modulation effect with PWM cycle */
 522:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (synch_with_pwm == (bool) true)
 1084              	 .loc 2 522 0
 1085 0056 7B78     	 ldrb r3,[r7,#1]
 1086 0058 002B     	 cmp r3,#0
 1087 005a 04D0     	 beq .L46
 523:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 524:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
 1088              	 .loc 2 524 0
 1089 005c FB68     	 ldr r3,[r7,#12]
 1090 005e 43F40003 	 orr r3,r3,#8388608
 1091 0062 FB60     	 str r3,[r7,#12]
 1092 0064 03E0     	 b .L47
 1093              	.L46:
 525:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 526:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 527:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 528:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
 1094              	 .loc 2 528 0
 1095 0066 FB68     	 ldr r3,[r7,#12]
 1096 0068 23F40003 	 bic r3,r3,#8388608
 1097 006c FB60     	 str r3,[r7,#12]
 1098              	.L47:
 529:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 530:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 531:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = tc;
 1099              	 .loc 2 531 0
 1100 006e 7B68     	 ldr r3,[r7,#4]
 1101 0070 FA68     	 ldr r2,[r7,#12]
 1102 0072 5A61     	 str r2,[r3,#20]
 532:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1103              	 .loc 2 532 0
 1104 0074 1437     	 adds r7,r7,#20
 1105              	.LCFI92:
 1106              	 .cfi_def_cfa_offset 4
 1107 0076 BD46     	 mov sp,r7
 1108              	.LCFI93:
 1109              	 .cfi_def_cfa_register 13
 1110              	 
 1111 0078 5DF8047B 	 ldr r7,[sp],#4
 1112              	.LCFI94:
 1113              	 .cfi_restore 7
 1114              	 .cfi_def_cfa_offset 0
 1115 007c 7047     	 bx lr
 1116              	 .cfi_endproc
 1117              	.LFE214:
 1119 007e 00BF     	 .section .text.XMC_CCU4_SLICE_CountConfig,"ax",%progbits
 1120              	 .align 2
 1121              	 .global XMC_CCU4_SLICE_CountConfig
 1122              	 .thumb
 1123              	 .thumb_func
 1125              	XMC_CCU4_SLICE_CountConfig:
 1126              	.LFB215:
 533:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 534:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure the slice count function */
 535:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
 536:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1127              	 .loc 2 536 0
 1128              	 .cfi_startproc
 1129              	 
 1130              	 
 1131              	 
 1132 0000 80B4     	 push {r7}
 1133              	.LCFI95:
 1134              	 .cfi_def_cfa_offset 4
 1135              	 .cfi_offset 7,-4
 1136 0002 85B0     	 sub sp,sp,#20
 1137              	.LCFI96:
 1138              	 .cfi_def_cfa_offset 24
 1139 0004 00AF     	 add r7,sp,#0
 1140              	.LCFI97:
 1141              	 .cfi_def_cfa_register 7
 1142 0006 7860     	 str r0,[r7,#4]
 1143 0008 0B46     	 mov r3,r1
 1144 000a FB70     	 strb r3,[r7,#3]
 537:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 538:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 539:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 540:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 541:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 542:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the count function */
 543:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 1145              	 .loc 2 543 0
 1146 000c 7B68     	 ldr r3,[r7,#4]
 1147 000e 5B68     	 ldr r3,[r3,#4]
 1148 0010 FB60     	 str r3,[r7,#12]
 544:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
 1149              	 .loc 2 544 0
 1150 0012 FB68     	 ldr r3,[r7,#12]
 1151 0014 23F44043 	 bic r3,r3,#49152
 1152 0018 FB60     	 str r3,[r7,#12]
 545:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
 1153              	 .loc 2 545 0
 1154 001a FB78     	 ldrb r3,[r7,#3]
 1155 001c 9B03     	 lsls r3,r3,#14
 1156 001e FA68     	 ldr r2,[r7,#12]
 1157 0020 1343     	 orrs r3,r3,r2
 1158 0022 FB60     	 str r3,[r7,#12]
 546:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 547:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 1159              	 .loc 2 547 0
 1160 0024 7B68     	 ldr r3,[r7,#4]
 1161 0026 FA68     	 ldr r2,[r7,#12]
 1162 0028 5A60     	 str r2,[r3,#4]
 548:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1163              	 .loc 2 548 0
 1164 002a 1437     	 adds r7,r7,#20
 1165              	.LCFI98:
 1166              	 .cfi_def_cfa_offset 4
 1167 002c BD46     	 mov sp,r7
 1168              	.LCFI99:
 1169              	 .cfi_def_cfa_register 13
 1170              	 
 1171 002e 5DF8047B 	 ldr r7,[sp],#4
 1172              	.LCFI100:
 1173              	 .cfi_restore 7
 1174              	 .cfi_def_cfa_offset 0
 1175 0032 7047     	 bx lr
 1176              	 .cfi_endproc
 1177              	.LFE215:
 1179              	 .section .text.XMC_CCU4_SLICE_GateConfig,"ax",%progbits
 1180              	 .align 2
 1181              	 .global XMC_CCU4_SLICE_GateConfig
 1182              	 .thumb
 1183              	 .thumb_func
 1185              	XMC_CCU4_SLICE_GateConfig:
 1186              	.LFB216:
 549:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 550:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure slice gate function */
 551:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
 552:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1187              	 .loc 2 552 0
 1188              	 .cfi_startproc
 1189              	 
 1190              	 
 1191              	 
 1192 0000 80B4     	 push {r7}
 1193              	.LCFI101:
 1194              	 .cfi_def_cfa_offset 4
 1195              	 .cfi_offset 7,-4
 1196 0002 85B0     	 sub sp,sp,#20
 1197              	.LCFI102:
 1198              	 .cfi_def_cfa_offset 24
 1199 0004 00AF     	 add r7,sp,#0
 1200              	.LCFI103:
 1201              	 .cfi_def_cfa_register 7
 1202 0006 7860     	 str r0,[r7,#4]
 1203 0008 0B46     	 mov r3,r1
 1204 000a FB70     	 strb r3,[r7,#3]
 553:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 554:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 555:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 556:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 557:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 558:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the gate function */
 559:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 1205              	 .loc 2 559 0
 1206 000c 7B68     	 ldr r3,[r7,#4]
 1207 000e 5B68     	 ldr r3,[r3,#4]
 1208 0010 FB60     	 str r3,[r7,#12]
 560:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
 1209              	 .loc 2 560 0
 1210 0012 FB68     	 ldr r3,[r7,#12]
 1211 0014 23F44073 	 bic r3,r3,#768
 1212 0018 FB60     	 str r3,[r7,#12]
 561:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
 1213              	 .loc 2 561 0
 1214 001a FB78     	 ldrb r3,[r7,#3]
 1215 001c 1B02     	 lsls r3,r3,#8
 1216 001e FA68     	 ldr r2,[r7,#12]
 1217 0020 1343     	 orrs r3,r3,r2
 1218 0022 FB60     	 str r3,[r7,#12]
 562:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 563:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 1219              	 .loc 2 563 0
 1220 0024 7B68     	 ldr r3,[r7,#4]
 1221 0026 FA68     	 ldr r2,[r7,#12]
 1222 0028 5A60     	 str r2,[r3,#4]
 564:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1223              	 .loc 2 564 0
 1224 002a 1437     	 adds r7,r7,#20
 1225              	.LCFI104:
 1226              	 .cfi_def_cfa_offset 4
 1227 002c BD46     	 mov sp,r7
 1228              	.LCFI105:
 1229              	 .cfi_def_cfa_register 13
 1230              	 
 1231 002e 5DF8047B 	 ldr r7,[sp],#4
 1232              	.LCFI106:
 1233              	 .cfi_restore 7
 1234              	 .cfi_def_cfa_offset 0
 1235 0032 7047     	 bx lr
 1236              	 .cfi_endproc
 1237              	.LFE216:
 1239              	 .section .text.XMC_CCU4_SLICE_Capture0Config,"ax",%progbits
 1240              	 .align 2
 1241              	 .global XMC_CCU4_SLICE_Capture0Config
 1242              	 .thumb
 1243              	 .thumb_func
 1245              	XMC_CCU4_SLICE_Capture0Config:
 1246              	.LFB217:
 565:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 566:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure Capture-0 function */
 567:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
 568:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1247              	 .loc 2 568 0
 1248              	 .cfi_startproc
 1249              	 
 1250              	 
 1251              	 
 1252 0000 80B4     	 push {r7}
 1253              	.LCFI107:
 1254              	 .cfi_def_cfa_offset 4
 1255              	 .cfi_offset 7,-4
 1256 0002 85B0     	 sub sp,sp,#20
 1257              	.LCFI108:
 1258              	 .cfi_def_cfa_offset 24
 1259 0004 00AF     	 add r7,sp,#0
 1260              	.LCFI109:
 1261              	 .cfi_def_cfa_register 7
 1262 0006 7860     	 str r0,[r7,#4]
 1263 0008 0B46     	 mov r3,r1
 1264 000a FB70     	 strb r3,[r7,#3]
 569:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 570:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 571:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 572:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event)
 573:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 574:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the gate function */
 575:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 1265              	 .loc 2 575 0
 1266 000c 7B68     	 ldr r3,[r7,#4]
 1267 000e 5B68     	 ldr r3,[r3,#4]
 1268 0010 FB60     	 str r3,[r7,#12]
 576:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP0S_Msk);
 1269              	 .loc 2 576 0
 1270 0012 FB68     	 ldr r3,[r7,#12]
 1271 0014 23F03003 	 bic r3,r3,#48
 1272 0018 FB60     	 str r3,[r7,#12]
 577:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP0S_Pos;
 1273              	 .loc 2 577 0
 1274 001a FB78     	 ldrb r3,[r7,#3]
 1275 001c 1B01     	 lsls r3,r3,#4
 1276 001e FA68     	 ldr r2,[r7,#12]
 1277 0020 1343     	 orrs r3,r3,r2
 1278 0022 FB60     	 str r3,[r7,#12]
 578:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 579:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 1279              	 .loc 2 579 0
 1280 0024 7B68     	 ldr r3,[r7,#4]
 1281 0026 FA68     	 ldr r2,[r7,#12]
 1282 0028 5A60     	 str r2,[r3,#4]
 580:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1283              	 .loc 2 580 0
 1284 002a 1437     	 adds r7,r7,#20
 1285              	.LCFI110:
 1286              	 .cfi_def_cfa_offset 4
 1287 002c BD46     	 mov sp,r7
 1288              	.LCFI111:
 1289              	 .cfi_def_cfa_register 13
 1290              	 
 1291 002e 5DF8047B 	 ldr r7,[sp],#4
 1292              	.LCFI112:
 1293              	 .cfi_restore 7
 1294              	 .cfi_def_cfa_offset 0
 1295 0032 7047     	 bx lr
 1296              	 .cfi_endproc
 1297              	.LFE217:
 1299              	 .section .text.XMC_CCU4_SLICE_Capture1Config,"ax",%progbits
 1300              	 .align 2
 1301              	 .global XMC_CCU4_SLICE_Capture1Config
 1302              	 .thumb
 1303              	 .thumb_func
 1305              	XMC_CCU4_SLICE_Capture1Config:
 1306              	.LFB218:
 581:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 582:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure Capture-1 function */
 583:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
 584:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1307              	 .loc 2 584 0
 1308              	 .cfi_startproc
 1309              	 
 1310              	 
 1311              	 
 1312 0000 80B4     	 push {r7}
 1313              	.LCFI113:
 1314              	 .cfi_def_cfa_offset 4
 1315              	 .cfi_offset 7,-4
 1316 0002 85B0     	 sub sp,sp,#20
 1317              	.LCFI114:
 1318              	 .cfi_def_cfa_offset 24
 1319 0004 00AF     	 add r7,sp,#0
 1320              	.LCFI115:
 1321              	 .cfi_def_cfa_register 7
 1322 0006 7860     	 str r0,[r7,#4]
 1323 0008 0B46     	 mov r3,r1
 1324 000a FB70     	 strb r3,[r7,#3]
 585:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 586:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 587:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 588:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event)
 589:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 590:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the gate function */
 591:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 1325              	 .loc 2 591 0
 1326 000c 7B68     	 ldr r3,[r7,#4]
 1327 000e 5B68     	 ldr r3,[r3,#4]
 1328 0010 FB60     	 str r3,[r7,#12]
 592:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP1S_Msk);
 1329              	 .loc 2 592 0
 1330 0012 FB68     	 ldr r3,[r7,#12]
 1331 0014 23F0C003 	 bic r3,r3,#192
 1332 0018 FB60     	 str r3,[r7,#12]
 593:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP1S_Pos;
 1333              	 .loc 2 593 0
 1334 001a FB78     	 ldrb r3,[r7,#3]
 1335 001c 9B01     	 lsls r3,r3,#6
 1336 001e FA68     	 ldr r2,[r7,#12]
 1337 0020 1343     	 orrs r3,r3,r2
 1338 0022 FB60     	 str r3,[r7,#12]
 594:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 595:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 1339              	 .loc 2 595 0
 1340 0024 7B68     	 ldr r3,[r7,#4]
 1341 0026 FA68     	 ldr r2,[r7,#12]
 1342 0028 5A60     	 str r2,[r3,#4]
 596:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1343              	 .loc 2 596 0
 1344 002a 1437     	 adds r7,r7,#20
 1345              	.LCFI116:
 1346              	 .cfi_def_cfa_offset 4
 1347 002c BD46     	 mov sp,r7
 1348              	.LCFI117:
 1349              	 .cfi_def_cfa_register 13
 1350              	 
 1351 002e 5DF8047B 	 ldr r7,[sp],#4
 1352              	.LCFI118:
 1353              	 .cfi_restore 7
 1354              	 .cfi_def_cfa_offset 0
 1355 0032 7047     	 bx lr
 1356              	 .cfi_endproc
 1357              	.LFE218:
 1359              	 .section .text.XMC_CCU4_SLICE_DirectionConfig,"ax",%progbits
 1360              	 .align 2
 1361              	 .global XMC_CCU4_SLICE_DirectionConfig
 1362              	 .thumb
 1363              	 .thumb_func
 1365              	XMC_CCU4_SLICE_DirectionConfig:
 1366              	.LFB219:
 597:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 598:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure direction function */
 599:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t eve
 600:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1367              	 .loc 2 600 0
 1368              	 .cfi_startproc
 1369              	 
 1370              	 
 1371              	 
 1372 0000 80B4     	 push {r7}
 1373              	.LCFI119:
 1374              	 .cfi_def_cfa_offset 4
 1375              	 .cfi_offset 7,-4
 1376 0002 85B0     	 sub sp,sp,#20
 1377              	.LCFI120:
 1378              	 .cfi_def_cfa_offset 24
 1379 0004 00AF     	 add r7,sp,#0
 1380              	.LCFI121:
 1381              	 .cfi_def_cfa_register 7
 1382 0006 7860     	 str r0,[r7,#4]
 1383 0008 0B46     	 mov r3,r1
 1384 000a FB70     	 strb r3,[r7,#3]
 601:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 602:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 603:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 604:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event
 605:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 606:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the direction function */
 607:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 1385              	 .loc 2 607 0
 1386 000c 7B68     	 ldr r3,[r7,#4]
 1387 000e 5B68     	 ldr r3,[r3,#4]
 1388 0010 FB60     	 str r3,[r7,#12]
 608:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
 1389              	 .loc 2 608 0
 1390 0012 FB68     	 ldr r3,[r7,#12]
 1391 0014 23F44063 	 bic r3,r3,#3072
 1392 0018 FB60     	 str r3,[r7,#12]
 609:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
 1393              	 .loc 2 609 0
 1394 001a FB78     	 ldrb r3,[r7,#3]
 1395 001c 9B02     	 lsls r3,r3,#10
 1396 001e FA68     	 ldr r2,[r7,#12]
 1397 0020 1343     	 orrs r3,r3,r2
 1398 0022 FB60     	 str r3,[r7,#12]
 610:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 611:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 1399              	 .loc 2 611 0
 1400 0024 7B68     	 ldr r3,[r7,#4]
 1401 0026 FA68     	 ldr r2,[r7,#12]
 1402 0028 5A60     	 str r2,[r3,#4]
 612:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1403              	 .loc 2 612 0
 1404 002a 1437     	 adds r7,r7,#20
 1405              	.LCFI122:
 1406              	 .cfi_def_cfa_offset 4
 1407 002c BD46     	 mov sp,r7
 1408              	.LCFI123:
 1409              	 .cfi_def_cfa_register 13
 1410              	 
 1411 002e 5DF8047B 	 ldr r7,[sp],#4
 1412              	.LCFI124:
 1413              	 .cfi_restore 7
 1414              	 .cfi_def_cfa_offset 0
 1415 0032 7047     	 bx lr
 1416              	 .cfi_endproc
 1417              	.LFE219:
 1419              	 .section .text.XMC_CCU4_SLICE_StatusBitOverrideConfig,"ax",%progbits
 1420              	 .align 2
 1421              	 .global XMC_CCU4_SLICE_StatusBitOverrideConfig
 1422              	 .thumb
 1423              	 .thumb_func
 1425              	XMC_CCU4_SLICE_StatusBitOverrideConfig:
 1426              	.LFB220:
 613:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 614:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure slice status bit override function */
 615:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice)
 616:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1427              	 .loc 2 616 0
 1428              	 .cfi_startproc
 1429              	 
 1430              	 
 1431              	 
 1432 0000 80B4     	 push {r7}
 1433              	.LCFI125:
 1434              	 .cfi_def_cfa_offset 4
 1435              	 .cfi_offset 7,-4
 1436 0002 85B0     	 sub sp,sp,#20
 1437              	.LCFI126:
 1438              	 .cfi_def_cfa_offset 24
 1439 0004 00AF     	 add r7,sp,#0
 1440              	.LCFI127:
 1441              	 .cfi_def_cfa_register 7
 1442 0006 7860     	 str r0,[r7,#4]
 617:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 618:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 619:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(
 620:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 621:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Bind the event with the override function */
 622:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 1443              	 .loc 2 622 0
 1444 0008 7B68     	 ldr r3,[r7,#4]
 1445 000a 5B68     	 ldr r3,[r3,#4]
 1446 000c FB60     	 str r3,[r7,#12]
 623:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Map status bit trigger override to Event 1 & 
 624:../Libraries/XMCLib/src/xmc_ccu4.c ****          status bit value override to Event 2 */
 625:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
 1447              	 .loc 2 625 0
 1448 000e FB68     	 ldr r3,[r7,#12]
 1449 0010 23F48033 	 bic r3,r3,#65536
 1450 0014 FB60     	 str r3,[r7,#12]
 626:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
 1451              	 .loc 2 626 0
 1452 0016 FB68     	 ldr r3,[r7,#12]
 1453 0018 43F48033 	 orr r3,r3,#65536
 1454 001c FB60     	 str r3,[r7,#12]
 627:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 628:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 1455              	 .loc 2 628 0
 1456 001e 7B68     	 ldr r3,[r7,#4]
 1457 0020 FA68     	 ldr r2,[r7,#12]
 1458 0022 5A60     	 str r2,[r3,#4]
 629:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1459              	 .loc 2 629 0
 1460 0024 1437     	 adds r7,r7,#20
 1461              	.LCFI128:
 1462              	 .cfi_def_cfa_offset 4
 1463 0026 BD46     	 mov sp,r7
 1464              	.LCFI129:
 1465              	 .cfi_def_cfa_register 13
 1466              	 
 1467 0028 5DF8047B 	 ldr r7,[sp],#4
 1468              	.LCFI130:
 1469              	 .cfi_restore 7
 1470              	 .cfi_def_cfa_offset 0
 1471 002c 7047     	 bx lr
 1472              	 .cfi_endproc
 1473              	.LFE220:
 1475 002e 00BF     	 .section .text.XMC_CCU4_SLICE_TrapConfig,"ax",%progbits
 1476              	 .align 2
 1477              	 .global XMC_CCU4_SLICE_TrapConfig
 1478              	 .thumb
 1479              	 .thumb_func
 1481              	XMC_CCU4_SLICE_TrapConfig:
 1482              	.LFB221:
 630:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 631:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure trap function */
 632:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
 633:../Libraries/XMCLib/src/xmc_ccu4.c **** 		                           const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
 634:../Libraries/XMCLib/src/xmc_ccu4.c ****                                const bool synch_with_pwm)
 635:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1483              	 .loc 2 635 0
 1484              	 .cfi_startproc
 1485              	 
 1486              	 
 1487              	 
 1488 0000 80B4     	 push {r7}
 1489              	.LCFI131:
 1490              	 .cfi_def_cfa_offset 4
 1491              	 .cfi_offset 7,-4
 1492 0002 85B0     	 sub sp,sp,#20
 1493              	.LCFI132:
 1494              	 .cfi_def_cfa_offset 24
 1495 0004 00AF     	 add r7,sp,#0
 1496              	.LCFI133:
 1497              	 .cfi_def_cfa_register 7
 1498 0006 7860     	 str r0,[r7,#4]
 1499 0008 0B46     	 mov r3,r1
 1500 000a FB70     	 strb r3,[r7,#3]
 1501 000c 1346     	 mov r3,r2
 1502 000e BB70     	 strb r3,[r7,#2]
 636:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cmc;
 637:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t tc;
 638:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 639:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 640:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT
 641:../Libraries/XMCLib/src/xmc_ccu4.c **** 		                                                         (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_M
 642:../Libraries/XMCLib/src/xmc_ccu4.c ****     
 643:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, Map trap function to Event 2 */
 644:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc = slice->CMC;
 1503              	 .loc 2 644 0
 1504 0010 7B68     	 ldr r3,[r7,#4]
 1505 0012 5B68     	 ldr r3,[r3,#4]
 1506 0014 BB60     	 str r3,[r7,#8]
 645:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
 1507              	 .loc 2 645 0
 1508 0016 BB68     	 ldr r3,[r7,#8]
 1509 0018 23F40033 	 bic r3,r3,#131072
 1510 001c BB60     	 str r3,[r7,#8]
 646:../Libraries/XMCLib/src/xmc_ccu4.c ****   cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
 1511              	 .loc 2 646 0
 1512 001e BB68     	 ldr r3,[r7,#8]
 1513 0020 43F40033 	 orr r3,r3,#131072
 1514 0024 BB60     	 str r3,[r7,#8]
 647:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->CMC = cmc;
 1515              	 .loc 2 647 0
 1516 0026 7B68     	 ldr r3,[r7,#4]
 1517 0028 BA68     	 ldr r2,[r7,#8]
 1518 002a 5A60     	 str r2,[r3,#4]
 648:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 649:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, Configure synchronization option */
 650:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc = slice->TC;
 1519              	 .loc 2 650 0
 1520 002c 7B68     	 ldr r3,[r7,#4]
 1521 002e 5B69     	 ldr r3,[r3,#20]
 1522 0030 FB60     	 str r3,[r7,#12]
 651:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 652:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (synch_with_pwm == (bool) true)
 1523              	 .loc 2 652 0
 1524 0032 BB78     	 ldrb r3,[r7,#2]
 1525 0034 002B     	 cmp r3,#0
 1526 0036 04D0     	 beq .L55
 653:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 654:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
 1527              	 .loc 2 654 0
 1528 0038 FB68     	 ldr r3,[r7,#12]
 1529 003a 43F40013 	 orr r3,r3,#2097152
 1530 003e FB60     	 str r3,[r7,#12]
 1531 0040 03E0     	 b .L56
 1532              	.L55:
 655:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 656:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 657:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 658:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
 1533              	 .loc 2 658 0
 1534 0042 FB68     	 ldr r3,[r7,#12]
 1535 0044 23F40013 	 bic r3,r3,#2097152
 1536 0048 FB60     	 str r3,[r7,#12]
 1537              	.L56:
 659:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 660:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 661:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure exit mode */
 662:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
 1538              	 .loc 2 662 0
 1539 004a FB78     	 ldrb r3,[r7,#3]
 1540 004c 012B     	 cmp r3,#1
 1541 004e 04D1     	 bne .L57
 663:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 664:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
 1542              	 .loc 2 664 0
 1543 0050 FB68     	 ldr r3,[r7,#12]
 1544 0052 43F48003 	 orr r3,r3,#4194304
 1545 0056 FB60     	 str r3,[r7,#12]
 1546 0058 03E0     	 b .L58
 1547              	.L57:
 665:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 666:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 667:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 668:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
 1548              	 .loc 2 668 0
 1549 005a FB68     	 ldr r3,[r7,#12]
 1550 005c 23F48003 	 bic r3,r3,#4194304
 1551 0060 FB60     	 str r3,[r7,#12]
 1552              	.L58:
 669:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 670:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 671:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = tc;
 1553              	 .loc 2 671 0
 1554 0062 7B68     	 ldr r3,[r7,#4]
 1555 0064 FA68     	 ldr r2,[r7,#12]
 1556 0066 5A61     	 str r2,[r3,#20]
 672:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1557              	 .loc 2 672 0
 1558 0068 1437     	 adds r7,r7,#20
 1559              	.LCFI134:
 1560              	 .cfi_def_cfa_offset 4
 1561 006a BD46     	 mov sp,r7
 1562              	.LCFI135:
 1563              	 .cfi_def_cfa_register 13
 1564              	 
 1565 006c 5DF8047B 	 ldr r7,[sp],#4
 1566              	.LCFI136:
 1567              	 .cfi_restore 7
 1568              	 .cfi_def_cfa_offset 0
 1569 0070 7047     	 bx lr
 1570              	 .cfi_endproc
 1571              	.LFE221:
 1573 0072 00BF     	 .section .text.XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent,"ax",%progbits
 1574              	 .align 2
 1575              	 .global XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent
 1576              	 .thumb
 1577              	 .thumb_func
 1579              	XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:
 1580              	.LFB222:
 673:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 674:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure a slice Status Bit Override event */
 675:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
 676:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_
 677:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_
 678:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1581              	 .loc 2 678 0
 1582              	 .cfi_startproc
 1583              	 
 1584              	 
 1585              	 
 1586 0000 80B4     	 push {r7}
 1587              	.LCFI137:
 1588              	 .cfi_def_cfa_offset 4
 1589              	 .cfi_offset 7,-4
 1590 0002 87B0     	 sub sp,sp,#28
 1591              	.LCFI138:
 1592              	 .cfi_def_cfa_offset 32
 1593 0004 00AF     	 add r7,sp,#0
 1594              	.LCFI139:
 1595              	 .cfi_def_cfa_register 7
 1596 0006 F860     	 str r0,[r7,#12]
 1597 0008 B960     	 str r1,[r7,#8]
 1598 000a 7A60     	 str r2,[r7,#4]
 679:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t ins;
 680:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 681:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Slice Pointer", XMC_CCU4_IsVal
 682:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Input",
 683:../Libraries/XMCLib/src/xmc_ccu4.c **** 		     XMC_CCU4_SLICE_IsInputvalid(ev1_config->mapped_input));
 684:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Edge Sensitivity",
 685:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EDGE_SENSITIVITY(ev1_config->edge));
 686:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Level Sensitivity",
 687:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((ev1_config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 688:../Libraries/XMCLib/src/xmc_ccu4.c ****               (ev1_config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 689:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Debounce Period",
 690:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EVENT_FILTER(ev1_config->duration));
 691:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Input",
 692:../Libraries/XMCLib/src/xmc_ccu4.c **** 		     XMC_CCU4_SLICE_IsInputvalid(ev2_config->mapped_input));
 693:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Edge Sensitivity",
 694:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EDGE_SENSITIVITY(ev2_config->edge));
 695:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Level Sensitivity",
 696:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((ev2_config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 697:../Libraries/XMCLib/src/xmc_ccu4.c ****               (ev2_config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 698:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:Invalid Debounce Period", 
 699:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EVENT_FILTER(ev2_config->duration));
 700:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU4V3) /* Defined for XMC1400 devices only */
 701:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS2;
 702:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 703:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the edge sensitivity for event 1 */
 704:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS2_EV1EM_Pos);
 705:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS2_EV1EM_Pos;
 706:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 707:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the edge sensitivity for event 2 */
 708:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS2_EV2EM_Pos);
 709:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS2_EV2EM_Pos;
 710:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 711:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the level sensitivity for event 1 */
 712:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS2_EV1LM_Pos);
 713:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS2_EV1LM_Pos;
 714:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 715:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the level sensitivity for event 2 */
 716:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS2_EV2LM_Pos);
 717:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS2_EV2LM_Pos;
 718:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 719:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the debounce filter for event 1 */
 720:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS2_LPF1M_Pos);
 721:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS2_LPF1M_Pos;
 722:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 723:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the debounce filter for event 2 */
 724:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS2_LPF2M_Pos);
 725:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS2_LPF2M_Pos;
 726:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 727:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS2 = ins;
 728:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 729:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS1;
 730:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 731:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the input for Event1 */
 732:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV1IS_Pos);
 733:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS1_EV1IS_Pos;
 734:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 735:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Finally, the input for Event2 */
 736:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
 737:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;
 738:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 739:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS1 = ins;
 740:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
 741:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS;
 1599              	 .loc 2 741 0
 1600 000c FB68     	 ldr r3,[r7,#12]
 1601 000e 1B68     	 ldr r3,[r3]
 1602 0010 7B61     	 str r3,[r7,#20]
 742:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 743:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the edge sensitivity for event 1 */
 744:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
 1603              	 .loc 2 744 0
 1604 0012 7B69     	 ldr r3,[r7,#20]
 1605 0014 23F44023 	 bic r3,r3,#786432
 1606 0018 7B61     	 str r3,[r7,#20]
 745:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
 1607              	 .loc 2 745 0
 1608 001a BB68     	 ldr r3,[r7,#8]
 1609 001c 5B78     	 ldrb r3,[r3,#1]
 1610 001e 9B04     	 lsls r3,r3,#18
 1611 0020 7A69     	 ldr r2,[r7,#20]
 1612 0022 1343     	 orrs r3,r3,r2
 1613 0024 7B61     	 str r3,[r7,#20]
 746:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 747:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the edge sensitivity for event 2 */
 748:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
 1614              	 .loc 2 748 0
 1615 0026 7B69     	 ldr r3,[r7,#20]
 1616 0028 23F44013 	 bic r3,r3,#3145728
 1617 002c 7B61     	 str r3,[r7,#20]
 749:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
 1618              	 .loc 2 749 0
 1619 002e 7B68     	 ldr r3,[r7,#4]
 1620 0030 5B78     	 ldrb r3,[r3,#1]
 1621 0032 1B05     	 lsls r3,r3,#20
 1622 0034 7A69     	 ldr r2,[r7,#20]
 1623 0036 1343     	 orrs r3,r3,r2
 1624 0038 7B61     	 str r3,[r7,#20]
 750:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 751:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the level sensitivity for event 1 */
 752:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
 1625              	 .loc 2 752 0
 1626 003a 7B69     	 ldr r3,[r7,#20]
 1627 003c 23F40003 	 bic r3,r3,#8388608
 1628 0040 7B61     	 str r3,[r7,#20]
 753:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
 1629              	 .loc 2 753 0
 1630 0042 BB68     	 ldr r3,[r7,#8]
 1631 0044 9B78     	 ldrb r3,[r3,#2]
 1632 0046 DB05     	 lsls r3,r3,#23
 1633 0048 7A69     	 ldr r2,[r7,#20]
 1634 004a 1343     	 orrs r3,r3,r2
 1635 004c 7B61     	 str r3,[r7,#20]
 754:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 755:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the level sensitivity for event 2 */
 756:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
 1636              	 .loc 2 756 0
 1637 004e 7B69     	 ldr r3,[r7,#20]
 1638 0050 23F08073 	 bic r3,r3,#16777216
 1639 0054 7B61     	 str r3,[r7,#20]
 757:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
 1640              	 .loc 2 757 0
 1641 0056 7B68     	 ldr r3,[r7,#4]
 1642 0058 9B78     	 ldrb r3,[r3,#2]
 1643 005a 1B06     	 lsls r3,r3,#24
 1644 005c 7A69     	 ldr r2,[r7,#20]
 1645 005e 1343     	 orrs r3,r3,r2
 1646 0060 7B61     	 str r3,[r7,#20]
 758:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 759:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the debounce filter for event 1 */
 760:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
 1647              	 .loc 2 760 0
 1648 0062 7B69     	 ldr r3,[r7,#20]
 1649 0064 23F0C053 	 bic r3,r3,#402653184
 1650 0068 7B61     	 str r3,[r7,#20]
 761:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
 1651              	 .loc 2 761 0
 1652 006a BB68     	 ldr r3,[r7,#8]
 1653 006c DB78     	 ldrb r3,[r3,#3]
 1654 006e DB06     	 lsls r3,r3,#27
 1655 0070 7A69     	 ldr r2,[r7,#20]
 1656 0072 1343     	 orrs r3,r3,r2
 1657 0074 7B61     	 str r3,[r7,#20]
 762:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 763:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Configure the debounce filter for event 2 */
 764:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
 1658              	 .loc 2 764 0
 1659 0076 7B69     	 ldr r3,[r7,#20]
 1660 0078 23F0C043 	 bic r3,r3,#1610612736
 1661 007c 7B61     	 str r3,[r7,#20]
 765:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
 1662              	 .loc 2 765 0
 1663 007e 7B68     	 ldr r3,[r7,#4]
 1664 0080 DB78     	 ldrb r3,[r3,#3]
 1665 0082 5B07     	 lsls r3,r3,#29
 1666 0084 7A69     	 ldr r2,[r7,#20]
 1667 0086 1343     	 orrs r3,r3,r2
 1668 0088 7B61     	 str r3,[r7,#20]
 766:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 767:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the input for Event1 */
 768:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
 1669              	 .loc 2 768 0
 1670 008a 7B69     	 ldr r3,[r7,#20]
 1671 008c 23F0F003 	 bic r3,r3,#240
 1672 0090 7B61     	 str r3,[r7,#20]
 769:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
 1673              	 .loc 2 769 0
 1674 0092 BB68     	 ldr r3,[r7,#8]
 1675 0094 1B78     	 ldrb r3,[r3]
 1676 0096 1B01     	 lsls r3,r3,#4
 1677 0098 7A69     	 ldr r2,[r7,#20]
 1678 009a 1343     	 orrs r3,r3,r2
 1679 009c 7B61     	 str r3,[r7,#20]
 770:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 771:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Finally, the input for Event2 */
 772:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
 1680              	 .loc 2 772 0
 1681 009e 7B69     	 ldr r3,[r7,#20]
 1682 00a0 23F47063 	 bic r3,r3,#3840
 1683 00a4 7B61     	 str r3,[r7,#20]
 773:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
 1684              	 .loc 2 773 0
 1685 00a6 7B68     	 ldr r3,[r7,#4]
 1686 00a8 1B78     	 ldrb r3,[r3]
 1687 00aa 1B02     	 lsls r3,r3,#8
 1688 00ac 7A69     	 ldr r2,[r7,#20]
 1689 00ae 1343     	 orrs r3,r3,r2
 1690 00b0 7B61     	 str r3,[r7,#20]
 774:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 775:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS = ins;
 1691              	 .loc 2 775 0
 1692 00b2 FB68     	 ldr r3,[r7,#12]
 1693 00b4 7A69     	 ldr r2,[r7,#20]
 1694 00b6 1A60     	 str r2,[r3]
 776:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 777:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1695              	 .loc 2 777 0
 1696 00b8 1C37     	 adds r7,r7,#28
 1697              	.LCFI140:
 1698              	 .cfi_def_cfa_offset 4
 1699 00ba BD46     	 mov sp,r7
 1700              	.LCFI141:
 1701              	 .cfi_def_cfa_register 13
 1702              	 
 1703 00bc 5DF8047B 	 ldr r7,[sp],#4
 1704              	.LCFI142:
 1705              	 .cfi_restore 7
 1706              	 .cfi_def_cfa_offset 0
 1707 00c0 7047     	 bx lr
 1708              	 .cfi_endproc
 1709              	.LFE222:
 1711 00c2 00BF     	 .section .text.XMC_CCU4_SLICE_ConfigureEvent,"ax",%progbits
 1712              	 .align 2
 1713              	 .global XMC_CCU4_SLICE_ConfigureEvent
 1714              	 .thumb
 1715              	 .thumb_func
 1717              	XMC_CCU4_SLICE_ConfigureEvent:
 1718              	.LFB223:
 778:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 779:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to configure a slice trigger event */
 780:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
 781:../Libraries/XMCLib/src/xmc_ccu4.c **** 		                               const XMC_CCU4_SLICE_EVENT_t event,
 782:../Libraries/XMCLib/src/xmc_ccu4.c ****                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
 783:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1719              	 .loc 2 783 0
 1720              	 .cfi_startproc
 1721              	 
 1722              	 
 1723              	 
 1724 0000 80B4     	 push {r7}
 1725              	.LCFI143:
 1726              	 .cfi_def_cfa_offset 4
 1727              	 .cfi_offset 7,-4
 1728 0002 89B0     	 sub sp,sp,#36
 1729              	.LCFI144:
 1730              	 .cfi_def_cfa_offset 40
 1731 0004 00AF     	 add r7,sp,#0
 1732              	.LCFI145:
 1733              	 .cfi_def_cfa_register 7
 1734 0006 F860     	 str r0,[r7,#12]
 1735 0008 0B46     	 mov r3,r1
 1736 000a 7A60     	 str r2,[r7,#4]
 1737 000c FB72     	 strb r3,[r7,#11]
 784:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t ins;
 785:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t  pos;
 786:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t  offset;
 787:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 788:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 789:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event)
 790:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Input", XMC_CCU4_SLICE_IsInputvalid(config->map
 791:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Edge Sensitivity",
 792:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EDGE_SENSITIVITY(config->edge));
 793:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Level Sensitivity",
 794:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
 795:../Libraries/XMCLib/src/xmc_ccu4.c ****               (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
 796:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
 797:../Libraries/XMCLib/src/xmc_ccu4.c ****              XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
 798:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Calculate offset with reference to event */
 799:../Libraries/XMCLib/src/xmc_ccu4.c ****   offset = ((uint8_t) event) - 1U;
 1738              	 .loc 2 799 0
 1739 000e FB7A     	 ldrb r3,[r7,#11]
 1740 0010 013B     	 subs r3,r3,#1
 1741 0012 FB77     	 strb r3,[r7,#31]
 800:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 801:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU4V3) /* Defined for XMC1400 devices only */
 802:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS2;
 803:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 804:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, configure the edge sensitivity */
 805:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS2_EV0EM_Pos) + (uint8_t)(offset << 2U);
 806:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 807:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->edge) << pos;
 808:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 809:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the level */
 810:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS2_EV0LM_Pos) + (uint8_t)(offset << 2U);
 811:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 812:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->level) << pos;
 813:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 814:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the debounce filter */
 815:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS2_LPF0M_Pos) + (uint8_t)(offset << 2U);
 816:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 817:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->duration) << pos;
 818:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 819:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS2 = ins;
 820:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 821:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS1;
 822:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 823:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Finally the input */
 824:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS1_EV0IS_Pos) + (uint8_t)(offset << 3U);
 825:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 826:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->mapped_input) << pos;
 827:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 828:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS1 = ins;
 829:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 830:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
 831:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS;
 1742              	 .loc 2 831 0
 1743 0014 FB68     	 ldr r3,[r7,#12]
 1744 0016 1B68     	 ldr r3,[r3]
 1745 0018 BB61     	 str r3,[r7,#24]
 832:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 833:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First, configure the edge sensitivity */
 834:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 1746              	 .loc 2 834 0
 1747 001a FB7F     	 ldrb r3,[r7,#31]
 1748 001c 5B00     	 lsls r3,r3,#1
 1749 001e DBB2     	 uxtb r3,r3
 1750 0020 1033     	 adds r3,r3,#16
 1751 0022 FB75     	 strb r3,[r7,#23]
 835:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 1752              	 .loc 2 835 0
 1753 0024 FB7D     	 ldrb r3,[r7,#23]
 1754 0026 0322     	 movs r2,#3
 1755 0028 02FA03F3 	 lsl r3,r2,r3
 1756 002c DB43     	 mvns r3,r3
 1757 002e BA69     	 ldr r2,[r7,#24]
 1758 0030 1340     	 ands r3,r3,r2
 1759 0032 BB61     	 str r3,[r7,#24]
 836:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->edge) << pos;
 1760              	 .loc 2 836 0
 1761 0034 7B68     	 ldr r3,[r7,#4]
 1762 0036 5B78     	 ldrb r3,[r3,#1]
 1763 0038 1A46     	 mov r2,r3
 1764 003a FB7D     	 ldrb r3,[r7,#23]
 1765 003c 02FA03F3 	 lsl r3,r2,r3
 1766 0040 BA69     	 ldr r2,[r7,#24]
 1767 0042 1343     	 orrs r3,r3,r2
 1768 0044 BB61     	 str r3,[r7,#24]
 837:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 838:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the level */
 839:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 1769              	 .loc 2 839 0
 1770 0046 FB7F     	 ldrb r3,[r7,#31]
 1771 0048 1633     	 adds r3,r3,#22
 1772 004a FB75     	 strb r3,[r7,#23]
 840:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 1773              	 .loc 2 840 0
 1774 004c FB7D     	 ldrb r3,[r7,#23]
 1775 004e 0122     	 movs r2,#1
 1776 0050 02FA03F3 	 lsl r3,r2,r3
 1777 0054 DB43     	 mvns r3,r3
 1778 0056 BA69     	 ldr r2,[r7,#24]
 1779 0058 1340     	 ands r3,r3,r2
 1780 005a BB61     	 str r3,[r7,#24]
 841:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->level) << pos;
 1781              	 .loc 2 841 0
 1782 005c 7B68     	 ldr r3,[r7,#4]
 1783 005e 9B78     	 ldrb r3,[r3,#2]
 1784 0060 1A46     	 mov r2,r3
 1785 0062 FB7D     	 ldrb r3,[r7,#23]
 1786 0064 02FA03F3 	 lsl r3,r2,r3
 1787 0068 BA69     	 ldr r2,[r7,#24]
 1788 006a 1343     	 orrs r3,r3,r2
 1789 006c BB61     	 str r3,[r7,#24]
 842:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 843:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Next, the debounce filter */
 844:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 1790              	 .loc 2 844 0
 1791 006e FB7F     	 ldrb r3,[r7,#31]
 1792 0070 5B00     	 lsls r3,r3,#1
 1793 0072 DBB2     	 uxtb r3,r3
 1794 0074 1933     	 adds r3,r3,#25
 1795 0076 FB75     	 strb r3,[r7,#23]
 845:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 1796              	 .loc 2 845 0
 1797 0078 FB7D     	 ldrb r3,[r7,#23]
 1798 007a 0322     	 movs r2,#3
 1799 007c 02FA03F3 	 lsl r3,r2,r3
 1800 0080 DB43     	 mvns r3,r3
 1801 0082 BA69     	 ldr r2,[r7,#24]
 1802 0084 1340     	 ands r3,r3,r2
 1803 0086 BB61     	 str r3,[r7,#24]
 846:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->duration) << pos;
 1804              	 .loc 2 846 0
 1805 0088 7B68     	 ldr r3,[r7,#4]
 1806 008a DB78     	 ldrb r3,[r3,#3]
 1807 008c 1A46     	 mov r2,r3
 1808 008e FB7D     	 ldrb r3,[r7,#23]
 1809 0090 02FA03F3 	 lsl r3,r2,r3
 1810 0094 BA69     	 ldr r2,[r7,#24]
 1811 0096 1343     	 orrs r3,r3,r2
 1812 0098 BB61     	 str r3,[r7,#24]
 847:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 848:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Finally the input */
 849:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 1813              	 .loc 2 849 0
 1814 009a FB7F     	 ldrb r3,[r7,#31]
 1815 009c 9B00     	 lsls r3,r3,#2
 1816 009e FB75     	 strb r3,[r7,#23]
 850:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 1817              	 .loc 2 850 0
 1818 00a0 FB7D     	 ldrb r3,[r7,#23]
 1819 00a2 0F22     	 movs r2,#15
 1820 00a4 02FA03F3 	 lsl r3,r2,r3
 1821 00a8 DB43     	 mvns r3,r3
 1822 00aa BA69     	 ldr r2,[r7,#24]
 1823 00ac 1340     	 ands r3,r3,r2
 1824 00ae BB61     	 str r3,[r7,#24]
 851:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) config->mapped_input) << pos;
 1825              	 .loc 2 851 0
 1826 00b0 7B68     	 ldr r3,[r7,#4]
 1827 00b2 1B78     	 ldrb r3,[r3]
 1828 00b4 1A46     	 mov r2,r3
 1829 00b6 FB7D     	 ldrb r3,[r7,#23]
 1830 00b8 02FA03F3 	 lsl r3,r2,r3
 1831 00bc BA69     	 ldr r2,[r7,#24]
 1832 00be 1343     	 orrs r3,r3,r2
 1833 00c0 BB61     	 str r3,[r7,#24]
 852:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 853:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS = ins;
 1834              	 .loc 2 853 0
 1835 00c2 FB68     	 ldr r3,[r7,#12]
 1836 00c4 BA69     	 ldr r2,[r7,#24]
 1837 00c6 1A60     	 str r2,[r3]
 854:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 855:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1838              	 .loc 2 855 0
 1839 00c8 2437     	 adds r7,r7,#36
 1840              	.LCFI146:
 1841              	 .cfi_def_cfa_offset 4
 1842 00ca BD46     	 mov sp,r7
 1843              	.LCFI147:
 1844              	 .cfi_def_cfa_register 13
 1845              	 
 1846 00cc 5DF8047B 	 ldr r7,[sp],#4
 1847              	.LCFI148:
 1848              	 .cfi_restore 7
 1849              	 .cfi_def_cfa_offset 0
 1850 00d0 7047     	 bx lr
 1851              	 .cfi_endproc
 1852              	.LFE223:
 1854 00d2 00BF     	 .section .text.XMC_CCU4_SLICE_SetInput,"ax",%progbits
 1855              	 .align 2
 1856              	 .global XMC_CCU4_SLICE_SetInput
 1857              	 .thumb
 1858              	 .thumb_func
 1860              	XMC_CCU4_SLICE_SetInput:
 1861              	.LFB224:
 856:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 857:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to bind an input to a slice trigger event */
 858:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
 859:../Libraries/XMCLib/src/xmc_ccu4.c **** 		                     const XMC_CCU4_SLICE_EVENT_t event,
 860:../Libraries/XMCLib/src/xmc_ccu4.c ****                              const XMC_CCU4_SLICE_INPUT_t input)
 861:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1862              	 .loc 2 861 0
 1863              	 .cfi_startproc
 1864              	 
 1865              	 
 1866              	 
 1867 0000 80B4     	 push {r7}
 1868              	.LCFI149:
 1869              	 .cfi_def_cfa_offset 4
 1870              	 .cfi_offset 7,-4
 1871 0002 85B0     	 sub sp,sp,#20
 1872              	.LCFI150:
 1873              	 .cfi_def_cfa_offset 24
 1874 0004 00AF     	 add r7,sp,#0
 1875              	.LCFI151:
 1876              	 .cfi_def_cfa_register 7
 1877 0006 7860     	 str r0,[r7,#4]
 1878 0008 0B46     	 mov r3,r1
 1879 000a FB70     	 strb r3,[r7,#3]
 1880 000c 1346     	 mov r3,r2
 1881 000e BB70     	 strb r3,[r7,#2]
 862:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t ins;
 863:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t  pos;
 864:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t  offset;
 865:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 866:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
 867:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
 868:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Input", XMC_CCU4_SLICE_IsInputvalid(input));
 869:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 870:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Calculate offset with reference to event */
 871:../Libraries/XMCLib/src/xmc_ccu4.c ****   offset = ((uint8_t) event) - 1U;
 1882              	 .loc 2 871 0
 1883 0010 FB78     	 ldrb r3,[r7,#3]
 1884 0012 013B     	 subs r3,r3,#1
 1885 0014 FB73     	 strb r3,[r7,#15]
 872:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 873:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU4V3) /* Defined for XMC1400 devices only */
 874:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS1_EV0IS_Pos) + (uint8_t) (offset << 3U);
 875:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 876:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS1;
 877:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 878:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) input) << pos;
 879:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 880:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS1 = ins;
 881:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
 882:../Libraries/XMCLib/src/xmc_ccu4.c ****   pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t) (offset << 2U);
 1886              	 .loc 2 882 0
 1887 0016 FB7B     	 ldrb r3,[r7,#15]
 1888 0018 9B00     	 lsls r3,r3,#2
 1889 001a BB73     	 strb r3,[r7,#14]
 883:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 884:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins = slice->INS;
 1890              	 .loc 2 884 0
 1891 001c 7B68     	 ldr r3,[r7,#4]
 1892 001e 1B68     	 ldr r3,[r3]
 1893 0020 BB60     	 str r3,[r7,#8]
 885:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 1894              	 .loc 2 885 0
 1895 0022 BB7B     	 ldrb r3,[r7,#14]
 1896 0024 0F22     	 movs r2,#15
 1897 0026 02FA03F3 	 lsl r3,r2,r3
 1898 002a DB43     	 mvns r3,r3
 1899 002c BA68     	 ldr r2,[r7,#8]
 1900 002e 1340     	 ands r3,r3,r2
 1901 0030 BB60     	 str r3,[r7,#8]
 886:../Libraries/XMCLib/src/xmc_ccu4.c ****   ins |= ((uint32_t) input) << pos;
 1902              	 .loc 2 886 0
 1903 0032 BA78     	 ldrb r2,[r7,#2]
 1904 0034 BB7B     	 ldrb r3,[r7,#14]
 1905 0036 02FA03F3 	 lsl r3,r2,r3
 1906 003a BA68     	 ldr r2,[r7,#8]
 1907 003c 1343     	 orrs r3,r3,r2
 1908 003e BB60     	 str r3,[r7,#8]
 887:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 888:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->INS = ins;
 1909              	 .loc 2 888 0
 1910 0040 7B68     	 ldr r3,[r7,#4]
 1911 0042 BA68     	 ldr r2,[r7,#8]
 1912 0044 1A60     	 str r2,[r3]
 889:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
 890:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1913              	 .loc 2 890 0
 1914 0046 1437     	 adds r7,r7,#20
 1915              	.LCFI152:
 1916              	 .cfi_def_cfa_offset 4
 1917 0048 BD46     	 mov sp,r7
 1918              	.LCFI153:
 1919              	 .cfi_def_cfa_register 13
 1920              	 
 1921 004a 5DF8047B 	 ldr r7,[sp],#4
 1922              	.LCFI154:
 1923              	 .cfi_restore 7
 1924              	 .cfi_def_cfa_offset 0
 1925 004e 7047     	 bx lr
 1926              	 .cfi_endproc
 1927              	.LFE224:
 1929              	 .section .text.XMC_CCU4_SLICE_SetTimerRepeatMode,"ax",%progbits
 1930              	 .align 2
 1931              	 .global XMC_CCU4_SLICE_SetTimerRepeatMode
 1932              	 .thumb
 1933              	 .thumb_func
 1935              	XMC_CCU4_SLICE_SetTimerRepeatMode:
 1936              	.LFB225:
 891:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 892:../Libraries/XMCLib/src/xmc_ccu4.c **** /* API to program timer repeat mode - Single shot vs repeat */
 893:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetTimerRepeatMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_RE
 894:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1937              	 .loc 2 894 0
 1938              	 .cfi_startproc
 1939              	 
 1940              	 
 1941              	 
 1942 0000 80B4     	 push {r7}
 1943              	.LCFI155:
 1944              	 .cfi_def_cfa_offset 4
 1945              	 .cfi_offset 7,-4
 1946 0002 83B0     	 sub sp,sp,#12
 1947              	.LCFI156:
 1948              	 .cfi_def_cfa_offset 16
 1949 0004 00AF     	 add r7,sp,#0
 1950              	.LCFI157:
 1951              	 .cfi_def_cfa_register 7
 1952 0006 7860     	 str r0,[r7,#4]
 1953 0008 0B46     	 mov r3,r1
 1954 000a FB70     	 strb r3,[r7,#3]
 895:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice
 896:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Timer Repeat Mode",
 897:../Libraries/XMCLib/src/xmc_ccu4.c ****              ((mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT) ||\
 898:../Libraries/XMCLib/src/xmc_ccu4.c **** 		      (mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE)));
 899:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 900:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT == mode)
 1955              	 .loc 2 900 0
 1956 000c FB78     	 ldrb r3,[r7,#3]
 1957 000e 002B     	 cmp r3,#0
 1958 0010 06D1     	 bne .L63
 901:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 902:../Libraries/XMCLib/src/xmc_ccu4.c ****     slice->TC &= ~((uint32_t) CCU4_CC4_TC_TSSM_Msk);
 1959              	 .loc 2 902 0
 1960 0012 7B68     	 ldr r3,[r7,#4]
 1961 0014 5B69     	 ldr r3,[r3,#20]
 1962 0016 23F00202 	 bic r2,r3,#2
 1963 001a 7B68     	 ldr r3,[r7,#4]
 1964 001c 5A61     	 str r2,[r3,#20]
 1965 001e 05E0     	 b .L62
 1966              	.L63:
 903:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 904:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 905:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 906:../Libraries/XMCLib/src/xmc_ccu4.c ****     slice->TC |= (uint32_t) CCU4_CC4_TC_TSSM_Msk;
 1967              	 .loc 2 906 0
 1968 0020 7B68     	 ldr r3,[r7,#4]
 1969 0022 5B69     	 ldr r3,[r3,#20]
 1970 0024 43F00202 	 orr r2,r3,#2
 1971 0028 7B68     	 ldr r3,[r7,#4]
 1972 002a 5A61     	 str r2,[r3,#20]
 1973              	.L62:
 907:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 908:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 1974              	 .loc 2 908 0
 1975 002c 0C37     	 adds r7,r7,#12
 1976              	.LCFI158:
 1977              	 .cfi_def_cfa_offset 4
 1978 002e BD46     	 mov sp,r7
 1979              	.LCFI159:
 1980              	 .cfi_def_cfa_register 13
 1981              	 
 1982 0030 5DF8047B 	 ldr r7,[sp],#4
 1983              	.LCFI160:
 1984              	 .cfi_restore 7
 1985              	 .cfi_def_cfa_offset 0
 1986 0034 7047     	 bx lr
 1987              	 .cfi_endproc
 1988              	.LFE225:
 1990 0036 00BF     	 .section .text.XMC_CCU4_SLICE_SetTimerCountingMode,"ax",%progbits
 1991              	 .align 2
 1992              	 .global XMC_CCU4_SLICE_SetTimerCountingMode
 1993              	 .thumb
 1994              	 .thumb_func
 1996              	XMC_CCU4_SLICE_SetTimerCountingMode:
 1997              	.LFB226:
 909:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 910:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Programs timer counting mode */
 911:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_
 912:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 1998              	 .loc 2 912 0
 1999              	 .cfi_startproc
 2000              	 
 2001              	 
 2002              	 
 2003 0000 80B4     	 push {r7}
 2004              	.LCFI161:
 2005              	 .cfi_def_cfa_offset 4
 2006              	 .cfi_offset 7,-4
 2007 0002 83B0     	 sub sp,sp,#12
 2008              	.LCFI162:
 2009              	 .cfi_def_cfa_offset 16
 2010 0004 00AF     	 add r7,sp,#0
 2011              	.LCFI163:
 2012              	 .cfi_def_cfa_register 7
 2013 0006 7860     	 str r0,[r7,#4]
 2014 0008 0B46     	 mov r3,r1
 2015 000a FB70     	 strb r3,[r7,#3]
 913:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
 914:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Timer Count Mode", ((mode == XMC_CCU4_SLI
 915:../Libraries/XMCLib/src/xmc_ccu4.c **** 		                                                                          (mode == XMC_CCU4_SLICE
 916:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 917:../Libraries/XMCLib/src/xmc_ccu4.c ****   if (XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA == mode)
 2016              	 .loc 2 917 0
 2017 000c FB78     	 ldrb r3,[r7,#3]
 2018 000e 002B     	 cmp r3,#0
 2019 0010 06D1     	 bne .L66
 918:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 919:../Libraries/XMCLib/src/xmc_ccu4.c ****     slice->TC &= ~((uint32_t) CCU4_CC4_TC_TCM_Msk);
 2020              	 .loc 2 919 0
 2021 0012 7B68     	 ldr r3,[r7,#4]
 2022 0014 5B69     	 ldr r3,[r3,#20]
 2023 0016 23F00102 	 bic r2,r3,#1
 2024 001a 7B68     	 ldr r3,[r7,#4]
 2025 001c 5A61     	 str r2,[r3,#20]
 2026 001e 05E0     	 b .L65
 2027              	.L66:
 920:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 921:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 922:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 923:../Libraries/XMCLib/src/xmc_ccu4.c ****     slice->TC |= (uint32_t) CCU4_CC4_TC_TCM_Msk;
 2028              	 .loc 2 923 0
 2029 0020 7B68     	 ldr r3,[r7,#4]
 2030 0022 5B69     	 ldr r3,[r3,#20]
 2031 0024 43F00102 	 orr r2,r3,#1
 2032 0028 7B68     	 ldr r3,[r7,#4]
 2033 002a 5A61     	 str r2,[r3,#20]
 2034              	.L65:
 924:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 925:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2035              	 .loc 2 925 0
 2036 002c 0C37     	 adds r7,r7,#12
 2037              	.LCFI164:
 2038              	 .cfi_def_cfa_offset 4
 2039 002e BD46     	 mov sp,r7
 2040              	.LCFI165:
 2041              	 .cfi_def_cfa_register 13
 2042              	 
 2043 0030 5DF8047B 	 ldr r7,[sp],#4
 2044              	.LCFI166:
 2045              	 .cfi_restore 7
 2046              	 .cfi_def_cfa_offset 0
 2047 0034 7047     	 bx lr
 2048              	 .cfi_endproc
 2049              	.LFE226:
 2051 0036 00BF     	 .section .text.XMC_CCU4_SLICE_GetCaptureRegisterValue,"ax",%progbits
 2052              	 .align 2
 2053              	 .global XMC_CCU4_SLICE_GetCaptureRegisterValue
 2054              	 .thumb
 2055              	 .thumb_func
 2057              	XMC_CCU4_SLICE_GetCaptureRegisterValue:
 2058              	.LFB227:
 926:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 927:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Retrieves desired capture register value */
 928:../Libraries/XMCLib/src/xmc_ccu4.c **** uint32_t XMC_CCU4_SLICE_GetCaptureRegisterValue(const XMC_CCU4_SLICE_t *const slice, const uint8_t 
 929:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 2059              	 .loc 2 929 0
 2060              	 .cfi_startproc
 2061              	 
 2062              	 
 2063              	 
 2064 0000 80B4     	 push {r7}
 2065              	.LCFI167:
 2066              	 .cfi_def_cfa_offset 4
 2067              	 .cfi_offset 7,-4
 2068 0002 83B0     	 sub sp,sp,#12
 2069              	.LCFI168:
 2070              	 .cfi_def_cfa_offset 16
 2071 0004 00AF     	 add r7,sp,#0
 2072              	.LCFI169:
 2073              	 .cfi_def_cfa_register 7
 2074 0006 7860     	 str r0,[r7,#4]
 2075 0008 0B46     	 mov r3,r1
 2076 000a FB70     	 strb r3,[r7,#3]
 930:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(
 931:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid register number", (reg_num < 4U));
 932:../Libraries/XMCLib/src/xmc_ccu4.c ****   return(slice->CV[reg_num]);
 2077              	 .loc 2 932 0
 2078 000c FB78     	 ldrb r3,[r7,#3]
 2079 000e 7A68     	 ldr r2,[r7,#4]
 2080 0010 1C33     	 adds r3,r3,#28
 2081 0012 9B00     	 lsls r3,r3,#2
 2082 0014 1344     	 add r3,r3,r2
 2083 0016 5B68     	 ldr r3,[r3,#4]
 933:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2084              	 .loc 2 933 0
 2085 0018 1846     	 mov r0,r3
 2086 001a 0C37     	 adds r7,r7,#12
 2087              	.LCFI170:
 2088              	 .cfi_def_cfa_offset 4
 2089 001c BD46     	 mov sp,r7
 2090              	.LCFI171:
 2091              	 .cfi_def_cfa_register 13
 2092              	 
 2093 001e 5DF8047B 	 ldr r7,[sp],#4
 2094              	.LCFI172:
 2095              	 .cfi_restore 7
 2096              	 .cfi_def_cfa_offset 0
 2097 0022 7047     	 bx lr
 2098              	 .cfi_endproc
 2099              	.LFE227:
 2101              	 .section .text.XMC_CCU4_SLICE_GetLastCapturedTimerValue,"ax",%progbits
 2102              	 .align 2
 2103              	 .global XMC_CCU4_SLICE_GetLastCapturedTimerValue
 2104              	 .thumb
 2105              	 .thumb_func
 2107              	XMC_CCU4_SLICE_GetLastCapturedTimerValue:
 2108              	.LFB228:
 934:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 935:../Libraries/XMCLib/src/xmc_ccu4.c **** /* @brief Retrieves the latest captured timer value */
 936:../Libraries/XMCLib/src/xmc_ccu4.c **** XMC_CCU4_STATUS_t XMC_CCU4_SLICE_GetLastCapturedTimerValue(const XMC_CCU4_SLICE_t *const slice,
 937:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                            const XMC_CCU4_SLICE_CAP_REG_SET_t set,
 938:../Libraries/XMCLib/src/xmc_ccu4.c ****                                                            uint32_t *val_ptr)
 939:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 2109              	 .loc 2 939 0
 2110              	 .cfi_startproc
 2111              	 
 2112              	 
 2113              	 
 2114 0000 80B4     	 push {r7}
 2115              	.LCFI173:
 2116              	 .cfi_def_cfa_offset 4
 2117              	 .cfi_offset 7,-4
 2118 0002 87B0     	 sub sp,sp,#28
 2119              	.LCFI174:
 2120              	 .cfi_def_cfa_offset 32
 2121 0004 00AF     	 add r7,sp,#0
 2122              	.LCFI175:
 2123              	 .cfi_def_cfa_register 7
 2124 0006 F860     	 str r0,[r7,#12]
 2125 0008 0B46     	 mov r3,r1
 2126 000a 7A60     	 str r2,[r7,#4]
 2127 000c FB72     	 strb r3,[r7,#11]
 940:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_STATUS_t retval;
 941:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t i;
 942:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t start;
 943:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint8_t end;
 944:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 945:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetLastCapturedTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlic
 946:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetLastCapturedTimerValue:Invalid Register Set", ((set == XMC_CCU4_SLI
 947:../Libraries/XMCLib/src/xmc_ccu4.c **** 		                                                                           (set == XMC_CCU4_SLICE
 948:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 949:../Libraries/XMCLib/src/xmc_ccu4.c ****   retval = XMC_CCU4_STATUS_ERROR;
 2128              	 .loc 2 949 0
 2129 000e 0123     	 movs r3,#1
 2130 0010 FB75     	 strb r3,[r7,#23]
 950:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 951:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First check if extended capture mode is enabled */
 952:../Libraries/XMCLib/src/xmc_ccu4.c ****   if ((slice->TC) & CCU4_CC4_TC_ECM_Msk)
 2131              	 .loc 2 952 0
 2132 0012 FB68     	 ldr r3,[r7,#12]
 2133 0014 5B69     	 ldr r3,[r3,#20]
 2134 0016 03F01003 	 and r3,r3,#16
 2135 001a 002B     	 cmp r3,#0
 2136 001c 04D0     	 beq .L71
 953:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 954:../Libraries/XMCLib/src/xmc_ccu4.c ****     /* Extended capture mode has been enabled. So start with the lowest capture register and work y
 955:../Libraries/XMCLib/src/xmc_ccu4.c ****     start = 0U;
 2137              	 .loc 2 955 0
 2138 001e 0023     	 movs r3,#0
 2139 0020 7B75     	 strb r3,[r7,#21]
 956:../Libraries/XMCLib/src/xmc_ccu4.c ****     end = XMC_CCU4_NUM_SLICES_PER_MODULE;
 2140              	 .loc 2 956 0
 2141 0022 0423     	 movs r3,#4
 2142 0024 3B75     	 strb r3,[r7,#20]
 2143 0026 0BE0     	 b .L72
 2144              	.L71:
 957:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 958:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
 959:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 960:../Libraries/XMCLib/src/xmc_ccu4.c ****     /* Extended capture mode is not enabled */
 961:../Libraries/XMCLib/src/xmc_ccu4.c ****     if (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)
 2145              	 .loc 2 961 0
 2146 0028 FB7A     	 ldrb r3,[r7,#11]
 2147 002a 012B     	 cmp r3,#1
 2148 002c 04D1     	 bne .L73
 962:../Libraries/XMCLib/src/xmc_ccu4.c ****     {
 963:../Libraries/XMCLib/src/xmc_ccu4.c ****       start = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 2149              	 .loc 2 963 0
 2150 002e 0223     	 movs r3,#2
 2151 0030 7B75     	 strb r3,[r7,#21]
 964:../Libraries/XMCLib/src/xmc_ccu4.c ****       end   = (uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE;
 2152              	 .loc 2 964 0
 2153 0032 0423     	 movs r3,#4
 2154 0034 3B75     	 strb r3,[r7,#20]
 2155 0036 03E0     	 b .L72
 2156              	.L73:
 965:../Libraries/XMCLib/src/xmc_ccu4.c ****     }
 966:../Libraries/XMCLib/src/xmc_ccu4.c ****     else
 967:../Libraries/XMCLib/src/xmc_ccu4.c ****     {
 968:../Libraries/XMCLib/src/xmc_ccu4.c ****       start = 0U;
 2157              	 .loc 2 968 0
 2158 0038 0023     	 movs r3,#0
 2159 003a 7B75     	 strb r3,[r7,#21]
 969:../Libraries/XMCLib/src/xmc_ccu4.c ****       end = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 2160              	 .loc 2 969 0
 2161 003c 0223     	 movs r3,#2
 2162 003e 3B75     	 strb r3,[r7,#20]
 2163              	.L72:
 970:../Libraries/XMCLib/src/xmc_ccu4.c ****     }
 971:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 972:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 973:../Libraries/XMCLib/src/xmc_ccu4.c ****   for(i=start; i < end; i++)
 2164              	 .loc 2 973 0
 2165 0040 7B7D     	 ldrb r3,[r7,#21]
 2166 0042 BB75     	 strb r3,[r7,#22]
 2167 0044 17E0     	 b .L74
 2168              	.L77:
 974:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 975:../Libraries/XMCLib/src/xmc_ccu4.c ****     if ( (slice->CV[i]) & CCU4_CC4_CV_FFL_Msk )
 2169              	 .loc 2 975 0
 2170 0046 BB7D     	 ldrb r3,[r7,#22]
 2171 0048 FA68     	 ldr r2,[r7,#12]
 2172 004a 1C33     	 adds r3,r3,#28
 2173 004c 9B00     	 lsls r3,r3,#2
 2174 004e 1344     	 add r3,r3,r2
 2175 0050 5B68     	 ldr r3,[r3,#4]
 2176 0052 03F48013 	 and r3,r3,#1048576
 2177 0056 002B     	 cmp r3,#0
 2178 0058 0AD0     	 beq .L75
 976:../Libraries/XMCLib/src/xmc_ccu4.c ****     {
 977:../Libraries/XMCLib/src/xmc_ccu4.c ****       *val_ptr = slice->CV[i];
 2179              	 .loc 2 977 0
 2180 005a BB7D     	 ldrb r3,[r7,#22]
 2181 005c FA68     	 ldr r2,[r7,#12]
 2182 005e 1C33     	 adds r3,r3,#28
 2183 0060 9B00     	 lsls r3,r3,#2
 2184 0062 1344     	 add r3,r3,r2
 2185 0064 5A68     	 ldr r2,[r3,#4]
 2186 0066 7B68     	 ldr r3,[r7,#4]
 2187 0068 1A60     	 str r2,[r3]
 978:../Libraries/XMCLib/src/xmc_ccu4.c ****       retval = XMC_CCU4_STATUS_OK;
 2188              	 .loc 2 978 0
 2189 006a 0023     	 movs r3,#0
 2190 006c FB75     	 strb r3,[r7,#23]
 979:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 2191              	 .loc 2 979 0
 2192 006e 06E0     	 b .L76
 2193              	.L75:
 973:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 2194              	 .loc 2 973 0 discriminator 2
 2195 0070 BB7D     	 ldrb r3,[r7,#22]
 2196 0072 0133     	 adds r3,r3,#1
 2197 0074 BB75     	 strb r3,[r7,#22]
 2198              	.L74:
 973:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
 2199              	 .loc 2 973 0 is_stmt 0 discriminator 1
 2200 0076 BA7D     	 ldrb r2,[r7,#22]
 2201 0078 3B7D     	 ldrb r3,[r7,#20]
 2202 007a 9A42     	 cmp r2,r3
 2203 007c E3D3     	 bcc .L77
 2204              	.L76:
 980:../Libraries/XMCLib/src/xmc_ccu4.c ****     }
 981:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
 982:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 983:../Libraries/XMCLib/src/xmc_ccu4.c ****   return retval;
 2205              	 .loc 2 983 0 is_stmt 1
 2206 007e FB7D     	 ldrb r3,[r7,#23]
 984:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2207              	 .loc 2 984 0
 2208 0080 1846     	 mov r0,r3
 2209 0082 1C37     	 adds r7,r7,#28
 2210              	.LCFI176:
 2211              	 .cfi_def_cfa_offset 4
 2212 0084 BD46     	 mov sp,r7
 2213              	.LCFI177:
 2214              	 .cfi_def_cfa_register 13
 2215              	 
 2216 0086 5DF8047B 	 ldr r7,[sp],#4
 2217              	.LCFI178:
 2218              	 .cfi_restore 7
 2219              	 .cfi_def_cfa_offset 0
 2220 008a 7047     	 bx lr
 2221              	 .cfi_endproc
 2222              	.LFE228:
 2224              	 .section .text.XMC_CCU4_SLICE_GetCapturedValueFromFifo,"ax",%progbits
 2225              	 .align 2
 2226              	 .global XMC_CCU4_SLICE_GetCapturedValueFromFifo
 2227              	 .thumb
 2228              	 .thumb_func
 2230              	XMC_CCU4_SLICE_GetCapturedValueFromFifo:
 2231              	.LFB229:
 985:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 986:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Retrieves timer capture value from a FIFO made of capture registers */
 987:../Libraries/XMCLib/src/xmc_ccu4.c **** #if defined(CCU4V1) /* Defined for XMC4500, XMC400, XMC4200, XMC4100 devices only */
 988:../Libraries/XMCLib/src/xmc_ccu4.c **** int32_t XMC_CCU4_GetCapturedValueFromFifo(const XMC_CCU4_MODULE_t *const module, const uint8_t slic
 989:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 990:../Libraries/XMCLib/src/xmc_ccu4.c ****   int32_t   cap;
 991:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t  extracted_slice;
 992:../Libraries/XMCLib/src/xmc_ccu4.c ****   
 993:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU4_IsValidModule(modu
 994:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 995:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* First read the global fifo register */
 996:../Libraries/XMCLib/src/xmc_ccu4.c ****   cap = (int32_t) module->ECRD;
 997:../Libraries/XMCLib/src/xmc_ccu4.c **** 
 998:../Libraries/XMCLib/src/xmc_ccu4.c ****   extracted_slice = (((uint32_t) cap) & ((uint32_t) CCU4_ECRD_SPTR_Msk)) >> CCU4_ECRD_SPTR_Pos;
 999:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1000:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Return captured result only if it were applicable to this slice */
1001:../Libraries/XMCLib/src/xmc_ccu4.c ****   if(extracted_slice != ((uint32_t)slice_number))
1002:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
1003:../Libraries/XMCLib/src/xmc_ccu4.c ****     cap = -1;
1004:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
1005:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1006:../Libraries/XMCLib/src/xmc_ccu4.c ****   return (cap);
1007:../Libraries/XMCLib/src/xmc_ccu4.c **** }
1008:../Libraries/XMCLib/src/xmc_ccu4.c **** #else
1009:../Libraries/XMCLib/src/xmc_ccu4.c **** uint32_t XMC_CCU4_SLICE_GetCapturedValueFromFifo(const XMC_CCU4_SLICE_t *const slice,
1010:../Libraries/XMCLib/src/xmc_ccu4.c **** 		                                         const XMC_CCU4_SLICE_CAP_REG_SET_t set)
1011:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 2232              	 .loc 2 1011 0
 2233              	 .cfi_startproc
 2234              	 
 2235              	 
 2236              	 
 2237 0000 80B4     	 push {r7}
 2238              	.LCFI179:
 2239              	 .cfi_def_cfa_offset 4
 2240              	 .cfi_offset 7,-4
 2241 0002 85B0     	 sub sp,sp,#20
 2242              	.LCFI180:
 2243              	 .cfi_def_cfa_offset 24
 2244 0004 00AF     	 add r7,sp,#0
 2245              	.LCFI181:
 2246              	 .cfi_def_cfa_register 7
 2247 0006 7860     	 str r0,[r7,#4]
 2248 0008 0B46     	 mov r3,r1
 2249 000a FB70     	 strb r3,[r7,#3]
1012:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t cap;
1013:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1014:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU4_IsValidSlice
1015:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCapturedValueFromFifo:Invalid Register Set", 
1016:../Libraries/XMCLib/src/xmc_ccu4.c ****       ((set == XMC_CCU4_SLICE_CAP_REG_SET_LOW) ||\
1017:../Libraries/XMCLib/src/xmc_ccu4.c **** 		   (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)));
1018:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1019:../Libraries/XMCLib/src/xmc_ccu4.c ****   if(XMC_CCU4_SLICE_CAP_REG_SET_LOW == set)
 2250              	 .loc 2 1019 0
 2251 000c FB78     	 ldrb r3,[r7,#3]
 2252 000e 002B     	 cmp r3,#0
 2253 0010 04D1     	 bne .L80
1020:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
1021:../Libraries/XMCLib/src/xmc_ccu4.c ****     cap = slice->ECRD0;
 2254              	 .loc 2 1021 0
 2255 0012 7B68     	 ldr r3,[r7,#4]
 2256 0014 D3F8B830 	 ldr r3,[r3,#184]
 2257 0018 FB60     	 str r3,[r7,#12]
 2258 001a 03E0     	 b .L81
 2259              	.L80:
1022:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
1023:../Libraries/XMCLib/src/xmc_ccu4.c ****   else
1024:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
1025:../Libraries/XMCLib/src/xmc_ccu4.c ****     cap = slice->ECRD1;
 2260              	 .loc 2 1025 0
 2261 001c 7B68     	 ldr r3,[r7,#4]
 2262 001e D3F8BC30 	 ldr r3,[r3,#188]
 2263 0022 FB60     	 str r3,[r7,#12]
 2264              	.L81:
1026:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
1027:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1028:../Libraries/XMCLib/src/xmc_ccu4.c ****   return cap;
 2265              	 .loc 2 1028 0
 2266 0024 FB68     	 ldr r3,[r7,#12]
1029:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2267              	 .loc 2 1029 0
 2268 0026 1846     	 mov r0,r3
 2269 0028 1437     	 adds r7,r7,#20
 2270              	.LCFI182:
 2271              	 .cfi_def_cfa_offset 4
 2272 002a BD46     	 mov sp,r7
 2273              	.LCFI183:
 2274              	 .cfi_def_cfa_register 13
 2275              	 
 2276 002c 5DF8047B 	 ldr r7,[sp],#4
 2277              	.LCFI184:
 2278              	 .cfi_restore 7
 2279              	 .cfi_def_cfa_offset 0
 2280 0030 7047     	 bx lr
 2281              	 .cfi_endproc
 2282              	.LFE229:
 2284 0032 00BF     	 .section .text.XMC_CCU4_SLICE_EnableDithering,"ax",%progbits
 2285              	 .align 2
 2286              	 .global XMC_CCU4_SLICE_EnableDithering
 2287              	 .thumb
 2288              	 .thumb_func
 2290              	XMC_CCU4_SLICE_EnableDithering:
 2291              	.LFB230:
1030:../Libraries/XMCLib/src/xmc_ccu4.c **** #endif
1031:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1032:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Enables PWM dithering feature */
1033:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_EnableDithering(XMC_CCU4_SLICE_t *const slice,
1034:../Libraries/XMCLib/src/xmc_ccu4.c **** 		                                const bool period_dither,
1035:../Libraries/XMCLib/src/xmc_ccu4.c ****                                     const bool duty_dither,
1036:../Libraries/XMCLib/src/xmc_ccu4.c ****                                     const uint8_t spread)
1037:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 2292              	 .loc 2 1037 0
 2293              	 .cfi_startproc
 2294              	 
 2295              	 
 2296 0000 80B5     	 push {r7,lr}
 2297              	.LCFI185:
 2298              	 .cfi_def_cfa_offset 8
 2299              	 .cfi_offset 7,-8
 2300              	 .cfi_offset 14,-4
 2301 0002 84B0     	 sub sp,sp,#16
 2302              	.LCFI186:
 2303              	 .cfi_def_cfa_offset 24
 2304 0004 00AF     	 add r7,sp,#0
 2305              	.LCFI187:
 2306              	 .cfi_def_cfa_register 7
 2307 0006 7860     	 str r0,[r7,#4]
 2308 0008 0846     	 mov r0,r1
 2309 000a 1146     	 mov r1,r2
 2310 000c 1A46     	 mov r2,r3
 2311 000e 0346     	 mov r3,r0
 2312 0010 FB70     	 strb r3,[r7,#3]
 2313 0012 0B46     	 mov r3,r1
 2314 0014 BB70     	 strb r3,[r7,#2]
 2315 0016 1346     	 mov r3,r2
 2316 0018 7B70     	 strb r3,[r7,#1]
1038:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t tc;
1039:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1040:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableDithering:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1041:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1042:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc = slice->TC;
 2317              	 .loc 2 1042 0
 2318 001a 7B68     	 ldr r3,[r7,#4]
 2319 001c 5B69     	 ldr r3,[r3,#20]
 2320 001e FB60     	 str r3,[r7,#12]
1043:../Libraries/XMCLib/src/xmc_ccu4.c ****   tc &= ~((uint32_t) CCU4_CC4_TC_DITHE_Msk);
 2321              	 .loc 2 1043 0
 2322 0020 FB68     	 ldr r3,[r7,#12]
 2323 0022 23F4C043 	 bic r3,r3,#24576
 2324 0026 FB60     	 str r3,[r7,#12]
1044:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1045:../Libraries/XMCLib/src/xmc_ccu4.c ****   if ((bool) true == period_dither)
 2325              	 .loc 2 1045 0
 2326 0028 FB78     	 ldrb r3,[r7,#3]
 2327 002a 002B     	 cmp r3,#0
 2328 002c 03D0     	 beq .L84
1046:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
1047:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_PERIOD_MASK) << CCU4_CC4_TC_DITHE_Pos);
 2329              	 .loc 2 1047 0
 2330 002e FB68     	 ldr r3,[r7,#12]
 2331 0030 43F40053 	 orr r3,r3,#8192
 2332 0034 FB60     	 str r3,[r7,#12]
 2333              	.L84:
1048:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
1049:../Libraries/XMCLib/src/xmc_ccu4.c ****   if ((bool) true == duty_dither)
 2334              	 .loc 2 1049 0
 2335 0036 BB78     	 ldrb r3,[r7,#2]
 2336 0038 002B     	 cmp r3,#0
 2337 003a 03D0     	 beq .L85
1050:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
1051:../Libraries/XMCLib/src/xmc_ccu4.c ****     tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_DUTYCYCLE_MASK) << CCU4_CC4_TC_DITHE_Pos);
 2338              	 .loc 2 1051 0
 2339 003c FB68     	 ldr r3,[r7,#12]
 2340 003e 43F48043 	 orr r3,r3,#16384
 2341 0042 FB60     	 str r3,[r7,#12]
 2342              	.L85:
1052:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
1053:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1054:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->TC = tc;
 2343              	 .loc 2 1054 0
 2344 0044 7B68     	 ldr r3,[r7,#4]
 2345 0046 FA68     	 ldr r2,[r7,#12]
 2346 0048 5A61     	 str r2,[r3,#20]
1055:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1056:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
 2347              	 .loc 2 1056 0
 2348 004a 7B78     	 ldrb r3,[r7,#1]
 2349 004c 7868     	 ldr r0,[r7,#4]
 2350 004e 1946     	 mov r1,r3
 2351 0050 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetDitherCompareValue
1057:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2352              	 .loc 2 1057 0
 2353 0054 1037     	 adds r7,r7,#16
 2354              	.LCFI188:
 2355              	 .cfi_def_cfa_offset 8
 2356 0056 BD46     	 mov sp,r7
 2357              	.LCFI189:
 2358              	 .cfi_def_cfa_register 13
 2359              	 
 2360 0058 80BD     	 pop {r7,pc}
 2361              	 .cfi_endproc
 2362              	.LFE230:
 2364 005a 00BF     	 .section .text.XMC_CCU4_SLICE_SetPrescaler,"ax",%progbits
 2365              	 .align 2
 2366              	 .global XMC_CCU4_SLICE_SetPrescaler
 2367              	 .thumb
 2368              	 .thumb_func
 2370              	XMC_CCU4_SLICE_SetPrescaler:
 2371              	.LFB231:
1058:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1059:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Programs Pre-scalar divider  */
1060:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const uint8_t div_val)
1061:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 2372              	 .loc 2 1061 0
 2373              	 .cfi_startproc
 2374              	 
 2375              	 
 2376              	 
 2377 0000 80B4     	 push {r7}
 2378              	.LCFI190:
 2379              	 .cfi_def_cfa_offset 4
 2380              	 .cfi_offset 7,-4
 2381 0002 85B0     	 sub sp,sp,#20
 2382              	.LCFI191:
 2383              	 .cfi_def_cfa_offset 24
 2384 0004 00AF     	 add r7,sp,#0
 2385              	.LCFI192:
 2386              	 .cfi_def_cfa_register 7
 2387 0006 7860     	 str r0,[r7,#4]
 2388 0008 0B46     	 mov r3,r1
 2389 000a FB70     	 strb r3,[r7,#3]
1062:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t fpc;
1063:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1064:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1065:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1066:../Libraries/XMCLib/src/xmc_ccu4.c ****   fpc = slice->FPC;
 2390              	 .loc 2 1066 0
 2391 000c 7B68     	 ldr r3,[r7,#4]
 2392 000e 9B6A     	 ldr r3,[r3,#40]
 2393 0010 FB60     	 str r3,[r7,#12]
1067:../Libraries/XMCLib/src/xmc_ccu4.c ****   fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 2394              	 .loc 2 1067 0
 2395 0012 FB68     	 ldr r3,[r7,#12]
 2396 0014 23F47063 	 bic r3,r3,#3840
 2397 0018 FB60     	 str r3,[r7,#12]
1068:../Libraries/XMCLib/src/xmc_ccu4.c ****   fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 2398              	 .loc 2 1068 0
 2399 001a FB78     	 ldrb r3,[r7,#3]
 2400 001c 1B02     	 lsls r3,r3,#8
 2401 001e FA68     	 ldr r2,[r7,#12]
 2402 0020 1343     	 orrs r3,r3,r2
 2403 0022 FB60     	 str r3,[r7,#12]
1069:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->FPC = fpc;
 2404              	 .loc 2 1069 0
 2405 0024 7B68     	 ldr r3,[r7,#4]
 2406 0026 FA68     	 ldr r2,[r7,#12]
 2407 0028 9A62     	 str r2,[r3,#40]
1070:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* 
1071:../Libraries/XMCLib/src/xmc_ccu4.c ****    * In any case, update the initial value of the divider which is to be loaded once the prescaler 
1072:../Libraries/XMCLib/src/xmc_ccu4.c ****    * compare value.
1073:../Libraries/XMCLib/src/xmc_ccu4.c ****    */
1074:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->PSC = (uint32_t) div_val;
 2408              	 .loc 2 1074 0
 2409 002a FA78     	 ldrb r2,[r7,#3]
 2410 002c 7B68     	 ldr r3,[r7,#4]
 2411 002e 5A62     	 str r2,[r3,#36]
1075:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2412              	 .loc 2 1075 0
 2413 0030 1437     	 adds r7,r7,#20
 2414              	.LCFI193:
 2415              	 .cfi_def_cfa_offset 4
 2416 0032 BD46     	 mov sp,r7
 2417              	.LCFI194:
 2418              	 .cfi_def_cfa_register 13
 2419              	 
 2420 0034 5DF8047B 	 ldr r7,[sp],#4
 2421              	.LCFI195:
 2422              	 .cfi_restore 7
 2423              	 .cfi_def_cfa_offset 0
 2424 0038 7047     	 bx lr
 2425              	 .cfi_endproc
 2426              	.LFE231:
 2428 003a 00BF     	 .section .text.XMC_CCU4_SLICE_SetInterruptNode,"ax",%progbits
 2429              	 .align 2
 2430              	 .global XMC_CCU4_SLICE_SetInterruptNode
 2431              	 .thumb
 2432              	 .thumb_func
 2434              	XMC_CCU4_SLICE_SetInterruptNode:
 2435              	.LFB232:
1076:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1077:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Binds a capcom event to an NVIC node  */
1078:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
1079:../Libraries/XMCLib/src/xmc_ccu4.c ****                                      const XMC_CCU4_SLICE_IRQ_ID_t event,
1080:../Libraries/XMCLib/src/xmc_ccu4.c ****                                      const XMC_CCU4_SLICE_SR_ID_t sr)
1081:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 2436              	 .loc 2 1081 0
 2437              	 .cfi_startproc
 2438              	 
 2439              	 
 2440              	 
 2441 0000 80B4     	 push {r7}
 2442              	.LCFI196:
 2443              	 .cfi_def_cfa_offset 4
 2444              	 .cfi_offset 7,-4
 2445 0002 87B0     	 sub sp,sp,#28
 2446              	.LCFI197:
 2447              	 .cfi_def_cfa_offset 32
 2448 0004 00AF     	 add r7,sp,#0
 2449              	.LCFI198:
 2450              	 .cfi_def_cfa_register 7
 2451 0006 7860     	 str r0,[r7,#4]
 2452 0008 0B46     	 mov r3,r1
 2453 000a FB70     	 strb r3,[r7,#3]
 2454 000c 1346     	 mov r3,r2
 2455 000e BB70     	 strb r3,[r7,#2]
1082:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t srs;
1083:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t pos;
1084:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t mask;
1085:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1086:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice))
1087:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
1088:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event)
1089:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1090:../Libraries/XMCLib/src/xmc_ccu4.c ****   srs = slice->SRS;
 2456              	 .loc 2 1090 0
 2457 0010 7B68     	 ldr r3,[r7,#4]
 2458 0012 D3F8A830 	 ldr r3,[r3,#168]
 2459 0016 FB60     	 str r3,[r7,#12]
1091:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1092:../Libraries/XMCLib/src/xmc_ccu4.c ****   switch(event)
 2460              	 .loc 2 1092 0
 2461 0018 FB78     	 ldrb r3,[r7,#3]
 2462 001a 092B     	 cmp r3,#9
 2463 001c 2CD8     	 bhi .L88
 2464 001e 01A2     	 adr r2,.L90
 2465 0020 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 2466              	 .p2align 2
 2467              	.L90:
 2468 0024 4D000000 	 .word .L89+1
 2469 0028 4D000000 	 .word .L89+1
 2470 002c 57000000 	 .word .L91+1
 2471 0030 57000000 	 .word .L91+1
 2472 0034 79000000 	 .word .L88+1
 2473 0038 79000000 	 .word .L88+1
 2474 003c 79000000 	 .word .L88+1
 2475 0040 79000000 	 .word .L88+1
 2476 0044 61000000 	 .word .L92+1
 2477 0048 6D000000 	 .word .L93+1
 2478              	 .p2align 1
 2479              	.L89:
1093:../Libraries/XMCLib/src/xmc_ccu4.c ****   {
1094:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
1095:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
1096:../Libraries/XMCLib/src/xmc_ccu4.c ****       mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 2480              	 .loc 2 1096 0
 2481 004c 0323     	 movs r3,#3
 2482 004e 3B61     	 str r3,[r7,#16]
1097:../Libraries/XMCLib/src/xmc_ccu4.c ****       pos  = CCU4_CC4_SRS_POSR_Pos;
 2483              	 .loc 2 1097 0
 2484 0050 0023     	 movs r3,#0
 2485 0052 7B61     	 str r3,[r7,#20]
1098:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 2486              	 .loc 2 1098 0
 2487 0054 16E0     	 b .L94
 2488              	.L91:
1099:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1100:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
1101:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
1102:../Libraries/XMCLib/src/xmc_ccu4.c ****       mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 2489              	 .loc 2 1102 0
 2490 0056 0C23     	 movs r3,#12
 2491 0058 3B61     	 str r3,[r7,#16]
1103:../Libraries/XMCLib/src/xmc_ccu4.c ****       pos  = CCU4_CC4_SRS_CMSR_Pos;
 2492              	 .loc 2 1103 0
 2493 005a 0223     	 movs r3,#2
 2494 005c 7B61     	 str r3,[r7,#20]
1104:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 2495              	 .loc 2 1104 0
 2496 005e 11E0     	 b .L94
 2497              	.L92:
1105:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1106:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
1107:../Libraries/XMCLib/src/xmc_ccu4.c ****       mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 2498              	 .loc 2 1107 0
 2499 0060 4FF44073 	 mov r3,#768
 2500 0064 3B61     	 str r3,[r7,#16]
1108:../Libraries/XMCLib/src/xmc_ccu4.c ****       pos  = CCU4_CC4_SRS_E0SR_Pos;
 2501              	 .loc 2 1108 0
 2502 0066 0823     	 movs r3,#8
 2503 0068 7B61     	 str r3,[r7,#20]
1109:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 2504              	 .loc 2 1109 0
 2505 006a 0BE0     	 b .L94
 2506              	.L93:
1110:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1111:../Libraries/XMCLib/src/xmc_ccu4.c ****     case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
1112:../Libraries/XMCLib/src/xmc_ccu4.c ****       mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 2507              	 .loc 2 1112 0
 2508 006c 4FF44063 	 mov r3,#3072
 2509 0070 3B61     	 str r3,[r7,#16]
1113:../Libraries/XMCLib/src/xmc_ccu4.c ****       pos  = CCU4_CC4_SRS_E1SR_Pos;
 2510              	 .loc 2 1113 0
 2511 0072 0A23     	 movs r3,#10
 2512 0074 7B61     	 str r3,[r7,#20]
1114:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 2513              	 .loc 2 1114 0
 2514 0076 05E0     	 b .L94
 2515              	.L88:
1115:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1116:../Libraries/XMCLib/src/xmc_ccu4.c ****     default:
1117:../Libraries/XMCLib/src/xmc_ccu4.c ****       mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 2516              	 .loc 2 1117 0
 2517 0078 4FF44053 	 mov r3,#12288
 2518 007c 3B61     	 str r3,[r7,#16]
1118:../Libraries/XMCLib/src/xmc_ccu4.c ****       pos  = CCU4_CC4_SRS_E2SR_Pos;
 2519              	 .loc 2 1118 0
 2520 007e 0C23     	 movs r3,#12
 2521 0080 7B61     	 str r3,[r7,#20]
1119:../Libraries/XMCLib/src/xmc_ccu4.c ****       break;
 2522              	 .loc 2 1119 0
 2523 0082 00BF     	 nop
 2524              	.L94:
1120:../Libraries/XMCLib/src/xmc_ccu4.c ****   }
1121:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1122:../Libraries/XMCLib/src/xmc_ccu4.c ****   srs &= ~mask; 
 2525              	 .loc 2 1122 0
 2526 0084 3B69     	 ldr r3,[r7,#16]
 2527 0086 DB43     	 mvns r3,r3
 2528 0088 FA68     	 ldr r2,[r7,#12]
 2529 008a 1340     	 ands r3,r3,r2
 2530 008c FB60     	 str r3,[r7,#12]
1123:../Libraries/XMCLib/src/xmc_ccu4.c ****   srs |= (uint32_t)sr << pos;
 2531              	 .loc 2 1123 0
 2532 008e BA78     	 ldrb r2,[r7,#2]
 2533 0090 7B69     	 ldr r3,[r7,#20]
 2534 0092 02FA03F3 	 lsl r3,r2,r3
 2535 0096 FA68     	 ldr r2,[r7,#12]
 2536 0098 1343     	 orrs r3,r3,r2
 2537 009a FB60     	 str r3,[r7,#12]
1124:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->SRS = srs;
 2538              	 .loc 2 1124 0
 2539 009c 7B68     	 ldr r3,[r7,#4]
 2540 009e FA68     	 ldr r2,[r7,#12]
 2541 00a0 C3F8A820 	 str r2,[r3,#168]
1125:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2542              	 .loc 2 1125 0
 2543 00a4 1C37     	 adds r7,r7,#28
 2544              	.LCFI199:
 2545              	 .cfi_def_cfa_offset 4
 2546 00a6 BD46     	 mov sp,r7
 2547              	.LCFI200:
 2548              	 .cfi_def_cfa_register 13
 2549              	 
 2550 00a8 5DF8047B 	 ldr r7,[sp],#4
 2551              	.LCFI201:
 2552              	 .cfi_restore 7
 2553              	 .cfi_def_cfa_offset 0
 2554 00ac 7047     	 bx lr
 2555              	 .cfi_endproc
 2556              	.LFE232:
 2558 00ae 00BF     	 .section .text.XMC_CCU4_SLICE_SetPassiveLevel,"ax",%progbits
 2559              	 .align 2
 2560              	 .global XMC_CCU4_SLICE_SetPassiveLevel
 2561              	 .thumb
 2562              	 .thumb_func
 2564              	XMC_CCU4_SLICE_SetPassiveLevel:
 2565              	.LFB233:
1126:../Libraries/XMCLib/src/xmc_ccu4.c **** 
1127:../Libraries/XMCLib/src/xmc_ccu4.c **** /* Asserts passive level for the slice output */
1128:../Libraries/XMCLib/src/xmc_ccu4.c **** void XMC_CCU4_SLICE_SetPassiveLevel(XMC_CCU4_SLICE_t *const slice,
1129:../Libraries/XMCLib/src/xmc_ccu4.c ****                                     const XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t level)
1130:../Libraries/XMCLib/src/xmc_ccu4.c **** {
 2566              	 .loc 2 1130 0
 2567              	 .cfi_startproc
 2568              	 
 2569              	 
 2570              	 
 2571 0000 80B4     	 push {r7}
 2572              	.LCFI202:
 2573              	 .cfi_def_cfa_offset 4
 2574              	 .cfi_offset 7,-4
 2575 0002 85B0     	 sub sp,sp,#20
 2576              	.LCFI203:
 2577              	 .cfi_def_cfa_offset 24
 2578 0004 00AF     	 add r7,sp,#0
 2579              	.LCFI204:
 2580              	 .cfi_def_cfa_register 7
 2581 0006 7860     	 str r0,[r7,#4]
 2582 0008 0B46     	 mov r3,r1
 2583 000a FB70     	 strb r3,[r7,#3]
1131:../Libraries/XMCLib/src/xmc_ccu4.c ****   uint32_t psl; 
1132:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1133:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1134:../Libraries/XMCLib/src/xmc_ccu4.c ****   XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Passive level", ((level == XMC_CCU4_SLICE_OUTP
1135:../Libraries/XMCLib/src/xmc_ccu4.c **** 		                                                                  (level == XMC_CCU4_SLICE_OUTPUT
1136:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1137:../Libraries/XMCLib/src/xmc_ccu4.c ****   psl = slice->PSL;
 2584              	 .loc 2 1137 0
 2585 000c 7B68     	 ldr r3,[r7,#4]
 2586 000e 9B69     	 ldr r3,[r3,#24]
 2587 0010 FB60     	 str r3,[r7,#12]
1138:../Libraries/XMCLib/src/xmc_ccu4.c ****   psl &= ~((uint32_t) CCU4_CC4_PSL_PSL_Msk);
 2588              	 .loc 2 1138 0
 2589 0012 FB68     	 ldr r3,[r7,#12]
 2590 0014 23F00103 	 bic r3,r3,#1
 2591 0018 FB60     	 str r3,[r7,#12]
1139:../Libraries/XMCLib/src/xmc_ccu4.c ****   psl |= (uint32_t) level;
 2592              	 .loc 2 1139 0
 2593 001a FB78     	 ldrb r3,[r7,#3]
 2594 001c FA68     	 ldr r2,[r7,#12]
 2595 001e 1343     	 orrs r3,r3,r2
 2596 0020 FB60     	 str r3,[r7,#12]
1140:../Libraries/XMCLib/src/xmc_ccu4.c ****   
1141:../Libraries/XMCLib/src/xmc_ccu4.c ****   /* Program CC4 slice output passive level */
1142:../Libraries/XMCLib/src/xmc_ccu4.c ****   slice->PSL = psl;
 2597              	 .loc 2 1142 0
 2598 0022 7B68     	 ldr r3,[r7,#4]
 2599 0024 FA68     	 ldr r2,[r7,#12]
 2600 0026 9A61     	 str r2,[r3,#24]
1143:../Libraries/XMCLib/src/xmc_ccu4.c **** }
 2601              	 .loc 2 1143 0
 2602 0028 1437     	 adds r7,r7,#20
 2603              	.LCFI205:
 2604              	 .cfi_def_cfa_offset 4
 2605 002a BD46     	 mov sp,r7
 2606              	.LCFI206:
 2607              	 .cfi_def_cfa_register 13
 2608              	 
 2609 002c 5DF8047B 	 ldr r7,[sp],#4
 2610              	.LCFI207:
 2611              	 .cfi_restore 7
 2612              	 .cfi_def_cfa_offset 0
 2613 0030 7047     	 bx lr
 2614              	 .cfi_endproc
 2615              	.LFE233:
 2617 0032 00BF     	 .text
 2618              	.Letext0:
 2619              	 .file 3 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2620              	 .file 4 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2621              	 .file 5 "E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Infineon/XMC4300_series/Include/XMC4300.h"
 2622              	 .file 6 "E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc/xmc4_scu.h"
 2623              	 .file 7 "E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include/core_cm4.h"
 2624              	 .file 8 "E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Infineon/XMC4300_series/Include/system_XMC4300.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_ccu4.c
    {standard input}:20     .text.XMC_CCU4_StartPrescaler:00000000 $t
    {standard input}:24     .text.XMC_CCU4_StartPrescaler:00000000 XMC_CCU4_StartPrescaler
    {standard input}:66     .text.XMC_CCU4_SLICE_SetDitherCompareValue:00000000 $t
    {standard input}:70     .text.XMC_CCU4_SLICE_SetDitherCompareValue:00000000 XMC_CCU4_SLICE_SetDitherCompareValue
    {standard input}:111    .text.XMC_CCU4_lAssertReset:00000000 $t
    {standard input}:115    .text.XMC_CCU4_lAssertReset:00000000 XMC_CCU4_lAssertReset
    {standard input}:169    .text.XMC_CCU4_lAssertReset:00000030 $d
    {standard input}:175    .text.XMC_CCU4_lDeassertReset:00000000 $t
    {standard input}:179    .text.XMC_CCU4_lDeassertReset:00000000 XMC_CCU4_lDeassertReset
    {standard input}:232    .text.XMC_CCU4_lDeassertReset:00000030 $d
    {standard input}:238    .text.XMC_CCU4_lGateClock:00000000 $t
    {standard input}:242    .text.XMC_CCU4_lGateClock:00000000 XMC_CCU4_lGateClock
    {standard input}:295    .text.XMC_CCU4_lGateClock:00000030 $d
    {standard input}:301    .text.XMC_CCU4_lUngateClock:00000000 $t
    {standard input}:305    .text.XMC_CCU4_lUngateClock:00000000 XMC_CCU4_lUngateClock
    {standard input}:358    .text.XMC_CCU4_lUngateClock:00000030 $d
    {standard input}:364    .text.XMC_CCU4_EnableModule:00000000 $t
    {standard input}:369    .text.XMC_CCU4_EnableModule:00000000 XMC_CCU4_EnableModule
    {standard input}:409    .text.XMC_CCU4_DisableModule:00000000 $t
    {standard input}:414    .text.XMC_CCU4_DisableModule:00000000 XMC_CCU4_DisableModule
    {standard input}:451    .text.XMC_CCU4_Init:00000000 $t
    {standard input}:456    .text.XMC_CCU4_Init:00000000 XMC_CCU4_Init
    {standard input}:513    .text.XMC_CCU4_SetModuleClock:00000000 $t
    {standard input}:518    .text.XMC_CCU4_SetModuleClock:00000000 XMC_CCU4_SetModuleClock
    {standard input}:573    .text.XMC_CCU4_SetMultiChannelShadowTransferMode:00000000 $t
    {standard input}:578    .text.XMC_CCU4_SetMultiChannelShadowTransferMode:00000000 XMC_CCU4_SetMultiChannelShadowTransferMode
    {standard input}:635    .text.XMC_CCU4_SLICE_CompareInit:00000000 $t
    {standard input}:640    .text.XMC_CCU4_SLICE_CompareInit:00000000 XMC_CCU4_SLICE_CompareInit
    {standard input}:721    .text.XMC_CCU4_SLICE_CaptureInit:00000000 $t
    {standard input}:726    .text.XMC_CCU4_SLICE_CaptureInit:00000000 XMC_CCU4_SLICE_CaptureInit
    {standard input}:791    .text.XMC_CCU4_SLICE_StartConfig:00000000 $t
    {standard input}:796    .text.XMC_CCU4_SLICE_StartConfig:00000000 XMC_CCU4_SLICE_StartConfig
    {standard input}:875    .text.XMC_CCU4_SLICE_StopConfig:00000000 $t
    {standard input}:880    .text.XMC_CCU4_SLICE_StopConfig:00000000 XMC_CCU4_SLICE_StopConfig
    {standard input}:955    .text.XMC_CCU4_SLICE_LoadConfig:00000000 $t
    {standard input}:960    .text.XMC_CCU4_SLICE_LoadConfig:00000000 XMC_CCU4_SLICE_LoadConfig
    {standard input}:1015   .text.XMC_CCU4_SLICE_ModulationConfig:00000000 $t
    {standard input}:1020   .text.XMC_CCU4_SLICE_ModulationConfig:00000000 XMC_CCU4_SLICE_ModulationConfig
    {standard input}:1120   .text.XMC_CCU4_SLICE_CountConfig:00000000 $t
    {standard input}:1125   .text.XMC_CCU4_SLICE_CountConfig:00000000 XMC_CCU4_SLICE_CountConfig
    {standard input}:1180   .text.XMC_CCU4_SLICE_GateConfig:00000000 $t
    {standard input}:1185   .text.XMC_CCU4_SLICE_GateConfig:00000000 XMC_CCU4_SLICE_GateConfig
    {standard input}:1240   .text.XMC_CCU4_SLICE_Capture0Config:00000000 $t
    {standard input}:1245   .text.XMC_CCU4_SLICE_Capture0Config:00000000 XMC_CCU4_SLICE_Capture0Config
    {standard input}:1300   .text.XMC_CCU4_SLICE_Capture1Config:00000000 $t
    {standard input}:1305   .text.XMC_CCU4_SLICE_Capture1Config:00000000 XMC_CCU4_SLICE_Capture1Config
    {standard input}:1360   .text.XMC_CCU4_SLICE_DirectionConfig:00000000 $t
    {standard input}:1365   .text.XMC_CCU4_SLICE_DirectionConfig:00000000 XMC_CCU4_SLICE_DirectionConfig
    {standard input}:1420   .text.XMC_CCU4_SLICE_StatusBitOverrideConfig:00000000 $t
    {standard input}:1425   .text.XMC_CCU4_SLICE_StatusBitOverrideConfig:00000000 XMC_CCU4_SLICE_StatusBitOverrideConfig
    {standard input}:1476   .text.XMC_CCU4_SLICE_TrapConfig:00000000 $t
    {standard input}:1481   .text.XMC_CCU4_SLICE_TrapConfig:00000000 XMC_CCU4_SLICE_TrapConfig
    {standard input}:1574   .text.XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:00000000 $t
    {standard input}:1579   .text.XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent:00000000 XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent
    {standard input}:1712   .text.XMC_CCU4_SLICE_ConfigureEvent:00000000 $t
    {standard input}:1717   .text.XMC_CCU4_SLICE_ConfigureEvent:00000000 XMC_CCU4_SLICE_ConfigureEvent
    {standard input}:1855   .text.XMC_CCU4_SLICE_SetInput:00000000 $t
    {standard input}:1860   .text.XMC_CCU4_SLICE_SetInput:00000000 XMC_CCU4_SLICE_SetInput
    {standard input}:1930   .text.XMC_CCU4_SLICE_SetTimerRepeatMode:00000000 $t
    {standard input}:1935   .text.XMC_CCU4_SLICE_SetTimerRepeatMode:00000000 XMC_CCU4_SLICE_SetTimerRepeatMode
    {standard input}:1991   .text.XMC_CCU4_SLICE_SetTimerCountingMode:00000000 $t
    {standard input}:1996   .text.XMC_CCU4_SLICE_SetTimerCountingMode:00000000 XMC_CCU4_SLICE_SetTimerCountingMode
    {standard input}:2052   .text.XMC_CCU4_SLICE_GetCaptureRegisterValue:00000000 $t
    {standard input}:2057   .text.XMC_CCU4_SLICE_GetCaptureRegisterValue:00000000 XMC_CCU4_SLICE_GetCaptureRegisterValue
    {standard input}:2102   .text.XMC_CCU4_SLICE_GetLastCapturedTimerValue:00000000 $t
    {standard input}:2107   .text.XMC_CCU4_SLICE_GetLastCapturedTimerValue:00000000 XMC_CCU4_SLICE_GetLastCapturedTimerValue
    {standard input}:2225   .text.XMC_CCU4_SLICE_GetCapturedValueFromFifo:00000000 $t
    {standard input}:2230   .text.XMC_CCU4_SLICE_GetCapturedValueFromFifo:00000000 XMC_CCU4_SLICE_GetCapturedValueFromFifo
    {standard input}:2285   .text.XMC_CCU4_SLICE_EnableDithering:00000000 $t
    {standard input}:2290   .text.XMC_CCU4_SLICE_EnableDithering:00000000 XMC_CCU4_SLICE_EnableDithering
    {standard input}:2365   .text.XMC_CCU4_SLICE_SetPrescaler:00000000 $t
    {standard input}:2370   .text.XMC_CCU4_SLICE_SetPrescaler:00000000 XMC_CCU4_SLICE_SetPrescaler
    {standard input}:2429   .text.XMC_CCU4_SLICE_SetInterruptNode:00000000 $t
    {standard input}:2434   .text.XMC_CCU4_SLICE_SetInterruptNode:00000000 XMC_CCU4_SLICE_SetInterruptNode
    {standard input}:2468   .text.XMC_CCU4_SLICE_SetInterruptNode:00000024 $d
    {standard input}:2478   .text.XMC_CCU4_SLICE_SetInterruptNode:0000004c $t
    {standard input}:2559   .text.XMC_CCU4_SLICE_SetPassiveLevel:00000000 $t
    {standard input}:2564   .text.XMC_CCU4_SLICE_SetPassiveLevel:00000000 XMC_CCU4_SLICE_SetPassiveLevel
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_CLOCK_GatePeripheralClock
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_CLOCK_EnableClock
