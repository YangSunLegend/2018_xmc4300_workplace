   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc4_scu.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_SCU_CLOCK_GetUsbClockSource,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_SCU_CLOCK_GetUsbClockSource:
  25              	.LFB129:
  26              	 .file 1 "E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc/xmc4_scu.h"
   1:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
   2:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @file xmc4_scu.h
   3:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @date 2016-04-15
   4:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
   5:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @cond
   6:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   *************************************************************************************************
   7:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
   9:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * All rights reserved.                        
  11:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                             
  12:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * following conditions are met:   
  14:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                                                              
  15:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * disclaimer.                        
  17:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
  18:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
  21:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * products derived from this software without specific prior written permission.                  
  23:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                                                              
  24:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                                                              
  32:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
  35:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  36:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Change History
  37:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * --------------
  38:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  39:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2015-06-20:
  40:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Initial version
  41:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Documentation improved
  42:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  43:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2015-11-30:
  44:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Documentation improved
  45:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *      
  46:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-03-09:
  47:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_POWER_EnableMonitor/XMC_SCU_POWER_DisableMonitor
  48:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_POWER_GetEVRStatus, XMC_SCU_POWER_GetEVR13Voltage, XMC_SCU_POWER_GetEVR33Vol
  49:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_GetHibernateControlStatus,
  50:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_HIB_GetEventStatus, XMC_SCU_HIB_ClearEventStatus, XMC_SCU_HIB_TriggerEvent, 
  51:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_HIB_EnableEvent, XMC_SCU_HIB_DisableEvent
  52:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_SetWakeupTriggerInput, XMC_SCU_HIB_SetPinMode, XMC_SCU_HIB_SetOutputPinL
  53:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_HIB_SetInput0, XMC_SCU_HIB_EnterHibernateState
  54:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  55:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-04-15:
  56:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Fixed naming of XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG peripheral clock.
  57:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *       Added enable and disable for peripheral clocks       
  58:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
  59:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @endcond 
  60:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  61:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
  62:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
  63:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #ifndef XMC4_SCU_H
  64:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC4_SCU_H
  65:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
  66:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
  67:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * HEADER FILES
  68:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
  69:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
  70:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #include "xmc_common.h"
  71:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
  72:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if UC_FAMILY == XMC4
  73:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
  74:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
  75:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @addtogroup XMClib XMC Peripheral Library
  76:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @{
  77:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
  78:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  
  79:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
  80:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @addtogroup SCU
  81:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @{
  82:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
  83:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
  84:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
  85:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * MACROS
  86:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
  87:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_8MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 8MH
  88:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_8MHZ (89U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 8M
  89:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_8MHZ (2U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 8
  90:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
  91:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_12MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 12
  92:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_12MHZ (79U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 1
  93:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_12MHZ (3U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 
  94:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
  95:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_16MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 16
  96:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_16MHZ (59U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 1
  97:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_16MHZ (3U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 
  98:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
  99:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_WDT_WARN           SCU_INTERRUPT_SRSTAT_PRWARN_Msk /**< Watchdog pr
 100:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC       SCU_INTERRUPT_SRSTAT_PI_Msk     /**< RTC periodi
 101:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTC_ALARM          SCU_INTERRUPT_SRSTAT_AI_Msk     /**< RTC alarm e
 102:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_DLR_OVERRUN        SCU_INTERRUPT_SRSTAT_DLROVR_Msk /**< DLR overrun
 103:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACCR_Msk)
 104:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACCR_UPDATED     SCU_INTERRUPT_SRSTAT_LPACCR_Msk /**< LPAC Contro
 105:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 106:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACTH0_Msk)
 107:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACTH0_UPDATED    SCU_INTERRUPT_SRSTAT_LPACTH0_Msk /**< LPAC Thres
 108:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 109:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACTH1_Msk)
 110:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACTH1_UPDATED    SCU_INTERRUPT_SRSTAT_LPACTH1_Msk  /**< LPAC Thre
 111:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 112:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACST_Msk)
 113:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACST_UPDATED     SCU_INTERRUPT_SRSTAT_LPACST_Msk  /**< LPAC Statu
 114:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 115:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACCLR_Msk)
 116:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACCLR_UPDATED    SCU_INTERRUPT_SRSTAT_LPACCLR_Msk /**< LPAC event
 117:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 118:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACSET_Msk)
 119:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACSET_UPDATED    SCU_INTERRUPT_SRSTAT_LPACSET_Msk /**< LPAC event
 120:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 121:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTST_Msk)
 122:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTST_UPDATED     SCU_INTERRUPT_SRSTAT_HINTST_Msk /**< HIB HINTST 
 123:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 124:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTCLR_Msk)
 125:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTCLR_UPDATED    SCU_INTERRUPT_SRSTAT_HINTCLR_Msk /**< HIB HINTCL
 126:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 127:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTSET_Msk)
 128:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTSET_UPDATED    SCU_INTERRUPT_SRSTAT_HINTSET_Msk /**< HIB HINTSE
 129:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 130:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDSTAT_UPDATED     SCU_INTERRUPT_SRSTAT_HDSTAT_Msk /**< HIB HDSTAT 
 131:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED      SCU_INTERRUPT_SRSTAT_HDCLR_Msk /**< HIB HDCLR re
 132:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDSET_UPDATED      SCU_INTERRUPT_SRSTAT_HDSET_Msk /**< HIB HDSET re
 133:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED       SCU_INTERRUPT_SRSTAT_HDCR_Msk /**< HIB HDCR regi
 134:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_OSCSICTRL_UPDATED  SCU_INTERRUPT_SRSTAT_OSCSICTRL_Msk /**< HIB OSCS
 135:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_OSCULSTAT_UPDATED  SCU_INTERRUPT_SRSTAT_OSCULSTAT_Msk /**< HIB OSCU
 136:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED  SCU_INTERRUPT_SRSTAT_OSCULCTRL_Msk /**< HIB OSCU
 137:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED     SCU_INTERRUPT_SRSTAT_RTC_CTR_Msk /**< HIB RTCCTR
 138:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED   SCU_INTERRUPT_SRSTAT_RTC_ATIM0_Msk /**< HIB RTCA
 139:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED   SCU_INTERRUPT_SRSTAT_RTC_ATIM1_Msk /**< HIB RTCA
 140:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED    SCU_INTERRUPT_SRSTAT_RTC_TIM0_Msk /**< HIB TIM0 
 141:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED    SCU_INTERRUPT_SRSTAT_RTC_TIM1_Msk /**< HIB TIM1 
 142:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RMX_UPDATED        SCU_INTERRUPT_SRSTAT_RMX_Msk /**< HIB RMX regist
 143:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 144:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 145:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * ENUMS
 146:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 147:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 148:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines Capture/Compare unit timer slice trigger, that enables synchronous start function avail
 149:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  CCUCON register. Use type \a XMC_SCU_CCU_TRIGGER_t for accessing these enum parameters.
 150:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 151:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CCU_TRIGGER
 152:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 153:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU40)
 154:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU40 = SCU_GENERAL_CCUCON_GSC40_Msk, /**< Trigger mask used for Global Start
 155:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU40 peripheral. */
 156:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 157:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU41)
 158:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU41 = SCU_GENERAL_CCUCON_GSC41_Msk, /**< Trigger mask used for Global Start
 159:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU41 peripheral. */
 160:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 161:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU42)
 162:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU42 = SCU_GENERAL_CCUCON_GSC42_Msk, /**< Trigger mask used for Global Start
 163:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU42 peripheral. */
 164:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 165:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU43)
 166:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU43 = SCU_GENERAL_CCUCON_GSC43_Msk, /**< Trigger mask used for Global Start
 167:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU43 peripheral. */
 168:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 169:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU80)
 170:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU80 = SCU_GENERAL_CCUCON_GSC80_Msk, /**< Trigger mask used for Global Start
 171:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU80 peripheral. */
 172:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 173:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU81)
 174:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU81 = SCU_GENERAL_CCUCON_GSC81_Msk /**< Trigger mask used for Global Start 
 175:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU41 peripheral. */
 176:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 177:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CCU_TRIGGER_t;
 178:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 179:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 180:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations representing the status of trap cause. The cause of the trap gets automati
 181:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  the \a TRAPSTAT register and can be checked by user software to determine the state of the syst
 182:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  purpose. 
 183:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_TRAP_t for accessing these enum parameters.
 184:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 185:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_TRAP 
 186:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 187:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_OSC_WDG      = SCU_TRAP_TRAPSTAT_SOSCWDGT_Msk, /**< OSC_HP Oscillator Watchdog trap.
 188:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_VCO_LOCK     = SCU_TRAP_TRAPSTAT_SVCOLCKT_Msk, /**< PLL loss of lock trap. */
 189:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_USB_VCO_LOCK = SCU_TRAP_TRAPSTAT_UVCOLCKT_Msk, /**< USB PLL loss of lock trap. */ 
 190:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_PARITY_ERROR = SCU_TRAP_TRAPSTAT_PET_Msk,      /**< Memory Parity error trap. */  
 191:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_BROWNOUT     = SCU_TRAP_TRAPSTAT_BRWNT_Msk,    /**< Brownout trap. */ 
 192:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_ULP_WDG      = SCU_TRAP_TRAPSTAT_ULPWDGT_Msk,  /**< Unstable 32KHz clock trap. */ 
 193:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_PER_BRIDGE0  = SCU_TRAP_TRAPSTAT_BWERR0T_Msk,  /**< Bad memory access of peripherals
 194:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_PER_BRIDGE1  = SCU_TRAP_TRAPSTAT_BWERR1T_Msk,  /**< Bad memory access of peripherals
 195:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_TRAP_TRAPSTAT_TEMPHIT_Msk)
 196:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_DIETEMP_HIGH = SCU_TRAP_TRAPSTAT_TEMPHIT_Msk,  /**< Die temperature higher than expe
 197:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 198:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_TRAP_TRAPSTAT_TEMPLOT_Msk)
 199:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_DIETEMP_LOW  = SCU_TRAP_TRAPSTAT_TEMPLOT_Msk,  /**< Die temperature lower than expec
 200:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 201:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)
 202:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_ECAT_RESET = SCU_TRAP_TRAPSTAT_ECAT0RST_Msk, /**< EtherCat Reset */ 
 203:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 204:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_TRAP_t;
 205:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 206:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 207:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations for different parity event generating modules that in turn generate a trap
 208:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Parity can be enabled with \a PETE register in order to get the trap flag reflected in \a TRAPR
 209:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  configure parity error trap generation mechanism bits of \a PETE register.
 210:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a PETE register.
 211:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PARITY_t for accessing these enum parameters.
 212:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 213:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_PARITY
 214:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 215:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_PSRAM_MEM  = SCU_PARITY_PEEN_PEENPS_Msk,   /**< Program SRAM parity error trap. */
 216:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_DSRAM1_MEM = SCU_PARITY_PEEN_PEENDS1_Msk,  /**< Data SRAM-1 parity error trap. */ 
 217:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(XMC_SCU_PARITY_DSRAM2_MEM)
 218:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_DSRAM2_MEM = SCU_PARITY_PEEN_PEENDS2_Msk,  /**< Data SRAM-2 parity error trap. */ 
 219:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 220:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC0_MEM  = SCU_PARITY_PEEN_PEENU0_Msk,   /**< USIC0 memory parity error trap. */
 221:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(XMC_SCU_PARITY_USIC1_MEM)
 222:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC1_MEM  = SCU_PARITY_PEEN_PEENU1_Msk,   /**< USIC1 memory parity error trap. */
 223:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 224:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(XMC_SCU_PARITY_USIC2_MEM)
 225:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC2_MEM  = SCU_PARITY_PEEN_PEENU2_Msk,   /**< USIC2 memory parity error trap. */
 226:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 227:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_MCAN_MEM   = SCU_PARITY_PEEN_PEENMC_Msk,   /**< CAN memory parity error trap. */
 228:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_PMU_MEM    = SCU_PARITY_PEEN_PEENPPRF_Msk, /**< PMU Prefetch memory parity error t
 229:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USB_MEM    = SCU_PARITY_PEEN_PEENUSB_Msk,  /**< USB memory parity error trap. */ 
 230:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENETH0TX_Msk)
 231:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_ETH_TXMEM  = SCU_PARITY_PEEN_PEENETH0TX_Msk, /**< Ethernet transmit memory parity 
 232:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 233:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENETH0RX_Msk)
 234:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_ETH_RXMEM  = SCU_PARITY_PEEN_PEENETH0RX_Msk, /**< Ethernet receive memory parity e
 235:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 236:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENSD0_Msk)
 237:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_SDMMC_MEM0 = SCU_PARITY_PEEN_PEENSD0_Msk, /**< SDMMC Memory-0 parity error trap. *
 238:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 239:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENSD1_Msk)
 240:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_SDMMC_MEM1 = SCU_PARITY_PEEN_PEENSD1_Msk, /**< SDMMC Memory-1 parity error trap. *
 241:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 242:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_PARITY_t;
 243:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 244:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 245:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines the different causes for last reset. The cause of the last reset gets automatically sto
 246:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  the \a SCU_RSTSTAT register and can be checked by user software to determine the state of the s
 247:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  purpose. All the enum items are tabulated as per bits present in \a SCU_RSTSTAT register.
 248:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_RESET_REASON_t for accessing these enum parameters.
 249:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 250:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_RESET_REASON
 251:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 252:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PORST        = (1UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Pow
 253:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_SWD          = (2UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Ser
 254:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PV           = (4UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Pow
 255:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_SW           = (8UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Sof
 256:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_LOCKUP       = (16UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to re
 257:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_WATCHDOG     = (32UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Wa
 258:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PARITY_ERROR = (128UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to r
 259:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_RESET_REASON_t;
 260:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 261:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 262:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations for events which can lead to interrupt. These enumeration values represent
 263:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * status of one of the bits in \a SRSTAT register. 
 264:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_INTERRUPT_EVENT_t for accessing these enum parameters.
 265:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 266:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef uint32_t XMC_SCU_INTERRUPT_EVENT_t;
 267:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 268:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  
 269:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 270:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumeration for the events that can generate non maskable interrupt(NMI).
 271:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The NMI generation can be enabled with \a NMIREQEN register. The event will be reflected in \a 
 272:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  mirrored in the TRAPSTAT register. These enums can be used to configure NMI request generation 
 273:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  NMIREQEN register.  Once configured, these events can generate non maskable interrupt.
 274:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a NMIREQEN register.
 275:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_NMIREQ_t for accessing these enum parameters.
 276:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 277:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_NMIREQ
 278:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 279:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_WDT_WARN = SCU_INTERRUPT_NMIREQEN_PRWARN_Msk, /**< Watchdog timer Pre-Warning even
 280:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_RTC_PI   = SCU_INTERRUPT_NMIREQEN_PI_Msk,     /**< RTC Periodic event */ 
 281:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_RTC_AI   = SCU_INTERRUPT_NMIREQEN_AI_Msk,     /**< RTC Alarm event */ 
 282:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_0   = SCU_INTERRUPT_NMIREQEN_ERU00_Msk,  /**< Channel 0 event of ERU0 */  
 283:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_1   = SCU_INTERRUPT_NMIREQEN_ERU01_Msk,  /**< Channel 1 event of ERU0 */ 
 284:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_2   = SCU_INTERRUPT_NMIREQEN_ERU02_Msk,  /**< Channel 2 event of ERU0 */ 
 285:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_3   = SCU_INTERRUPT_NMIREQEN_ERU03_Msk   /**< Channel 3 event of ERU0 */ 
 286:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_NMIREQ_t;
 287:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   
 288:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 289:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 290:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumeration representing different peripheral reset bits in the \a PRSTAT registers.
 291:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a PRSTAT0,  \a PRSTAT1,  \a PRSTAT2,
 292:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  \a PRSTAT3 registers. Use type \a XMC_SCU_PERIPHERAL_RESET_t for accessing these enum parameter
 293:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Note: Release of reset should be prevented when the peripheral clock is gated in cases where ke
 294:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  clock and bus interface clocks are shared, in order to avoid system hang-up.
 295:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 296:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_PERIPHERAL_RESET
 297:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 298:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_VADC   = SCU_RESET_PRSTAT0_VADCRS_Msk,   /**< VADC reset. */ 
 299:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DSD)
 300:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_DSD    = SCU_RESET_PRSTAT0_DSDRS_Msk,    /**< DSD reset. */
 301:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 302:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU40  = SCU_RESET_PRSTAT0_CCU40RS_Msk,  /**< CCU40 reset. */
 303:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU41)
 304:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU41  = SCU_RESET_PRSTAT0_CCU41RS_Msk,  /**< CCU41 reset. */
 305:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 306:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU42)
 307:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU42  = SCU_RESET_PRSTAT0_CCU42RS_Msk,  /**< CCU42 reset. */
 308:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 309:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU80)
 310:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU80  = SCU_RESET_PRSTAT0_CCU80RS_Msk,  /**< CCU80 reset. */
 311:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 312:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU81)
 313:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU81  = SCU_RESET_PRSTAT0_CCU81RS_Msk,  /**< CCU81 reset. */
 314:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 315:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF0)
 316:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_POSIF0 = SCU_RESET_PRSTAT0_POSIF0RS_Msk, /**< POSIF0 reset. */
 317:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 318:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF1)
 319:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_POSIF1 = SCU_RESET_PRSTAT0_POSIF1RS_Msk, /**< POSIF1 reset.*/
 320:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 321:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC0  = SCU_RESET_PRSTAT0_USIC0RS_Msk,  /**< USIC0 reset. */
 322:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ERU1   = SCU_RESET_PRSTAT0_ERU1RS_Msk,   /**< ERU1 reset. */
 323:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(HRPWM0)
 324:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_HRPWM0 = SCU_RESET_PRSTAT0_HRPWM0RS_Msk,  /**< HRPWM0 reset. */
 325:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 326:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU43)
 327:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU43  = (SCU_RESET_PRSTAT1_CCU43RS_Msk | 0x10000000UL),   /**< CCU43 re
 328:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 329:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(LEDTS0)
 330:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_LEDTS0 = (SCU_RESET_PRSTAT1_LEDTSCU0RS_Msk | 0x10000000UL), /**< LEDTS0 
 331:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 332:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CAN)
 333:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_MCAN   = (SCU_RESET_PRSTAT1_MCAN0RS_Msk | 0x10000000UL), /**< MCAN reset
 334:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 335:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DAC)  
 336:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_DAC    = (SCU_RESET_PRSTAT1_DACRS_Msk | 0x10000000UL),    /**< DAC reset
 337:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 338:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 339:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_SDMMC  = (SCU_RESET_PRSTAT1_MMCIRS_Msk | 0x10000000UL),     /**< SDMMC r
 340:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 341:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC1)
 342:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC1  = (SCU_RESET_PRSTAT1_USIC1RS_Msk | 0x10000000UL),    /**< USIC1 r
 343:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 344:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC2)
 345:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC2  = (SCU_RESET_PRSTAT1_USIC2RS_Msk | 0x10000000UL),    /**< USIC2 r
 346:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 347:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_PORTS  = (SCU_RESET_PRSTAT1_PPORTSRS_Msk | 0x10000000UL),   /**< PORTS r
 348:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_WDT    = (SCU_RESET_PRSTAT2_WDTRS_Msk | 0x20000000UL),      /**< WDT res
 349:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 350:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ETH0   = (SCU_RESET_PRSTAT2_ETH0RS_Msk | 0x20000000UL),     /**< ETH0 re
 351:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 352:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_GPDMA0 = (SCU_RESET_PRSTAT2_DMA0RS_Msk | 0x20000000UL),     /**< DMA0 re
 353:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(GPDMA1)
 354:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_GPDMA1 = (SCU_RESET_PRSTAT2_DMA1RS_Msk | 0x20000000UL),     /**< DMA1 re
 355:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 356:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(FCE)
 357:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_FCE    = (SCU_RESET_PRSTAT2_FCERS_Msk | 0x20000000UL),      /**< FCE res
 358:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 359:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)  
 360:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USB0   = (SCU_RESET_PRSTAT2_USBRS_Msk | 0x20000000UL),      /**< USB0 re
 361:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 362:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)  
 363:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ECAT0  = (SCU_RESET_PRSTAT2_ECAT0RS_Msk | 0x20000000UL),      /**< ECAT0
 364:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 365:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 366:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_EBU    = (SCU_RESET_PRSTAT3_EBURS_Msk | 0x30000000UL)       /**< EBU res
 367:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 368:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_PERIPHERAL_RESET_t;
 369:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 370:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 371:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations for disabling the clocks sources of peripherals. Disabling of the peripher
 372:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  clock is configured via the \a CLKCLR registers.
 373:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PERIPHERAL_CLOCK_t for accessing these enum parameters.
 374:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 375:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK
 376:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 377:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USB = SCU_CLK_CLKCLR_USBCDI_Msk, /**< USB module clock. */
 378:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 379:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_MMC = SCU_CLK_CLKCLR_MMCCDI_Msk, /**< MMC module clock. */
 380:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 381:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 382:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ETH = SCU_CLK_CLKCLR_ETH0CDI_Msk, /**< Ethernet module clock. */
 383:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 384:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 385:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EBU = SCU_CLK_CLKCLR_EBUCDI_Msk, /**< EBU module clock. */
 386:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 387:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_CCU = SCU_CLK_CLKCLR_CCUCDI_Msk, /**< CCU module clock. */
 388:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDT = SCU_CLK_CLKCLR_WDTCDI_Msk  /**< WDT module clock. */
 389:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_t;
 390:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 391:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if(UC_SERIES != XMC45)
 392:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 393:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines enumeration for peripherals that support clock gating. 
 394:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The enumerations can be used for gating or ungating the peripheral clocks.
 395:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * All the enum items are tabulated as per bits present in \a CGATSTAT0 register.
 396:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use type \a XMC_SCU_PERIPHERAL_CLOCK_t for accessing these enum parameters.
 397:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 398:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_PERIPHERAL_CLOCK
 399:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 400:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_VADC   = SCU_CLK_CGATSTAT0_VADC_Msk,  /**< VADC peripheral gating. */
 401:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DSD)
 402:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_DSD    = SCU_CLK_CGATSTAT0_DSD_Msk,   /**< DSD peripheral gating. */
 403:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 404:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU40  = SCU_CLK_CGATSTAT0_CCU40_Msk,  /**< CCU40 peripheral gating. */
 405:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU41)
 406:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU41  = SCU_CLK_CGATSTAT0_CCU41_Msk,  /**< CCU41 peripheral gating. */
 407:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 408:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU42)
 409:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU42  = SCU_CLK_CGATSTAT0_CCU42_Msk,  /**< CCU42 peripheral gating. */
 410:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 411:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU80)
 412:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU80  = SCU_CLK_CGATSTAT0_CCU80_Msk,  /**< CCU80 peripheral gating. */
 413:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 414:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU81)
 415:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU81  = SCU_CLK_CGATSTAT0_CCU81_Msk,  /**< CCU81 peripheral gating. */
 416:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 417:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF0)
 418:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_POSIF0 = SCU_CLK_CGATSTAT0_POSIF0_Msk,  /**< POSIF0 peripheral gating. *
 419:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 420:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF1)
 421:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_POSIF1 = SCU_CLK_CGATSTAT0_POSIF1_Msk,   /**< POSIF1 peripheral gating. 
 422:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 423:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC0  = SCU_CLK_CGATSTAT0_USIC0_Msk,   /**< USIC0 peripheral gating. */
 424:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ERU1   = SCU_CLK_CGATSTAT0_ERU1_Msk,    /**< ERU1 peripheral gating. */
 425:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(HRPWM0)
 426:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_HRPWM0 = SCU_CLK_CGATSTAT0_HRPWM0_Msk,  /**< HRPWM0 peripheral gating. *
 427:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 428:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU43)
 429:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU43  = (SCU_CLK_CGATSTAT1_CCU43_Msk | 0x10000000UL),   /**< CCU43 peri
 430:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 431:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(LEDTS0)
 432:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_LEDTS0 = (SCU_CLK_CGATSTAT1_LEDTSCU0_Msk | 0x10000000UL), /**< LEDTS0 pe
 433:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 434:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CAN)
 435:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_MCAN   = (SCU_CLK_CGATSTAT1_MCAN0_Msk | 0x10000000UL),   /**< MCAN perip
 436:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 437:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DAC)  
 438:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_DAC    = (SCU_CLK_CGATSTAT1_DAC_Msk | 0x10000000UL),     /**< DAC periph
 439:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 440:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 441:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_SDMMC  = (SCU_CLK_CGATSTAT1_MMCI_Msk | 0x10000000UL),    /**< SDMMC peri
 442:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 443:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC1)
 444:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC1  = (SCU_CLK_CGATSTAT1_USIC1_Msk | 0x10000000UL),   /**< USIC1 peri
 445:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 446:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC2)
 447:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC2  = (SCU_CLK_CGATSTAT1_USIC2_Msk | 0x10000000UL),    /**< USIC2 per
 448:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 449:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_PORTS  = (SCU_CLK_CGATSTAT1_PPORTS_Msk | 0x10000000UL),   /**< PORTS per
 450:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_WDT    = (SCU_CLK_CGATSTAT2_WDT_Msk | 0x20000000UL),      /**< WDT perip
 451:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 452:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ETH0   = (SCU_CLK_CGATSTAT2_ETH0_Msk | 0x20000000UL),     /**< ETH0 peri
 453:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 454:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_GPDMA0 = (SCU_CLK_CGATSTAT2_DMA0_Msk | 0x20000000UL),     /**< DMA0 peri
 455:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(GPDMA1)
 456:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_GPDMA1 = (SCU_CLK_CGATSTAT2_DMA1_Msk | 0x20000000UL),     /**< DMA1 peri
 457:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 458:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(FCE)
 459:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_FCE    = (SCU_CLK_CGATSTAT2_FCE_Msk | 0x20000000UL),      /**< FCE perip
 460:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 461:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)
 462:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USB0   = (SCU_CLK_CGATSTAT2_USB_Msk | 0x20000000UL),      /**< USB0 peri
 463:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 464:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)
 465:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ECAT0   = (SCU_CLK_CGATSTAT2_ECAT0_Msk | 0x20000000UL),      /**< ECAT0 
 466:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 467:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 468:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_EBU    = (SCU_CLK_CGATSTAT3_EBU_Msk | 0x30000000UL)       /**< EBU perip
 469:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 470:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_PERIPHERAL_CLOCK_t;
 471:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 472:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 473:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 474:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for system clock (fSYS) source. These enums are used to configure \a SYSSEL bit
 475:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Clock Control Register. 
 476:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_SYSCLKSRC_t for accessing these enum parameters.
 477:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 478:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSCLKSRC
 479:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 480:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_OFI = (0UL << SCU_CLK_SYSCLKCR_SYSSEL_Pos), /**< Internal Fast Clock (fOF
 481:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for system clock 
 482:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_PLL = (1UL << SCU_CLK_SYSCLKCR_SYSSEL_Pos)  /**< PLL output (fPLL) as a
 483:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for system clock 
 484:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSCLKSRC_t;
 485:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 486:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 487:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the P-Divider input frequency. These enums are used to configure 
 488:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. 
 489:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_OSCCLKSRC_t for accessing these enum parameters.
 490:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 491:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSPLLCLKSRC
 492:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 493:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP = 0UL,  /**< External crystal oscillator
 494:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                 (fOHP) as the source for P-Divider. */
 495:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI = SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk /**< Ba
 496:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                              as the source for P-Di
 497:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLLCLKSRC_t;
 498:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 499:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 500:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines options for selecting the USB clock source(fUSB/fSDMMC).
 501:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * These enums are used to configure \a USBSEL bits of \a USBCLKCR
 502:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * register. User can choose either fPLL or fUSBPLL clock as a source for USB clock. 
 503:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use type \a XMC_SCU_CLOCK_USBCLKSRC_t for accessing these enum parameters.
 504:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 505:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_USBCLKSRC
 506:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 507:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USBCLKSRC_USBPLL = (0UL << SCU_CLK_USBCLKCR_USBSEL_Pos), /**< USB PLL(fUSB PLL) as 
 508:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for USB clock (fU
 509:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USBCLKSRC_SYSPLL = (1UL << SCU_CLK_USBCLKCR_USBSEL_Pos)  /**< Main PLL output (fPLL
 510:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for USB clock (fU
 511:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_USBCLKSRC_t;
 512:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 513:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0) 
 514:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 515:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines options for selecting the ECAT clock source.
 516:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 517:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_ECATCLKSRC
 518:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 519:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ECATCLKSRC_USBPLL = (0UL << SCU_CLK_ECATCLKCR_ECATSEL_Pos), /**< USB PLL (fUSBPLL) 
 520:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL = (1UL << SCU_CLK_ECATCLKCR_ECATSEL_Pos)  /**< Main PLL output (f
 521:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_ECATCLKSRC_t;
 522:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 523:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 524:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 525:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of WDT clock(fWDT). These enums are used to configure 
 526:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. User can choose either fOFI or fPLL or fSTDBY clock as a source for WDT clock. 
 527:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_USBCLKSRC_t for accessing these enum parameters.
 528:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 529:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_WDTCLKSRC
 530:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 531:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_OFI = (0UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos),  /**< Internal Fast Clock 
 532:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            (fOFI) as the source for
 533:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_STDBY = (1UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos), /**< Standby clock 
 534:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            (fSTDBY) as the source f
 535:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_PLL = (2UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos)   /**< PLL output (fPLL) as th
 536:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for WDT clock (fW
 537:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_WDTCLKSRC_t;
 538:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 539:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 540:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of external clock out (fEXT). These enums are used to 
 541:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. User can choose either fSYS or fPLL or fUSBPLL clock as a source for external clock o
 542:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_EXTOUTCLKSRC_t for accessing these enum parameters.
 543:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 544:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_EXTOUTCLKSRC
 545:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 546:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS = (0UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos),  /**< System clock (fSYS) 
 547:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                             the source for external
 548:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_USB = (2UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< USB PLL output(fUSB P
 549:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for external cloc
 550:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL = (3UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< Main PLL output(fPLL)
 551:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for external cloc
 552:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if ((UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 553:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY = (4UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< Standby clock(fSTDB
 554:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for external cloc
 555:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 556:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_EXTOUTCLKSRC_t;
 557:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 558:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 559:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of RTC Clock (fRTC). These enums are used to configure
 560:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  User can choose either fOSI or fULP clock as a source for RTC Clock (fRTC).
 561:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_HIB_RTCCLKSRC_t for accessing these enum parameters.
 562:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 563:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_RTCCLKSRC
 564:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 565:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_RTCCLKSRC_OSI = (0UL << SCU_HIBERNATE_HDCR_RCS_Pos), /**< Internal Slow Clock
 566:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                          (fOSI) as the source for R
 567:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_RTCCLKSRC_ULP = (1UL << SCU_HIBERNATE_HDCR_RCS_Pos) /**< Ultra Low Power Clock (fULP)
 568:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                         as the source for RTC Clock
 569:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_RTCCLKSRC_t;
 570:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 571:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 572:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of Standby Clock (fSTDBY). These enums are used to con
 573:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. User can choose either fOSI or fULP clock as a source for Standby Clock (fSTDBY).
 574:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_HIB_STDBYCLKSRC_t for accessing these enum parameters.
 575:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 576:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_STDBYCLKSRC
 577:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 578:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_OSI = (0UL << SCU_HIBERNATE_HDCR_STDBYSEL_Pos), /**< Internal Slow Clock 
 579:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fOSI) as the source for 
 580:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fSTDBY). */
 581:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_OSCULP = (1UL << SCU_HIBERNATE_HDCR_STDBYSEL_Pos) /**< Ultra Low Power Cl
 582:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fULP) as the source for 
 583:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fSTDBY). */
 584:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_STDBYCLKSRC_t;
 585:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 586:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 587:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for backup clock trimming. These enums are used to configure \a AOTREN  \a FOTR
 588:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  PLLCON0 register. Use type \a XMC_SCU_CLOCK_BACKUP_TRIM_t for accessing these enum parameters.
 589:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 590:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE
 591:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 592:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_FACTORY   = 0UL,  /**< Factory Oscillator Calibration: 
 593:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                         Force adjustment of the internal oscillator
 594:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC = 1UL   /**<  Automatic Oscillator Calibration adju
 595:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t;
 596:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 597:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 598:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 599:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting device boot mode. These enums are used to configure \a SWCON bits
 600:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  User can choose among various boot modes by configuring SWCON bits.
 601:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_BOOTMODE_t for accessing these enum parameters.
 602:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 603:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_BOOTMODE 
 604:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 605:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_NORMAL     = (0UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from start of flash
 606:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ASC_BSL    = (1UL << SCU_GENERAL_STCON_SWCON_Pos), /**< UART bootstrap. */
 607:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_BMI        = (2UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot Mode Index - Custom
 608:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            sequence. */
 609:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_CAN_BSL    = (3UL << SCU_GENERAL_STCON_SWCON_Pos), /**< CAN bootstrap. */
 610:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_PSRAM_BOOT = (4UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from PSRAM. */
 611:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ABM0       = (8UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from flash - fixed 
 612:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            address 0. */
 613:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ABM1       = (12UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from flash - fixed
 614:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                             address 1. */
 615:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_FABM       = (14UL << SCU_GENERAL_STCON_SWCON_Pos), /**< fallback Alternate Boot
 616:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                             Try ABM-0 then try ABM-
 617:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_BOOTMODE_t;
 618:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 619:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 620:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 621:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines various PLL modes of operation. These enums are used to configure \a VCOBYP bit of \a P
 622:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  User can choose either normal or prescalar mode by configuring VCOBYP bit.
 623:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PLL_MODE_t for accessing these enum parameters.
 624:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 625:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSPLL_MODE
 626:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 627:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED, /**< fPLL derived from fOSC and PLL operating in prescalar mo
 628:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL,  /**< fPLL derived from fVCO and PLL operating in normal mode. 
 629:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR /**< fPLL derived from fOSC and PLL operating in prescalar mo
 630:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLL_MODE_t;
 631:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 632:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 633:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines the source of the system clock and peripherals clock gating in SLEEP state.
 634:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use this enum as parameter of XMC_SCU_CLOCK_SetSleepConfig before going to SLEEP state.
 635:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 636:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The SLEEP state of the system corresponds to the SLEEP state of the CPU. The state is
 637:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  entered via WFI or WFE instruction of the CPU. In this state the clock to the CPU is
 638:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  stopped. Peripherals are only clocked when configured to stay enabled. 
 639:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 640:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Peripherals can continue to operate unaffected and eventually generate an event to
 641:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  wake-up the CPU. Any interrupt to the NVIC will bring the CPU back to operation. The
 642:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  clock tree upon exit from SLEEP state is restored to what it was before entry into SLEEP
 643:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  state.
 644:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  
 645:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 646:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SLEEP_MODE_CONFIG
 647:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 648:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_SYSCLK_FOFI = 0,  /**< fOFI used as system clock source in SLEEP 
 649:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_SYSCLK_FPLL = SCU_CLK_SLEEPCR_SYSSEL_Msk,  /**< fPLL used as syst
 650:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)
 651:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_USB = 0,  /**< USB clock disabled in SLEEP state */
 652:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_USB = SCU_CLK_SLEEPCR_USBCR_Msk,  /**< USB clock enabled i
 653:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 654:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 655:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_SDMMC = 0,/**< SDMMC clock disabled in SLEEP state */
 656:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_SDMMC = SCU_CLK_SLEEPCR_MMCCR_Msk,/**< SDMMC clock enabled
 657:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 658:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 659:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_ETH = 0,  /**< ETH clock disabled in SLEEP state */
 660:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_ETH = SCU_CLK_SLEEPCR_ETH0CR_Msk,  /**< ETH clock enabled 
 661:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 662:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 663:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_EBU = 0,  /**< EBU clock disabled in SLEEP state */
 664:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_EBU = SCU_CLK_SLEEPCR_EBUCR_Msk,  /**< EBU clock enabled i
 665:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 666:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLED_CCU = 0,  /**< CCU clock disabled in SLEEP state */
 667:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_CCU = SCU_CLK_SLEEPCR_CCUCR_Msk,  /**< CCU clock enabled i
 668:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLED_WDT = 0,  /**< WDT clock disabled in SLEEP state */
 669:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_WDT = SCU_CLK_SLEEPCR_WDTCR_Msk,  /**< WDT clock enabled i
 670:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_t;
 671:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 672:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 673:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines the source of the system clock and peripherals clock gating in DEEPSLEEP state.
 674:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  In addition the state of FLASH, PLL and PLLVCO during DEEPSLEEP state.
 675:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use this enum as parameter of XMC_SCU_CLOCK_SetDeepSleepConfig before going to DEEPSLEEP state.
 676:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 677:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The DEEPSLEEP state of the system corresponds to the DEEPSLEEP state of the CPU. The state is
 678:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  entered via WFI or WFE instruction of the CPU. In this state the clock to the CPU is
 679:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  stopped. 
 680:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 681:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  In Deep Sleep state the OSC_HP and the PLL may be switched off. The wake-up logic in the NVIC i
 682:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  by a free-running clock. Peripherals are only clocked when configured to stay enabled. 
 683:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Configuration of peripherals and any SRAM content is preserved.
 684:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The Flash module can be put into low-power mode to achieve a further power reduction.
 685:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  On wake-up Flash module will be restarted again before instructions or data access is possible.
 686:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Any interrupt will bring the system back to operation via the NVIC.The clock setup before
 687:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  entering Deep Sleep state is restored upon wake-up.
 688:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 689:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG
 690:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 691:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_SYSCLK_FOFI = 0,  /**< fOFI used as system clock source in DE
 692:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_SYSCLK_FPLL = SCU_CLK_DSLEEPCR_SYSSEL_Msk,  /**< fPLL used as
 693:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_FLASH_POWERDOWN = SCU_CLK_DSLEEPCR_FPDN_Msk,/**< Flash power 
 694:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_PLL_POWERDOWN = SCU_CLK_DSLEEPCR_PLLPDN_Msk,  /**<  Switch of
 695:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_VCO_POWERDOWN = SCU_CLK_DSLEEPCR_VCOPDN_Msk,  /**<  Switch of
 696:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)
 697:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_USB = 0,  /**< USB clock disabled in DEEPSLEEP state 
 698:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_USB = SCU_CLK_DSLEEPCR_USBCR_Msk,  /**< USB clock enab
 699:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 700:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 701:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_SDMMC = 0,/**< SDMMC clock disabled in DEEPSLEEP stat
 702:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_SDMMC = SCU_CLK_DSLEEPCR_MMCCR_Msk,/**< SDMMC clock en
 703:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 704:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 705:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_ETH = 0,  /**< ETH clock disabled in DEEPSLEEP state 
 706:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_ETH = SCU_CLK_DSLEEPCR_ETH0CR_Msk,  /**< ETH clock ena
 707:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 708:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 709:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_EBU = 0,  /**< EBU clock disabled in DEEPSLEEP state 
 710:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_EBU = SCU_CLK_DSLEEPCR_EBUCR_Msk,  /**< EBU clock enab
 711:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 712:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_CCU = 0,  /**< CCU clock disabled in DEEPSLEEP state 
 713:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_CCU = SCU_CLK_DSLEEPCR_CCUCR_Msk,  /**< CCU clock enab
 714:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_WDT = 0,  /**< WDT clock disabled in DEEPSLEEP state 
 715:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_WDT = SCU_CLK_DSLEEPCR_WDTCR_Msk,  /**< WDT clock enab
 716:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_t;
 717:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 718:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 719:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines status of EVR13 regulator
 720:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 721:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_POWER_EVR_STATUS
 722:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 723:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_EVR_STATUS_OK = 0, /**< EVR13 regulator No overvoltage condition */
 724:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_EVR_STATUS_EVR13_OVERVOLTAGE = SCU_POWER_EVRSTAT_OV13_Msk /**< EVR13 regulator is i
 725:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_POWER_EVR_STATUS_t;
 726:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 727:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 728:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Define status of external hibernate control  
 729:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 730:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_CTRL_STATUS
 731:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 732:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_CTRL_STATUS_NO_ACTIVE = 0, /**< Hibernate not driven active to pads */
 733:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_CTRL_STATUS_ACTIVE = SCU_HIBERNATE_HDSTAT_HIBNOUT_Msk, /**< Hibernate driven active t
 734:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_CTRL_STATUS_t;
 735:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 736:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 737:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Hibernate domain event status
 738:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 739:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_EVENT
 740:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 741:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_POS_EDGE = SCU_HIBERNATE_HDCR_WKPEP_Msk, /**< Wake-up on positive edg
 742:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_NEG_EDGE = SCU_HIBERNATE_HDCR_WKPEN_Msk, /**< Wake-up on negative edg
 743:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_RTC = SCU_HIBERNATE_HDCR_RTCE_Msk, /**< Wake-up on RTC event */
 744:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_ULPWDG = SCU_HIBERNATE_HDCR_ULPWDGEN_Msk, /**< ULP watchdog alarm status */
 745:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_EVENT_t;
 746:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 747:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 748:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   * Hibernate domain dedicated pins
 749:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   */
 750:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_IO
 751:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 752:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_0 = 0, /**< HIB_IO_0 pin. 
 753:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                              At the first power-up and with every reset of the hibernate domain thi
 754:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_PACKAGE == BGA196) || (UC_PACKAGE == BGA144) || (UC_PACKAGE == LQFP144
 755:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_1 = 1 /**< HIB_IO_1 pin. 
 756:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                             At the first power-up and with every reset of the hibernate domain this
 757:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                             @note : Only available on BGA196, BGA144, LQFP144 and LQFP100 packages*
 758:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 759:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_IO_t;
 760:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 761:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 762:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * HIB_IOx pin I/O control
 763:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 764:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_PIN_MODE
 765:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 766:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_NONE = 0 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, 
 767:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_DOWN = 1 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, 
 768:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_UP = 2 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, in
 769:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_HIBCTRL = 8 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-
 770:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_WDTSRV = 9 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-p
 771:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_GPIO = 10 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-pu
 772:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_HIBCTRL = 12 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Ope
 773:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_WDTSRV = 13 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Open
 774:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_GPIO = 14 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Open d
 775:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_PIN_MODE_t;
 776:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 777:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 778:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the output polarity of the HIB_IOx
 779:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 780:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_IO_OUTPUT_LEVEL
 781:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 782:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_OUTPUT_LEVEL_LOW = 0 << SCU_HIBERNATE_HDCR_HIBIO0POL_Pos, /**< Direct value */
 783:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_OUTPUT_LEVEL_HIGH = 1 << SCU_HIBERNATE_HDCR_HIBIO0POL_Pos /**< Inverted value */
 784:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_IO_OUTPUT_LEVEL_t;
 785:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 786:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 787:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * DATA STRUCTURES
 788:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 789:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 790:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 791:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines a data structure for initializing the PLL functional block.
 792:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Structure holds divider values for N-DIV, P-DIV, K1-DIV, K2-DIV in order to generate desired 
 793:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  frequency using VCO. It holds the PLL mode of operation either normal or prescaler (VCO bypasse
 794:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_PLL_CONFIG_t for accessing these structure parameters.
 795:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 796:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef struct XMC_SCU_CLOCK_SYSPLL_CONFIG
 797:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 798:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t n_div;                       /**<  PLL N-Divider value. */
 799:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t p_div;                       /**<  PLL P-Divider value. */
 800:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t k_div;                       /**<  K1-Divider(Prescalar mode) or K2-Divider (Normal mode)
 801:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_t mode;    /**<  PLL mode of operation. */
 802:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_t clksrc; /**<  PLL divider input frequency. */
 803:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLL_CONFIG_t;
 804:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 805:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 806:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines a data structure used for initializing the clock functional block.
 807:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Clock functional block configures clock source needed for various peripheral and its divider va
 808:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_CONFIG_t for accessing these structure parameters.
 809:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 810:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** typedef struct XMC_SCU_CLOCK_CONFIG
 811:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 812:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_CONFIG_t         syspll_config;      /**< PLL configuration */
 813:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   bool                                  enable_oschp;       /**< Enable external high precision osc
 814:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  Should be enabled when fOHP has to
 815:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   bool                                  enable_osculp;      /**< Enable external ultra low power os
 816:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  Should be enabled when fULP has to
 817:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t calibration_mode;   /**< Backup clock trimming mode. */
 818:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_t             fstdby_clksrc;      /**< Standby clock source. */
 819:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_t             fsys_clksrc;        /**< Choice of system clock. */
 820:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fsys_clkdiv;        /**< Ratio of fPLL to fSYS. */
 821:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fcpu_clkdiv;        /**< Ratio of fSys to fCPU. */
 822:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fccu_clkdiv;        /**< Ratio of fSys to fCCU. */
 823:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fperipheral_clkdiv; /**< Ratio of fSYS to fPERI. */
 824:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** } const XMC_SCU_CLOCK_CONFIG_t;
 825:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 826:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 827:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 828:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * API PROTOTYPES
 829:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 830:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 831:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #ifdef __cplusplus
 832:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** extern "C" {
 833:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 834:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 835:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 836:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
 837:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param group   ADC Group to which the channel being monitored belongs to.\n
 838:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 0 or 1.
 839:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param channel  The channel whose voltage range has to be monitored.\n
 840:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 6 or 7. Value identifies the channel in the selected ADC group.
 841:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 842:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
 843:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 844:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 845:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables out of range comparator for the selected ADC group and channel. \n\n
 846:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The ADC channel input is compared by Out of Range Comparator (ORC) for overvoltage monitoring
 847:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * or for detection of out of range analog inputs. ORC must be turned on explicitly
 848:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * to leverage the auditing feature. ORC is enabled by setting the enable bit in the GORCEN registe
 849:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 850:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_DisableOutOfRangeComparator()\n\n\n
 851:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 852:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel);
 853:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 854:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 855:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
 856:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param group   ADC Group to which the channel being monitored belongs to.\n
 857:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 0 or 1.
 858:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param channel  The channel whose voltage range has to be monitored.\n
 859:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 6 or 7. Value identifies the channel in the selected ADC group.
 860:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 861:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
 862:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 863:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 864:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables the out of range comparator for the selected ADC group and the channel. \n\n
 865:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Out of range comparator is disabled by clearing the enable bit in the GORCEN register.
 866:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 867:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableOutOfRangeComparator()\n\n\n
 868:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 869:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel);
 870:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 871:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 872:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
 873:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 874:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 875:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables die temperature measurement by powering the DTS module.\n\n
 876:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Die temperature sensor is enabled by setting the PWD bit of DTSCON register.
 877:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 878:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_DisableTemperatureSensor(), XMC_SCU_IsTemperatureSensorEnabled(), XMC_SCU_CalibrateTempe
 879:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
 880:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 881:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_EnableTemperatureSensor(void);
 882:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 883:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 884:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
 885:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 886:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 887:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables die temperature measurement by powering the DTS module off.\n\n
 888:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Die temperature sensor is disabled by clearing the PWD bit of DTSCON register.
 889:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 890:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_IsTemperatureSensorEnabled(), XMC_SCU_CalibrateTemper
 891:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
 892:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 893:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_DisableTemperatureSensor(void);
 894:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 895:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 896:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status of die temperature sensor. \n
 897:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: true - if temperature sensor is enabled.\n
 898:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    false - if temperature sensor is disabled.
 899:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 900:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 901:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the die temperature sensor power status.\n\n
 902:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is obtained by reading the PWD bit of DTSCON register.
 903:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 904:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_CalibrateTemperatureSensor(),
 905:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
 906:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 907:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorEnabled(void);
 908:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 909:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 910:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 911:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param offset  Offset value for calibrating the DTS result.\n
 912:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 0 to 127.
 913:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param gain    Gain value for calibrating the DTS conversion result.\n
 914:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 0 to 63.
 915:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 916:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
 917:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 918:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 919:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Calibrates the measurement of temperature by configuring the values of offset and gain of \a DTS
 920:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Allows to improve the accuracy of the temperature measurement with the adjustment of \a OFFSET a
 921:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * in the \a DTSCON register.
 922:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Offset adjustment is defined as a shift of the conversion result. The range of the offset adjust
 923:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * resolution that corresponds to +/- 12.5�C. The offset value gets added to the measure result. 
 924:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Offset is considered as a signed value.
 925:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Gain adjustment helps in minimizing gain error. When the \a gain value is 0, result is generated
 926:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * When the \a gain value is 63, result is generated with least gain, i.e, \a RESULT - 63 at the hi
 927:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
 928:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
 929:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CalibrateTempMonitor with desired offset and gain calibration values to the DT
 930:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
 931:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
 932:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Check whether Die Temperature Sensor (DTS) is busy in conversion by calling \a XMC_SCU_IsTempe
 933:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * conversion complete.\n
 934:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Read the die temperature value using \a XMC_SCU_GetTemperatureMeasurement API.
 935:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 936:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(),
 937:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
 938:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 939:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain);
 940:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 941:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 942:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_STATUS_t  Result of starting the temperature measurement.\n
 943:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                           \b Range: \n 
 944:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_OK if the measurement is started successfully.\n
 945:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_ERROR if temperature sensor is not enabled.\n
 946:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_BUSY if temperature sensor is busy measuring the tem
 947:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 948:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 949:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 950:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Starts die temperature measurement using internal temperature sensor.\n\n
 951:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API checks if the temperature sensor is enabled and is not busy in measurement.\n
 952:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
 953:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
 954:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
 955:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
 956:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Check whether Die Temperature Sensor (DTS) is busy in conversion by calling \a XMC_SCU_IsTempe
 957:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * conversion complete.\n
 958:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Read the die temperature value using \a XMC_SCU_GetTemperatureMeasurement API.
 959:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 960:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_CalibrateTemperatureSensor(),
 961:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_GetTemperatureMeasurement() \n\n\n
 962:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 963:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void);
 964:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 965:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 966:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 967:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 968:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Measured temperature value.\n
 969:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: Valid temperature range is 0 to 1023. \n
 970:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              If sensor is not enabled, 0x7FFFFFFFH is returned.
 971:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 972:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 973:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Reads the measured value of die temperature.\n\n
 974:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Temperature measurement result is read from \a RESULT bit field of \a DTSSTAT register.
 975:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The temperature measured in �C is given by (RESULT - 605) / 2.05 [�C]
 976:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 977:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_IsTemperatureSensorBusy() \n\n\n
 978:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 979:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_GetTemperatureMeasurement(void);
 980:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 981:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 982:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Indicates if the die temperature sensor is busy.\n
 983:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    \b Range: \a true if sensor is busy in temperature measurement.
 984:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    \a false if sensor is free and can accept a new request for measurement.
 985:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 986:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 987:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks whether Die Temperature Sensor (DTS) is busy in temperature measurement.\n\n
 988:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is read from the \a BUSY bit field of the \a DTSSTAT register.
 989:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 990:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_GetTemperatureMeasurement() \n\n\n
 991:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 992:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorBusy(void);
 993:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
 994:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 995:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool Status of die temperature sensor whether it is ready to start measurement. \n
 996:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: \n \a true if temperature sensor is ready to start measurement. \n
 997:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \a false if temperature sensor is not ready to start measurement.
 998:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 999:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1000:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the die temperature sensor is ready to start a measurement\n\n
1001:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is obtained by reading \a RDY bit of \a DTSSTAT register. It is recommended
1002:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * to check the ready status of die temperature sensor before starting it.
1003:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1004:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_IsTemperatureSensorBusy() \n\n\n
1005:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1006:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorReady(void);
1007:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1008:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if (UC_SERIES != XMC45)
1009:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1010:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Indicates if the measured die temperature value has exceeded the configured upper 
1011:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: \a true if the temperature value has exceeded the configured upper limit.
1012:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              if the temperature value is less than the configured upper limit.
1013:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1014:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1015:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the measured temperature has exceeded the configured upper limit of temperature.\n\n
1016:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API checks \a OVERFL bit (Upper Limit Overflow Status bit) of \a DTEMPALARM register.
1017:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The \a OVERFL bit will be set if the measured temperature has exceeded the limit configured in 
1018:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the bitfield \a UPPER in the \a DTEMPLIM register.
1019:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1020:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_SetRawTempLimits(),XMC_SCU_LowTemperature() \n\n\n
1021:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1022:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_HighTemperature(void);
1023:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1024:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1025:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1026:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param lower_temp  Lower threshold of die temperature. If measured temperature falls below this 
1027:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    alarm bit will be set in \a UNDERFL bit field of \a DTEMPALARM register.
1028:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param upper_temp  Upper threshold of die temperature. If measured temperature exceeds this valu
1029:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    alarm bit will be set in \a OVERFL bit field of \a DTEMPALARM register.
1030:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1031:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1032:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1033:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1034:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the lower and upper threshold of die temperature.\n\n
1035:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * API configures \a DTEMPLIM register for upper and lower die temperature threshold limits.
1036:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * When the measured temperature is outside the range defined by the limits, alarm bits \a UNDERFL 
1037:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * will be set in the register \a DTEMPALARM.\n
1038:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
1039:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
1040:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
1041:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
1042:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Use \a XMC_SCU_HighTemperature() and XMC_SCU_LowTemperature() to monitor the temperature.\n
1043:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1044:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HighTemperature(), XMC_SCU_LowTemperature() \n\n\n
1045:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1046:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_SetRawTempLimits(const uint32_t lower_temp, const uint32_t upper_temp);
1047:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1048:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1049:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Indicates if the measured die temperature value has dropped below the configured l
1050:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: \a true if the temperature value has dropped below the configured lower l
1051:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              if the temperature value is higher than the configured lower limit.
1052:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1053:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1054:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the measured temperature has dropped below the configured lower limit of temperature.\
1055:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API checks \a UNDERFL bit (Lower LimitUnderflow Status bit) of \a DTEMPALARM register.
1056:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The \a UNDERFL bit will be set if the measured temperature has dropped below the limit configure
1057:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the bitfield \a LOWER in the \a DTEMPLIM register.
1058:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1059:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_SetRawTempLimits(),XMC_SCU_HighTemperature() \n\n\n
1060:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1061:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_LowTemperature(void);
1062:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
1063:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1064:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1065:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t Configured boot mode for the device.\n
1066:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_BOOTMODE_t for enumeration of different boot modes.
1067:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1068:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1069:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the boot mode configured for the device.\n\n
1070:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The boot mode is read from the \a STCON register bit field \a SWCON.
1071:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1072:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1073:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_SetBootMode() \n\n\n
1074:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1075:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_GetBootMode(void);
1076:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1077:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1078:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1079:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param mode Boot mode to be configured for the device.\n
1080:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_BOOTMODE_t for selecting the boot mode.
1081:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1082:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1083:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1084:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1085:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the desired boot mode for the device.\n\n
1086:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The XMC4 series devices support multiple boot modes. A running application can set a desired boo
1087:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * launch it by means of software reset. Switching of boot modes should be handled carefully. User 
1088:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the initial boot sequence is executed. A stable execution environment should be maintained when 
1089:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * eventually handed over to the application program.\n
1090:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to launch requested bootmode:\n
1091:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetBootMode() with desired boot mode value.\n
1092:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Trigger a software reset using system reset request by enabling a bit \a SYSRESETREQ of AIRCR 
1093:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *   (PPB->AIRCR |= PPB_AIRCR_SYSRESETREQ_Msk).\n
1094:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1095:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_GetBootMode() \n\n\n
1096:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1097:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t mode);
1098:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1099:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1100:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1101:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param index  The SCU general purpose register to be read.\n
1102:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 0 and 1 corresponding to GPR0 and GPR1.
1103:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1104:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Data read from the selected general purpose register.
1105:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1106:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1107:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides stored data from general purpose SCU register.\n\n
1108:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * SCU consists of 2 general purpose registers. These registers can be used for storing
1109:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * data. The API reads from either GPR0 or GPR1 based on the \a index value.
1110:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1111:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_WriteGPR()\n\n\n
1112:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1113:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_ReadGPR(const uint32_t index);
1114:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  
1115:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1116:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1117:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param index  The SCU general purpose register to be written.\n
1118:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 0 and 1 corresponding to GPR0 and GPR1.
1119:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param data  Data to be written to the selected general purpose register.
1120:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1121:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1122:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1123:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1124:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Stores data in the selected general purpose SCU register.\n\n
1125:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * SCU consists of 2 general purpose registers. These registers can be used for storing
1126:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * data. The API writes data to either GPR0 or GPR1 based on the \a index value.
1127:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1128:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_ReadGPR()\n\n\n
1129:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1130:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data);
1131:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1132:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1133:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1134:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param address  Location in the retention memory to be written.\n
1135:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 4 bit address space is provided for selecting 16 words of 32 bits.
1136:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  equivalent to 64 bytes of data. \a address value should be from
1137:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  0 to 15.
1138:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param data    32 bit data to be written into retention memory. The API writes
1139:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                one word(4 bytes) of data to the address specified.\n
1140:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 32 bit data.
1141:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1142:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1143:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1144:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1145:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Writes input data to the selected address of Retention memory in hibernate domain.\n\n
1146:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The retention memory is located in hibernate domain. 
1147:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is used for the purpose of store/restore of context information.
1148:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Access to the retention memory space is served over shared serial interface. 
1149:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Retention memory content is retained even in hibernate mode.
1150:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1151:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_ReadFromRetentionMemory() \n\n\n
1152:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1153:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data);
1154:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1155:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1156:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1157:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param address  Location in the retention memory to be read.\n
1158:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 4 bit address space is provided for selecting 16 words of 32 bits.
1159:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  equivalent to 64 bytes of data. \a address value should be from
1160:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  0 to 15.
1161:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1162:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  32 bit data read from retention memory. The API reads
1163:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                one word(4 bytes) of data from the address specified.\n
1164:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 32 bit data.
1165:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1166:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1167:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Reads data from selected address of retention memory in hibernate domain.\n\n
1168:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The retention memory is located in hibernate domain. 
1169:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is used for the purpose of store/restore of context information.
1170:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Access to the retention memory space is served over shared serial interface. 
1171:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Retention memory content is retained even in hibernate mode.
1172:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1173:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_WriteToRetentionMemory() \n\n\n
1174:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1175:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address);
1176:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1177:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1178:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1179:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param request  Non-maskable interrupt (NMI) request source to be enabled.\n
1180:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: Use type @ref XMC_SCU_NMIREQ_t for selecting the source of NMI. Multiple 
1181:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              sources can be combined using \a OR operation.
1182:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1183:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1184:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1185:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1186:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selectively enables interrupt sources to generate non maskable interrupt(NMI).\n\n
1187:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * NMI assertion can be individually enabled by setting corresponding bit of an interrupt in the 
1188:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \a NMIREQEN register.
1189:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1190:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_DisableNmiRequest() \n\n\n
1191:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1192:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request);
1193:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1194:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1195:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1196:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param request  Non-maskable interrupt (NMI) request source to be disabled.\n
1197:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: Use type @ref XMC_SCU_NMIREQ_t for selecting the source of NMI. Multiple 
1198:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              sources can be combined using \a OR operation.
1199:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1200:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1201:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1202:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1203:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selectively disables interrupt sources from generating non maskable interrupt(NMI).\n\n
1204:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * NMI assertion can be individually disabled by clearing corresponding bits in the \a NMIREQEN reg
1205:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1206:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest() \n\n\n
1207:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1208:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request);
1209:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1210:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1211:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1212:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap generation has to be enabled.\n
1213:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1214:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1215:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1216:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1217:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1218:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables assertion of trap for the selected trap event.\n\n
1219:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion can be individually enabled by clearing respective bit of the 
1220:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * event in \a TRAPDIS register in order to get an exception.
1221:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1222:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_TRAP_Disable(), XMC_SCU_TRAP_ClearStatus(), XMC_SCU_TRAP_GetStatus() \n\n\n
1223:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1224:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_Enable(const uint32_t trap);
1225:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1226:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1227:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1228:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap generation has to be disabled.\n
1229:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1230:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1231:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1232:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1233:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1234:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables assertion of trap for the selected trap event.\n\n
1235:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion can be individually disabled by setting the respective event bit 
1236:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * in the \a TRAPDIS register in order to suppress trap generation.
1237:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1238:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_TRAP_Enable(), XMC_SCU_TRAP_ClearStatus(), XMC_SCU_TRAP_GetStatus() \n\n\n
1239:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1240:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_Disable(const uint32_t trap);
1241:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1242:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1243:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1244:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap status bit has to be cleared.\n
1245:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1246:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1247:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1248:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1249:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1250:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Clears the trap status of input event.\n\n
1251:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Once a trap event is detected, it will have to be acknowledged and later serviced. 
1252:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The trap status bit should be cleared to detect the occurence of trap next time. 
1253:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * This is useful while polling for TRAPSTAT without enabling the NMI for trap.
1254:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap status can be cleared by setting the event bit in the \a TRAPCLR register.
1255:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1256:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_GetStatus() \n\n\n
1257:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1258:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_ClearStatus(const uint32_t trap);
1259:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1260:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1261:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Status of trap generating events.\n
1262:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event. The returned
1263:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * value indicates the status of multiple events at their respective bit positions.
1264:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * User should mask the bits of the events of interest using the type specified.
1265:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1266:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1267:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the status of trap generating events. \n\n
1268:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is read from \a TRAPRAW register. Status of the specific events can be checked
1269:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * using their respective bits in the \a TRAPRAW register. The bit masks can be obtained from
1270:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the enumeration type @ref XMC_SCU_TRAP_t. Multiple events can be combined using \a OR operation.
1271:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * A trap event is considered to be asserted if the respective bit of the event is set to 1.
1272:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1273:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_ClearStatus() \n\n\n
1274:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1275:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_TRAP_GetStatus(void);  
1276:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1277:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1278:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1279:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap has to be triggered.\n
1280:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1281:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1282:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1283:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1284:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1285:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Triggers trap generation for the event specified. \n\n
1286:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The trap source has to be enabled before invocation of this API. 
1287:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap event can be triggered by setting its respective bit in the \a TRAPSET register.
1288:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap event can be configured to generate a non maskable interrupt by using the API XMC_SCU_INTER
1289:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to manually assert a trap event:\n
1290:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_TRAP_EnableEvent with desired trap request source ID.\n
1291:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_TRAP_SetEvent with same trap request source ID to manually assert a trap event
1292:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1293:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_GetStatus() \n\n\n
1294:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1295:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_Trigger(const uint32_t trap);
1296:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1297:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1298:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1299:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param peripheral  The peripheral to be reset.\n
1300:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals that can be
1301:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1302:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1303:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1304:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1305:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Puts the specified peripheral in to reset state. \n\n
1306:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API achieves reset of peripherals by setting the respective bit in the \a PRSET0,  \a PRSET1
1307:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * register. Status of reset assertion automatically stored in the \a PRSTATn register and can be c
1308:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * user software to determine the state of the system and for debug purpose.\n
1309:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to assert a peripheral reset:\n
1310:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_AssertPeripheralReset() with desired peripheral identifier.\n
1311:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_IsPeripheralResetAsserted with same peripheral identifier to verify whet
1312:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * is in reset state.\n
1313:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1314:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_RESET_IsPeripheralResetAsserted() \n\n\n
1315:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1316:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1317:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1318:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1319:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1320:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param peripheral  The peripheral to be moved out of reset state.\n
1321:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals that can be
1322:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1323:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1324:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1325:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1326:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables the specified peripheral by moving it out of reset state.  \n\n
1327:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Any peripheral should be moved out of reset state for executing its functionality.
1328:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API enables the peripheral by setting its respective bit in the \a PRCLR0,  \a PRCLR1 or  \a
1329:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * register. Status of reset deassertion is automatically stored in the \a PRSTATn register and can
1330:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the user software to determine the state of the system and for debug purpose.\n
1331:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to deassert a peripheral reset:\n
1332:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_DeassertPeripheralReset() with desired peripheral identifier.\n
1333:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_IsPeripheralResetAsserted() with desired peripheral identifier to verify
1334:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * has been enabled.\n
1335:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1336:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_RESET_AssertPeripheralReset() \n\n\n
1337:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1338:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1339:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1340:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1341:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1342:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param peripheral  The peripheral, whose reset status has to be checked.\n
1343:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals.
1344:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1345:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Status of peripheral reset. \n
1346:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *               \b Range: \a true if peripheral is in reset state. \a false if peripheral is enabl
1347:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1348:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1349:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks the reset status of the selected peripheral.\n\n
1350:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API reads the reset status from \a PRSTATn register. Returns true if the peripheral is in
1351:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * reset state. On power up of the device, all the peripherals will be in reset state. 
1352:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If the peripheral is enabled, \a false will be returned as the status.
1353:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1354:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_RESET_AssertPeripheralReset(), XMC_SCU_RESET_DeassertPeripheralReset() \n\n\n 
1355:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1356:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1357:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  
1358:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1359:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1360:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error status has to be cleared.\n
1361:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1362:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory status bits can be cleared by using the \a OR operation.
1363:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1364:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1365:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1366:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1367:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Clears the parity error status bit. \n\n
1368:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * When a memory parity error is detected using the status bits in \a PEFLAG register. It has to 
1369:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * be cleared by software to detect the parity error from the same memory next time.
1370:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API clears the parity error status bit of the selected peripheral by setting the 
1371:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * respective bit in the \a PEFLAG register. Status of multiple memory parity errors 
1372:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * can be cleared by combining the enum values using \a OR operation.
1373:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1374:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_GetStatus(), XMC_SCU_PARITY_Enable(), XMC_SCU_PARITY_EnableTrapGeneration() \n\n\
1375:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1376:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_ClearStatus(const uint32_t memory);
1377:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1378:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1379:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1380:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error checking has to be enabled.\n
1381:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1382:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1383:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1384:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1385:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1386:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1387:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables parity error checking for the selected on-chip RAM type.\n\n
1388:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error checking can be enabled by setting respective bits in the \a PEEN register.
1389:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Additionally parity error can be configured to generate trap when the error is detected,
1390:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * using the API XMC_SCU_PARITY_EnableTrapGeneration(). Such a trap can be further configured
1391:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * to generate non maskable interrupt(NMI) using the API XMC_SCU_INTERRUPT_EnableNmiRequest().
1392:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1393:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_EnableTrapGeneration(), XMC_SCU_INTERRUPT_EnableNmiRequest() \n\n\n
1394:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1395:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_Enable(const uint32_t memory);
1396:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1397:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1398:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1399:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory   The on-chip RAM type, for which the parity error checking has to be disabled.\n
1400:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1401:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1402:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1403:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1404:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1405:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1406:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables parity error checking for the selected on-chip RAM type.\n\n
1407:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error detection can be disabled by clearing the respective bit in the \a PEEN register.
1408:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1409:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_Enable(), XMC_SCU_PARITY_DisableTrapGeneration() \n\n\n
1410:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1411:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_Disable(const uint32_t memory);
1412:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1413:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1414:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1415:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error trap generation has to be enable
1416:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1417:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1418:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1419:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1420:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1421:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1422:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables trap assertion for the parity error source.\n\n
1423:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error detection for different types of on-chip RAM can generate trap.
1424:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion for parity error can be individually enabled by setting the respective bits
1425:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * in the \a PETE register. The generated trap can be additionally configured to generate
1426:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * non maskable interrupt(NMI) using the API XMC_SCU_INTERRUPT_EnableNmiRequest().
1427:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1428:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_PARITY_DisableTrapGeneration() \n\n\n
1429:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1430:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory);
1431:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1432:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1433:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1434:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error trap generation has to be disabl
1435:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1436:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1437:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1438:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1439:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1440:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1441:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables the assertion of trap for the parity error source.\n\n
1442:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion can be disabled by clearing the respective bit of the RAM type in the \a PETE reg
1443:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1444:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1445:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_EnableTrapGeneration() \n\n\n
1446:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1447:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory);
1448:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1449:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1450:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1451:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Status of parity error detection for the on-chip RAM modules.\n
1452:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to get the bit mask of each RAM module type.
1453:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1454:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1455:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the status of parity error detection for the on-chip RAM modules.\n\n
1456:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error status information is obtained from the \a PEFLAG register.
1457:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If a particular RAM module has parity error, its respective bit field will be set to 1 in the 
1458:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * returned value. A check for the status of a particular RAM module can be done by
1459:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * masking the returned value with the RAM module identifier from the type @ref XMC_SCU_PARITY_t.
1460:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1461:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_ClearStatus() \n\n\n
1462:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1463:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_PARITY_GetStatus(void);  
1464:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1465:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1466:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1467:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock  Peripheral for which the clock has to be enabled. \n
1468:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1469:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1470:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1471:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1472:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1473:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables the source clock for selected peripheral.\n\n
1474:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The various outputs of Clock Generation Unit (CGU) can be individually enabled by setting the pe
1475:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * specific bit in the \a CLKSET register.\n
1476:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to verify whether a source clock of peripheral is enabl
1477:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_EnableClock() with desired peripheral identifier.\n
1478:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_IsClockEnabled() with same peripheral identifier to verify whether the c
1479:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1480:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableClock(), XMC_SCU_RESET_DeassertPeripheralReset() \n\n\n
1481:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1482:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock);
1483:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1484:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1485:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1486:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock  Peripheral for which the clock has to be disabled. \n
1487:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1488:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1489:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1490:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1491:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1492:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables source clock for the peripheral selected.\n\n
1493:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The various outputs of Clock Generation Unit (CGU) can be individually disabled  by setting the 
1494:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * specific bits in the \a CLKCLR register.\n
1495:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to verify whether clock source of the peripheral is ena
1496:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_DisableClock with desired peripheral identifier.\n
1497:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_IsClockEnabled with same peripheral identifier to verify whether periphe
1498:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1499:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableClock(), XMC_SCU_RESET_AssertPeripheralReset() \n\n\n
1500:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1501:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock);
1502:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1503:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1504:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1505:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock   Peripheral for which the clock status has to be checked. \n
1506:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1507:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1508:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Status of peripheral clock.\n
1509:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: \a true if peripheral clock is enabled. \a false if peripheral clock is disable
1510:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1511:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1512:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks the status of peripheral source clock.\n\n
1513:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status of peripheral source clock is read from the \a CLKSTATn register. 
1514:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Returns \a true if clock is enabled and returns \a false otherwise.
1515:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1516:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableClock(), XMC_SCU_CLOCK_DisableClock() \n\n\n
1517:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1518:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock);
1519:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1520:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1521:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1522:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of clock for fSYS.\n
1523:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSCLKSRC_t to select the source of clock.\n
1524:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_OFI for selecting internal fast clock as fSYS.\n
1525:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_PLL for selecting the output of PLL fPLL as fSYS.
1526:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1527:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1528:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1529:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1530:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source for system clock (fSYS).\n\n
1531:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * System clock is selected by setting \a SYSSEL bits in the \a SYSCLKCR register.
1532:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If \a XMC_SCU_CLOCK_SYSCLKSRC_PLL is selected, then the dividers of the PLL have to be
1533:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * additionally configured to achieve the required system clock frequency. 
1534:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   * \par<b>Related APIs:</b><BR>
1535:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_StartSystemPll(), XMC_SCU_CLOCK_EnableHighPerformanceOscillator() \n\n\n
1536:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1537:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source);
1538:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1539:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1540:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_SYSCLKSRC_t   Source of clock for fSYS.\n
1541:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSCLKSRC_t to select the source of clock.\n
1542:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_OFI - internal fast clock selected as fSYS.\n
1543:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_PLL - output of PLL fPLL selected as fSYS.
1544:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1545:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1546:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the selected source of system clock (fSYS). \n\n
1547:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selected source of fSYS is obtained by reading \a SYSSEL bits of \a SYSCLKCR register.
1548:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1549:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockSource(), XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency() \n\n\n
1550:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1551:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_SYSCLKSRC_t XMC_SCU_CLOCK_GetSystemClockSource(void)
1552:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1553:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_SYSCLKSRC_t)(SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk);
1554:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1555:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1556:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1557:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1558:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source   Source of clock for USB and SDMMC(fUSB/SDMMC).\n
1559:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_USBCLKSRC_t to select the source of clock.\n
1560:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_USBPLL - output of USB PLL as source of USB clock(fUSB/
1561:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_SYSPLL - output of PLL fPLL as source of USB clock(fUSB
1562:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1563:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1564:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1565:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1566:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of USB/SDMMC clock (fUSB/SDMMC).\n\n
1567:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * USB and SDMMC use a common clock source. They can either use fUSB PLL or fPLL as the source of c
1568:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The selection is done by configuring the \a USBSEL bits of \a USBCLKCR register.
1569:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1570:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
1571:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1572:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source);
1573:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1574:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1575:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_USBCLKSRC_t   Source of clock for USB and SDMMC(fUSB/SDMMC).\n
1576:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_USBCLKSRC_t to identify the source of clock.\n
1577:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_USBPLL - output of USB PLL is selected as source of USB
1578:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_SYSPLL - output of PLL fPLL is selected as source of US
1579:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1580:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1581:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the selected source of USB and SDMMC clock frequency.\n\n
1582:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
1583:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1584:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
1585:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1586:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
1587:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
  27              	 .loc 1 1587 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 00AF     	 add r7,sp,#0
  37              	.LCFI1:
  38              	 .cfi_def_cfa_register 7
1588:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
  39              	 .loc 1 1588 0
  40 0004 044B     	 ldr r3,.L3
  41 0006 9B69     	 ldr r3,[r3,#24]
  42 0008 03F48033 	 and r3,r3,#65536
1589:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** }
  43              	 .loc 1 1589 0
  44 000c 1846     	 mov r0,r3
  45 000e BD46     	 mov sp,r7
  46              	.LCFI2:
  47              	 .cfi_def_cfa_register 13
  48              	 
  49 0010 5DF8047B 	 ldr r7,[sp],#4
  50              	.LCFI3:
  51              	 .cfi_restore 7
  52              	 .cfi_def_cfa_offset 0
  53 0014 7047     	 bx lr
  54              	.L4:
  55 0016 00BF     	 .align 2
  56              	.L3:
  57 0018 00460050 	 .word 1342195200
  58              	 .cfi_endproc
  59              	.LFE129:
  61              	 .section .text.XMC_SCU_CLOCK_GetWdtClockSource,"ax",%progbits
  62              	 .align 2
  63              	 .thumb
  64              	 .thumb_func
  66              	XMC_SCU_CLOCK_GetWdtClockSource:
  67              	.LFB130:
1590:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1591:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1592:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1593:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Clock source for watchdog timer.\n
1594:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type XMC_SCU_CLOCK_WDTCLKSRC_t to identify the clock source.\n
1595:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_OFI - internal fast oscillator (fOFI)\n
1596:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_STDBY - backup standby clock (fSTDBY)\n
1597:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_PLL - PLL output clock (fPLL)
1598:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1599:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1600:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1601:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1602:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of WDT clock (fWDT).\n\n
1603:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The selected value is configured to the \a WDTSEL bits of \a WDTCLKCR register.
1604:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The watchdog timer counts at the frequency selected using this API. So the time for
1605:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * timeout or pre-warning of watchdog has to be calculated based on this selection.
1606:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1607:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1608:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_GetWdtClockFrequency() \n\n\n
1609:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1610:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source);
1611:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1612:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1613:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_WDTCLKSRC_t   Clock source configured for watchdog timer.\n
1614:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type XMC_SCU_CLOCK_WDTCLKSRC_t to identify the clock source.\n
1615:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_OFI - internal fast oscillator (fOFI)\n
1616:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_STDBY - backup standby clock (fSTDBY)\n
1617:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_PLL - PLL output clock (fPLL)
1618:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1619:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1620:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of clock used for watchdog timer.\n\n
1621:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a WDTSEL bits of \a WDTCLKCR register.
1622:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The time for timeout or pre-warning of watchdog has to be calculated based on 
1623:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the clock source selected.
1624:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1625:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
1626:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1627:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
1628:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
  68              	 .loc 1 1628 0
  69              	 .cfi_startproc
  70              	 
  71              	 
  72              	 
  73 0000 80B4     	 push {r7}
  74              	.LCFI4:
  75              	 .cfi_def_cfa_offset 4
  76              	 .cfi_offset 7,-4
  77 0002 00AF     	 add r7,sp,#0
  78              	.LCFI5:
  79              	 .cfi_def_cfa_register 7
1629:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
  80              	 .loc 1 1629 0
  81 0004 044B     	 ldr r3,.L7
  82 0006 5B6A     	 ldr r3,[r3,#36]
  83 0008 03F44033 	 and r3,r3,#196608
1630:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** }
  84              	 .loc 1 1630 0
  85 000c 1846     	 mov r0,r3
  86 000e BD46     	 mov sp,r7
  87              	.LCFI6:
  88              	 .cfi_def_cfa_register 13
  89              	 
  90 0010 5DF8047B 	 ldr r7,[sp],#4
  91              	.LCFI7:
  92              	 .cfi_restore 7
  93              	 .cfi_def_cfa_offset 0
  94 0014 7047     	 bx lr
  95              	.L8:
  96 0016 00BF     	 .align 2
  97              	.L7:
  98 0018 00460050 	 .word 1342195200
  99              	 .cfi_endproc
 100              	.LFE130:
 102              	 .section .text.XMC_SCU_CLOCK_GetExternalOutputClockSource,"ax",%progbits
 103              	 .align 2
 104              	 .thumb
 105              	 .thumb_func
 107              	XMC_SCU_CLOCK_GetExternalOutputClockSource:
 108              	.LFB133:
1631:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1632:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1633:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1634:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source   Source for standby clock.\n
1635:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_HIB_STDBYCLKSRC_t to identify the clock source.\n
1636:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSI - internal slow oscillator (fOSI) \n
1637:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSCULP - ultra low power osciallator (fULP) \n
1638:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1639:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1640:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1641:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1642:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of Standby clock (fSTDBY).\n\n
1643:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Clock source is configured by setting the \a STDBYSEL bits of \a HDCR register.
1644:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Hibernate domain should be enabled explicitly before using the API.
1645:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1646:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_GetStdbyClockSource(), XMC_SCU_HIB_EnableHibernateDomain() \n\n\n
1647:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1648:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source);
1649:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1650:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1651:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_HIB_RTCCLKSRC_t   Source clock of standby clock(fSTDBY).\n
1652:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_HIB_STDBYCLKSRC_t to identify the clock source.\n
1653:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSI - internal slow oscillator (fOSI) \n
1654:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSCULP - ultra low power osciallator (fULP) \n
1655:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1656:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1657:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of standby clock (fSTDBY).\n\n
1658:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a STDBYSEL bits of \a HDCR register.\n
1659:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1660:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetStandbyClockSource(), XMC_SCU_HIB_EnableHibernateDomain() \n\n\n
1661:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1662:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_HIB_RTCCLKSRC_t XMC_SCU_HIB_GetStdbyClockSource(void)
1663:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1664:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_HIB_RTCCLKSRC_t)(SCU_HIBERNATE->HDCR & SCU_HIBERNATE_HDCR_STDBYSEL_Msk);
1665:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1666:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1667:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1668:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1669:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of RTC clock.\n
1670:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_HIB_RTCCLKSRC_t to identify the clock source.\n
1671:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_OSI - internal slow oscillator(fOSI). \n
1672:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_ULP - ultra low power oscillator(fULP). \n
1673:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1674:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1675:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1676:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1677:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of RTC clock (fRTC).\n\n
1678:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a RCS bit of \a HDCR register.
1679:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * fULP needs external input powered by VBAT or VDDP. fOSI is internal clock.
1680:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The frequency of the clock will be 32.768 kHz.
1681:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1682:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_GetRtcClockSource() \n\n\n
1683:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1684:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source);
1685:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1686:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1687:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_HIB_RTCCLKSRC_t   Source of RTC clock.\n
1688:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_HIB_RTCCLKSRC_t to identify the clock source.\n
1689:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_OSI - internal slow oscillator(fOSI). \n
1690:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_ULP - ultra low power oscillator(fULP). \n
1691:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1692:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1693:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of RTC clock (fRTC).
1694:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a RCS bit of \a HDCR register.
1695:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The frequency of the clock will be 32.768 kHz.
1696:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1697:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetRtcClockSource() \n\n\n
1698:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1699:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_HIB_RTCCLKSRC_t XMC_SCU_HIB_GetRtcClockSource(void)
1700:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1701:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_HIB_RTCCLKSRC_t)(SCU_HIBERNATE->HDCR & SCU_HIBERNATE_HDCR_RCS_Msk);
1702:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1703:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1704:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1705:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1706:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock  Source of external clock output(fEXT).\n
1707:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *           \b Range: Use type @ref XMC_SCU_CLOCK_EXTOUTCLKSRC_t to identify the clock.\n
1708:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS - system clock fSYS. \n
1709:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_USB - USB clock fUSB. \n
1710:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL - PLL output fPLL. \n
1711:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC42
1712:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1713:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1714:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1715:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC41
1716:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1717:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1718:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1719:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1720:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1721:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1722:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of external clock out (fEXT).\n\n
1723:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value will be configured to \a ECKSEL bits of \a EXTCLKCR register.
1724:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1725:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
1726:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1727:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t clock);
1728:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1729:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1730:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_EXTOUTCLKSRC_t   Source of external clock output(fEXT).\n
1731:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *           \b Range: Use type @ref XMC_SCU_CLOCK_EXTOUTCLKSRC_t to identify the clock.\n
1732:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS - system clock fSYS. \n
1733:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_USB - USB clock fUSB. \n
1734:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL - PLL output fPLL. \n
1735:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC42
1736:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1737:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1738:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC41
1739:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1740:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1741:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1742:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1743:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of external clock output(fEXT).\n\n
1744:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
1745:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1746:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
1747:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1748:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
1749:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 109              	 .loc 1 1749 0
 110              	 .cfi_startproc
 111              	 
 112              	 
 113              	 
 114 0000 80B4     	 push {r7}
 115              	.LCFI8:
 116              	 .cfi_def_cfa_offset 4
 117              	 .cfi_offset 7,-4
 118 0002 00AF     	 add r7,sp,#0
 119              	.LCFI9:
 120              	 .cfi_def_cfa_register 7
1750:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 121              	 .loc 1 1750 0
 122 0004 054B     	 ldr r3,.L11
 123 0006 9B6A     	 ldr r3,[r3,#40]
 124 0008 DBB2     	 uxtb r3,r3
 125 000a 03F00303 	 and r3,r3,#3
 126 000e DBB2     	 uxtb r3,r3
1751:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** }
 127              	 .loc 1 1751 0
 128 0010 1846     	 mov r0,r3
 129 0012 BD46     	 mov sp,r7
 130              	.LCFI10:
 131              	 .cfi_def_cfa_register 13
 132              	 
 133 0014 5DF8047B 	 ldr r7,[sp],#4
 134              	.LCFI11:
 135              	 .cfi_restore 7
 136              	 .cfi_def_cfa_offset 0
 137 0018 7047     	 bx lr
 138              	.L12:
 139 001a 00BF     	 .align 2
 140              	.L11:
 141 001c 00460050 	 .word 1342195200
 142              	 .cfi_endproc
 143              	.LFE133:
 145              	 .section .text.XMC_SCU_CLOCK_GetECATClockDivider,"ax",%progbits
 146              	 .align 2
 147              	 .thumb
 148              	 .thumb_func
 150              	XMC_SCU_CLOCK_GetECATClockDivider:
 151              	.LFB144:
1752:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1753:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1754:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1755:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of clock for system PLL.\n
1756:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSPLLCLKSRC_t for identifying the clock source.\n
1757:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP - External High performance oscillat
1758:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI - Internal fast clock (fOFI).
1759:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1760:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1761:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1762:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1763:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of system PLL.\n\n
1764:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a VCOBYP bit of \a PLLCON0 register.
1765:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If \a XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP is selected, ensure that the high performance oscillator 
1766:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * enabled by using the API XMC_SCU_CLOCK_EnableHighPerformanceOscillator().
1767:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1768:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator()\n\n\n
1769:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1770:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source);
1771:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1772:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1773:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_OSCCLKSRC_t   Source of clock for system PLL.\n
1774:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSPLLCLKSRC_t for identifying the clock source.\n
1775:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP - External High performance oscillat
1776:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI - Internal fast clock (fOFI).
1777:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1778:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1779:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of system PLL clock (fPLL). \n\n
1780:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a VCOBYP bit of \a PLLCON0 register.
1781:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1782:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator(), XMC_SCU_CLOCK_SetSystemPllClockSource()\n\n\n
1783:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1784:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_SYSPLLCLKSRC_t XMC_SCU_CLOCK_GetSystemPllClockSource(void)
1785:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1786:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_SYSPLLCLKSRC_t)(SCU_PLL->PLLCON0 & SCU_PLL_PLLCON0_VCOBYP_Msk);
1787:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1788:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1789:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0) 
1790:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1791:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1792:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of ECAT clock.\n
1793:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_CLOCK_ECATCLKSRC_t to identify the clock source.\n
1794:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_USBPLL - USB PLL (fUSBPLL) as a source for ECAT c
1795:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL - Main PLL output (fPLL) as a source for E
1796:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1797:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1798:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1799:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1800:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of ECAT clock (fECAT).\n\n
1801:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
1802:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1803:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
1804:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1805:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
1806:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1807:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
1808:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****                       ((uint32_t)source);
1809:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1810:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1811:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1812:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_ECATCLKSRC_t   Source of ECAT clock.\n
1813:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_CLOCK_ECATCLKSRC_t to identify the clock source.\n
1814:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_USBPLL - USB PLL (fUSBPLL) as a source for ECAT c
1815:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL - Main PLL output (fPLL) as a source for E
1816:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1817:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1818:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of ECAT clock (fECAT).
1819:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a ECATSEL bit of \a ECATCLKCR register.
1820:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1821:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetRtcClockSource() \n\n\n
1822:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1823:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_ECATCLKSRC_t XMC_SCU_CLOCK_GetECATClockSource(void)
1824:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1825:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_ECATCLKSRC_t)((SCU_CLK->ECATCLKCR & SCU_CLK_ECATCLKCR_ECATSEL_Msk) >> SCU_C
1826:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1827:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
1828:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1829:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1830:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1831:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param divider   Ratio of fSYS clock source to the value of fSYS.
1832:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 1 to 256.
1833:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1834:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1835:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1836:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1837:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the ratio of system clock source to the value of system clock frequency.\n\n
1838:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured as \a SYSDIV bits of \a SYSCLKCR register. The divider value is 
1839:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * decremented by 1 before configuring.
1840:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1841:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemClockDivider(),  XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
1842:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1843:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider);
1844:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1845:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1846:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   Ratio of fSYS clock source to the value of fSYS.
1847:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 0 to 255.
1848:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1849:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1850:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the value of ratio between the source of system clock to the the value of system clock 
1851:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a SYSDIV bits of \a SYSCLKCR register.
1852:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1853:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockDivider(),  XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
1854:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1855:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockDivider(void)
1856:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1857:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) >> SCU_CLK_SYSCLKCR_SYSDIV_Po
1858:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1859:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1860:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1861:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1862:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio of fCCU clock source to the value of fCCU.
1863:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 1 or 2.\n
1864:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  1-> fCCU= fSYS \n
1865:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  2-> fCCU= fSYS/2.
1866:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1867:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1868:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1869:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1870:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the divider for CCU clock source. \n\n
1871:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Capture compare unit(CCU) can take either fSYS or fSYS/2 as the source of clock.
1872:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The configuration is set to \a CCUDIV bit of \a CCUCLKCR register. The CCUDIV bit is 1 bit wide.
1873:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1874:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1875:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetCcuClockDivider() \n\n\n
1876:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1877:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t ratio);
1878:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1879:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1880:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of fCCU clock source to the value of fCCU.
1881:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 0 or 1.\n
1882:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  0-> fCCU= fSYS \n
1883:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  1-> fCCU= fSYS/2.
1884:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1885:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1886:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio of CCU clock(fCCU) to system clock(fSYS).\n\n
1887:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a CCUDIV bit of \a CCUCLKCR register.
1888:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1889:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1890:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetCcuClockDivider() \n\n\n
1891:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1892:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCcuClockDivider(void)
1893:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1894:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >> SCU_CLK_CCUCLKCR_CCUDIV_Po
1895:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1896:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1897:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1898:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1899:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio between system clock(fSYS) and CPU clock(fCPU).
1900:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 or 2.\n
1901:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            1-> fCPU= fSYS. \n
1902:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            2-> fCPU= fSYS/2.
1903:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1904:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1905:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1906:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1907:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the CPU clock by setting the divider value for the system clock. \n\n
1908:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is set to the \a CPUDIV bit of \a CPUCLKCR register.
1909:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1910:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetCpuClockDivider() \n\n\n
1911:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1912:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t ratio);
1913:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1914:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1915:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   Ratio between system clock(fSYS) and CPU clock(fCPU).
1916:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 or 1.\n
1917:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            0-> fCPU= fSYS. \n
1918:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            1-> fCPU= fSYS/2.
1919:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1920:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1921:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between system clock(fSYS) and CPU clock(fCPU). \n\n
1922:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a CPUDIV bit of \a CPUCLKCR register.
1923:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1924:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetCpuClockDivider() \n\n\n
1925:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1926:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockDivider(void)
1927:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1928:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Po
1929:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1930:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1931:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1932:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1933:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio of peripheral clock source to the value of peripheral clock.\n
1934:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 or 2.\n
1935:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                1-> fPERIPH= fCPU.\n
1936:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                2-> fPERIPH= fCPU/2.
1937:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1938:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1939:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1940:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1941:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the peripheral clock by setting the divider for CPU clock(fCPU).\n\n
1942:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The peripheral clock can be equal to either fCPU or fCPU/2. The value is configured to \a PBDIV 
1943:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1944:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1945:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetPeripheralClockDivider() \n\n\n
1946:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1947:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t ratio);
1948:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1949:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1950:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of peripheral clock source to the value of peripheral clock.\n
1951:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 or 1.\n
1952:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                0-> fPERIPH= fCPU.\n
1953:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                1-> fPERIPH= fCPU/2.
1954:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1955:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1956:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio of CPU clock(fCPU) to peripheral clock(fPERIPH).\n\n
1957:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a PBDIV bit of \a PBCLKCR register.
1958:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1959:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetPeripheralClockDivider() \n\n\n
1960:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1961:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetPeripheralClockDivider(void)
1962:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1963:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos);
1964:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1965:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1966:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1967:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1968:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio   Ratio of PLL output clock(fPLL) to USB clock(fUSB).
1969:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 8.
1970:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1971:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1972:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1973:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1974:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the USB clock(fUSB) by setting the USB clock divider. \n\n
1975:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is decremented by 1 before setting it to \a USBDIV bits of \a USBCLKCR register.
1976:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1977:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1978:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetUsbClockDivider(), XMC_SCU_CLOCK_SetUsbClockSource() \n\n\n
1979:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1980:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t ratio);
1981:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1982:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1983:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1984:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of PLL output clock(fPLL) to USB clock(fUSB).
1985:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 7.
1986:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1987:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1988:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between PLL output frequency(fPLL) and USB clock(fUSB).\n\n
1989:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a USBDIV bit of \a USBCLKCR register.
1990:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1991:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbClockSource() \n\n\n
1992:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1993:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetUsbClockDivider(void)
1994:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
1995:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >> SCU_CLK_USBCLKCR_USBDIV_Po
1996:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** }
1997:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1998:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
1999:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2000:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
2001:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2002:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2003:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio Ratio of PLL clock(fPLL) to EBU clock(fEBU).\n
2004:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 64.
2005:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2006:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2007:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2008:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2009:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the EBU clock(fEBU) by setting the divider value.\n\n
2010:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The clock divider is configured to the \a EBUDIV bits of \a EBUCLKCR register.
2011:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2012:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetEbuClockDivider() \n\n\n
2013:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2014:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t ratio);
2015:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2016:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2017:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2018:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of PLL clock(fPLL) to EBU clock(fEBU).\n
2019:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 63.
2020:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2021:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2022:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between PLL clock(fPLL) and EBU clock(fEBU).\n\n
2023:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a EBUDIV bits of \a EBUCLKCR register.
2024:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2025:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetEbuClockDivider() \n\n\n
2026:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2027:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetEbuClockDivider(void)
2028:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2029:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >> SCU_CLK_EBUCLKCR_EBUDIV_Po
2030:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2031:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
2032:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2033:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2034:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2035:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio between the source of WDT clock and the WDT clock.\n
2036:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 256.
2037:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2038:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2039:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2040:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2041:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the WDT clock by setting the clock divider for the WDT clock source.\n\n
2042:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a WDTDIV bits of \a WDTCLKCR register. The value of divider
2043:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * is decremented by 1 before configuring. Check the selected clock source for the WDT clock
2044:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * before configuring the divider using the API XMC_SCU_CLOCK_SetWdtClockSource().
2045:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2046:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockSource(), XMC_SCU_CLOCK_GetWdtClockDivider() \n\n\n
2047:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2048:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t ratio);
2049:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2050:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2051:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2052:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the source of WDT clock and the WDT clock.\n
2053:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 255.
2054:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2055:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2056:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between the WDT parent clock and the WDT clock. \n\n
2057:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a WDTDIV bits of \a WDTCLKCR register.
2058:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Ensure that the WDT parent clock is considered before using the value of
2059:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * the divider value.
2060:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2061:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockSource(), XMC_SCU_CLOCK_SetWdtClockDivider() \n\n\n
2062:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2063:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetWdtClockDivider(void)
2064:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2065:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >> SCU_CLK_WDTCLKCR_WDTDIV_Po
2066:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2067:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2068:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2069:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2070:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio   Ratio between the external output parent clock selected and the output clock.\n
2071:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 512.
2072:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2073:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2074:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2075:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2076:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the external output clock by setting the divider value for the parent clock. \n\n
2077:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value will be configured to \a ECKDIV bits of \a EXTCLKCR register.
2078:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The divider value is decremented by 1 before storing it to the bit fields.
2079:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Ensure that the source of external output clock is configured appropriately using the API
2080:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource().
2081:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2082:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_GetExternalOutputClockDivider() \n\n
2083:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2084:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t ratio);
2085:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2086:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2087:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2088:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the external output parent clock selected and the output clock.\
2089:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 511.
2090:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2091:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2092:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the divider value applied on parent clock before the generation of external output cloc
2093:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a EXTDIV bit of \a EXTCLKCR register.
2094:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2095:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
2096:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2097:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetExternalOutputClockDivider(void)
2098:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
2099:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >> SCU_CLK_EXTCLKCR_ECKDIV_Po
2100:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** }
2101:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2102:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)
2103:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2104:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2105:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio   Ratio between the source of ECAT clock and the ECAT clock.\n
2106:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 4.
2107:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2108:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2109:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2110:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2111:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the ECAT clock by setting the clock divider for the ECAT clock source.\n\n
2112:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a ECADIV bits of \a ECATCLKCR register. The value of divider
2113:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * is decremented by 1 before configuring.
2114:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2115:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetECATClockSource(), XMC_SCU_CLOCK_GetECATClockDivider() \n\n\n
2116:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2117:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider);
2118:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2119:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2120:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2121:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the source of ECAT clock and the ECAT clock.\n
2122:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 3.
2123:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2124:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2125:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between the ECAT parent clock and the ECAT clock. \n\n
2126:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a ECADIV bits of \a ECATCLKCR register.
2127:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2128:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetECATClockSource(), XMC_SCU_CLOCK_SetECATClockDivider() \n\n\n
2129:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2130:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetECATClockDivider(void)
2131:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 152              	 .loc 1 2131 0
 153              	 .cfi_startproc
 154              	 
 155              	 
 156              	 
 157 0000 80B4     	 push {r7}
 158              	.LCFI12:
 159              	 .cfi_def_cfa_offset 4
 160              	 .cfi_offset 7,-4
 161 0002 00AF     	 add r7,sp,#0
 162              	.LCFI13:
 163              	 .cfi_def_cfa_register 7
2132:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->ECATCLKCR & SCU_CLK_ECATCLKCR_ECADIV_Msk) >> SCU_CLK_ECATCLKCR_ECADIV
 164              	 .loc 1 2132 0
 165 0004 044B     	 ldr r3,.L15
 166 0006 9B6B     	 ldr r3,[r3,#56]
 167 0008 03F00303 	 and r3,r3,#3
2133:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** }
 168              	 .loc 1 2133 0
 169 000c 1846     	 mov r0,r3
 170 000e BD46     	 mov sp,r7
 171              	.LCFI14:
 172              	 .cfi_def_cfa_register 13
 173              	 
 174 0010 5DF8047B 	 ldr r7,[sp],#4
 175              	.LCFI15:
 176              	 .cfi_restore 7
 177              	 .cfi_def_cfa_offset 0
 178 0014 7047     	 bx lr
 179              	.L16:
 180 0016 00BF     	 .align 2
 181              	.L15:
 182 0018 00460050 	 .word 1342195200
 183              	 .cfi_endproc
 184              	.LFE144:
 186              	 .section .text.XMC_SCU_CLOCK_GetSystemClockFrequency,"ax",%progbits
 187              	 .align 2
 188              	 .thumb
 189              	 .thumb_func
 191              	XMC_SCU_CLOCK_GetSystemClockFrequency:
 192              	.LFB145:
2134:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
2135:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2136:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2137:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2138:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2139:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2140:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2141:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables the high precision oscillator by configuring external crystal mode.\n\n
2142:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API configures \a MODE bits of \a OSCHPCTRL register to 0, there by configuring the 
2143:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * external clock input. 
2144:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2145:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableHighPerformanceOscillator() \n\n\n
2146:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2147:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void);
2148:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2149:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2150:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2151:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2152:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2153:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables the high precision oscillator by disabling the external oscillator.\n\n
2154:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API configures \a MODE bits of \a OSCHPCTRL register to 1, there by disabling the 
2155:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * external oscillator. 
2156:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2157:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator() \n\n\n
2158:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2159:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void);
2160:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2161:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2162:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2163:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2164:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2165:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2166:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables ultra low power oscillator(ULP). \n\n
2167:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It enables the hibernate domain, configures the ultra low power oscillator
2168:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * uisng the \a MODE bits of the \a OSCULCTRL register. The \a Mode bits will be
2169:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * reset to 0 to enable the low power oscillator. Mirror register update delays 
2170:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * are handled internally.
2171:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2172:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableLowPowerOscillator() \n\n\n
2173:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2174:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableLowPowerOscillator(void);
2175:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2176:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2177:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2178:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2179:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2180:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2181:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables ultra low power oscillator.\n\n
2182:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is disabled by setting the \a MODE bits of \a OSCULCTRL register to value 2.
2183:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * By default on power up, the ultra low power osciallator is disabled.
2184:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2185:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillator() \n\n\n
2186:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2187:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableLowPowerOscillator(void);
2188:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2189:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2190:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2191:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   System frequency in Hertz.\n
2192:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: clock frequency in Hertz. Range of the value depends on the source clock fr
2193:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *            and the configured values of dividers.
2194:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2195:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2196:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the value of system PLL output clock frequency(fPLL).\n\n
2197:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API uses \a N-DIV,  \a P-DIV,  \a K1-DIV,  \a K2-DIV bits information from \a PLLCON1 regist
2198:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * VCOBYP bit information from \a PLLCON0 register. It calculates frequency of system pll clock usi
2199:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If normal Mode : fPLL = (fOSC * N)/(P * K2).
2200:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If prescaler mode: fPLL = fOSC/ K1.
2201:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2202:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
2203:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2204:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void);
2205:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2206:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2207:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2208:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Source clock used for deriving system clock.\n
2209:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: fOHP frequency if external high precision frequency is used. \n
2210:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    fOFI fast internal clock frequency.
2211:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2212:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2213:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the value of the input clock frequency for deriving the system clock.
2214:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API retrieves frequency of system PLL input clock (fPLLin).
2215:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Based on \a PINSEL bits information from \a PLLCON2 register, the parent clock source is obtaine
2216:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * This bit field specifies if fOHP or fOFI is used for deriving system clock.
2217:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * System clock frequency is obtained by dividing the source clock frequency with different divider
2218:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2219:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemPllClockFrequency() \n\n\n
2220:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2221:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void);
2222:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2223:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2224:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2225:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   USB PLL output clock frequency.
2226:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2227:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2228:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the frequency of USB PLL output clock (fUSBPLL).\n\n
2229:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * It obtains the \a VCOBYP bits information from \a USBPLLCON register and decides if USB PLL mode
2230:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If USB PLL mode is used, the USB clock frequency is obtained by dividing the source clock by USB
2231:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The frequency is obtained using following formula:\n
2232:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If Normal Mode : fUSBPLL = (fOSC * N)/(P * 2).\n
2233:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * If Prescaler mode: fPLL = fOSC.
2234:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2235:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency() \n\n\n
2236:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2237:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void);
2238:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** 
2239:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2240:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2241:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   System clock frequency in Hertz.
2242:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2243:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2244:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the frequency of system clock (fSYS).\n\n
2245:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value obtained by dividing \a CPUDIV bits information of \a CPUCLKCR register with SystemCor
2246:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * Based on these values, fSYS clock frequency is derived using the following formula:\n
2247:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * fSYS = fCPU << CPUDIV.
2248:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2249:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
2250:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2251:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
2252:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** {
 193              	 .loc 1 2252 0
 194              	 .cfi_startproc
 195              	 
 196              	 
 197              	 
 198 0000 80B4     	 push {r7}
 199              	.LCFI16:
 200              	 .cfi_def_cfa_offset 4
 201              	 .cfi_offset 7,-4
 202 0002 00AF     	 add r7,sp,#0
 203              	.LCFI17:
 204              	 .cfi_def_cfa_register 7
2253:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h ****   return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_
 205              	 .loc 1 2253 0
 206 0004 064B     	 ldr r3,.L19
 207 0006 1A68     	 ldr r2,[r3]
 208 0008 064B     	 ldr r3,.L19+4
 209 000a 1B69     	 ldr r3,[r3,#16]
 210 000c 03F00103 	 and r3,r3,#1
 211 0010 02FA03F3 	 lsl r3,r2,r3
2254:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc4_scu.h **** }
 212              	 .loc 1 2254 0
 213 0014 1846     	 mov r0,r3
 214 0016 BD46     	 mov sp,r7
 215              	.LCFI18:
 216              	 .cfi_def_cfa_register 13
 217              	 
 218 0018 5DF8047B 	 ldr r7,[sp],#4
 219              	.LCFI19:
 220              	 .cfi_restore 7
 221              	 .cfi_def_cfa_offset 0
 222 001c 7047     	 bx lr
 223              	.L20:
 224 001e 00BF     	 .align 2
 225              	.L19:
 226 0020 00000000 	 .word SystemCoreClock
 227 0024 00460050 	 .word 1342195200
 228              	 .cfi_endproc
 229              	.LFE145:
 231              	 .section .text.XMC_SCU_CLOCK_GetCpuClockFrequency,"ax",%progbits
 232              	 .align 2
 233              	 .thumb
 234              	 .thumb_func
 236              	XMC_SCU_CLOCK_GetCpuClockFrequency:
 237              	.LFB158:
 238              	 .file 2 "E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc/xmc_scu.h"
   1:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**
   2:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @file xmc_scu.h
   3:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @date 2016-03-09
   4:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
   5:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @cond
   6:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
   7:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
   9:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * All rights reserved.                        
  11:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *                                             
  12:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * following conditions are met:   
  14:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *                                                                              
  15:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * disclaimer.                        
  17:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * 
  18:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * 
  21:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * products derived from this software without specific prior written permission.                  
  23:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *                                                                              
  24:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *                                                                              
  32:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
  35:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
  36:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Change History
  37:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * --------------
  38:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
  39:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * 2015-02-20:
  40:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Initial <br>
  41:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
  42:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * 2015-05-20:
  43:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Documentation improved <br>
  44:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *     - XMC_ASSERT() hanging issues have fixed for XMC4 devices. <br>
  45:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
  46:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * 2015-06-20:
  47:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Removed STATIC_INLINE property for the below APIs and declared as void
  49:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *       XMC_SCU_INTERRUPT_EnableEvent, XMC_SCU_INTERRUPT_DisableEvent,
  50:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *       XMC_SCU_INTERRUPT_TriggerEvent, XMC_SCU_INTERUPT_GetEventStatus,
  51:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *       XMC_SCU_INTERUPT_ClearEventStatus
  52:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
  53:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * 2015-11-30:
  54:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Documentation improved <br>
  55:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *      
  56:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * 2016-03-09:
  57:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *     - Optimization of write only registers
  58:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *      
  59:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @endcond 
  60:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
  61:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  */
  62:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** #ifndef XMC_SCU_H
  63:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** #define XMC_SCU_H
  64:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  
  65:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
  66:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * HEADER FILES
  67:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
  68:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** #include <xmc_common.h>
  69:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** 
  70:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**
  71:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @addtogroup XMClib XMC Peripheral Library
  72:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @{
  73:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  */
  74:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  
  75:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**
  76:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @addtogroup SCU
  77:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @brief System Control Unit(SCU) driver for XMC microcontroller family.
  78:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
  79:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * System control unit is the SoC power, reset and a clock manager with additional responsibility o
  80:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * providing system stability protection and other auxiliary functions.<br>
  81:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * SCU provides the following features,
  82:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Power control
  83:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4 
  84:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Hibernate control 
  85:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
  86:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Reset control
  87:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Clock control
  88:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Miscellaneous control(boot mode, system interrupts etc.)<br><br>
  89:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
  90:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The SCU driver is divided in to clock control logic, reset control logic, system interrupt contr
  91:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4
  92:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * , hibernate control logic, trap control logic, parity control logic 
  93:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
  94:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * and miscellaneous control logic.<br>
  95:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
  96:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Clock driver features:
  97:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows clock configuration using the structure XMC_SCU_CLOCK_CONFIG_t and API XMC_SCU_CLOCK_I
  98:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4
  99:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides structure XMC_SCU_CLOCK_SYSPLL_CONFIG_t for configuring the system PLL
 100:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows selection of clock source for system PLL, XMC_SCU_CLOCK_GetSystemPllClockSource()
 101:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides APIs for configuring different module clock frequencies XMC_SCU_CLOCK_SetWdtClockDiv
 102:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows selection of clock source for external output, XMC_SCU_CLOCK_SetExternalOutputClockSou
 103:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides APIs for enabling external high power oscillator and ultra low power oscillator, XMC
 104:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides APIs for getting various clock frequencies XMC_SCU_CLOCK_GetPeripheralClockFrequency
 105:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  XMC_SCU_CLOCK_GetCpuClockFrequency(), XMC_SCU_CLOCK_GetSystemClockFrequency()<br>
 106:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 107:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC1
 108:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows selection of peripheral clock frequency, XMC_SCU_CLOCK_SetFastPeripheralClockSource()
 109:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides API to get the peripheral clock frequency, XMC_SCU_CLOCK_GetFastPeripheralClockFrequ
 110:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 111:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 112:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Reset driver features:
 113:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4
 114:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows to handle peripheral reset XMC_SCU_RESET_AssertPeripheralReset(), XMC_SCU_RESET_Deasse
 115:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows configuration of NMI generation for selected events, XMC_SCU_INTERRUPT_EnableNmiReques
 116:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 117:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC1
 118:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows to trigger device reset XMC_SCU_RESET_AssertMasterReset()
 119:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows to configure multiple sources for reset, XMC_SCU_RESET_EnableResetRequest()
 120:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  \endif <br>
 121:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 122:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Interrupt driver features:
 123:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides APIs for enabling/ disabling interrupt event generation XMC_SCU_INTERRUPT_EnableEven
 124:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  XMC_SCU_INTERRUPT_DisableEvent()
 125:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides API for registering callback function for events XMC_SCU_INTERRUPT_SetEventHandler()
 126:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 127:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4
 128:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Hibernate driver features:
 129:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows configuration of hibernate domain XMC_SCU_HIB_EnableHibernateDomain(), XMC_SCU_HIB_Dis
 130:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows selection of standby clock source, XMC_SCU_HIB_SetStandbyClockSource()
 131:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows selection of RTC clock source, XMC_SCU_HIB_SetRtcClockSource()
 132:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Provides API for enabling slow internal clock used for backup clock, XMC_SCU_HIB_EnableIntern
 133:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 134:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Trap driver features:
 135:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows handling of trap XMC_SCU_TRAP_Enable(), XMC_SCU_TRAP_GetStatus(), XMC_SCU_TRAP_Trigger
 136:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 137:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Parity driver features:
 138:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Parity error generated by on-chip RAM can be monitored, XMC_SCU_PARITY_Enable(), XMC_SCU_PARI
 139:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows configuration of trap generation on detection of parity error, XMC_SCU_PARITY_EnableTr
 140:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 141:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Power driver features:
 142:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows to power the USB module XMC_SCU_POWER_EnableUsb(), XMC_SCU_POWER_DisableUsb()
 143:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 144:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 145:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Miscellaneous features:
 146:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows to trigger multiple capture compare unit(CCU) channels to be started together XMC_SCU_
 147:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC4
 148:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Enables configuration of out of range comparator (ORC) XMC_SCU_EnableOutOfRangeComparator()
 149:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Enables configuration of die temperature sensor XMC_SCU_EnableTemperatureSensor(), XMC_SCU_Ca
 150:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Enables configuration of device boot mode XMC_SCU_SetBootMode()<br>
 151:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 152:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  \if XMC1
 153:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Enables configuration of die temperature sensor XMC_SCU_StartTempMeasurement(), XMC_SCU_SetRa
 154:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows configuring supply monitor unit using the structure XMC_SCU_SUPPLYMONITOR_t and API XM
 155:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * -# Allows handling of protected bits XMC_SCU_LockProtectedBits(), XMC_SCU_UnlockProtectedBits()<
 156:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  \endif
 157:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @{
 158:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 159:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  
 160:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
 161:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * MACROS
 162:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
 163:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** 
 164:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
 165:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * ENUMS
 166:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
 167:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 168:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *  Defines the status of SCU API execution, used to verify the SCU related API calls.
 169:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 170:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** typedef enum XMC_SCU_STATUS 
 171:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** {
 172:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****   XMC_SCU_STATUS_OK   = 0UL, /**< SCU related operation successfully completed.*/
 173:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****   XMC_SCU_STATUS_ERROR,      /**< SCU related operation failed. When API cannot fulfill request, th
 174:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****   XMC_SCU_STATUS_BUSY,       /**< Cannot execute the SCU related operation request because
 175:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****                                   another operation is in progress. \a XMC_SCU_STATUS_BUSY is retur
 176:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****                                   processing another request. */
 177:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** } XMC_SCU_STATUS_t;
 178:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** 
 179:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** 
 180:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
 181:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * DATA TYPES
 182:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
 183:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** 
 184:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 185:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Function pointer type used for registering callback functions on SCU event occurrence.
 186:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 187:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** typedef void (*XMC_SCU_INTERRUPT_EVENT_HANDLER_t)(void);
 188:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** 
 189:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
 190:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * DEVICE EXTENSIONS
 191:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
 192:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** 
 193:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** #if (UC_FAMILY == XMC1)
 194:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** #include <xmc1_scu.h>
 195:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** #elif (UC_FAMILY == XMC4)
 196:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** #include <xmc4_scu.h>
 197:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** #else
 198:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** #error "Unspecified chipset"
 199:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** #endif
 200:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** 
 201:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**************************************************************************************************
 202:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * API Prototypes
 203:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  **************************************************************************************************
 204:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** 
 205:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** #ifdef __cplusplus
 206:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** extern "C" {
 207:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** #endif
 208:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** 
 209:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** 
 210:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 211:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 212:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @param trigger    CCU slices to be triggered synchronously via software. The value is a bitmask 
 213:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *                    in the register CCUCON. <br>
 214:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *                    \b Range: Use type @ref XMC_SCU_CCU_TRIGGER_t for bitmask of individual CCU s
 215:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *                    combined using \a OR operation.
 216:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 217:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 218:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 219:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 220:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Generates active edge(low to high) trigger for multiple CCU units at the same time.\n\n
 221:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Before executing this API, all the required CCU timers should configure external start.
 222:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The edge of the start signal should be selected as active edge.
 223:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The input signal for the CCU slice should be selected as SCU input.
 224:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The above mentioned configurations can be made using the CCU LLD API XMC_CCU4_SLICE_StartConfig(
 225:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * CCU timer slice should be started using XMC_CCU4_SLICE_StartTimer() before triggering 
 226:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * the timer using this API.<BR>
 227:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 228:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 229:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 230:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
 231:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** {
 232:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****   SCU_GENERAL->CCUCON |= (uint32_t)trigger;
 233:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** }
 234:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** 
 235:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 236:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 237:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @param trigger  CCU slices to be triggered synchronously via software. The value is a bitmask of
 238:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *                    in the register CCUCON. <br>
 239:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *                    \b Range: Use type @ref XMC_SCU_CCU_TRIGGER_t for bitmask of individual CCU s
 240:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *                    combined using \a OR operation.
 241:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 242:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 243:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 244:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 245:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Generates passive edge(high to low) trigger for multiple CCU units at the same time.\n\n
 246:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Before executing this API, all the required CCU timers should configure external start.
 247:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The edge of the start signal should be selected as passive edge.
 248:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The input signal for the CCU slice should be selected as SCU input.
 249:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The above mentioned configurations can be made using the CCU LLD API XMC_CCU4_SLICE_StartConfig(
 250:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * CCU timer slice should be started using XMC_CCU4_SLICE_StartTimer() before triggering 
 251:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * the timer using this API.<BR>
 252:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 253:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerHigh()\n\n\n
 254:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 255:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE void XMC_SCU_SetCcuTriggerLow(const uint32_t trigger)
 256:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** {
 257:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****   SCU_GENERAL->CCUCON &= (uint32_t)~trigger;
 258:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** }
 259:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** 
 260:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 261:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 262:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @param config Pointer to structure holding the clock prescaler values and divider values for 
 263:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *                configuring clock generators and clock tree.\n
 264:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *                \b Range: Configure the members of structure @ref XMC_SCU_CLOCK_CONFIG_t for vari
 265:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *                parameters of clock setup.
 266:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 267:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 268:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 269:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 270:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Initializes clock generators and clock tree.\n\n
 271:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC1
 272:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Peripheral clock and system clock are configured based on the input configuration \a config.
 273:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The system clock frequency is tuned by configuring the FDIV and IDIV values of CLKCR register.
 274:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The values of FDIV and IDIV can be provided as part of input configuration.
 275:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The PCLK divider determines the ratio of peripheral clock to the system clock. 
 276:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The source of RTC clock is set based on the input configuration. 
 277:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \a SystemCoreClock variable will be updated with the value of
 278:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * system clock frequency. Access to protected bit fields are handled internally.
 279:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 280:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \if XMC4
 281:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Enables the high precision oscillator(fOHP) input and configures the system and peripheral clock
 282:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Based on the system clock source selected in \a config, either fPLL or fOFI will be chosen as sy
 283:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Based on PLL mode(normal or prescaler mode) used, PLL ramps up in steps to achieve target freque
 284:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The clock dividers for CPU, CCU and peripheral clocks will be set based on the input configurati
 285:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The \a SystemCoreClock variable is set with the value of system clock frequency.
 286:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \endif
 287:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 288:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GetCpuClockFrequency() \n\n\n
 289:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 290:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config);
 291:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** 
 292:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 293:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 294:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @param event  Bit mask of the event to enable. \b Range: Use type @ref XMC_SCU_INTERRUPT_EVENT_t
 295:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 296:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 297:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 298:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 299:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 300:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Enables the generation of interrupt for the input events.\n\n
 301:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The events are enabled by setting the respective bit fields in the SRMSK register. \n
 302:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Note: User should separately enable the NVIC node responsible for handling the SCU interrupt.
 303:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The interrupt will be generated when the respective event occurs.
 304:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 305:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * NVIC_EnableIRQ(), XMC_SCU_INTERRUPT_DisableEvent()\n\n\n
 306:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 307:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event);
 308:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** 
 309:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** 
 310:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 311:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 312:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @param event  Bit mask of the event to disable. \b Range: Use type @ref XMC_SCU_INTERRUPT_EVENT_
 313:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 314:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 315:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 316:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 317:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 318:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Disables generation of interrupt on occurrence of the input event.\n\n
 319:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The events are disabled by resetting the respective bit fields in the SRMSK register. \n
 320:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 321:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * NVIC_DisableIRQ(), XMC_SCU_INTERRUPT_EnableEvent()\n\n\n
 322:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 323:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event);
 324:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** 
 325:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 326:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 327:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @param event Bit mask of the event to be triggered. \b Range: Use type @ref XMC_SCU_INTERRUPT_EV
 328:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 329:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 330:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 331:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 332:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 333:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Triggers the event as if the hardware raised it.\n\n
 334:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Event will be triggered by setting the respective bitfield in the SRSET register.\n
 335:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Note: User should enable the NVIC node that handles the respective event for interrupt generatio
 336:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 337:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * NVIC_EnableIRQ(), XMC_SCU_INTERUPT_GetEventStatus(), XMC_SCU_INTERRUPT_ClearEventStatus() \n\n\n
 338:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 339:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t  event);
 340:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** 
 341:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 342:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return uint32_t  Status of the SCU events.
 343:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 344:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 345:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Provides the status of all SCU events.\n\n
 346:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The status is read from the SRRAW register. To check the status of a particular 
 347:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * event, the returned value should be masked with the bit mask of the event. The bitmask
 348:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * of events can be obtained using the type @ref XMC_SCU_INTERRUPT_EVENT_t. Multiple events'
 349:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * status can be checked by combining the bit masks using \a OR operation. 
 350:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * After detecting the event, the event status should be cleared using software to detect the event
 351:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 352:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_INTERRUPT_ClearEventStatus(), XMC_SCU_INTERRUPT_TriggerEvent(), XMC_SCU_INTERRUPT_SetEve
 353:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 354:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void);
 355:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** 
 356:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 357:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 358:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @param event  Bit mask of the events to clear. \b Range: Use type @ref XMC_SCU_INTERRUPT_EVENT_t
 359:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 360:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 361:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None
 362:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 363:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 364:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Clears the event status bit in SRRAW register.\n\n
 365:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The events are cleared by writing value 1 to their bit positions in the SRCLR register.
 366:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The API can be used when polling method is used. After detecting the event, the event status
 367:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * should be cleared using software to detect the event again.
 368:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 369:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 370:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_INTERUPT_GetEventStatus(), XMC_SCU_INTERRUPT_TriggerEvent() \n\n\n
 371:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 372:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event);
 373:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** 
 374:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 375:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 376:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return uint32_t  Status representing the reason for device reset.
 377:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 378:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 379:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Provides the value representing the reason for device reset.\n\n
 380:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The return value is an encoded word, which can indicate multiple reasons for the last reset. Eac
 381:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * returned word is representative of a last reset cause. The returned value should be appropriatel
 382:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * the cause of reset. 
 383:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The cause of the last reset gets automatically stored in 
 384:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * the \a SCU_RSTSTAT register. The reset status shall be reset after each
 385:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * startup in order to ensure consistent source indication after the next reset.
 386:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \b Range: The type @ref XMC_SCU_RESET_REASON_t can be used to get the bit masks of the reset cau
 387:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 388:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 389:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_RESET_ClearDeviceResetReason() \n\n\n
 390:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 391:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_RESET_GetDeviceResetReason(void)
 392:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** {
 393:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****   return ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_RSTSTAT_Msk);
 394:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** }
 395:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 396:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return None 
 397:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 398:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 399:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Clears the reset reason bits in the reset status register. \n\n
 400:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Clearing of the reset status information in the \a SCU_RSTSTAT register via register bit \a RSTC
 401:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * recommended to ensure a clear indication of the cause of next reset.
 402:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 403:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 404:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_RESET_GetDeviceResetReason() \n\n\n
 405:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 406:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE void XMC_SCU_RESET_ClearDeviceResetReason(void)
 407:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** {
 408:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****   /* Clear RSTSTAT.RSTSTAT bitfield */
 409:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****   SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_RSCLR_Msk;
 410:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** }
 411:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  
 412:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** /**
 413:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * @return uint32_t  Value of CPU clock frequency.
 414:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 415:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Description</b><br>
 416:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * Provides the vlaue of CPU clock frequency.\n\n
 417:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The value is stored in a global variable \a \b SystemCoreClock.
 418:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * It is updated when the clock configuration is done using the SCU LLD APIs.
 419:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * The value represents the frequency of clock used for CPU operation.
 420:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \b Range: Value is of type uint32_t, and gives the value of frequency in Hertz.
 421:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  *
 422:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 423:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 424:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****  */
 425:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
 426:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** {
 239              	 .loc 2 426 0
 240              	 .cfi_startproc
 241              	 
 242              	 
 243              	 
 244 0000 80B4     	 push {r7}
 245              	.LCFI20:
 246              	 .cfi_def_cfa_offset 4
 247              	 .cfi_offset 7,-4
 248 0002 00AF     	 add r7,sp,#0
 249              	.LCFI21:
 250              	 .cfi_def_cfa_register 7
 427:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h ****   return SystemCoreClock;
 251              	 .loc 2 427 0
 252 0004 034B     	 ldr r3,.L23
 253 0006 1B68     	 ldr r3,[r3]
 428:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/XMCLib/inc\xmc_scu.h **** }
 254              	 .loc 2 428 0
 255 0008 1846     	 mov r0,r3
 256 000a BD46     	 mov sp,r7
 257              	.LCFI22:
 258              	 .cfi_def_cfa_register 13
 259              	 
 260 000c 5DF8047B 	 ldr r7,[sp],#4
 261              	.LCFI23:
 262              	 .cfi_restore 7
 263              	 .cfi_def_cfa_offset 0
 264 0010 7047     	 bx lr
 265              	.L24:
 266 0012 00BF     	 .align 2
 267              	.L23:
 268 0014 00000000 	 .word SystemCoreClock
 269              	 .cfi_endproc
 270              	.LFE158:
 272              	 .comm event_handler_list,128,4
 273              	 .section .text.XMC_SCU_lDelay,"ax",%progbits
 274              	 .align 2
 275              	 .thumb
 276              	 .thumb_func
 278              	XMC_SCU_lDelay:
 279              	.LFB160:
 280              	 .file 3 "../Libraries/XMCLib/src/xmc4_scu.c"
   1:../Libraries/XMCLib/src/xmc4_scu.c **** /**
   2:../Libraries/XMCLib/src/xmc4_scu.c ****  * @file xmc4_scu.c
   3:../Libraries/XMCLib/src/xmc4_scu.c ****  * @date 2016-04-06
   4:../Libraries/XMCLib/src/xmc4_scu.c ****  *
   5:../Libraries/XMCLib/src/xmc4_scu.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc4_scu.c ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc4_scu.c ****  *
   9:../Libraries/XMCLib/src/xmc4_scu.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc4_scu.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc4_scu.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc4_scu.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc4_scu.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc4_scu.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc4_scu.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc4_scu.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc4_scu.c ****  * 
  18:../Libraries/XMCLib/src/xmc4_scu.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc4_scu.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc4_scu.c ****  * 
  21:../Libraries/XMCLib/src/xmc4_scu.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc4_scu.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc4_scu.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc4_scu.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc4_scu.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc4_scu.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc4_scu.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc4_scu.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc4_scu.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc4_scu.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc4_scu.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc4_scu.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc4_scu.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  36:../Libraries/XMCLib/src/xmc4_scu.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc4_scu.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  39:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc4_scu.c ****  *      
  42:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - XMC_ASSERT() hanging issues have fixed.  <br>
  44:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Line indentation aligned with 120 characters. <br>
  45:../Libraries/XMCLib/src/xmc4_scu.c ****  *     
  46:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2015-06-20:
  47:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - XMC_SCU_INTERRUPT_EnableEvent,XMC_SCU_INTERRUPT_DisableEvent,
  48:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - XMC_SCU_INTERRUPT_TriggerEvent,XMC_SCU_INTERUPT_GetEventStatus,
  49:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - XMC_SCU_INTERRUPT_ClearEventStatus are added
  50:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added Weak implementation for OSCHP_GetFrequency()
  51:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  52:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2015-11-30:
  53:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Documentation improved <br>
  54:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Following API functionalities are improved
  55:../Libraries/XMCLib/src/xmc4_scu.c ****  *       XMC_SCU_CLOCK_GatePeripheralClock, XMC_SCU_CLOCK_UngatePeripheralClock, XMC_SCU_CLOCK_IsPe
  56:../Libraries/XMCLib/src/xmc4_scu.c ****  *       XMC_SCU_RESET_AssertPeripheralReset, XMC_SCU_RESET_DeassertPeripheralReset, XMC_SCU_RESET_
  57:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  58:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2015-12-08:
  59:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - XMC_SCU_GetTemperature renamed to XMC_SCU_GetTemperatureMeasurement
  60:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  61:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2016-03-09:
  62:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Optimize write only registers
  63:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added XMC_SCU_HIB_SetPinMode
  64:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added XMC_SCU_HIB_GetHibernateControlStatus,
  65:../Libraries/XMCLib/src/xmc4_scu.c ****  *             XMC_SCU_HIB_GetEventStatus, XMC_SCU_HIB_ClearEventStatus, XMC_SCU_HIB_TriggerEvent, 
  66:../Libraries/XMCLib/src/xmc4_scu.c ****  *             XMC_SCU_HIB_EnableEvent, XMC_SCU_HIB_DisableEvent
  67:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added XMC_SCU_HIB_SetWakeupTriggerInput, XMC_SCU_HIB_SetPinMode, XMC_SCU_HIB_SetOutputPinL
  68:../Libraries/XMCLib/src/xmc4_scu.c ****  *             XMC_SCU_HIB_SetInput0, XMC_SCU_HIB_EnterHibernateState
  69:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  70:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2016-04-06:
  71:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Fixed XMC_SCU_ReadFromRetentionMemory functionality
  72:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  73:../Libraries/XMCLib/src/xmc4_scu.c ****  * @endcond 
  74:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  75:../Libraries/XMCLib/src/xmc4_scu.c ****  */
  76:../Libraries/XMCLib/src/xmc4_scu.c **** 
  77:../Libraries/XMCLib/src/xmc4_scu.c **** /**
  78:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  79:../Libraries/XMCLib/src/xmc4_scu.c ****  * @brief SCU low level driver API prototype definition for XMC4 family of microcontrollers. 
  80:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  81:../Libraries/XMCLib/src/xmc4_scu.c ****  * <b>Detailed description of file:</b> <br>
  82:../Libraries/XMCLib/src/xmc4_scu.c ****  * APIs provided in this file cover the following functional blocks of SCU: <br>
  83:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- GCU (APIs prefixed with XMC_SCU_GEN_) <br>
  84:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Temperature Monitoring, Bootmode selection, CCU Start, Comparator configuration etc  <br>
  85:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- CCU (APIs prefixed with XMC_SCU_CLOCK_) <br>
  86:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Clock sources init, Clock tree init, Clock gating, Sleep Management etc <br>
  87:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- RCU (APIs prefixed with XMC_SCU_RESET_) <br>
  88:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Reset Init, Cause, Manual Reset Assert/Deassert <br>
  89:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- INTERRUPT (APIs prefixed with XMC_SCU_INTERRUPT_) <br>
  90:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Init, Manual Assert/Deassert, Acknowledge etc <br>
  91:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- PARITY (APIs prefixed with XMC_SCU_PARITY_) <br>
  92:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Init, Acknowledge etc <br>
  93:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- HIBERNATION (APIs prefixed with XMC_SCU_HIB_) <br>
  94:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Hibernation entry/exit config, entry/wakeup sequences, LPAC configuration etc <br>
  95:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- TRAP (APIs prefixed with XMC_SCU_TRAP_) <br>
  96:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Init, Enable/Disable, Acknowledge etc <br>
  97:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  98:../Libraries/XMCLib/src/xmc4_scu.c ****  */
  99:../Libraries/XMCLib/src/xmc4_scu.c **** 
 100:../Libraries/XMCLib/src/xmc4_scu.c **** /**************************************************************************************************
 101:../Libraries/XMCLib/src/xmc4_scu.c ****  * HEADER FILES
 102:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
 103:../Libraries/XMCLib/src/xmc4_scu.c **** #include <xmc_scu.h>
 104:../Libraries/XMCLib/src/xmc4_scu.c **** 
 105:../Libraries/XMCLib/src/xmc4_scu.c **** #if UC_FAMILY == XMC4
 106:../Libraries/XMCLib/src/xmc4_scu.c **** 
 107:../Libraries/XMCLib/src/xmc4_scu.c **** /**************************************************************************************************
 108:../Libraries/XMCLib/src/xmc4_scu.c ****  * MACROS
 109:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
 110:../Libraries/XMCLib/src/xmc4_scu.c **** #define FOSCREF   (2500000UL)    /**< Oscillator reference frequency (fOSCREF) monitored by Oscilla
 111:../Libraries/XMCLib/src/xmc4_scu.c **** #define FREQ_1MHZ (1000000UL)    /**< Used during calculation. */
 112:../Libraries/XMCLib/src/xmc4_scu.c **** 
 113:../Libraries/XMCLib/src/xmc4_scu.c **** #ifndef OFI_FREQUENCY
 114:../Libraries/XMCLib/src/xmc4_scu.c **** #define OFI_FREQUENCY (24000000UL)    /**< Fast internal backup clock source. */
 115:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 116:../Libraries/XMCLib/src/xmc4_scu.c **** 
 117:../Libraries/XMCLib/src/xmc4_scu.c **** #ifndef OSI_FREQUENCY
 118:../Libraries/XMCLib/src/xmc4_scu.c **** #define OSI_FREQUENCY (32768UL)    /**< Internal slow clock source. */
 119:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 120:../Libraries/XMCLib/src/xmc4_scu.c **** 
 121:../Libraries/XMCLib/src/xmc4_scu.c **** #ifndef OSCHP_FREQUENCY
 122:../Libraries/XMCLib/src/xmc4_scu.c **** #define OSCHP_FREQUENCY (12000000U)    /**< External crystal High Precision Oscillator. */
 123:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 124:../Libraries/XMCLib/src/xmc4_scu.c **** 
 125:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_PLL_PLLSTAT_OSC_USABLE  (SCU_PLL_PLLSTAT_PLLHV_Msk | \
 126:../Libraries/XMCLib/src/xmc4_scu.c ****                                          SCU_PLL_PLLSTAT_PLLLV_Msk | \
 127:../Libraries/XMCLib/src/xmc4_scu.c ****                                          SCU_PLL_PLLSTAT_PLLSP_Msk)  /**< Used to verify the OSC fr
 128:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                           usable or not.*/
 129:../Libraries/XMCLib/src/xmc4_scu.c **** 
 130:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_ORC_ADC_START_GROUP    (0UL)    /**< The ADC group whose channel input is compared 
 131:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      Comparator (ORC) to serves the purpose of over
 132:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      for analog input pins of the chip and ORC star
 133:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      this group number. */
 134:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_ORC_ADC_END_GROUP      (1UL)    /**< The ADC group whose channel input is compared 
 135:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      Comparator (ORC) to serves the purpose of over
 136:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      for analog input pins of the chip and ORC end 
 137:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      this group number. */
 138:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_ORC_START_ADC_CHANNEL  (6UL)    /**< The ADC channel whose channel input is compare
 139:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      Comparator (ORC) to serves the purpose of over
 140:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      for analog input pins of the chip and ORC star
 141:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      this channel number. */
 142:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_ORC_END_ADC_CHANNEL    (7UL)    /**< The ADC channel whose channel input is compare
 143:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      Comparator (ORC) to serves the purpose of over
 144:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      for analog input pins of the chip and ORC ends
 145:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      this channel number. */
 146:../Libraries/XMCLib/src/xmc4_scu.c **** 
 147:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_CHECK_GRPNUM(GROUP_NUM)   (((GROUP_NUM) == XMC_SCU_ORC_ADC_START_GROUP) || \
 148:../Libraries/XMCLib/src/xmc4_scu.c ****                                         ((GROUP_NUM) == XMC_SCU_ORC_ADC_END_GROUP) ) /**< Used to v
 149:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       provided ADC 
 150:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       within specif
 151:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       end group num
 152:../Libraries/XMCLib/src/xmc4_scu.c ****                                         
 153:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_CHECK_CHNUM(CH_NUM)       (((CH_NUM) == XMC_SCU_ORC_START_ADC_CHANNEL) || \
 154:../Libraries/XMCLib/src/xmc4_scu.c ****                                         ((CH_NUM) == XMC_SCU_ORC_END_ADC_CHANNEL) )  /**< Used to v
 155:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       provided ADC 
 156:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       within specif
 157:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       end channel n
 158:../Libraries/XMCLib/src/xmc4_scu.c **** 
 159:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_INTERRUPT_EVENT_MAX            (32U)      /**< Maximum supported SCU events. */
 160:../Libraries/XMCLib/src/xmc4_scu.c **** 
 161:../Libraries/XMCLib/src/xmc4_scu.c **** #define SCU_HIBERNATE_HDCR_HIBIOSEL_Size (4U)
 162:../Libraries/XMCLib/src/xmc4_scu.c **** 
 163:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_POWER_LSB13V (0.0058F)
 164:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_POWER_LSB33V (0.0225F)
 165:../Libraries/XMCLib/src/xmc4_scu.c **** 
 166:../Libraries/XMCLib/src/xmc4_scu.c **** /**************************************************************************************************
 167:../Libraries/XMCLib/src/xmc4_scu.c ****  * LOCAL DATA
 168:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
 169:../Libraries/XMCLib/src/xmc4_scu.c **** XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler_list[XMC_SCU_INTERRUPT_EVENT_MAX]; /**< For registe
 170:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                         functions o
 171:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                         occurrence.
 172:../Libraries/XMCLib/src/xmc4_scu.c **** 
 173:../Libraries/XMCLib/src/xmc4_scu.c **** /**************************************************************************************************
 174:../Libraries/XMCLib/src/xmc4_scu.c ****  * LOCAL ROUTINES
 175:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
 176:../Libraries/XMCLib/src/xmc4_scu.c ****  #if defined(UC_ID)
 177:../Libraries/XMCLib/src/xmc4_scu.c **** /* This is a non-weak function, which retrieves high precision external oscillator frequency. */
 178:../Libraries/XMCLib/src/xmc4_scu.c **** __WEAK uint32_t OSCHP_GetFrequency(void)
 179:../Libraries/XMCLib/src/xmc4_scu.c **** {
 180:../Libraries/XMCLib/src/xmc4_scu.c ****   return (OSCHP_FREQUENCY);
 181:../Libraries/XMCLib/src/xmc4_scu.c **** }
 182:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 183:../Libraries/XMCLib/src/xmc4_scu.c **** 
 184:../Libraries/XMCLib/src/xmc4_scu.c **** /* This is a local function used to generate the delay until register get updated with new configur
 185:../Libraries/XMCLib/src/xmc4_scu.c **** static void XMC_SCU_lDelay(uint32_t cycles);
 186:../Libraries/XMCLib/src/xmc4_scu.c **** 
 187:../Libraries/XMCLib/src/xmc4_scu.c **** /**************************************************************************************************
 188:../Libraries/XMCLib/src/xmc4_scu.c ****  * API IMPLEMENTATION
 189:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
 190:../Libraries/XMCLib/src/xmc4_scu.c **** /* This is a local function used to generate the delay until register get updated with new configur
 191:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_lDelay(uint32_t delay)
 192:../Libraries/XMCLib/src/xmc4_scu.c **** {
 281              	 .loc 3 192 0
 282              	 .cfi_startproc
 283              	 
 284              	 
 285 0000 80B5     	 push {r7,lr}
 286              	.LCFI24:
 287              	 .cfi_def_cfa_offset 8
 288              	 .cfi_offset 7,-8
 289              	 .cfi_offset 14,-4
 290 0002 84B0     	 sub sp,sp,#16
 291              	.LCFI25:
 292              	 .cfi_def_cfa_offset 24
 293 0004 00AF     	 add r7,sp,#0
 294              	.LCFI26:
 295              	 .cfi_def_cfa_register 7
 296 0006 7860     	 str r0,[r7,#4]
 193:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t i;
 194:../Libraries/XMCLib/src/xmc4_scu.c **** 
 195:../Libraries/XMCLib/src/xmc4_scu.c ****   SystemCoreClockUpdate();
 297              	 .loc 3 195 0
 298 0008 FFF7FEFF 	 bl SystemCoreClockUpdate
 196:../Libraries/XMCLib/src/xmc4_scu.c ****   delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 299              	 .loc 3 196 0
 300 000c 0B4B     	 ldr r3,.L28
 301 000e 1B68     	 ldr r3,[r3]
 302 0010 0B4A     	 ldr r2,.L28+4
 303 0012 A2FB0323 	 umull r2,r3,r2,r3
 304 0016 9A0C     	 lsrs r2,r3,#18
 305 0018 7B68     	 ldr r3,[r7,#4]
 306 001a 02FB03F3 	 mul r3,r2,r3
 307 001e 7B60     	 str r3,[r7,#4]
 197:../Libraries/XMCLib/src/xmc4_scu.c **** 
 198:../Libraries/XMCLib/src/xmc4_scu.c ****   for (i = 0U; i < delay; ++i)
 308              	 .loc 3 198 0
 309 0020 0023     	 movs r3,#0
 310 0022 FB60     	 str r3,[r7,#12]
 311 0024 03E0     	 b .L26
 312              	.L27:
 313              	.LBB4:
 314              	.LBB5:
 315              	 .file 4 "E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include/cmsis_gcc.h"
   1:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**************************************************************************//**
   2:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @version  V4.30
   5:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @date     20. October 2015
   6:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  ******************************************************************************/
   7:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
   9:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****    All rights reserved.
  10:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****      specific prior written permission.
  20:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****    *
  21:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  34:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  35:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  38:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ignore some GCC warnings */
  39:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic push
  41:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  45:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  46:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  47:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   @{
  51:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  52:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  53:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
  54:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  58:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
  60:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
  62:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  63:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  64:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
  65:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  69:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
  71:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
  73:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  74:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  75:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
  76:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Control Register
  77:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Control Register value
  79:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  80:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
  82:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
  83:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  84:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
  86:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
  87:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  88:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  89:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
  90:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Control Register
  91:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  94:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
  96:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
  98:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  99:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 100:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 101:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get IPSR Register
 102:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               IPSR Register value
 104:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 105:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 107:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 108:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 109:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 111:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 112:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 113:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 114:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 115:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get APSR Register
 116:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               APSR Register value
 118:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 119:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 121:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 122:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 123:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 125:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 126:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 127:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 128:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 129:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get xPSR Register
 130:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 132:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****     \return               xPSR Register value
 133:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 134:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 136:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 137:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 138:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 140:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 141:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 142:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 143:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 144:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSP Register value
 147:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 148:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 150:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 151:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 152:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 154:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 155:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 156:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 157:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 158:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 162:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 164:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 166:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 167:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 168:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 169:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSP Register value
 172:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 173:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 175:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 176:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 177:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 179:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 180:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 181:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 182:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 183:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 186:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 188:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 190:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 192:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 193:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 194:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 195:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Priority Mask
 196:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Priority Mask value
 198:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 199:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 201:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 202:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 203:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 205:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 206:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 207:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 208:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 209:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Priority Mask
 210:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 213:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 215:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 217:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 218:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 219:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 221:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 222:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable FIQ
 223:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 226:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 228:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 230:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 231:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 232:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 233:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable FIQ
 234:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 237:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 239:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 241:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 242:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 243:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 244:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Base Priority
 245:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Base Priority register value
 247:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 248:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 250:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 251:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 252:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 254:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 255:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 256:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 257:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 258:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority
 259:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 262:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 264:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 266:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 267:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 268:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 269:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 274:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 276:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 278:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 279:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 280:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 281:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Fault Mask
 282:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Fault Mask register value
 284:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 285:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 287:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 288:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 289:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 291:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 292:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 293:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 294:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 295:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Fault Mask
 296:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 299:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 301:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 303:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 304:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 306:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 307:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 309:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 310:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get FPSCR
 311:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 314:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 316:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 318:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 319:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("");
 321:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("");
 323:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 324:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 325:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****    return(0);
 326:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 327:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 328:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 329:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 330:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 331:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set FPSCR
 332:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 335:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 337:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("");
 340:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("");
 342:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 343:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 344:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 345:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 347:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 348:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 349:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 351:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 352:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   Access to dedicated instructions
 355:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   @{
 356:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** */
 357:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 358:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 365:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 368:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 369:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 370:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   No Operation
 371:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 373:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 375:E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("nop");
 316              	 .loc 4 375 0 discriminator 3
 317              	
 318 0026 00BF     	 nop
 319              	
 320              	 .thumb
 321              	.LBE5:
 322              	.LBE4:
 323              	 .loc 3 198 0 discriminator 3
 324 0028 FB68     	 ldr r3,[r7,#12]
 325 002a 0133     	 adds r3,r3,#1
 326 002c FB60     	 str r3,[r7,#12]
 327              	.L26:
 328              	 .loc 3 198 0 is_stmt 0 discriminator 1
 329 002e FA68     	 ldr r2,[r7,#12]
 330 0030 7B68     	 ldr r3,[r7,#4]
 331 0032 9A42     	 cmp r2,r3
 332 0034 F7D3     	 bcc .L27
 199:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 200:../Libraries/XMCLib/src/xmc4_scu.c ****     __NOP();
 201:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 202:../Libraries/XMCLib/src/xmc4_scu.c **** }
 333              	 .loc 3 202 0 is_stmt 1
 334 0036 1037     	 adds r7,r7,#16
 335              	.LCFI27:
 336              	 .cfi_def_cfa_offset 8
 337 0038 BD46     	 mov sp,r7
 338              	.LCFI28:
 339              	 .cfi_def_cfa_register 13
 340              	 
 341 003a 80BD     	 pop {r7,pc}
 342              	.L29:
 343              	 .align 2
 344              	.L28:
 345 003c 00000000 	 .word SystemCoreClock
 346 0040 83DE1B43 	 .word 1125899907
 347              	 .cfi_endproc
 348              	.LFE160:
 350              	 .section .text.XMC_SCU_INTERRUPT_EnableEvent,"ax",%progbits
 351              	 .align 2
 352              	 .global XMC_SCU_INTERRUPT_EnableEvent
 353              	 .thumb
 354              	 .thumb_func
 356              	XMC_SCU_INTERRUPT_EnableEvent:
 357              	.LFB161:
 203:../Libraries/XMCLib/src/xmc4_scu.c **** 
 204:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable the SCU event */
 205:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 206:../Libraries/XMCLib/src/xmc4_scu.c **** {
 358              	 .loc 3 206 0
 359              	 .cfi_startproc
 360              	 
 361              	 
 362              	 
 363 0000 80B4     	 push {r7}
 364              	.LCFI29:
 365              	 .cfi_def_cfa_offset 4
 366              	 .cfi_offset 7,-4
 367 0002 83B0     	 sub sp,sp,#12
 368              	.LCFI30:
 369              	 .cfi_def_cfa_offset 16
 370 0004 00AF     	 add r7,sp,#0
 371              	.LCFI31:
 372              	 .cfi_def_cfa_register 7
 373 0006 7860     	 str r0,[r7,#4]
 207:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 374              	 .loc 3 207 0
 375 0008 0549     	 ldr r1,.L31
 376 000a 054B     	 ldr r3,.L31
 377 000c 9A68     	 ldr r2,[r3,#8]
 378 000e 7B68     	 ldr r3,[r7,#4]
 379 0010 1343     	 orrs r3,r3,r2
 380 0012 8B60     	 str r3,[r1,#8]
 208:../Libraries/XMCLib/src/xmc4_scu.c **** }
 381              	 .loc 3 208 0
 382 0014 0C37     	 adds r7,r7,#12
 383              	.LCFI32:
 384              	 .cfi_def_cfa_offset 4
 385 0016 BD46     	 mov sp,r7
 386              	.LCFI33:
 387              	 .cfi_def_cfa_register 13
 388              	 
 389 0018 5DF8047B 	 ldr r7,[sp],#4
 390              	.LCFI34:
 391              	 .cfi_restore 7
 392              	 .cfi_def_cfa_offset 0
 393 001c 7047     	 bx lr
 394              	.L32:
 395 001e 00BF     	 .align 2
 396              	.L31:
 397 0020 74400050 	 .word 1342193780
 398              	 .cfi_endproc
 399              	.LFE161:
 401              	 .section .text.XMC_SCU_INTERRUPT_DisableEvent,"ax",%progbits
 402              	 .align 2
 403              	 .global XMC_SCU_INTERRUPT_DisableEvent
 404              	 .thumb
 405              	 .thumb_func
 407              	XMC_SCU_INTERRUPT_DisableEvent:
 408              	.LFB162:
 209:../Libraries/XMCLib/src/xmc4_scu.c **** 
 210:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable the SCU event */
 211:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 212:../Libraries/XMCLib/src/xmc4_scu.c **** {
 409              	 .loc 3 212 0
 410              	 .cfi_startproc
 411              	 
 412              	 
 413              	 
 414 0000 80B4     	 push {r7}
 415              	.LCFI35:
 416              	 .cfi_def_cfa_offset 4
 417              	 .cfi_offset 7,-4
 418 0002 83B0     	 sub sp,sp,#12
 419              	.LCFI36:
 420              	 .cfi_def_cfa_offset 16
 421 0004 00AF     	 add r7,sp,#0
 422              	.LCFI37:
 423              	 .cfi_def_cfa_register 7
 424 0006 7860     	 str r0,[r7,#4]
 213:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 425              	 .loc 3 213 0
 426 0008 0549     	 ldr r1,.L34
 427 000a 054B     	 ldr r3,.L34
 428 000c 9A68     	 ldr r2,[r3,#8]
 429 000e 7B68     	 ldr r3,[r7,#4]
 430 0010 DB43     	 mvns r3,r3
 431 0012 1340     	 ands r3,r3,r2
 432 0014 8B60     	 str r3,[r1,#8]
 214:../Libraries/XMCLib/src/xmc4_scu.c **** }
 433              	 .loc 3 214 0
 434 0016 0C37     	 adds r7,r7,#12
 435              	.LCFI38:
 436              	 .cfi_def_cfa_offset 4
 437 0018 BD46     	 mov sp,r7
 438              	.LCFI39:
 439              	 .cfi_def_cfa_register 13
 440              	 
 441 001a 5DF8047B 	 ldr r7,[sp],#4
 442              	.LCFI40:
 443              	 .cfi_restore 7
 444              	 .cfi_def_cfa_offset 0
 445 001e 7047     	 bx lr
 446              	.L35:
 447              	 .align 2
 448              	.L34:
 449 0020 74400050 	 .word 1342193780
 450              	 .cfi_endproc
 451              	.LFE162:
 453              	 .section .text.XMC_SCU_INTERRUPT_TriggerEvent,"ax",%progbits
 454              	 .align 2
 455              	 .global XMC_SCU_INTERRUPT_TriggerEvent
 456              	 .thumb
 457              	 .thumb_func
 459              	XMC_SCU_INTERRUPT_TriggerEvent:
 460              	.LFB163:
 215:../Libraries/XMCLib/src/xmc4_scu.c **** 
 216:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to trigger the SCU event */
 217:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 218:../Libraries/XMCLib/src/xmc4_scu.c **** {
 461              	 .loc 3 218 0
 462              	 .cfi_startproc
 463              	 
 464              	 
 465              	 
 466 0000 80B4     	 push {r7}
 467              	.LCFI41:
 468              	 .cfi_def_cfa_offset 4
 469              	 .cfi_offset 7,-4
 470 0002 83B0     	 sub sp,sp,#12
 471              	.LCFI42:
 472              	 .cfi_def_cfa_offset 16
 473 0004 00AF     	 add r7,sp,#0
 474              	.LCFI43:
 475              	 .cfi_def_cfa_register 7
 476 0006 7860     	 str r0,[r7,#4]
 219:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->SRSET |= (uint32_t)event;
 477              	 .loc 3 219 0
 478 0008 0549     	 ldr r1,.L37
 479 000a 054B     	 ldr r3,.L37
 480 000c 1A69     	 ldr r2,[r3,#16]
 481 000e 7B68     	 ldr r3,[r7,#4]
 482 0010 1343     	 orrs r3,r3,r2
 483 0012 0B61     	 str r3,[r1,#16]
 220:../Libraries/XMCLib/src/xmc4_scu.c **** }
 484              	 .loc 3 220 0
 485 0014 0C37     	 adds r7,r7,#12
 486              	.LCFI44:
 487              	 .cfi_def_cfa_offset 4
 488 0016 BD46     	 mov sp,r7
 489              	.LCFI45:
 490              	 .cfi_def_cfa_register 13
 491              	 
 492 0018 5DF8047B 	 ldr r7,[sp],#4
 493              	.LCFI46:
 494              	 .cfi_restore 7
 495              	 .cfi_def_cfa_offset 0
 496 001c 7047     	 bx lr
 497              	.L38:
 498 001e 00BF     	 .align 2
 499              	.L37:
 500 0020 74400050 	 .word 1342193780
 501              	 .cfi_endproc
 502              	.LFE163:
 504              	 .section .text.XMC_SCU_INTERUPT_GetEventStatus,"ax",%progbits
 505              	 .align 2
 506              	 .global XMC_SCU_INTERUPT_GetEventStatus
 507              	 .thumb
 508              	 .thumb_func
 510              	XMC_SCU_INTERUPT_GetEventStatus:
 511              	.LFB164:
 221:../Libraries/XMCLib/src/xmc4_scu.c **** 
 222:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to retrieve the SCU event status */
 223:../Libraries/XMCLib/src/xmc4_scu.c **** XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
 224:../Libraries/XMCLib/src/xmc4_scu.c **** {
 512              	 .loc 3 224 0
 513              	 .cfi_startproc
 514              	 
 515              	 
 516              	 
 517 0000 80B4     	 push {r7}
 518              	.LCFI47:
 519              	 .cfi_def_cfa_offset 4
 520              	 .cfi_offset 7,-4
 521 0002 00AF     	 add r7,sp,#0
 522              	.LCFI48:
 523              	 .cfi_def_cfa_register 7
 225:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_INTERRUPT->SRRAW);
 524              	 .loc 3 225 0
 525 0004 034B     	 ldr r3,.L41
 526 0006 5B68     	 ldr r3,[r3,#4]
 226:../Libraries/XMCLib/src/xmc4_scu.c **** }
 527              	 .loc 3 226 0
 528 0008 1846     	 mov r0,r3
 529 000a BD46     	 mov sp,r7
 530              	.LCFI49:
 531              	 .cfi_def_cfa_register 13
 532              	 
 533 000c 5DF8047B 	 ldr r7,[sp],#4
 534              	.LCFI50:
 535              	 .cfi_restore 7
 536              	 .cfi_def_cfa_offset 0
 537 0010 7047     	 bx lr
 538              	.L42:
 539 0012 00BF     	 .align 2
 540              	.L41:
 541 0014 74400050 	 .word 1342193780
 542              	 .cfi_endproc
 543              	.LFE164:
 545              	 .section .text.XMC_SCU_INTERRUPT_ClearEventStatus,"ax",%progbits
 546              	 .align 2
 547              	 .global XMC_SCU_INTERRUPT_ClearEventStatus
 548              	 .thumb
 549              	 .thumb_func
 551              	XMC_SCU_INTERRUPT_ClearEventStatus:
 552              	.LFB165:
 227:../Libraries/XMCLib/src/xmc4_scu.c **** 
 228:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to clear the SCU event status */
 229:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
 230:../Libraries/XMCLib/src/xmc4_scu.c **** {
 553              	 .loc 3 230 0
 554              	 .cfi_startproc
 555              	 
 556              	 
 557              	 
 558 0000 80B4     	 push {r7}
 559              	.LCFI51:
 560              	 .cfi_def_cfa_offset 4
 561              	 .cfi_offset 7,-4
 562 0002 83B0     	 sub sp,sp,#12
 563              	.LCFI52:
 564              	 .cfi_def_cfa_offset 16
 565 0004 00AF     	 add r7,sp,#0
 566              	.LCFI53:
 567              	 .cfi_def_cfa_register 7
 568 0006 7860     	 str r0,[r7,#4]
 231:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->SRCLR = (uint32_t)event;
 569              	 .loc 3 231 0
 570 0008 034A     	 ldr r2,.L44
 571 000a 7B68     	 ldr r3,[r7,#4]
 572 000c D360     	 str r3,[r2,#12]
 232:../Libraries/XMCLib/src/xmc4_scu.c **** }
 573              	 .loc 3 232 0
 574 000e 0C37     	 adds r7,r7,#12
 575              	.LCFI54:
 576              	 .cfi_def_cfa_offset 4
 577 0010 BD46     	 mov sp,r7
 578              	.LCFI55:
 579              	 .cfi_def_cfa_register 13
 580              	 
 581 0012 5DF8047B 	 ldr r7,[sp],#4
 582              	.LCFI56:
 583              	 .cfi_restore 7
 584              	 .cfi_def_cfa_offset 0
 585 0016 7047     	 bx lr
 586              	.L45:
 587              	 .align 2
 588              	.L44:
 589 0018 74400050 	 .word 1342193780
 590              	 .cfi_endproc
 591              	.LFE165:
 593              	 .section .text.XMC_SCU_GetBootMode,"ax",%progbits
 594              	 .align 2
 595              	 .global XMC_SCU_GetBootMode
 596              	 .thumb
 597              	 .thumb_func
 599              	XMC_SCU_GetBootMode:
 600              	.LFB166:
 233:../Libraries/XMCLib/src/xmc4_scu.c **** 
 234:../Libraries/XMCLib/src/xmc4_scu.c **** 
 235:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to retrieve the currently deployed device bootmode */
 236:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_GetBootMode(void)
 237:../Libraries/XMCLib/src/xmc4_scu.c **** {
 601              	 .loc 3 237 0
 602              	 .cfi_startproc
 603              	 
 604              	 
 605              	 
 606 0000 80B4     	 push {r7}
 607              	.LCFI57:
 608              	 .cfi_def_cfa_offset 4
 609              	 .cfi_offset 7,-4
 610 0002 00AF     	 add r7,sp,#0
 611              	.LCFI58:
 612              	 .cfi_def_cfa_register 7
 238:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 613              	 .loc 3 238 0
 614 0004 044B     	 ldr r3,.L48
 615 0006 1B69     	 ldr r3,[r3,#16]
 616 0008 03F47063 	 and r3,r3,#3840
 239:../Libraries/XMCLib/src/xmc4_scu.c **** }
 617              	 .loc 3 239 0
 618 000c 1846     	 mov r0,r3
 619 000e BD46     	 mov sp,r7
 620              	.LCFI59:
 621              	 .cfi_def_cfa_register 13
 622              	 
 623 0010 5DF8047B 	 ldr r7,[sp],#4
 624              	.LCFI60:
 625              	 .cfi_restore 7
 626              	 .cfi_def_cfa_offset 0
 627 0014 7047     	 bx lr
 628              	.L49:
 629 0016 00BF     	 .align 2
 630              	.L48:
 631 0018 00400050 	 .word 1342193664
 632              	 .cfi_endproc
 633              	.LFE166:
 635              	 .section .text.XMC_SCU_SetBootMode,"ax",%progbits
 636              	 .align 2
 637              	 .global XMC_SCU_SetBootMode
 638              	 .thumb
 639              	 .thumb_func
 641              	XMC_SCU_SetBootMode:
 642              	.LFB167:
 240:../Libraries/XMCLib/src/xmc4_scu.c **** 
 241:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program a new device bootmode */
 242:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
 243:../Libraries/XMCLib/src/xmc4_scu.c **** {
 643              	 .loc 3 243 0
 644              	 .cfi_startproc
 645              	 
 646              	 
 647              	 
 648 0000 80B4     	 push {r7}
 649              	.LCFI61:
 650              	 .cfi_def_cfa_offset 4
 651              	 .cfi_offset 7,-4
 652 0002 83B0     	 sub sp,sp,#12
 653              	.LCFI62:
 654              	 .cfi_def_cfa_offset 16
 655 0004 00AF     	 add r7,sp,#0
 656              	.LCFI63:
 657              	 .cfi_def_cfa_register 7
 658 0006 0346     	 mov r3,r0
 659 0008 FB80     	 strh r3,[r7,#6]
 244:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->STCON = (uint32_t)bootmode;
 660              	 .loc 3 244 0
 661 000a 044A     	 ldr r2,.L51
 662 000c FB88     	 ldrh r3,[r7,#6]
 663 000e 1361     	 str r3,[r2,#16]
 245:../Libraries/XMCLib/src/xmc4_scu.c **** }
 664              	 .loc 3 245 0
 665 0010 0C37     	 adds r7,r7,#12
 666              	.LCFI64:
 667              	 .cfi_def_cfa_offset 4
 668 0012 BD46     	 mov sp,r7
 669              	.LCFI65:
 670              	 .cfi_def_cfa_register 13
 671              	 
 672 0014 5DF8047B 	 ldr r7,[sp],#4
 673              	.LCFI66:
 674              	 .cfi_restore 7
 675              	 .cfi_def_cfa_offset 0
 676 0018 7047     	 bx lr
 677              	.L52:
 678 001a 00BF     	 .align 2
 679              	.L51:
 680 001c 00400050 	 .word 1342193664
 681              	 .cfi_endproc
 682              	.LFE167:
 684              	 .section .text.XMC_SCU_ReadGPR,"ax",%progbits
 685              	 .align 2
 686              	 .global XMC_SCU_ReadGPR
 687              	 .thumb
 688              	 .thumb_func
 690              	XMC_SCU_ReadGPR:
 691              	.LFB168:
 246:../Libraries/XMCLib/src/xmc4_scu.c **** 
 247:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to read from General purpose register */
 248:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_ReadGPR(const uint32_t index)
 249:../Libraries/XMCLib/src/xmc4_scu.c **** {
 692              	 .loc 3 249 0
 693              	 .cfi_startproc
 694              	 
 695              	 
 696              	 
 697 0000 80B4     	 push {r7}
 698              	.LCFI67:
 699              	 .cfi_def_cfa_offset 4
 700              	 .cfi_offset 7,-4
 701 0002 83B0     	 sub sp,sp,#12
 702              	.LCFI68:
 703              	 .cfi_def_cfa_offset 16
 704 0004 00AF     	 add r7,sp,#0
 705              	.LCFI69:
 706              	 .cfi_def_cfa_register 7
 707 0006 7860     	 str r0,[r7,#4]
 250:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_GENERAL->GPR[index]);
 708              	 .loc 3 250 0
 709 0008 054A     	 ldr r2,.L55
 710 000a 7B68     	 ldr r3,[r7,#4]
 711 000c 0A33     	 adds r3,r3,#10
 712 000e 9B00     	 lsls r3,r3,#2
 713 0010 1344     	 add r3,r3,r2
 714 0012 5B68     	 ldr r3,[r3,#4]
 251:../Libraries/XMCLib/src/xmc4_scu.c **** }
 715              	 .loc 3 251 0
 716 0014 1846     	 mov r0,r3
 717 0016 0C37     	 adds r7,r7,#12
 718              	.LCFI70:
 719              	 .cfi_def_cfa_offset 4
 720 0018 BD46     	 mov sp,r7
 721              	.LCFI71:
 722              	 .cfi_def_cfa_register 13
 723              	 
 724 001a 5DF8047B 	 ldr r7,[sp],#4
 725              	.LCFI72:
 726              	 .cfi_restore 7
 727              	 .cfi_def_cfa_offset 0
 728 001e 7047     	 bx lr
 729              	.L56:
 730              	 .align 2
 731              	.L55:
 732 0020 00400050 	 .word 1342193664
 733              	 .cfi_endproc
 734              	.LFE168:
 736              	 .section .text.XMC_SCU_WriteGPR,"ax",%progbits
 737              	 .align 2
 738              	 .global XMC_SCU_WriteGPR
 739              	 .thumb
 740              	 .thumb_func
 742              	XMC_SCU_WriteGPR:
 743              	.LFB169:
 252:../Libraries/XMCLib/src/xmc4_scu.c **** 
 253:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to write to GPR */
 254:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
 255:../Libraries/XMCLib/src/xmc4_scu.c **** {
 744              	 .loc 3 255 0
 745              	 .cfi_startproc
 746              	 
 747              	 
 748              	 
 749 0000 80B4     	 push {r7}
 750              	.LCFI73:
 751              	 .cfi_def_cfa_offset 4
 752              	 .cfi_offset 7,-4
 753 0002 83B0     	 sub sp,sp,#12
 754              	.LCFI74:
 755              	 .cfi_def_cfa_offset 16
 756 0004 00AF     	 add r7,sp,#0
 757              	.LCFI75:
 758              	 .cfi_def_cfa_register 7
 759 0006 7860     	 str r0,[r7,#4]
 760 0008 3960     	 str r1,[r7]
 256:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->GPR[index] = data;
 761              	 .loc 3 256 0
 762 000a 064A     	 ldr r2,.L58
 763 000c 7B68     	 ldr r3,[r7,#4]
 764 000e 0A33     	 adds r3,r3,#10
 765 0010 9B00     	 lsls r3,r3,#2
 766 0012 1344     	 add r3,r3,r2
 767 0014 3A68     	 ldr r2,[r7]
 768 0016 5A60     	 str r2,[r3,#4]
 257:../Libraries/XMCLib/src/xmc4_scu.c **** }
 769              	 .loc 3 257 0
 770 0018 0C37     	 adds r7,r7,#12
 771              	.LCFI76:
 772              	 .cfi_def_cfa_offset 4
 773 001a BD46     	 mov sp,r7
 774              	.LCFI77:
 775              	 .cfi_def_cfa_register 13
 776              	 
 777 001c 5DF8047B 	 ldr r7,[sp],#4
 778              	.LCFI78:
 779              	 .cfi_restore 7
 780              	 .cfi_def_cfa_offset 0
 781 0020 7047     	 bx lr
 782              	.L59:
 783 0022 00BF     	 .align 2
 784              	.L58:
 785 0024 00400050 	 .word 1342193664
 786              	 .cfi_endproc
 787              	.LFE169:
 789              	 .section .text.XMC_SCU_EnableOutOfRangeComparator,"ax",%progbits
 790              	 .align 2
 791              	 .global XMC_SCU_EnableOutOfRangeComparator
 792              	 .thumb
 793              	 .thumb_func
 795              	XMC_SCU_EnableOutOfRangeComparator:
 796              	.LFB170:
 258:../Libraries/XMCLib/src/xmc4_scu.c **** 
 259:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
 260:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
 261:../Libraries/XMCLib/src/xmc4_scu.c **** {
 797              	 .loc 3 261 0
 798              	 .cfi_startproc
 799              	 
 800              	 
 801              	 
 802 0000 80B4     	 push {r7}
 803              	.LCFI79:
 804              	 .cfi_def_cfa_offset 4
 805              	 .cfi_offset 7,-4
 806 0002 83B0     	 sub sp,sp,#12
 807              	.LCFI80:
 808              	 .cfi_def_cfa_offset 16
 809 0004 00AF     	 add r7,sp,#0
 810              	.LCFI81:
 811              	 .cfi_def_cfa_register 7
 812 0006 7860     	 str r0,[r7,#4]
 813 0008 3960     	 str r1,[r7]
 262:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
 263:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel))
 264:../Libraries/XMCLib/src/xmc4_scu.c ****    
 265:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 814              	 .loc 3 265 0
 815 000a 0A49     	 ldr r1,.L61
 816 000c 094A     	 ldr r2,.L61
 817 000e 7B68     	 ldr r3,[r7,#4]
 818 0010 2833     	 adds r3,r3,#40
 819 0012 52F82320 	 ldr r2,[r2,r3,lsl#2]
 820 0016 3B68     	 ldr r3,[r7]
 821 0018 0120     	 movs r0,#1
 822 001a 00FA03F3 	 lsl r3,r0,r3
 823 001e 1A43     	 orrs r2,r2,r3
 824 0020 7B68     	 ldr r3,[r7,#4]
 825 0022 2833     	 adds r3,r3,#40
 826 0024 41F82320 	 str r2,[r1,r3,lsl#2]
 266:../Libraries/XMCLib/src/xmc4_scu.c **** }
 827              	 .loc 3 266 0
 828 0028 0C37     	 adds r7,r7,#12
 829              	.LCFI82:
 830              	 .cfi_def_cfa_offset 4
 831 002a BD46     	 mov sp,r7
 832              	.LCFI83:
 833              	 .cfi_def_cfa_register 13
 834              	 
 835 002c 5DF8047B 	 ldr r7,[sp],#4
 836              	.LCFI84:
 837              	 .cfi_restore 7
 838              	 .cfi_def_cfa_offset 0
 839 0030 7047     	 bx lr
 840              	.L62:
 841 0032 00BF     	 .align 2
 842              	.L61:
 843 0034 00400050 	 .word 1342193664
 844              	 .cfi_endproc
 845              	.LFE170:
 847              	 .section .text.XMC_SCU_DisableOutOfRangeComparator,"ax",%progbits
 848              	 .align 2
 849              	 .global XMC_SCU_DisableOutOfRangeComparator
 850              	 .thumb
 851              	 .thumb_func
 853              	XMC_SCU_DisableOutOfRangeComparator:
 854              	.LFB171:
 267:../Libraries/XMCLib/src/xmc4_scu.c **** 
 268:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
 269:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
 270:../Libraries/XMCLib/src/xmc4_scu.c **** {
 855              	 .loc 3 270 0
 856              	 .cfi_startproc
 857              	 
 858              	 
 859              	 
 860 0000 80B4     	 push {r7}
 861              	.LCFI85:
 862              	 .cfi_def_cfa_offset 4
 863              	 .cfi_offset 7,-4
 864 0002 83B0     	 sub sp,sp,#12
 865              	.LCFI86:
 866              	 .cfi_def_cfa_offset 16
 867 0004 00AF     	 add r7,sp,#0
 868              	.LCFI87:
 869              	 .cfi_def_cfa_register 7
 870 0006 7860     	 str r0,[r7,#4]
 871 0008 3960     	 str r1,[r7]
 271:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
 272:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel
 273:../Libraries/XMCLib/src/xmc4_scu.c ****    
 274:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 872              	 .loc 3 274 0
 873 000a 0A49     	 ldr r1,.L64
 874 000c 094A     	 ldr r2,.L64
 875 000e 7B68     	 ldr r3,[r7,#4]
 876 0010 2833     	 adds r3,r3,#40
 877 0012 52F82320 	 ldr r2,[r2,r3,lsl#2]
 878 0016 3B68     	 ldr r3,[r7]
 879 0018 0120     	 movs r0,#1
 880 001a 00FA03F3 	 lsl r3,r0,r3
 881 001e DB43     	 mvns r3,r3
 882 0020 1A40     	 ands r2,r2,r3
 883 0022 7B68     	 ldr r3,[r7,#4]
 884 0024 2833     	 adds r3,r3,#40
 885 0026 41F82320 	 str r2,[r1,r3,lsl#2]
 275:../Libraries/XMCLib/src/xmc4_scu.c **** }
 886              	 .loc 3 275 0
 887 002a 0C37     	 adds r7,r7,#12
 888              	.LCFI88:
 889              	 .cfi_def_cfa_offset 4
 890 002c BD46     	 mov sp,r7
 891              	.LCFI89:
 892              	 .cfi_def_cfa_register 13
 893              	 
 894 002e 5DF8047B 	 ldr r7,[sp],#4
 895              	.LCFI90:
 896              	 .cfi_restore 7
 897              	 .cfi_def_cfa_offset 0
 898 0032 7047     	 bx lr
 899              	.L65:
 900              	 .align 2
 901              	.L64:
 902 0034 00400050 	 .word 1342193664
 903              	 .cfi_endproc
 904              	.LFE171:
 906              	 .section .text.XMC_SCU_CalibrateTemperatureSensor,"ax",%progbits
 907              	 .align 2
 908              	 .global XMC_SCU_CalibrateTemperatureSensor
 909              	 .thumb
 910              	 .thumb_func
 912              	XMC_SCU_CalibrateTemperatureSensor:
 913              	.LFB172:
 276:../Libraries/XMCLib/src/xmc4_scu.c **** 
 277:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to calibrate temperature sensor */
 278:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
 279:../Libraries/XMCLib/src/xmc4_scu.c **** {
 914              	 .loc 3 279 0
 915              	 .cfi_startproc
 916              	 
 917              	 
 918              	 
 919 0000 80B4     	 push {r7}
 920              	.LCFI91:
 921              	 .cfi_def_cfa_offset 4
 922              	 .cfi_offset 7,-4
 923 0002 83B0     	 sub sp,sp,#12
 924              	.LCFI92:
 925              	 .cfi_def_cfa_offset 16
 926 0004 00AF     	 add r7,sp,#0
 927              	.LCFI93:
 928              	 .cfi_def_cfa_register 7
 929 0006 7860     	 str r0,[r7,#4]
 930 0008 3960     	 str r1,[r7]
 280:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 931              	 .loc 3 280 0
 932 000a 0749     	 ldr r1,.L67
 933 000c 7B68     	 ldr r3,[r7,#4]
 934 000e 1A01     	 lsls r2,r3,#4
 281:../Libraries/XMCLib/src/xmc4_scu.c ****                         (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 935              	 .loc 3 281 0
 936 0010 3B68     	 ldr r3,[r7]
 937 0012 DB02     	 lsls r3,r3,#11
 280:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 938              	 .loc 3 280 0
 939 0014 1343     	 orrs r3,r3,r2
 282:../Libraries/XMCLib/src/xmc4_scu.c ****                         (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 940              	 .loc 3 282 0
 941 0016 43F40803 	 orr r3,r3,#8912896
 280:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 942              	 .loc 3 280 0
 943 001a C1F88C30 	 str r3,[r1,#140]
 283:../Libraries/XMCLib/src/xmc4_scu.c ****                         (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
 284:../Libraries/XMCLib/src/xmc4_scu.c **** }
 944              	 .loc 3 284 0
 945 001e 0C37     	 adds r7,r7,#12
 946              	.LCFI94:
 947              	 .cfi_def_cfa_offset 4
 948 0020 BD46     	 mov sp,r7
 949              	.LCFI95:
 950              	 .cfi_def_cfa_register 13
 951              	 
 952 0022 5DF8047B 	 ldr r7,[sp],#4
 953              	.LCFI96:
 954              	 .cfi_restore 7
 955              	 .cfi_def_cfa_offset 0
 956 0026 7047     	 bx lr
 957              	.L68:
 958              	 .align 2
 959              	.L67:
 960 0028 00400050 	 .word 1342193664
 961              	 .cfi_endproc
 962              	.LFE172:
 964              	 .section .text.XMC_SCU_EnableTemperatureSensor,"ax",%progbits
 965              	 .align 2
 966              	 .global XMC_SCU_EnableTemperatureSensor
 967              	 .thumb
 968              	 .thumb_func
 970              	XMC_SCU_EnableTemperatureSensor:
 971              	.LFB173:
 285:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable die temperature measurement by powering the DTS module. */
 286:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_EnableTemperatureSensor(void)
 287:../Libraries/XMCLib/src/xmc4_scu.c **** {
 972              	 .loc 3 287 0
 973              	 .cfi_startproc
 974              	 
 975              	 
 976              	 
 977 0000 80B4     	 push {r7}
 978              	.LCFI97:
 979              	 .cfi_def_cfa_offset 4
 980              	 .cfi_offset 7,-4
 981 0002 00AF     	 add r7,sp,#0
 982              	.LCFI98:
 983              	 .cfi_def_cfa_register 7
 288:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 984              	 .loc 3 288 0
 985 0004 054A     	 ldr r2,.L70
 986 0006 054B     	 ldr r3,.L70
 987 0008 D3F88C30 	 ldr r3,[r3,#140]
 988 000c 23F00103 	 bic r3,r3,#1
 989 0010 C2F88C30 	 str r3,[r2,#140]
 289:../Libraries/XMCLib/src/xmc4_scu.c **** }
 990              	 .loc 3 289 0
 991 0014 BD46     	 mov sp,r7
 992              	.LCFI99:
 993              	 .cfi_def_cfa_register 13
 994              	 
 995 0016 5DF8047B 	 ldr r7,[sp],#4
 996              	.LCFI100:
 997              	 .cfi_restore 7
 998              	 .cfi_def_cfa_offset 0
 999 001a 7047     	 bx lr
 1000              	.L71:
 1001              	 .align 2
 1002              	.L70:
 1003 001c 00400050 	 .word 1342193664
 1004              	 .cfi_endproc
 1005              	.LFE173:
 1007              	 .section .text.XMC_SCU_DisableTemperatureSensor,"ax",%progbits
 1008              	 .align 2
 1009              	 .global XMC_SCU_DisableTemperatureSensor
 1010              	 .thumb
 1011              	 .thumb_func
 1013              	XMC_SCU_DisableTemperatureSensor:
 1014              	.LFB174:
 290:../Libraries/XMCLib/src/xmc4_scu.c **** 
 291:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable die temperature measurement by powering the DTS module off. */
 292:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_DisableTemperatureSensor(void)
 293:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1015              	 .loc 3 293 0
 1016              	 .cfi_startproc
 1017              	 
 1018              	 
 1019              	 
 1020 0000 80B4     	 push {r7}
 1021              	.LCFI101:
 1022              	 .cfi_def_cfa_offset 4
 1023              	 .cfi_offset 7,-4
 1024 0002 00AF     	 add r7,sp,#0
 1025              	.LCFI102:
 1026              	 .cfi_def_cfa_register 7
 294:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 1027              	 .loc 3 294 0
 1028 0004 054A     	 ldr r2,.L73
 1029 0006 054B     	 ldr r3,.L73
 1030 0008 D3F88C30 	 ldr r3,[r3,#140]
 1031 000c 43F00103 	 orr r3,r3,#1
 1032 0010 C2F88C30 	 str r3,[r2,#140]
 295:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1033              	 .loc 3 295 0
 1034 0014 BD46     	 mov sp,r7
 1035              	.LCFI103:
 1036              	 .cfi_def_cfa_register 13
 1037              	 
 1038 0016 5DF8047B 	 ldr r7,[sp],#4
 1039              	.LCFI104:
 1040              	 .cfi_restore 7
 1041              	 .cfi_def_cfa_offset 0
 1042 001a 7047     	 bx lr
 1043              	.L74:
 1044              	 .align 2
 1045              	.L73:
 1046 001c 00400050 	 .word 1342193664
 1047              	 .cfi_endproc
 1048              	.LFE174:
 1050              	 .section .text.XMC_SCU_IsTemperatureSensorEnabled,"ax",%progbits
 1051              	 .align 2
 1052              	 .global XMC_SCU_IsTemperatureSensorEnabled
 1053              	 .thumb
 1054              	 .thumb_func
 1056              	XMC_SCU_IsTemperatureSensorEnabled:
 1057              	.LFB175:
 296:../Libraries/XMCLib/src/xmc4_scu.c **** 
 297:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to provide the die temperature sensor power status. */
 298:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_IsTemperatureSensorEnabled(void)
 299:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1058              	 .loc 3 299 0
 1059              	 .cfi_startproc
 1060              	 
 1061              	 
 1062              	 
 1063 0000 80B4     	 push {r7}
 1064              	.LCFI105:
 1065              	 .cfi_def_cfa_offset 4
 1066              	 .cfi_offset 7,-4
 1067 0002 00AF     	 add r7,sp,#0
 1068              	.LCFI106:
 1069              	 .cfi_def_cfa_register 7
 300:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 1070              	 .loc 3 300 0
 1071 0004 074B     	 ldr r3,.L77
 1072 0006 D3F88C30 	 ldr r3,[r3,#140]
 1073 000a 03F00103 	 and r3,r3,#1
 1074 000e 002B     	 cmp r3,#0
 1075 0010 0CBF     	 ite eq
 1076 0012 0123     	 moveq r3,#1
 1077 0014 0023     	 movne r3,#0
 1078 0016 DBB2     	 uxtb r3,r3
 301:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1079              	 .loc 3 301 0
 1080 0018 1846     	 mov r0,r3
 1081 001a BD46     	 mov sp,r7
 1082              	.LCFI107:
 1083              	 .cfi_def_cfa_register 13
 1084              	 
 1085 001c 5DF8047B 	 ldr r7,[sp],#4
 1086              	.LCFI108:
 1087              	 .cfi_restore 7
 1088              	 .cfi_def_cfa_offset 0
 1089 0020 7047     	 bx lr
 1090              	.L78:
 1091 0022 00BF     	 .align 2
 1092              	.L77:
 1093 0024 00400050 	 .word 1342193664
 1094              	 .cfi_endproc
 1095              	.LFE175:
 1097              	 .section .text.XMC_SCU_IsTemperatureSensorReady,"ax",%progbits
 1098              	 .align 2
 1099              	 .global XMC_SCU_IsTemperatureSensorReady
 1100              	 .thumb
 1101              	 .thumb_func
 1103              	XMC_SCU_IsTemperatureSensorReady:
 1104              	.LFB176:
 302:../Libraries/XMCLib/src/xmc4_scu.c **** 
 303:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to check if the die temperature sensor is ready to start a measurement. */
 304:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_IsTemperatureSensorReady(void)
 305:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1105              	 .loc 3 305 0
 1106              	 .cfi_startproc
 1107              	 
 1108              	 
 1109              	 
 1110 0000 80B4     	 push {r7}
 1111              	.LCFI109:
 1112              	 .cfi_def_cfa_offset 4
 1113              	 .cfi_offset 7,-4
 1114 0002 00AF     	 add r7,sp,#0
 1115              	.LCFI110:
 1116              	 .cfi_def_cfa_register 7
 306:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 1117              	 .loc 3 306 0
 1118 0004 074B     	 ldr r3,.L81
 1119 0006 D3F89030 	 ldr r3,[r3,#144]
 1120 000a 03F48043 	 and r3,r3,#16384
 1121 000e 002B     	 cmp r3,#0
 1122 0010 14BF     	 ite ne
 1123 0012 0123     	 movne r3,#1
 1124 0014 0023     	 moveq r3,#0
 1125 0016 DBB2     	 uxtb r3,r3
 307:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1126              	 .loc 3 307 0
 1127 0018 1846     	 mov r0,r3
 1128 001a BD46     	 mov sp,r7
 1129              	.LCFI111:
 1130              	 .cfi_def_cfa_register 13
 1131              	 
 1132 001c 5DF8047B 	 ldr r7,[sp],#4
 1133              	.LCFI112:
 1134              	 .cfi_restore 7
 1135              	 .cfi_def_cfa_offset 0
 1136 0020 7047     	 bx lr
 1137              	.L82:
 1138 0022 00BF     	 .align 2
 1139              	.L81:
 1140 0024 00400050 	 .word 1342193664
 1141              	 .cfi_endproc
 1142              	.LFE176:
 1144              	 .section .text.XMC_SCU_StartTemperatureMeasurement,"ax",%progbits
 1145              	 .align 2
 1146              	 .global XMC_SCU_StartTemperatureMeasurement
 1147              	 .thumb
 1148              	 .thumb_func
 1150              	XMC_SCU_StartTemperatureMeasurement:
 1151              	.LFB177:
 308:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to start device temperature measurements */
 309:../Libraries/XMCLib/src/xmc4_scu.c **** XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void)
 310:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1152              	 .loc 3 310 0
 1153              	 .cfi_startproc
 1154              	 
 1155              	 
 1156 0000 80B5     	 push {r7,lr}
 1157              	.LCFI113:
 1158              	 .cfi_def_cfa_offset 8
 1159              	 .cfi_offset 7,-8
 1160              	 .cfi_offset 14,-4
 1161 0002 82B0     	 sub sp,sp,#8
 1162              	.LCFI114:
 1163              	 .cfi_def_cfa_offset 16
 1164 0004 00AF     	 add r7,sp,#0
 1165              	.LCFI115:
 1166              	 .cfi_def_cfa_register 7
 311:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 1167              	 .loc 3 311 0
 1168 0006 0023     	 movs r3,#0
 1169 0008 FB71     	 strb r3,[r7,#7]
 312:../Libraries/XMCLib/src/xmc4_scu.c **** 
 313:../Libraries/XMCLib/src/xmc4_scu.c ****   if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 1170              	 .loc 3 313 0
 1171 000a FFF7FEFF 	 bl XMC_SCU_IsTemperatureSensorEnabled
 1172 000e 0346     	 mov r3,r0
 1173 0010 83F00103 	 eor r3,r3,#1
 1174 0014 DBB2     	 uxtb r3,r3
 1175 0016 002B     	 cmp r3,#0
 1176 0018 01D0     	 beq .L84
 314:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 315:../Libraries/XMCLib/src/xmc4_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 1177              	 .loc 3 315 0
 1178 001a 0123     	 movs r3,#1
 1179 001c FB71     	 strb r3,[r7,#7]
 1180              	.L84:
 316:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 317:../Libraries/XMCLib/src/xmc4_scu.c ****    
 318:../Libraries/XMCLib/src/xmc4_scu.c ****   if (XMC_SCU_IsTemperatureSensorBusy() == true)
 1181              	 .loc 3 318 0
 1182 001e FFF7FEFF 	 bl XMC_SCU_IsTemperatureSensorBusy
 1183 0022 0346     	 mov r3,r0
 1184 0024 002B     	 cmp r3,#0
 1185 0026 01D0     	 beq .L85
 319:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 320:../Libraries/XMCLib/src/xmc4_scu.c ****     status = XMC_SCU_STATUS_BUSY;
 1186              	 .loc 3 320 0
 1187 0028 0223     	 movs r3,#2
 1188 002a FB71     	 strb r3,[r7,#7]
 1189              	.L85:
 321:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 322:../Libraries/XMCLib/src/xmc4_scu.c **** 
 323:../Libraries/XMCLib/src/xmc4_scu.c ****   /* And start the measurement */
 324:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 1190              	 .loc 3 324 0
 1191 002c 064A     	 ldr r2,.L87
 1192 002e 064B     	 ldr r3,.L87
 1193 0030 D3F88C30 	 ldr r3,[r3,#140]
 1194 0034 43F00203 	 orr r3,r3,#2
 1195 0038 C2F88C30 	 str r3,[r2,#140]
 325:../Libraries/XMCLib/src/xmc4_scu.c ****   
 326:../Libraries/XMCLib/src/xmc4_scu.c ****   return (status);
 1196              	 .loc 3 326 0
 1197 003c FB79     	 ldrb r3,[r7,#7]
 327:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1198              	 .loc 3 327 0
 1199 003e 1846     	 mov r0,r3
 1200 0040 0837     	 adds r7,r7,#8
 1201              	.LCFI116:
 1202              	 .cfi_def_cfa_offset 8
 1203 0042 BD46     	 mov sp,r7
 1204              	.LCFI117:
 1205              	 .cfi_def_cfa_register 13
 1206              	 
 1207 0044 80BD     	 pop {r7,pc}
 1208              	.L88:
 1209 0046 00BF     	 .align 2
 1210              	.L87:
 1211 0048 00400050 	 .word 1342193664
 1212              	 .cfi_endproc
 1213              	.LFE177:
 1215              	 .section .text.XMC_SCU_GetTemperatureMeasurement,"ax",%progbits
 1216              	 .align 2
 1217              	 .global XMC_SCU_GetTemperatureMeasurement
 1218              	 .thumb
 1219              	 .thumb_func
 1221              	XMC_SCU_GetTemperatureMeasurement:
 1222              	.LFB178:
 328:../Libraries/XMCLib/src/xmc4_scu.c **** 
 329:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to retrieve the temperature measured */
 330:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_GetTemperatureMeasurement(void)
 331:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1223              	 .loc 3 331 0
 1224              	 .cfi_startproc
 1225              	 
 1226              	 
 1227 0000 80B5     	 push {r7,lr}
 1228              	.LCFI118:
 1229              	 .cfi_def_cfa_offset 8
 1230              	 .cfi_offset 7,-8
 1231              	 .cfi_offset 14,-4
 1232 0002 82B0     	 sub sp,sp,#8
 1233              	.LCFI119:
 1234              	 .cfi_def_cfa_offset 16
 1235 0004 00AF     	 add r7,sp,#0
 1236              	.LCFI120:
 1237              	 .cfi_def_cfa_register 7
 332:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t temperature;
 333:../Libraries/XMCLib/src/xmc4_scu.c **** 
 334:../Libraries/XMCLib/src/xmc4_scu.c ****   if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 1238              	 .loc 3 334 0
 1239 0006 FFF7FEFF 	 bl XMC_SCU_IsTemperatureSensorEnabled
 1240 000a 0346     	 mov r3,r0
 1241 000c 83F00103 	 eor r3,r3,#1
 1242 0010 DBB2     	 uxtb r3,r3
 1243 0012 002B     	 cmp r3,#0
 1244 0014 03D0     	 beq .L90
 335:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 336:../Libraries/XMCLib/src/xmc4_scu.c ****     temperature = 0x7FFFFFFFUL;
 1245              	 .loc 3 336 0
 1246 0016 6FF00043 	 mvn r3,#-2147483648
 1247 001a 7B60     	 str r3,[r7,#4]
 1248 001c 05E0     	 b .L91
 1249              	.L90:
 337:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 338:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 339:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 340:../Libraries/XMCLib/src/xmc4_scu.c ****     temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL
 1250              	 .loc 3 340 0
 1251 001e 054B     	 ldr r3,.L93
 1252 0020 D3F89030 	 ldr r3,[r3,#144]
 1253 0024 C3F30903 	 ubfx r3,r3,#0,#10
 1254 0028 7B60     	 str r3,[r7,#4]
 1255              	.L91:
 341:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 342:../Libraries/XMCLib/src/xmc4_scu.c ****   
 343:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((uint32_t)temperature);
 1256              	 .loc 3 343 0
 1257 002a 7B68     	 ldr r3,[r7,#4]
 344:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1258              	 .loc 3 344 0
 1259 002c 1846     	 mov r0,r3
 1260 002e 0837     	 adds r7,r7,#8
 1261              	.LCFI121:
 1262              	 .cfi_def_cfa_offset 8
 1263 0030 BD46     	 mov sp,r7
 1264              	.LCFI122:
 1265              	 .cfi_def_cfa_register 13
 1266              	 
 1267 0032 80BD     	 pop {r7,pc}
 1268              	.L94:
 1269              	 .align 2
 1270              	.L93:
 1271 0034 00400050 	 .word 1342193664
 1272              	 .cfi_endproc
 1273              	.LFE178:
 1275              	 .section .text.XMC_SCU_IsTemperatureSensorBusy,"ax",%progbits
 1276              	 .align 2
 1277              	 .global XMC_SCU_IsTemperatureSensorBusy
 1278              	 .thumb
 1279              	 .thumb_func
 1281              	XMC_SCU_IsTemperatureSensorBusy:
 1282              	.LFB179:
 345:../Libraries/XMCLib/src/xmc4_scu.c **** 
 346:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to know whether Die temperature sensor is busy */
 347:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_IsTemperatureSensorBusy(void)
 348:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1283              	 .loc 3 348 0
 1284              	 .cfi_startproc
 1285              	 
 1286              	 
 1287              	 
 1288 0000 80B4     	 push {r7}
 1289              	.LCFI123:
 1290              	 .cfi_def_cfa_offset 4
 1291              	 .cfi_offset 7,-4
 1292 0002 00AF     	 add r7,sp,#0
 1293              	.LCFI124:
 1294              	 .cfi_def_cfa_register 7
 349:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 1295              	 .loc 3 349 0
 1296 0004 074B     	 ldr r3,.L97
 1297 0006 D3F89030 	 ldr r3,[r3,#144]
 1298 000a 03F40043 	 and r3,r3,#32768
 1299 000e 002B     	 cmp r3,#0
 1300 0010 14BF     	 ite ne
 1301 0012 0123     	 movne r3,#1
 1302 0014 0023     	 moveq r3,#0
 1303 0016 DBB2     	 uxtb r3,r3
 350:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1304              	 .loc 3 350 0
 1305 0018 1846     	 mov r0,r3
 1306 001a BD46     	 mov sp,r7
 1307              	.LCFI125:
 1308              	 .cfi_def_cfa_register 13
 1309              	 
 1310 001c 5DF8047B 	 ldr r7,[sp],#4
 1311              	.LCFI126:
 1312              	 .cfi_restore 7
 1313              	 .cfi_def_cfa_offset 0
 1314 0020 7047     	 bx lr
 1315              	.L98:
 1316 0022 00BF     	 .align 2
 1317              	.L97:
 1318 0024 00400050 	 .word 1342193664
 1319              	 .cfi_endproc
 1320              	.LFE179:
 1322              	 .section .text.XMC_SCU_WriteToRetentionMemory,"ax",%progbits
 1323              	 .align 2
 1324              	 .global XMC_SCU_WriteToRetentionMemory
 1325              	 .thumb
 1326              	 .thumb_func
 1328              	XMC_SCU_WriteToRetentionMemory:
 1329              	.LFB180:
 351:../Libraries/XMCLib/src/xmc4_scu.c **** 
 352:../Libraries/XMCLib/src/xmc4_scu.c **** 
 353:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(SCU_GENERAL_DTEMPLIM_LOWER_Msk) && defined(SCU_GENERAL_DTEMPLIM_UPPER_Msk)
 354:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to determine if device temperature has gone past the ceiling */
 355:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_HighTemperature(void)
 356:../Libraries/XMCLib/src/xmc4_scu.c **** {
 357:../Libraries/XMCLib/src/xmc4_scu.c ****   bool ret_val;
 358:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t   dtscon;
 359:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t   dtempalarm;
 360:../Libraries/XMCLib/src/xmc4_scu.c ****   dtscon = SCU_GENERAL->DTSCON;
 361:../Libraries/XMCLib/src/xmc4_scu.c ****   dtscon = dtscon & SCU_GENERAL_DTSCON_PWD_Msk;
 362:../Libraries/XMCLib/src/xmc4_scu.c **** 
 363:../Libraries/XMCLib/src/xmc4_scu.c ****   ret_val = false;
 364:../Libraries/XMCLib/src/xmc4_scu.c **** 
 365:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Any audit makes sense only if the DTS were powered up */  
 366:../Libraries/XMCLib/src/xmc4_scu.c ****   if(dtscon)
 367:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 368:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Powered down - return false */
 369:../Libraries/XMCLib/src/xmc4_scu.c ****     ret_val = false;
 370:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 371:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 372:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 373:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Powered up - Read the overflow bit and decide accordingly*/
 374:../Libraries/XMCLib/src/xmc4_scu.c ****     dtempalarm = SCU_GENERAL->DTEMPALARM;
 375:../Libraries/XMCLib/src/xmc4_scu.c ****     dtempalarm = dtempalarm & SCU_GENERAL_DTEMPALARM_OVERFL_Msk;
 376:../Libraries/XMCLib/src/xmc4_scu.c ****     
 377:../Libraries/XMCLib/src/xmc4_scu.c ****     if(dtempalarm)
 378:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 379:../Libraries/XMCLib/src/xmc4_scu.c ****       ret_val = true;
 380:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 381:../Libraries/XMCLib/src/xmc4_scu.c ****     else
 382:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 383:../Libraries/XMCLib/src/xmc4_scu.c ****       ret_val = false;
 384:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 385:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 386:../Libraries/XMCLib/src/xmc4_scu.c ****   return (ret_val);
 387:../Libraries/XMCLib/src/xmc4_scu.c **** }
 388:../Libraries/XMCLib/src/xmc4_scu.c **** 
 389:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program raw values of temperature limits into the DTS */
 390:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_SetRawTempLimits(const uint32_t lower_temp, const uint32_t upper_temp)
 391:../Libraries/XMCLib/src/xmc4_scu.c **** {
 392:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Power up the DTS module */
 393:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON &= (uint32_t)~SCU_GENERAL_DTSCON_PWD_Msk;
 394:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTEMPLIM = 0;
 395:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTEMPLIM = (lower_temp & SCU_GENERAL_DTEMPLIM_LOWER_Msk);
 396:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTEMPLIM |= (uint32_t)((upper_temp & SCU_GENERAL_DTEMPLIM_LOWER_Msk) << SCU_GENERAL_
 397:../Libraries/XMCLib/src/xmc4_scu.c **** }
 398:../Libraries/XMCLib/src/xmc4_scu.c **** 
 399:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to determine if device temperature has gone below the stipulated limit */
 400:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_LowTemperature(void)
 401:../Libraries/XMCLib/src/xmc4_scu.c **** {
 402:../Libraries/XMCLib/src/xmc4_scu.c ****   bool ret_val;
 403:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t   dtscon;
 404:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t   dtempalarm;
 405:../Libraries/XMCLib/src/xmc4_scu.c ****   dtscon = SCU_GENERAL->DTSCON;
 406:../Libraries/XMCLib/src/xmc4_scu.c ****   dtscon = dtscon & SCU_GENERAL_DTSCON_PWD_Msk;
 407:../Libraries/XMCLib/src/xmc4_scu.c **** 
 408:../Libraries/XMCLib/src/xmc4_scu.c ****   ret_val = false;
 409:../Libraries/XMCLib/src/xmc4_scu.c **** 
 410:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Any audit makes sense only if the DTS were powered up */  
 411:../Libraries/XMCLib/src/xmc4_scu.c ****   if(dtscon)
 412:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 413:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Powered down - return false */
 414:../Libraries/XMCLib/src/xmc4_scu.c ****     ret_val = false;
 415:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 416:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 417:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 418:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Powered up - Read the overflow bit and decide accordingly*/
 419:../Libraries/XMCLib/src/xmc4_scu.c ****     dtempalarm = SCU_GENERAL->DTEMPALARM;
 420:../Libraries/XMCLib/src/xmc4_scu.c ****     dtempalarm = dtempalarm & SCU_GENERAL_DTEMPALARM_UNDERFL_Msk;
 421:../Libraries/XMCLib/src/xmc4_scu.c ****     
 422:../Libraries/XMCLib/src/xmc4_scu.c ****     if(dtempalarm)
 423:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 424:../Libraries/XMCLib/src/xmc4_scu.c ****       ret_val = true;
 425:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 426:../Libraries/XMCLib/src/xmc4_scu.c ****     else
 427:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 428:../Libraries/XMCLib/src/xmc4_scu.c ****       ret_val = false;
 429:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 430:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 431:../Libraries/XMCLib/src/xmc4_scu.c ****   
 432:../Libraries/XMCLib/src/xmc4_scu.c ****   return (ret_val);
 433:../Libraries/XMCLib/src/xmc4_scu.c **** }
 434:../Libraries/XMCLib/src/xmc4_scu.c **** #endif  
 435:../Libraries/XMCLib/src/xmc4_scu.c **** 
 436:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to write into Retention memory in hibernate domain */
 437:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
 438:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1330              	 .loc 3 438 0
 1331              	 .cfi_startproc
 1332              	 
 1333              	 
 1334              	 
 1335 0000 80B4     	 push {r7}
 1336              	.LCFI127:
 1337              	 .cfi_def_cfa_offset 4
 1338              	 .cfi_offset 7,-4
 1339 0002 85B0     	 sub sp,sp,#20
 1340              	.LCFI128:
 1341              	 .cfi_def_cfa_offset 24
 1342 0004 00AF     	 add r7,sp,#0
 1343              	.LCFI129:
 1344              	 .cfi_def_cfa_register 7
 1345 0006 7860     	 str r0,[r7,#4]
 1346 0008 3960     	 str r1,[r7]
 439:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t rmacr;
 440:../Libraries/XMCLib/src/xmc4_scu.c ****   
 441:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Get the address right */  
 442:../Libraries/XMCLib/src/xmc4_scu.c ****   rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk
 1347              	 .loc 3 442 0
 1348 000a 7B68     	 ldr r3,[r7,#4]
 1349 000c 1B04     	 lsls r3,r3,#16
 1350 000e 03F47023 	 and r3,r3,#983040
 1351 0012 FB60     	 str r3,[r7,#12]
 443:../Libraries/XMCLib/src/xmc4_scu.c ****   
 444:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Transfer from RMDATA to Retention memory */
 445:../Libraries/XMCLib/src/xmc4_scu.c ****   rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 1352              	 .loc 3 445 0
 1353 0014 FB68     	 ldr r3,[r7,#12]
 1354 0016 43F00103 	 orr r3,r3,#1
 1355 001a FB60     	 str r3,[r7,#12]
 446:../Libraries/XMCLib/src/xmc4_scu.c ****   
 447:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Write desired data into RMDATA register */  
 448:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->RMDATA = data;
 1356              	 .loc 3 448 0
 1357 001c 0A4A     	 ldr r2,.L101
 1358 001e 3B68     	 ldr r3,[r7]
 1359 0020 C2F8CC30 	 str r3,[r2,#204]
 449:../Libraries/XMCLib/src/xmc4_scu.c ****   
 450:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Write address & direction of transfer into RMACR register */  
 451:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->RMACR = rmacr;
 1360              	 .loc 3 451 0
 1361 0024 084A     	 ldr r2,.L101
 1362 0026 FB68     	 ldr r3,[r7,#12]
 1363 0028 C2F8C830 	 str r3,[r2,#200]
 452:../Libraries/XMCLib/src/xmc4_scu.c ****   
 453:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Wait until the update of RMX register in hibernate domain is completed */
 454:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 1364              	 .loc 3 454 0
 1365 002c 00BF     	 nop
 1366              	.L100:
 1367              	 .loc 3 454 0 is_stmt 0 discriminator 1
 1368 002e 064B     	 ldr r3,.L101
 1369 0030 D3F8C430 	 ldr r3,[r3,#196]
 1370 0034 03F40053 	 and r3,r3,#8192
 1371 0038 002B     	 cmp r3,#0
 1372 003a F8D1     	 bne .L100
 455:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 456:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 457:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1373              	 .loc 3 457 0 is_stmt 1
 1374 003c 1437     	 adds r7,r7,#20
 1375              	.LCFI130:
 1376              	 .cfi_def_cfa_offset 4
 1377 003e BD46     	 mov sp,r7
 1378              	.LCFI131:
 1379              	 .cfi_def_cfa_register 13
 1380              	 
 1381 0040 5DF8047B 	 ldr r7,[sp],#4
 1382              	.LCFI132:
 1383              	 .cfi_restore 7
 1384              	 .cfi_def_cfa_offset 0
 1385 0044 7047     	 bx lr
 1386              	.L102:
 1387 0046 00BF     	 .align 2
 1388              	.L101:
 1389 0048 00400050 	 .word 1342193664
 1390              	 .cfi_endproc
 1391              	.LFE180:
 1393              	 .section .text.XMC_SCU_ReadFromRetentionMemory,"ax",%progbits
 1394              	 .align 2
 1395              	 .global XMC_SCU_ReadFromRetentionMemory
 1396              	 .thumb
 1397              	 .thumb_func
 1399              	XMC_SCU_ReadFromRetentionMemory:
 1400              	.LFB181:
 458:../Libraries/XMCLib/src/xmc4_scu.c **** 
 459:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to read from Retention memory in hibernate domain */
 460:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
 461:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1401              	 .loc 3 461 0
 1402              	 .cfi_startproc
 1403              	 
 1404              	 
 1405              	 
 1406 0000 80B4     	 push {r7}
 1407              	.LCFI133:
 1408              	 .cfi_def_cfa_offset 4
 1409              	 .cfi_offset 7,-4
 1410 0002 85B0     	 sub sp,sp,#20
 1411              	.LCFI134:
 1412              	 .cfi_def_cfa_offset 24
 1413 0004 00AF     	 add r7,sp,#0
 1414              	.LCFI135:
 1415              	 .cfi_def_cfa_register 7
 1416 0006 7860     	 str r0,[r7,#4]
 462:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t rmacr;
 463:../Libraries/XMCLib/src/xmc4_scu.c **** 
 464:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Get the address right */  
 465:../Libraries/XMCLib/src/xmc4_scu.c ****   rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk
 1417              	 .loc 3 465 0
 1418 0008 7B68     	 ldr r3,[r7,#4]
 1419 000a 1B04     	 lsls r3,r3,#16
 1420 000c 03F47023 	 and r3,r3,#983040
 1421 0010 FB60     	 str r3,[r7,#12]
 466:../Libraries/XMCLib/src/xmc4_scu.c ****   
 467:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Transfer from RMDATA to Retention memory */
 468:../Libraries/XMCLib/src/xmc4_scu.c ****   rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
 1422              	 .loc 3 468 0
 1423 0012 FB68     	 ldr r3,[r7,#12]
 1424 0014 23F00103 	 bic r3,r3,#1
 1425 0018 FB60     	 str r3,[r7,#12]
 469:../Libraries/XMCLib/src/xmc4_scu.c ****   
 470:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Writing an adress & direction of transfer into RMACR register */  
 471:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->RMACR = rmacr;
 1426              	 .loc 3 471 0
 1427 001a 0A4A     	 ldr r2,.L106
 1428 001c FB68     	 ldr r3,[r7,#12]
 1429 001e C2F8C830 	 str r3,[r2,#200]
 472:../Libraries/XMCLib/src/xmc4_scu.c ****   
 473:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Wait until the update of RMX register in hibernate domain is completed */
 474:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 1430              	 .loc 3 474 0
 1431 0022 00BF     	 nop
 1432              	.L104:
 1433              	 .loc 3 474 0 is_stmt 0 discriminator 1
 1434 0024 074B     	 ldr r3,.L106
 1435 0026 D3F8C430 	 ldr r3,[r3,#196]
 1436 002a 03F40053 	 and r3,r3,#8192
 1437 002e 002B     	 cmp r3,#0
 1438 0030 F8D1     	 bne .L104
 475:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 476:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 477:../Libraries/XMCLib/src/xmc4_scu.c **** 
 478:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_GENERAL->RMDATA);
 1439              	 .loc 3 478 0 is_stmt 1
 1440 0032 044B     	 ldr r3,.L106
 1441 0034 D3F8CC30 	 ldr r3,[r3,#204]
 479:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1442              	 .loc 3 479 0
 1443 0038 1846     	 mov r0,r3
 1444 003a 1437     	 adds r7,r7,#20
 1445              	.LCFI136:
 1446              	 .cfi_def_cfa_offset 4
 1447 003c BD46     	 mov sp,r7
 1448              	.LCFI137:
 1449              	 .cfi_def_cfa_register 13
 1450              	 
 1451 003e 5DF8047B 	 ldr r7,[sp],#4
 1452              	.LCFI138:
 1453              	 .cfi_restore 7
 1454              	 .cfi_def_cfa_offset 0
 1455 0042 7047     	 bx lr
 1456              	.L107:
 1457              	 .align 2
 1458              	.L106:
 1459 0044 00400050 	 .word 1342193664
 1460              	 .cfi_endproc
 1461              	.LFE181:
 1463              	 .section .text.XMC_SCU_CLOCK_Init,"ax",%progbits
 1464              	 .align 2
 1465              	 .global XMC_SCU_CLOCK_Init
 1466              	 .thumb
 1467              	 .thumb_func
 1469              	XMC_SCU_CLOCK_Init:
 1470              	.LFB182:
 480:../Libraries/XMCLib/src/xmc4_scu.c **** 
 481:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to initialize the clock tree */
 482:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
 483:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1471              	 .loc 3 483 0
 1472              	 .cfi_startproc
 1473              	 
 1474              	 
 1475 0000 B0B5     	 push {r4,r5,r7,lr}
 1476              	.LCFI139:
 1477              	 .cfi_def_cfa_offset 16
 1478              	 .cfi_offset 4,-16
 1479              	 .cfi_offset 5,-12
 1480              	 .cfi_offset 7,-8
 1481              	 .cfi_offset 14,-4
 1482 0002 84B0     	 sub sp,sp,#16
 1483              	.LCFI140:
 1484              	 .cfi_def_cfa_offset 32
 1485 0004 02AF     	 add r7,sp,#8
 1486              	.LCFI141:
 1487              	 .cfi_def_cfa 7,24
 1488 0006 7860     	 str r0,[r7,#4]
 484:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", config->fsys_clkdiv != 0);
 485:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", config->fcpu_clkdiv != 0);
 486:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", config->fccu_clkdiv != 0);
 487:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", config->fperipheral_clkdiv != 0);
 488:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", ((config->syspll_config.p_div != 0) &&
 489:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)) ||
 490:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR));
 491:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", ((config->syspll_config.n_div != 0) &&
 492:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)) ||
 493:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR));
 494:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", (config->syspll_config.k_div != 0) &&
 495:../Libraries/XMCLib/src/xmc4_scu.c ****                  ((config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL) ||
 496:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR)));
 497:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", ((config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL) ||
 498:../Libraries/XMCLib/src/xmc4_scu.c ****                  (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_OFI)) &&
 499:../Libraries/XMCLib/src/xmc4_scu.c ****                  ((config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL) ||
 500:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR)));
 501:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_oscu
 502:../Libraries/XMCLib/src/xmc4_scu.c ****                  (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
 503:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
 504:../Libraries/XMCLib/src/xmc4_scu.c ****                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_
 505:../Libraries/XMCLib/src/xmc4_scu.c **** 
 506:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 1489              	 .loc 3 506 0
 1490 0008 0020     	 movs r0,#0
 1491 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_SetSystemClockSource
 507:../Libraries/XMCLib/src/xmc4_scu.c **** 
 508:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_HIB_EnableHibernateDomain();
 1492              	 .loc 3 508 0
 1493 000e FFF7FEFF 	 bl XMC_SCU_HIB_EnableHibernateDomain
 509:../Libraries/XMCLib/src/xmc4_scu.c ****   if (config->enable_osculp == true)
 1494              	 .loc 3 509 0
 1495 0012 7B68     	 ldr r3,[r7,#4]
 1496 0014 DB79     	 ldrb r3,[r3,#7]
 1497 0016 002B     	 cmp r3,#0
 1498 0018 01D0     	 beq .L109
 510:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 511:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_EnableLowPowerOscillator();
 1499              	 .loc 3 511 0
 1500 001a FFF7FEFF 	 bl XMC_SCU_CLOCK_EnableLowPowerOscillator
 1501              	.L109:
 512:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 513:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 1502              	 .loc 3 513 0
 1503 001e 7B68     	 ldr r3,[r7,#4]
 1504 0020 5B7A     	 ldrb r3,[r3,#9]
 1505 0022 1846     	 mov r0,r3
 1506 0024 FFF7FEFF 	 bl XMC_SCU_HIB_SetStandbyClockSource
 514:../Libraries/XMCLib/src/xmc4_scu.c **** 
 515:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 1507              	 .loc 3 515 0
 1508 0028 7B68     	 ldr r3,[r7,#4]
 1509 002a 1B7A     	 ldrb r3,[r3,#8]
 1510 002c 1846     	 mov r0,r3
 1511 002e FFF7FEFF 	 bl XMC_SCU_CLOCK_SetBackupClockCalibrationMode
 516:../Libraries/XMCLib/src/xmc4_scu.c **** 
 517:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 1512              	 .loc 3 517 0
 1513 0032 7B68     	 ldr r3,[r7,#4]
 1514 0034 1B7C     	 ldrb r3,[r3,#16]
 1515 0036 1846     	 mov r0,r3
 1516 0038 FFF7FEFF 	 bl XMC_SCU_CLOCK_SetSystemClockDivider
 518:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 1517              	 .loc 3 518 0
 1518 003c 7B68     	 ldr r3,[r7,#4]
 1519 003e 5B7C     	 ldrb r3,[r3,#17]
 1520 0040 1846     	 mov r0,r3
 1521 0042 FFF7FEFF 	 bl XMC_SCU_CLOCK_SetCpuClockDivider
 519:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 1522              	 .loc 3 519 0
 1523 0046 7B68     	 ldr r3,[r7,#4]
 1524 0048 9B7C     	 ldrb r3,[r3,#18]
 1525 004a 1846     	 mov r0,r3
 1526 004c FFF7FEFF 	 bl XMC_SCU_CLOCK_SetCcuClockDivider
 520:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 1527              	 .loc 3 520 0
 1528 0050 7B68     	 ldr r3,[r7,#4]
 1529 0052 DB7C     	 ldrb r3,[r3,#19]
 1530 0054 1846     	 mov r0,r3
 1531 0056 FFF7FEFF 	 bl XMC_SCU_CLOCK_SetPeripheralClockDivider
 521:../Libraries/XMCLib/src/xmc4_scu.c **** 
 522:../Libraries/XMCLib/src/xmc4_scu.c ****   if (config->enable_oschp == true)
 1532              	 .loc 3 522 0
 1533 005a 7B68     	 ldr r3,[r7,#4]
 1534 005c 9B79     	 ldrb r3,[r3,#6]
 1535 005e 002B     	 cmp r3,#0
 1536 0060 01D0     	 beq .L110
 523:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 524:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 1537              	 .loc 3 524 0
 1538 0062 FFF7FEFF 	 bl XMC_SCU_CLOCK_EnableHighPerformanceOscillator
 1539              	.L110:
 525:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 526:../Libraries/XMCLib/src/xmc4_scu.c **** 
 527:../Libraries/XMCLib/src/xmc4_scu.c ****   if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 1540              	 .loc 3 527 0
 1541 0066 7B68     	 ldr r3,[r7,#4]
 1542 0068 DB78     	 ldrb r3,[r3,#3]
 1543 006a 002B     	 cmp r3,#0
 1544 006c 02D1     	 bne .L111
 528:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 529:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_DisableSystemPll();
 1545              	 .loc 3 529 0
 1546 006e FFF7FEFF 	 bl XMC_SCU_CLOCK_DisableSystemPll
 1547 0072 14E0     	 b .L112
 1548              	.L111:
 530:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 531:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 532:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 533:../Libraries/XMCLib/src/xmc4_scu.c **** 
 534:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_EnableSystemPll();
 1549              	 .loc 3 534 0
 1550 0074 FFF7FEFF 	 bl XMC_SCU_CLOCK_EnableSystemPll
 535:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 1551              	 .loc 3 535 0
 1552 0078 7B68     	 ldr r3,[r7,#4]
 1553 007a 9988     	 ldrh r1,[r3,#4]
 1554 007c 7B68     	 ldr r3,[r7,#4]
 1555 007e DA78     	 ldrb r2,[r3,#3]
 536:../Libraries/XMCLib/src/xmc4_scu.c ****                                  config->syspll_config.mode,
 537:../Libraries/XMCLib/src/xmc4_scu.c ****                                  (uint32_t)config->syspll_config.p_div,
 1556              	 .loc 3 537 0
 1557 0080 7B68     	 ldr r3,[r7,#4]
 1558 0082 5B78     	 ldrb r3,[r3,#1]
 535:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 1559              	 .loc 3 535 0
 1560 0084 1D46     	 mov r5,r3
 538:../Libraries/XMCLib/src/xmc4_scu.c ****                                  (uint32_t)config->syspll_config.n_div,
 1561              	 .loc 3 538 0
 1562 0086 7B68     	 ldr r3,[r7,#4]
 1563 0088 1B78     	 ldrb r3,[r3]
 535:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 1564              	 .loc 3 535 0
 1565 008a 1C46     	 mov r4,r3
 539:../Libraries/XMCLib/src/xmc4_scu.c ****                                  (uint32_t)config->syspll_config.k_div);
 1566              	 .loc 3 539 0
 1567 008c 7B68     	 ldr r3,[r7,#4]
 1568 008e 9B78     	 ldrb r3,[r3,#2]
 535:../Libraries/XMCLib/src/xmc4_scu.c ****                                  config->syspll_config.mode,
 1569              	 .loc 3 535 0
 1570 0090 0093     	 str r3,[sp]
 1571 0092 0846     	 mov r0,r1
 1572 0094 1146     	 mov r1,r2
 1573 0096 2A46     	 mov r2,r5
 1574 0098 2346     	 mov r3,r4
 1575 009a FFF7FEFF 	 bl XMC_SCU_CLOCK_StartSystemPll
 1576              	.L112:
 540:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 541:../Libraries/XMCLib/src/xmc4_scu.c **** 
 542:../Libraries/XMCLib/src/xmc4_scu.c ****   /* use SYSPLL? */
 543:../Libraries/XMCLib/src/xmc4_scu.c ****   if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 1577              	 .loc 3 543 0
 1578 009e 7B68     	 ldr r3,[r7,#4]
 1579 00a0 DB68     	 ldr r3,[r3,#12]
 1580 00a2 B3F5803F 	 cmp r3,#65536
 1581 00a6 03D1     	 bne .L113
 544:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 545:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 1582              	 .loc 3 545 0
 1583 00a8 4FF48030 	 mov r0,#65536
 1584 00ac FFF7FEFF 	 bl XMC_SCU_CLOCK_SetSystemClockSource
 1585              	.L113:
 546:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 547:../Libraries/XMCLib/src/xmc4_scu.c ****   SystemCoreClockUpdate();
 1586              	 .loc 3 547 0
 1587 00b0 FFF7FEFF 	 bl SystemCoreClockUpdate
 548:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1588              	 .loc 3 548 0
 1589 00b4 0837     	 adds r7,r7,#8
 1590              	.LCFI142:
 1591              	 .cfi_def_cfa_offset 16
 1592 00b6 BD46     	 mov sp,r7
 1593              	.LCFI143:
 1594              	 .cfi_def_cfa_register 13
 1595              	 
 1596 00b8 B0BD     	 pop {r4,r5,r7,pc}
 1597              	 .cfi_endproc
 1598              	.LFE182:
 1600 00ba 00BF     	 .section .text.XMC_SCU_TRAP_Enable,"ax",%progbits
 1601              	 .align 2
 1602              	 .global XMC_SCU_TRAP_Enable
 1603              	 .thumb
 1604              	 .thumb_func
 1606              	XMC_SCU_TRAP_Enable:
 1607              	.LFB183:
 549:../Libraries/XMCLib/src/xmc4_scu.c **** 
 550:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable a trap source */
 551:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_TRAP_Enable(const uint32_t trap)
 552:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1608              	 .loc 3 552 0
 1609              	 .cfi_startproc
 1610              	 
 1611              	 
 1612              	 
 1613 0000 80B4     	 push {r7}
 1614              	.LCFI144:
 1615              	 .cfi_def_cfa_offset 4
 1616              	 .cfi_offset 7,-4
 1617 0002 83B0     	 sub sp,sp,#12
 1618              	.LCFI145:
 1619              	 .cfi_def_cfa_offset 16
 1620 0004 00AF     	 add r7,sp,#0
 1621              	.LCFI146:
 1622              	 .cfi_def_cfa_register 7
 1623 0006 7860     	 str r0,[r7,#4]
 553:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 1624              	 .loc 3 553 0
 1625 0008 0549     	 ldr r1,.L115
 1626 000a 054B     	 ldr r3,.L115
 1627 000c 9A68     	 ldr r2,[r3,#8]
 1628 000e 7B68     	 ldr r3,[r7,#4]
 1629 0010 DB43     	 mvns r3,r3
 1630 0012 1340     	 ands r3,r3,r2
 1631 0014 8B60     	 str r3,[r1,#8]
 554:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1632              	 .loc 3 554 0
 1633 0016 0C37     	 adds r7,r7,#12
 1634              	.LCFI147:
 1635              	 .cfi_def_cfa_offset 4
 1636 0018 BD46     	 mov sp,r7
 1637              	.LCFI148:
 1638              	 .cfi_def_cfa_register 13
 1639              	 
 1640 001a 5DF8047B 	 ldr r7,[sp],#4
 1641              	.LCFI149:
 1642              	 .cfi_restore 7
 1643              	 .cfi_def_cfa_offset 0
 1644 001e 7047     	 bx lr
 1645              	.L116:
 1646              	 .align 2
 1647              	.L115:
 1648 0020 60410050 	 .word 1342194016
 1649              	 .cfi_endproc
 1650              	.LFE183:
 1652              	 .section .text.XMC_SCU_TRAP_Disable,"ax",%progbits
 1653              	 .align 2
 1654              	 .global XMC_SCU_TRAP_Disable
 1655              	 .thumb
 1656              	 .thumb_func
 1658              	XMC_SCU_TRAP_Disable:
 1659              	.LFB184:
 555:../Libraries/XMCLib/src/xmc4_scu.c **** 
 556:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable a trap source */
 557:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_TRAP_Disable(const uint32_t trap)
 558:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1660              	 .loc 3 558 0
 1661              	 .cfi_startproc
 1662              	 
 1663              	 
 1664              	 
 1665 0000 80B4     	 push {r7}
 1666              	.LCFI150:
 1667              	 .cfi_def_cfa_offset 4
 1668              	 .cfi_offset 7,-4
 1669 0002 83B0     	 sub sp,sp,#12
 1670              	.LCFI151:
 1671              	 .cfi_def_cfa_offset 16
 1672 0004 00AF     	 add r7,sp,#0
 1673              	.LCFI152:
 1674              	 .cfi_def_cfa_register 7
 1675 0006 7860     	 str r0,[r7,#4]
 559:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 1676              	 .loc 3 559 0
 1677 0008 0549     	 ldr r1,.L118
 1678 000a 054B     	 ldr r3,.L118
 1679 000c 9A68     	 ldr r2,[r3,#8]
 1680 000e 7B68     	 ldr r3,[r7,#4]
 1681 0010 1343     	 orrs r3,r3,r2
 1682 0012 8B60     	 str r3,[r1,#8]
 560:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1683              	 .loc 3 560 0
 1684 0014 0C37     	 adds r7,r7,#12
 1685              	.LCFI153:
 1686              	 .cfi_def_cfa_offset 4
 1687 0016 BD46     	 mov sp,r7
 1688              	.LCFI154:
 1689              	 .cfi_def_cfa_register 13
 1690              	 
 1691 0018 5DF8047B 	 ldr r7,[sp],#4
 1692              	.LCFI155:
 1693              	 .cfi_restore 7
 1694              	 .cfi_def_cfa_offset 0
 1695 001c 7047     	 bx lr
 1696              	.L119:
 1697 001e 00BF     	 .align 2
 1698              	.L118:
 1699 0020 60410050 	 .word 1342194016
 1700              	 .cfi_endproc
 1701              	.LFE184:
 1703              	 .section .text.XMC_SCU_TRAP_GetStatus,"ax",%progbits
 1704              	 .align 2
 1705              	 .global XMC_SCU_TRAP_GetStatus
 1706              	 .thumb
 1707              	 .thumb_func
 1709              	XMC_SCU_TRAP_GetStatus:
 1710              	.LFB185:
 561:../Libraries/XMCLib/src/xmc4_scu.c **** 
 562:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to determine if a trap source has generated event */
 563:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_TRAP_GetStatus(void)
 564:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1711              	 .loc 3 564 0
 1712              	 .cfi_startproc
 1713              	 
 1714              	 
 1715              	 
 1716 0000 80B4     	 push {r7}
 1717              	.LCFI156:
 1718              	 .cfi_def_cfa_offset 4
 1719              	 .cfi_offset 7,-4
 1720 0002 00AF     	 add r7,sp,#0
 1721              	.LCFI157:
 1722              	 .cfi_def_cfa_register 7
 565:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_TRAP->TRAPRAW);
 1723              	 .loc 3 565 0
 1724 0004 034B     	 ldr r3,.L122
 1725 0006 5B68     	 ldr r3,[r3,#4]
 566:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1726              	 .loc 3 566 0
 1727 0008 1846     	 mov r0,r3
 1728 000a BD46     	 mov sp,r7
 1729              	.LCFI158:
 1730              	 .cfi_def_cfa_register 13
 1731              	 
 1732 000c 5DF8047B 	 ldr r7,[sp],#4
 1733              	.LCFI159:
 1734              	 .cfi_restore 7
 1735              	 .cfi_def_cfa_offset 0
 1736 0010 7047     	 bx lr
 1737              	.L123:
 1738 0012 00BF     	 .align 2
 1739              	.L122:
 1740 0014 60410050 	 .word 1342194016
 1741              	 .cfi_endproc
 1742              	.LFE185:
 1744              	 .section .text.XMC_SCU_TRAP_Trigger,"ax",%progbits
 1745              	 .align 2
 1746              	 .global XMC_SCU_TRAP_Trigger
 1747              	 .thumb
 1748              	 .thumb_func
 1750              	XMC_SCU_TRAP_Trigger:
 1751              	.LFB186:
 567:../Libraries/XMCLib/src/xmc4_scu.c **** 
 568:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to manually trigger a trap event */
 569:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_TRAP_Trigger(const uint32_t trap)
 570:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1752              	 .loc 3 570 0
 1753              	 .cfi_startproc
 1754              	 
 1755              	 
 1756              	 
 1757 0000 80B4     	 push {r7}
 1758              	.LCFI160:
 1759              	 .cfi_def_cfa_offset 4
 1760              	 .cfi_offset 7,-4
 1761 0002 83B0     	 sub sp,sp,#12
 1762              	.LCFI161:
 1763              	 .cfi_def_cfa_offset 16
 1764 0004 00AF     	 add r7,sp,#0
 1765              	.LCFI162:
 1766              	 .cfi_def_cfa_register 7
 1767 0006 7860     	 str r0,[r7,#4]
 571:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_TRAP->TRAPSET = (uint32_t)trap;
 1768              	 .loc 3 571 0
 1769 0008 034A     	 ldr r2,.L125
 1770 000a 7B68     	 ldr r3,[r7,#4]
 1771 000c 1361     	 str r3,[r2,#16]
 572:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1772              	 .loc 3 572 0
 1773 000e 0C37     	 adds r7,r7,#12
 1774              	.LCFI163:
 1775              	 .cfi_def_cfa_offset 4
 1776 0010 BD46     	 mov sp,r7
 1777              	.LCFI164:
 1778              	 .cfi_def_cfa_register 13
 1779              	 
 1780 0012 5DF8047B 	 ldr r7,[sp],#4
 1781              	.LCFI165:
 1782              	 .cfi_restore 7
 1783              	 .cfi_def_cfa_offset 0
 1784 0016 7047     	 bx lr
 1785              	.L126:
 1786              	 .align 2
 1787              	.L125:
 1788 0018 60410050 	 .word 1342194016
 1789              	 .cfi_endproc
 1790              	.LFE186:
 1792              	 .section .text.XMC_SCU_TRAP_ClearStatus,"ax",%progbits
 1793              	 .align 2
 1794              	 .global XMC_SCU_TRAP_ClearStatus
 1795              	 .thumb
 1796              	 .thumb_func
 1798              	XMC_SCU_TRAP_ClearStatus:
 1799              	.LFB187:
 573:../Libraries/XMCLib/src/xmc4_scu.c **** 
 574:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to clear a trap event */
 575:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
 576:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1800              	 .loc 3 576 0
 1801              	 .cfi_startproc
 1802              	 
 1803              	 
 1804              	 
 1805 0000 80B4     	 push {r7}
 1806              	.LCFI166:
 1807              	 .cfi_def_cfa_offset 4
 1808              	 .cfi_offset 7,-4
 1809 0002 83B0     	 sub sp,sp,#12
 1810              	.LCFI167:
 1811              	 .cfi_def_cfa_offset 16
 1812 0004 00AF     	 add r7,sp,#0
 1813              	.LCFI168:
 1814              	 .cfi_def_cfa_register 7
 1815 0006 7860     	 str r0,[r7,#4]
 577:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_TRAP->TRAPCLR = (uint32_t)trap;
 1816              	 .loc 3 577 0
 1817 0008 034A     	 ldr r2,.L128
 1818 000a 7B68     	 ldr r3,[r7,#4]
 1819 000c D360     	 str r3,[r2,#12]
 578:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1820              	 .loc 3 578 0
 1821 000e 0C37     	 adds r7,r7,#12
 1822              	.LCFI169:
 1823              	 .cfi_def_cfa_offset 4
 1824 0010 BD46     	 mov sp,r7
 1825              	.LCFI170:
 1826              	 .cfi_def_cfa_register 13
 1827              	 
 1828 0012 5DF8047B 	 ldr r7,[sp],#4
 1829              	.LCFI171:
 1830              	 .cfi_restore 7
 1831              	 .cfi_def_cfa_offset 0
 1832 0016 7047     	 bx lr
 1833              	.L129:
 1834              	 .align 2
 1835              	.L128:
 1836 0018 60410050 	 .word 1342194016
 1837              	 .cfi_endproc
 1838              	.LFE187:
 1840              	 .section .text.XMC_SCU_PARITY_ClearStatus,"ax",%progbits
 1841              	 .align 2
 1842              	 .global XMC_SCU_PARITY_ClearStatus
 1843              	 .thumb
 1844              	 .thumb_func
 1846              	XMC_SCU_PARITY_ClearStatus:
 1847              	.LFB188:
 579:../Libraries/XMCLib/src/xmc4_scu.c **** 
 580:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to clear parity error event */
 581:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
 582:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1848              	 .loc 3 582 0
 1849              	 .cfi_startproc
 1850              	 
 1851              	 
 1852              	 
 1853 0000 80B4     	 push {r7}
 1854              	.LCFI172:
 1855              	 .cfi_def_cfa_offset 4
 1856              	 .cfi_offset 7,-4
 1857 0002 83B0     	 sub sp,sp,#12
 1858              	.LCFI173:
 1859              	 .cfi_def_cfa_offset 16
 1860 0004 00AF     	 add r7,sp,#0
 1861              	.LCFI174:
 1862              	 .cfi_def_cfa_register 7
 1863 0006 7860     	 str r0,[r7,#4]
 583:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 1864              	 .loc 3 583 0
 1865 0008 0549     	 ldr r1,.L131
 1866 000a 054B     	 ldr r3,.L131
 1867 000c 5A69     	 ldr r2,[r3,#20]
 1868 000e 7B68     	 ldr r3,[r7,#4]
 1869 0010 1343     	 orrs r3,r3,r2
 1870 0012 4B61     	 str r3,[r1,#20]
 584:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1871              	 .loc 3 584 0
 1872 0014 0C37     	 adds r7,r7,#12
 1873              	.LCFI175:
 1874              	 .cfi_def_cfa_offset 4
 1875 0016 BD46     	 mov sp,r7
 1876              	.LCFI176:
 1877              	 .cfi_def_cfa_register 13
 1878              	 
 1879 0018 5DF8047B 	 ldr r7,[sp],#4
 1880              	.LCFI177:
 1881              	 .cfi_restore 7
 1882              	 .cfi_def_cfa_offset 0
 1883 001c 7047     	 bx lr
 1884              	.L132:
 1885 001e 00BF     	 .align 2
 1886              	.L131:
 1887 0020 3C410050 	 .word 1342193980
 1888              	 .cfi_endproc
 1889              	.LFE188:
 1891              	 .section .text.XMC_SCU_PARITY_GetStatus,"ax",%progbits
 1892              	 .align 2
 1893              	 .global XMC_SCU_PARITY_GetStatus
 1894              	 .thumb
 1895              	 .thumb_func
 1897              	XMC_SCU_PARITY_GetStatus:
 1898              	.LFB189:
 585:../Libraries/XMCLib/src/xmc4_scu.c **** 
 586:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to determine if the specified parity error has occured or not */
 587:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_PARITY_GetStatus(void)
 588:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1899              	 .loc 3 588 0
 1900              	 .cfi_startproc
 1901              	 
 1902              	 
 1903              	 
 1904 0000 80B4     	 push {r7}
 1905              	.LCFI178:
 1906              	 .cfi_def_cfa_offset 4
 1907              	 .cfi_offset 7,-4
 1908 0002 00AF     	 add r7,sp,#0
 1909              	.LCFI179:
 1910              	 .cfi_def_cfa_register 7
 589:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_PARITY->PEFLAG);
 1911              	 .loc 3 589 0
 1912 0004 034B     	 ldr r3,.L135
 1913 0006 5B69     	 ldr r3,[r3,#20]
 590:../Libraries/XMCLib/src/xmc4_scu.c **** } 
 1914              	 .loc 3 590 0
 1915 0008 1846     	 mov r0,r3
 1916 000a BD46     	 mov sp,r7
 1917              	.LCFI180:
 1918              	 .cfi_def_cfa_register 13
 1919              	 
 1920 000c 5DF8047B 	 ldr r7,[sp],#4
 1921              	.LCFI181:
 1922              	 .cfi_restore 7
 1923              	 .cfi_def_cfa_offset 0
 1924 0010 7047     	 bx lr
 1925              	.L136:
 1926 0012 00BF     	 .align 2
 1927              	.L135:
 1928 0014 3C410050 	 .word 1342193980
 1929              	 .cfi_endproc
 1930              	.LFE189:
 1932              	 .section .text.XMC_SCU_PARITY_Enable,"ax",%progbits
 1933              	 .align 2
 1934              	 .global XMC_SCU_PARITY_Enable
 1935              	 .thumb
 1936              	 .thumb_func
 1938              	XMC_SCU_PARITY_Enable:
 1939              	.LFB190:
 591:../Libraries/XMCLib/src/xmc4_scu.c **** 
 592:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable parity error checking for the selected on-chip RAM type */
 593:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_PARITY_Enable(const uint32_t memory)
 594:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1940              	 .loc 3 594 0
 1941              	 .cfi_startproc
 1942              	 
 1943              	 
 1944              	 
 1945 0000 80B4     	 push {r7}
 1946              	.LCFI182:
 1947              	 .cfi_def_cfa_offset 4
 1948              	 .cfi_offset 7,-4
 1949 0002 83B0     	 sub sp,sp,#12
 1950              	.LCFI183:
 1951              	 .cfi_def_cfa_offset 16
 1952 0004 00AF     	 add r7,sp,#0
 1953              	.LCFI184:
 1954              	 .cfi_def_cfa_register 7
 1955 0006 7860     	 str r0,[r7,#4]
 595:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PARITY->PEEN |= (uint32_t)memory; 
 1956              	 .loc 3 595 0
 1957 0008 0549     	 ldr r1,.L138
 1958 000a 054B     	 ldr r3,.L138
 1959 000c 1A68     	 ldr r2,[r3]
 1960 000e 7B68     	 ldr r3,[r7,#4]
 1961 0010 1343     	 orrs r3,r3,r2
 1962 0012 0B60     	 str r3,[r1]
 596:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1963              	 .loc 3 596 0
 1964 0014 0C37     	 adds r7,r7,#12
 1965              	.LCFI185:
 1966              	 .cfi_def_cfa_offset 4
 1967 0016 BD46     	 mov sp,r7
 1968              	.LCFI186:
 1969              	 .cfi_def_cfa_register 13
 1970              	 
 1971 0018 5DF8047B 	 ldr r7,[sp],#4
 1972              	.LCFI187:
 1973              	 .cfi_restore 7
 1974              	 .cfi_def_cfa_offset 0
 1975 001c 7047     	 bx lr
 1976              	.L139:
 1977 001e 00BF     	 .align 2
 1978              	.L138:
 1979 0020 3C410050 	 .word 1342193980
 1980              	 .cfi_endproc
 1981              	.LFE190:
 1983              	 .section .text.XMC_SCU_PARITY_Disable,"ax",%progbits
 1984              	 .align 2
 1985              	 .global XMC_SCU_PARITY_Disable
 1986              	 .thumb
 1987              	 .thumb_func
 1989              	XMC_SCU_PARITY_Disable:
 1990              	.LFB191:
 597:../Libraries/XMCLib/src/xmc4_scu.c **** 
 598:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable parity error checking for the selected on-chip RAM type */
 599:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_PARITY_Disable(const uint32_t memory)
 600:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1991              	 .loc 3 600 0
 1992              	 .cfi_startproc
 1993              	 
 1994              	 
 1995              	 
 1996 0000 80B4     	 push {r7}
 1997              	.LCFI188:
 1998              	 .cfi_def_cfa_offset 4
 1999              	 .cfi_offset 7,-4
 2000 0002 83B0     	 sub sp,sp,#12
 2001              	.LCFI189:
 2002              	 .cfi_def_cfa_offset 16
 2003 0004 00AF     	 add r7,sp,#0
 2004              	.LCFI190:
 2005              	 .cfi_def_cfa_register 7
 2006 0006 7860     	 str r0,[r7,#4]
 601:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PARITY->PEEN &= (uint32_t)~memory; 
 2007              	 .loc 3 601 0
 2008 0008 0549     	 ldr r1,.L141
 2009 000a 054B     	 ldr r3,.L141
 2010 000c 1A68     	 ldr r2,[r3]
 2011 000e 7B68     	 ldr r3,[r7,#4]
 2012 0010 DB43     	 mvns r3,r3
 2013 0012 1340     	 ands r3,r3,r2
 2014 0014 0B60     	 str r3,[r1]
 602:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2015              	 .loc 3 602 0
 2016 0016 0C37     	 adds r7,r7,#12
 2017              	.LCFI191:
 2018              	 .cfi_def_cfa_offset 4
 2019 0018 BD46     	 mov sp,r7
 2020              	.LCFI192:
 2021              	 .cfi_def_cfa_register 13
 2022              	 
 2023 001a 5DF8047B 	 ldr r7,[sp],#4
 2024              	.LCFI193:
 2025              	 .cfi_restore 7
 2026              	 .cfi_def_cfa_offset 0
 2027 001e 7047     	 bx lr
 2028              	.L142:
 2029              	 .align 2
 2030              	.L141:
 2031 0020 3C410050 	 .word 1342193980
 2032              	 .cfi_endproc
 2033              	.LFE191:
 2035              	 .section .text.XMC_SCU_PARITY_EnableTrapGeneration,"ax",%progbits
 2036              	 .align 2
 2037              	 .global XMC_SCU_PARITY_EnableTrapGeneration
 2038              	 .thumb
 2039              	 .thumb_func
 2041              	XMC_SCU_PARITY_EnableTrapGeneration:
 2042              	.LFB192:
 603:../Libraries/XMCLib/src/xmc4_scu.c **** 
 604:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable trap assertion for the parity error source */
 605:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
 606:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2043              	 .loc 3 606 0
 2044              	 .cfi_startproc
 2045              	 
 2046              	 
 2047              	 
 2048 0000 80B4     	 push {r7}
 2049              	.LCFI194:
 2050              	 .cfi_def_cfa_offset 4
 2051              	 .cfi_offset 7,-4
 2052 0002 83B0     	 sub sp,sp,#12
 2053              	.LCFI195:
 2054              	 .cfi_def_cfa_offset 16
 2055 0004 00AF     	 add r7,sp,#0
 2056              	.LCFI196:
 2057              	 .cfi_def_cfa_register 7
 2058 0006 7860     	 str r0,[r7,#4]
 607:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PARITY->PETE |= (uint32_t)memory; 
 2059              	 .loc 3 607 0
 2060 0008 0549     	 ldr r1,.L144
 2061 000a 054B     	 ldr r3,.L144
 2062 000c 9A68     	 ldr r2,[r3,#8]
 2063 000e 7B68     	 ldr r3,[r7,#4]
 2064 0010 1343     	 orrs r3,r3,r2
 2065 0012 8B60     	 str r3,[r1,#8]
 608:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2066              	 .loc 3 608 0
 2067 0014 0C37     	 adds r7,r7,#12
 2068              	.LCFI197:
 2069              	 .cfi_def_cfa_offset 4
 2070 0016 BD46     	 mov sp,r7
 2071              	.LCFI198:
 2072              	 .cfi_def_cfa_register 13
 2073              	 
 2074 0018 5DF8047B 	 ldr r7,[sp],#4
 2075              	.LCFI199:
 2076              	 .cfi_restore 7
 2077              	 .cfi_def_cfa_offset 0
 2078 001c 7047     	 bx lr
 2079              	.L145:
 2080 001e 00BF     	 .align 2
 2081              	.L144:
 2082 0020 3C410050 	 .word 1342193980
 2083              	 .cfi_endproc
 2084              	.LFE192:
 2086              	 .section .text.XMC_SCU_PARITY_DisableTrapGeneration,"ax",%progbits
 2087              	 .align 2
 2088              	 .global XMC_SCU_PARITY_DisableTrapGeneration
 2089              	 .thumb
 2090              	 .thumb_func
 2092              	XMC_SCU_PARITY_DisableTrapGeneration:
 2093              	.LFB193:
 609:../Libraries/XMCLib/src/xmc4_scu.c **** 
 610:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable the assertion of trap for the parity error source */
 611:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
 612:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2094              	 .loc 3 612 0
 2095              	 .cfi_startproc
 2096              	 
 2097              	 
 2098              	 
 2099 0000 80B4     	 push {r7}
 2100              	.LCFI200:
 2101              	 .cfi_def_cfa_offset 4
 2102              	 .cfi_offset 7,-4
 2103 0002 83B0     	 sub sp,sp,#12
 2104              	.LCFI201:
 2105              	 .cfi_def_cfa_offset 16
 2106 0004 00AF     	 add r7,sp,#0
 2107              	.LCFI202:
 2108              	 .cfi_def_cfa_register 7
 2109 0006 7860     	 str r0,[r7,#4]
 613:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PARITY->PETE &= (uint32_t)~memory; 
 2110              	 .loc 3 613 0
 2111 0008 0549     	 ldr r1,.L147
 2112 000a 054B     	 ldr r3,.L147
 2113 000c 9A68     	 ldr r2,[r3,#8]
 2114 000e 7B68     	 ldr r3,[r7,#4]
 2115 0010 DB43     	 mvns r3,r3
 2116 0012 1340     	 ands r3,r3,r2
 2117 0014 8B60     	 str r3,[r1,#8]
 614:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2118              	 .loc 3 614 0
 2119 0016 0C37     	 adds r7,r7,#12
 2120              	.LCFI203:
 2121              	 .cfi_def_cfa_offset 4
 2122 0018 BD46     	 mov sp,r7
 2123              	.LCFI204:
 2124              	 .cfi_def_cfa_register 13
 2125              	 
 2126 001a 5DF8047B 	 ldr r7,[sp],#4
 2127              	.LCFI205:
 2128              	 .cfi_restore 7
 2129              	 .cfi_def_cfa_offset 0
 2130 001e 7047     	 bx lr
 2131              	.L148:
 2132              	 .align 2
 2133              	.L147:
 2134 0020 3C410050 	 .word 1342193980
 2135              	 .cfi_endproc
 2136              	.LFE193:
 2138              	 .section .text.XMC_SCU_INTERRUPT_EnableNmiRequest,"ax",%progbits
 2139              	 .align 2
 2140              	 .global XMC_SCU_INTERRUPT_EnableNmiRequest
 2141              	 .thumb
 2142              	 .thumb_func
 2144              	XMC_SCU_INTERRUPT_EnableNmiRequest:
 2145              	.LFB194:
 615:../Libraries/XMCLib/src/xmc4_scu.c **** 
 616:../Libraries/XMCLib/src/xmc4_scu.c **** /* Enables a NMI source */
 617:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
 618:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2146              	 .loc 3 618 0
 2147              	 .cfi_startproc
 2148              	 
 2149              	 
 2150              	 
 2151 0000 80B4     	 push {r7}
 2152              	.LCFI206:
 2153              	 .cfi_def_cfa_offset 4
 2154              	 .cfi_offset 7,-4
 2155 0002 83B0     	 sub sp,sp,#12
 2156              	.LCFI207:
 2157              	 .cfi_def_cfa_offset 16
 2158 0004 00AF     	 add r7,sp,#0
 2159              	.LCFI208:
 2160              	 .cfi_def_cfa_register 7
 2161 0006 7860     	 str r0,[r7,#4]
 619:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 2162              	 .loc 3 619 0
 2163 0008 0549     	 ldr r1,.L150
 2164 000a 054B     	 ldr r3,.L150
 2165 000c 5A69     	 ldr r2,[r3,#20]
 2166 000e 7B68     	 ldr r3,[r7,#4]
 2167 0010 1343     	 orrs r3,r3,r2
 2168 0012 4B61     	 str r3,[r1,#20]
 620:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2169              	 .loc 3 620 0
 2170 0014 0C37     	 adds r7,r7,#12
 2171              	.LCFI209:
 2172              	 .cfi_def_cfa_offset 4
 2173 0016 BD46     	 mov sp,r7
 2174              	.LCFI210:
 2175              	 .cfi_def_cfa_register 13
 2176              	 
 2177 0018 5DF8047B 	 ldr r7,[sp],#4
 2178              	.LCFI211:
 2179              	 .cfi_restore 7
 2180              	 .cfi_def_cfa_offset 0
 2181 001c 7047     	 bx lr
 2182              	.L151:
 2183 001e 00BF     	 .align 2
 2184              	.L150:
 2185 0020 74400050 	 .word 1342193780
 2186              	 .cfi_endproc
 2187              	.LFE194:
 2189              	 .section .text.XMC_SCU_INTERRUPT_DisableNmiRequest,"ax",%progbits
 2190              	 .align 2
 2191              	 .global XMC_SCU_INTERRUPT_DisableNmiRequest
 2192              	 .thumb
 2193              	 .thumb_func
 2195              	XMC_SCU_INTERRUPT_DisableNmiRequest:
 2196              	.LFB195:
 621:../Libraries/XMCLib/src/xmc4_scu.c **** 
 622:../Libraries/XMCLib/src/xmc4_scu.c **** /* Disables a NMI source */
 623:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
 624:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2197              	 .loc 3 624 0
 2198              	 .cfi_startproc
 2199              	 
 2200              	 
 2201              	 
 2202 0000 80B4     	 push {r7}
 2203              	.LCFI212:
 2204              	 .cfi_def_cfa_offset 4
 2205              	 .cfi_offset 7,-4
 2206 0002 83B0     	 sub sp,sp,#12
 2207              	.LCFI213:
 2208              	 .cfi_def_cfa_offset 16
 2209 0004 00AF     	 add r7,sp,#0
 2210              	.LCFI214:
 2211              	 .cfi_def_cfa_register 7
 2212 0006 7860     	 str r0,[r7,#4]
 625:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 2213              	 .loc 3 625 0
 2214 0008 0549     	 ldr r1,.L153
 2215 000a 054B     	 ldr r3,.L153
 2216 000c 5A69     	 ldr r2,[r3,#20]
 2217 000e 7B68     	 ldr r3,[r7,#4]
 2218 0010 DB43     	 mvns r3,r3
 2219 0012 1340     	 ands r3,r3,r2
 2220 0014 4B61     	 str r3,[r1,#20]
 626:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2221              	 .loc 3 626 0
 2222 0016 0C37     	 adds r7,r7,#12
 2223              	.LCFI215:
 2224              	 .cfi_def_cfa_offset 4
 2225 0018 BD46     	 mov sp,r7
 2226              	.LCFI216:
 2227              	 .cfi_def_cfa_register 13
 2228              	 
 2229 001a 5DF8047B 	 ldr r7,[sp],#4
 2230              	.LCFI217:
 2231              	 .cfi_restore 7
 2232              	 .cfi_def_cfa_offset 0
 2233 001e 7047     	 bx lr
 2234              	.L154:
 2235              	 .align 2
 2236              	.L153:
 2237 0020 74400050 	 .word 1342193780
 2238              	 .cfi_endproc
 2239              	.LFE195:
 2241              	 .section .text.XMC_SCU_RESET_AssertPeripheralReset,"ax",%progbits
 2242              	 .align 2
 2243              	 .global XMC_SCU_RESET_AssertPeripheralReset
 2244              	 .thumb
 2245              	 .thumb_func
 2247              	XMC_SCU_RESET_AssertPeripheralReset:
 2248              	.LFB196:
 627:../Libraries/XMCLib/src/xmc4_scu.c **** 
 628:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to manually assert a reset request */
 629:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
 630:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2249              	 .loc 3 630 0
 2250              	 .cfi_startproc
 2251              	 
 2252              	 
 2253              	 
 2254 0000 80B4     	 push {r7}
 2255              	.LCFI218:
 2256              	 .cfi_def_cfa_offset 4
 2257              	 .cfi_offset 7,-4
 2258 0002 85B0     	 sub sp,sp,#20
 2259              	.LCFI219:
 2260              	 .cfi_def_cfa_offset 24
 2261 0004 00AF     	 add r7,sp,#0
 2262              	.LCFI220:
 2263              	 .cfi_def_cfa_register 7
 2264 0006 7860     	 str r0,[r7,#4]
 631:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 2265              	 .loc 3 631 0
 2266 0008 7B68     	 ldr r3,[r7,#4]
 2267 000a 1B0F     	 lsrs r3,r3,#28
 2268 000c FB60     	 str r3,[r7,#12]
 632:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 2269              	 .loc 3 632 0
 2270 000e 7B68     	 ldr r3,[r7,#4]
 2271 0010 23F07043 	 bic r3,r3,#-268435456
 2272 0014 BB60     	 str r3,[r7,#8]
 633:../Libraries/XMCLib/src/xmc4_scu.c **** 
 634:../Libraries/XMCLib/src/xmc4_scu.c ****   *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 2273              	 .loc 3 634 0
 2274 0016 FA68     	 ldr r2,[r7,#12]
 2275 0018 1346     	 mov r3,r2
 2276 001a 5B00     	 lsls r3,r3,#1
 2277 001c 1344     	 add r3,r3,r2
 2278 001e 9B00     	 lsls r3,r3,#2
 2279 0020 1A46     	 mov r2,r3
 2280 0022 044B     	 ldr r3,.L156
 2281 0024 1344     	 add r3,r3,r2
 2282 0026 BA68     	 ldr r2,[r7,#8]
 2283 0028 1A60     	 str r2,[r3]
 635:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2284              	 .loc 3 635 0
 2285 002a 1437     	 adds r7,r7,#20
 2286              	.LCFI221:
 2287              	 .cfi_def_cfa_offset 4
 2288 002c BD46     	 mov sp,r7
 2289              	.LCFI222:
 2290              	 .cfi_def_cfa_register 13
 2291              	 
 2292 002e 5DF8047B 	 ldr r7,[sp],#4
 2293              	.LCFI223:
 2294              	 .cfi_restore 7
 2295              	 .cfi_def_cfa_offset 0
 2296 0032 7047     	 bx lr
 2297              	.L157:
 2298              	 .align 2
 2299              	.L156:
 2300 0034 10440050 	 .word 1342194704
 2301              	 .cfi_endproc
 2302              	.LFE196:
 2304              	 .section .text.XMC_SCU_RESET_DeassertPeripheralReset,"ax",%progbits
 2305              	 .align 2
 2306              	 .global XMC_SCU_RESET_DeassertPeripheralReset
 2307              	 .thumb
 2308              	 .thumb_func
 2310              	XMC_SCU_RESET_DeassertPeripheralReset:
 2311              	.LFB197:
 636:../Libraries/XMCLib/src/xmc4_scu.c **** 
 637:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to manually de-assert a reset request */
 638:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
 639:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2312              	 .loc 3 639 0
 2313              	 .cfi_startproc
 2314              	 
 2315              	 
 2316              	 
 2317 0000 80B4     	 push {r7}
 2318              	.LCFI224:
 2319              	 .cfi_def_cfa_offset 4
 2320              	 .cfi_offset 7,-4
 2321 0002 85B0     	 sub sp,sp,#20
 2322              	.LCFI225:
 2323              	 .cfi_def_cfa_offset 24
 2324 0004 00AF     	 add r7,sp,#0
 2325              	.LCFI226:
 2326              	 .cfi_def_cfa_register 7
 2327 0006 7860     	 str r0,[r7,#4]
 640:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 2328              	 .loc 3 640 0
 2329 0008 7B68     	 ldr r3,[r7,#4]
 2330 000a 1B0F     	 lsrs r3,r3,#28
 2331 000c FB60     	 str r3,[r7,#12]
 641:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 2332              	 .loc 3 641 0
 2333 000e 7B68     	 ldr r3,[r7,#4]
 2334 0010 23F07043 	 bic r3,r3,#-268435456
 2335 0014 BB60     	 str r3,[r7,#8]
 642:../Libraries/XMCLib/src/xmc4_scu.c **** 
 643:../Libraries/XMCLib/src/xmc4_scu.c ****   *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 2336              	 .loc 3 643 0
 2337 0016 FA68     	 ldr r2,[r7,#12]
 2338 0018 1346     	 mov r3,r2
 2339 001a 5B00     	 lsls r3,r3,#1
 2340 001c 1344     	 add r3,r3,r2
 2341 001e 9B00     	 lsls r3,r3,#2
 2342 0020 1A46     	 mov r2,r3
 2343 0022 044B     	 ldr r3,.L159
 2344 0024 1344     	 add r3,r3,r2
 2345 0026 BA68     	 ldr r2,[r7,#8]
 2346 0028 1A60     	 str r2,[r3]
 644:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2347              	 .loc 3 644 0
 2348 002a 1437     	 adds r7,r7,#20
 2349              	.LCFI227:
 2350              	 .cfi_def_cfa_offset 4
 2351 002c BD46     	 mov sp,r7
 2352              	.LCFI228:
 2353              	 .cfi_def_cfa_register 13
 2354              	 
 2355 002e 5DF8047B 	 ldr r7,[sp],#4
 2356              	.LCFI229:
 2357              	 .cfi_restore 7
 2358              	 .cfi_def_cfa_offset 0
 2359 0032 7047     	 bx lr
 2360              	.L160:
 2361              	 .align 2
 2362              	.L159:
 2363 0034 14440050 	 .word 1342194708
 2364              	 .cfi_endproc
 2365              	.LFE197:
 2367              	 .section .text.XMC_SCU_RESET_IsPeripheralResetAsserted,"ax",%progbits
 2368              	 .align 2
 2369              	 .global XMC_SCU_RESET_IsPeripheralResetAsserted
 2370              	 .thumb
 2371              	 .thumb_func
 2373              	XMC_SCU_RESET_IsPeripheralResetAsserted:
 2374              	.LFB198:
 645:../Libraries/XMCLib/src/xmc4_scu.c **** 
 646:../Libraries/XMCLib/src/xmc4_scu.c **** /* Find out if the peripheral reset is asserted */
 647:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
 648:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2375              	 .loc 3 648 0
 2376              	 .cfi_startproc
 2377              	 
 2378              	 
 2379              	 
 2380 0000 80B4     	 push {r7}
 2381              	.LCFI230:
 2382              	 .cfi_def_cfa_offset 4
 2383              	 .cfi_offset 7,-4
 2384 0002 85B0     	 sub sp,sp,#20
 2385              	.LCFI231:
 2386              	 .cfi_def_cfa_offset 24
 2387 0004 00AF     	 add r7,sp,#0
 2388              	.LCFI232:
 2389              	 .cfi_def_cfa_register 7
 2390 0006 7860     	 str r0,[r7,#4]
 649:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 2391              	 .loc 3 649 0
 2392 0008 7B68     	 ldr r3,[r7,#4]
 2393 000a 1B0F     	 lsrs r3,r3,#28
 2394 000c FB60     	 str r3,[r7,#12]
 650:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 2395              	 .loc 3 650 0
 2396 000e 7B68     	 ldr r3,[r7,#4]
 2397 0010 23F07043 	 bic r3,r3,#-268435456
 2398 0014 BB60     	 str r3,[r7,#8]
 651:../Libraries/XMCLib/src/xmc4_scu.c **** 
 652:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 2399              	 .loc 3 652 0
 2400 0016 FA68     	 ldr r2,[r7,#12]
 2401 0018 1346     	 mov r3,r2
 2402 001a 5B00     	 lsls r3,r3,#1
 2403 001c 1344     	 add r3,r3,r2
 2404 001e 9B00     	 lsls r3,r3,#2
 2405 0020 1A46     	 mov r2,r3
 2406 0022 084B     	 ldr r3,.L163
 2407 0024 1344     	 add r3,r3,r2
 2408 0026 1A68     	 ldr r2,[r3]
 2409 0028 BB68     	 ldr r3,[r7,#8]
 2410 002a 1340     	 ands r3,r3,r2
 2411 002c 002B     	 cmp r3,#0
 2412 002e 14BF     	 ite ne
 2413 0030 0123     	 movne r3,#1
 2414 0032 0023     	 moveq r3,#0
 2415 0034 DBB2     	 uxtb r3,r3
 653:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2416              	 .loc 3 653 0
 2417 0036 1846     	 mov r0,r3
 2418 0038 1437     	 adds r7,r7,#20
 2419              	.LCFI233:
 2420              	 .cfi_def_cfa_offset 4
 2421 003a BD46     	 mov sp,r7
 2422              	.LCFI234:
 2423              	 .cfi_def_cfa_register 13
 2424              	 
 2425 003c 5DF8047B 	 ldr r7,[sp],#4
 2426              	.LCFI235:
 2427              	 .cfi_restore 7
 2428              	 .cfi_def_cfa_offset 0
 2429 0040 7047     	 bx lr
 2430              	.L164:
 2431 0042 00BF     	 .align 2
 2432              	.L163:
 2433 0044 0C440050 	 .word 1342194700
 2434              	 .cfi_endproc
 2435              	.LFE198:
 2437              	 .section .text.XMC_SCU_CLOCK_GetSystemPllClockFrequency,"ax",%progbits
 2438              	 .align 2
 2439              	 .global XMC_SCU_CLOCK_GetSystemPllClockFrequency
 2440              	 .thumb
 2441              	 .thumb_func
 2443              	XMC_SCU_CLOCK_GetSystemPllClockFrequency:
 2444              	.LFB199:
 654:../Libraries/XMCLib/src/xmc4_scu.c **** 
 655:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 656:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve frequency of System PLL output clock
 657:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 658:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void)
 659:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2445              	 .loc 3 659 0
 2446              	 .cfi_startproc
 2447              	 
 2448              	 
 2449 0000 80B5     	 push {r7,lr}
 2450              	.LCFI236:
 2451              	 .cfi_def_cfa_offset 8
 2452              	 .cfi_offset 7,-8
 2453              	 .cfi_offset 14,-4
 2454 0002 84B0     	 sub sp,sp,#16
 2455              	.LCFI237:
 2456              	 .cfi_def_cfa_offset 24
 2457 0004 00AF     	 add r7,sp,#0
 2458              	.LCFI238:
 2459              	 .cfi_def_cfa_register 7
 660:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t clock_frequency;
 661:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t p_div;
 662:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t n_div;
 663:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t k2_div;
 664:../Libraries/XMCLib/src/xmc4_scu.c **** 
 665:../Libraries/XMCLib/src/xmc4_scu.c ****   clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 2460              	 .loc 3 665 0
 2461 0006 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency
 2462 000a F860     	 str r0,[r7,#12]
 666:../Libraries/XMCLib/src/xmc4_scu.c ****   if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 2463              	 .loc 3 666 0
 2464 000c 1A4B     	 ldr r3,.L169
 2465 000e 1B68     	 ldr r3,[r3]
 2466 0010 03F00103 	 and r3,r3,#1
 2467 0014 002B     	 cmp r3,#0
 2468 0016 09D0     	 beq .L166
 667:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 668:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Prescalar mode - fOSC is the parent*/
 669:../Libraries/XMCLib/src/xmc4_scu.c ****     clock_frequency = (uint32_t)(clock_frequency / 
 670:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_P
 2469              	 .loc 3 670 0
 2470 0018 174B     	 ldr r3,.L169
 2471 001a 9B68     	 ldr r3,[r3,#8]
 2472 001c 03F07F03 	 and r3,r3,#127
 2473 0020 0133     	 adds r3,r3,#1
 669:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_P
 2474              	 .loc 3 669 0
 2475 0022 FA68     	 ldr r2,[r7,#12]
 2476 0024 B2FBF3F3 	 udiv r3,r2,r3
 2477 0028 FB60     	 str r3,[r7,#12]
 2478 002a 1FE0     	 b .L167
 2479              	.L166:
 671:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 672:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 673:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 674:../Libraries/XMCLib/src/xmc4_scu.c ****     p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Po
 2480              	 .loc 3 674 0
 2481 002c 124B     	 ldr r3,.L169
 2482 002e 9B68     	 ldr r3,[r3,#8]
 2483 0030 03F07063 	 and r3,r3,#251658240
 2484 0034 1B0E     	 lsrs r3,r3,#24
 2485 0036 0133     	 adds r3,r3,#1
 2486 0038 BB60     	 str r3,[r7,#8]
 675:../Libraries/XMCLib/src/xmc4_scu.c ****     n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Po
 2487              	 .loc 3 675 0
 2488 003a 0F4B     	 ldr r3,.L169
 2489 003c 9B68     	 ldr r3,[r3,#8]
 2490 003e 03F4FE43 	 and r3,r3,#32512
 2491 0042 1B0A     	 lsrs r3,r3,#8
 2492 0044 0133     	 adds r3,r3,#1
 2493 0046 7B60     	 str r3,[r7,#4]
 676:../Libraries/XMCLib/src/xmc4_scu.c ****     k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_
 2494              	 .loc 3 676 0
 2495 0048 0B4B     	 ldr r3,.L169
 2496 004a 9B68     	 ldr r3,[r3,#8]
 2497 004c 03F4FE03 	 and r3,r3,#8323072
 2498 0050 1B0C     	 lsrs r3,r3,#16
 2499 0052 0133     	 adds r3,r3,#1
 2500 0054 3B60     	 str r3,[r7]
 677:../Libraries/XMCLib/src/xmc4_scu.c ****        
 678:../Libraries/XMCLib/src/xmc4_scu.c ****     clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 2501              	 .loc 3 678 0
 2502 0056 FB68     	 ldr r3,[r7,#12]
 2503 0058 7A68     	 ldr r2,[r7,#4]
 2504 005a 02FB03F2 	 mul r2,r2,r3
 2505 005e BB68     	 ldr r3,[r7,#8]
 2506 0060 3968     	 ldr r1,[r7]
 2507 0062 01FB03F3 	 mul r3,r1,r3
 2508 0066 B2FBF3F3 	 udiv r3,r2,r3
 2509 006a FB60     	 str r3,[r7,#12]
 2510              	.L167:
 679:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 680:../Libraries/XMCLib/src/xmc4_scu.c **** 
 681:../Libraries/XMCLib/src/xmc4_scu.c ****   return (clock_frequency);
 2511              	 .loc 3 681 0
 2512 006c FB68     	 ldr r3,[r7,#12]
 682:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2513              	 .loc 3 682 0
 2514 006e 1846     	 mov r0,r3
 2515 0070 1037     	 adds r7,r7,#16
 2516              	.LCFI239:
 2517              	 .cfi_def_cfa_offset 8
 2518 0072 BD46     	 mov sp,r7
 2519              	.LCFI240:
 2520              	 .cfi_def_cfa_register 13
 2521              	 
 2522 0074 80BD     	 pop {r7,pc}
 2523              	.L170:
 2524 0076 00BF     	 .align 2
 2525              	.L169:
 2526 0078 10470050 	 .word 1342195472
 2527              	 .cfi_endproc
 2528              	.LFE199:
 2530              	 .section .text.XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency,"ax",%progbits
 2531              	 .align 2
 2532              	 .global XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency
 2533              	 .thumb
 2534              	 .thumb_func
 2536              	XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency:
 2537              	.LFB200:
 683:../Libraries/XMCLib/src/xmc4_scu.c **** 
 684:../Libraries/XMCLib/src/xmc4_scu.c **** /**
 685:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve frequency of System PLL VCO input clock
 686:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 687:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
 688:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2538              	 .loc 3 688 0
 2539              	 .cfi_startproc
 2540              	 
 2541              	 
 2542 0000 80B5     	 push {r7,lr}
 2543              	.LCFI241:
 2544              	 .cfi_def_cfa_offset 8
 2545              	 .cfi_offset 7,-8
 2546              	 .cfi_offset 14,-4
 2547 0002 82B0     	 sub sp,sp,#8
 2548              	.LCFI242:
 2549              	 .cfi_def_cfa_offset 16
 2550 0004 00AF     	 add r7,sp,#0
 2551              	.LCFI243:
 2552              	 .cfi_def_cfa_register 7
 689:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t clock_frequency;
 690:../Libraries/XMCLib/src/xmc4_scu.c **** 
 691:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Prescalar mode - fOSC is the parent*/
 692:../Libraries/XMCLib/src/xmc4_scu.c ****   if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 2553              	 .loc 3 692 0
 2554 0006 084B     	 ldr r3,.L175
 2555 0008 DB68     	 ldr r3,[r3,#12]
 2556 000a 03F00103 	 and r3,r3,#1
 2557 000e 002B     	 cmp r3,#0
 2558 0010 03D1     	 bne .L172
 693:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 694:../Libraries/XMCLib/src/xmc4_scu.c ****     clock_frequency = OSCHP_GetFrequency();
 2559              	 .loc 3 694 0
 2560 0012 FFF7FEFF 	 bl OSCHP_GetFrequency
 2561 0016 7860     	 str r0,[r7,#4]
 2562 0018 01E0     	 b .L173
 2563              	.L172:
 695:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 696:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 697:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 698:../Libraries/XMCLib/src/xmc4_scu.c ****     clock_frequency = OFI_FREQUENCY;
 2564              	 .loc 3 698 0
 2565 001a 044B     	 ldr r3,.L175+4
 2566 001c 7B60     	 str r3,[r7,#4]
 2567              	.L173:
 699:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 700:../Libraries/XMCLib/src/xmc4_scu.c ****   
 701:../Libraries/XMCLib/src/xmc4_scu.c ****   return (clock_frequency);
 2568              	 .loc 3 701 0
 2569 001e 7B68     	 ldr r3,[r7,#4]
 702:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2570              	 .loc 3 702 0
 2571 0020 1846     	 mov r0,r3
 2572 0022 0837     	 adds r7,r7,#8
 2573              	.LCFI244:
 2574              	 .cfi_def_cfa_offset 8
 2575 0024 BD46     	 mov sp,r7
 2576              	.LCFI245:
 2577              	 .cfi_def_cfa_register 13
 2578              	 
 2579 0026 80BD     	 pop {r7,pc}
 2580              	.L176:
 2581              	 .align 2
 2582              	.L175:
 2583 0028 10470050 	 .word 1342195472
 2584 002c 00366E01 	 .word 24000000
 2585              	 .cfi_endproc
 2586              	.LFE200:
 2588              	 .section .text.XMC_SCU_CLOCK_GetUsbPllClockFrequency,"ax",%progbits
 2589              	 .align 2
 2590              	 .global XMC_SCU_CLOCK_GetUsbPllClockFrequency
 2591              	 .thumb
 2592              	 .thumb_func
 2594              	XMC_SCU_CLOCK_GetUsbPllClockFrequency:
 2595              	.LFB201:
 703:../Libraries/XMCLib/src/xmc4_scu.c **** 
 704:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 705:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve frequency of USB PLL output clock
 706:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 707:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
 708:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2596              	 .loc 3 708 0
 2597              	 .cfi_startproc
 2598              	 
 2599              	 
 2600 0000 80B5     	 push {r7,lr}
 2601              	.LCFI246:
 2602              	 .cfi_def_cfa_offset 8
 2603              	 .cfi_offset 7,-8
 2604              	 .cfi_offset 14,-4
 2605 0002 84B0     	 sub sp,sp,#16
 2606              	.LCFI247:
 2607              	 .cfi_def_cfa_offset 24
 2608 0004 00AF     	 add r7,sp,#0
 2609              	.LCFI248:
 2610              	 .cfi_def_cfa_register 7
 709:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t clock_frequency;
 710:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t n_div;
 711:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t p_div;
 712:../Libraries/XMCLib/src/xmc4_scu.c ****   
 713:../Libraries/XMCLib/src/xmc4_scu.c ****   clock_frequency = OSCHP_GetFrequency();
 2611              	 .loc 3 713 0
 2612 0006 FFF7FEFF 	 bl OSCHP_GetFrequency
 2613 000a F860     	 str r0,[r7,#12]
 714:../Libraries/XMCLib/src/xmc4_scu.c ****   if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 2614              	 .loc 3 714 0
 2615 000c 104B     	 ldr r3,.L180
 2616 000e 1B69     	 ldr r3,[r3,#16]
 2617 0010 03F00103 	 and r3,r3,#1
 2618 0014 002B     	 cmp r3,#0
 2619 0016 16D1     	 bne .L178
 715:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 716:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Normal mode - fVCO is the parent*/
 717:../Libraries/XMCLib/src/xmc4_scu.c ****     n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_ND
 2620              	 .loc 3 717 0
 2621 0018 0D4B     	 ldr r3,.L180
 2622 001a 5B69     	 ldr r3,[r3,#20]
 2623 001c 03F4FE43 	 and r3,r3,#32512
 2624 0020 1B0A     	 lsrs r3,r3,#8
 2625 0022 0133     	 adds r3,r3,#1
 2626 0024 BB60     	 str r3,[r7,#8]
 718:../Libraries/XMCLib/src/xmc4_scu.c ****     p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PD
 2627              	 .loc 3 718 0
 2628 0026 0A4B     	 ldr r3,.L180
 2629 0028 5B69     	 ldr r3,[r3,#20]
 2630 002a 03F07063 	 and r3,r3,#251658240
 2631 002e 1B0E     	 lsrs r3,r3,#24
 2632 0030 0133     	 adds r3,r3,#1
 2633 0032 7B60     	 str r3,[r7,#4]
 719:../Libraries/XMCLib/src/xmc4_scu.c ****     clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 2634              	 .loc 3 719 0
 2635 0034 FB68     	 ldr r3,[r7,#12]
 2636 0036 BA68     	 ldr r2,[r7,#8]
 2637 0038 02FB03F2 	 mul r2,r2,r3
 2638 003c 7B68     	 ldr r3,[r7,#4]
 2639 003e 5B00     	 lsls r3,r3,#1
 2640 0040 B2FBF3F3 	 udiv r3,r2,r3
 2641 0044 FB60     	 str r3,[r7,#12]
 2642              	.L178:
 720:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 721:../Libraries/XMCLib/src/xmc4_scu.c ****   return (clock_frequency);
 2643              	 .loc 3 721 0
 2644 0046 FB68     	 ldr r3,[r7,#12]
 722:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2645              	 .loc 3 722 0
 2646 0048 1846     	 mov r0,r3
 2647 004a 1037     	 adds r7,r7,#16
 2648              	.LCFI249:
 2649              	 .cfi_def_cfa_offset 8
 2650 004c BD46     	 mov sp,r7
 2651              	.LCFI250:
 2652              	 .cfi_def_cfa_register 13
 2653              	 
 2654 004e 80BD     	 pop {r7,pc}
 2655              	.L181:
 2656              	 .align 2
 2657              	.L180:
 2658 0050 10470050 	 .word 1342195472
 2659              	 .cfi_endproc
 2660              	.LFE201:
 2662              	 .section .text.XMC_SCU_CLOCK_GetCcuClockFrequency,"ax",%progbits
 2663              	 .align 2
 2664              	 .global XMC_SCU_CLOCK_GetCcuClockFrequency
 2665              	 .thumb
 2666              	 .thumb_func
 2668              	XMC_SCU_CLOCK_GetCcuClockFrequency:
 2669              	.LFB202:
 723:../Libraries/XMCLib/src/xmc4_scu.c **** 
 724:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 725:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve frequency of CCU clock frequency
 726:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 727:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
 728:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2670              	 .loc 3 728 0
 2671              	 .cfi_startproc
 2672              	 
 2673              	 
 2674 0000 80B5     	 push {r7,lr}
 2675              	.LCFI251:
 2676              	 .cfi_def_cfa_offset 8
 2677              	 .cfi_offset 7,-8
 2678              	 .cfi_offset 14,-4
 2679 0002 82B0     	 sub sp,sp,#8
 2680              	.LCFI252:
 2681              	 .cfi_def_cfa_offset 16
 2682 0004 00AF     	 add r7,sp,#0
 2683              	.LCFI253:
 2684              	 .cfi_def_cfa_register 7
 729:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = 0UL;
 2685              	 .loc 3 729 0
 2686 0006 0023     	 movs r3,#0
 2687 0008 7B60     	 str r3,[r7,#4]
 730:../Libraries/XMCLib/src/xmc4_scu.c ****   frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 2688              	 .loc 3 730 0
 2689 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemClockFrequency
 2690 000e 7860     	 str r0,[r7,#4]
 731:../Libraries/XMCLib/src/xmc4_scu.c ****   
 732:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 2691              	 .loc 3 732 0
 2692 0010 054B     	 ldr r3,.L184
 2693 0012 1B6A     	 ldr r3,[r3,#32]
 2694 0014 03F00103 	 and r3,r3,#1
 2695 0018 7A68     	 ldr r2,[r7,#4]
 2696 001a 22FA03F3 	 lsr r3,r2,r3
 733:../Libraries/XMCLib/src/xmc4_scu.c ****                                               SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
 734:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2697              	 .loc 3 734 0
 2698 001e 1846     	 mov r0,r3
 2699 0020 0837     	 adds r7,r7,#8
 2700              	.LCFI254:
 2701              	 .cfi_def_cfa_offset 8
 2702 0022 BD46     	 mov sp,r7
 2703              	.LCFI255:
 2704              	 .cfi_def_cfa_register 13
 2705              	 
 2706 0024 80BD     	 pop {r7,pc}
 2707              	.L185:
 2708 0026 00BF     	 .align 2
 2709              	.L184:
 2710 0028 00460050 	 .word 1342195200
 2711              	 .cfi_endproc
 2712              	.LFE202:
 2714              	 .section .text.XMC_SCU_CLOCK_GetUsbClockFrequency,"ax",%progbits
 2715              	 .align 2
 2716              	 .global XMC_SCU_CLOCK_GetUsbClockFrequency
 2717              	 .thumb
 2718              	 .thumb_func
 2720              	XMC_SCU_CLOCK_GetUsbClockFrequency:
 2721              	.LFB203:
 735:../Libraries/XMCLib/src/xmc4_scu.c **** 
 736:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 737:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve USB and SDMMC clock frequency
 738:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 739:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
 740:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2722              	 .loc 3 740 0
 2723              	 .cfi_startproc
 2724              	 
 2725              	 
 2726 0000 80B5     	 push {r7,lr}
 2727              	.LCFI256:
 2728              	 .cfi_def_cfa_offset 8
 2729              	 .cfi_offset 7,-8
 2730              	 .cfi_offset 14,-4
 2731 0002 82B0     	 sub sp,sp,#8
 2732              	.LCFI257:
 2733              	 .cfi_def_cfa_offset 16
 2734 0004 00AF     	 add r7,sp,#0
 2735              	.LCFI258:
 2736              	 .cfi_def_cfa_register 7
 741:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = 0UL;
 2737              	 .loc 3 741 0
 2738 0006 0023     	 movs r3,#0
 2739 0008 7B60     	 str r3,[r7,#4]
 742:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_USBCLKSRC_t clksrc;
 743:../Libraries/XMCLib/src/xmc4_scu.c **** 
 744:../Libraries/XMCLib/src/xmc4_scu.c ****   clksrc = XMC_SCU_CLOCK_GetUsbClockSource();
 2740              	 .loc 3 744 0
 2741 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_GetUsbClockSource
 2742 000e 3860     	 str r0,[r7]
 745:../Libraries/XMCLib/src/xmc4_scu.c **** 
 746:../Libraries/XMCLib/src/xmc4_scu.c ****   if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 2743              	 .loc 3 746 0
 2744 0010 3B68     	 ldr r3,[r7]
 2745 0012 B3F5803F 	 cmp r3,#65536
 2746 0016 03D1     	 bne .L187
 747:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 748:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 2747              	 .loc 3 748 0
 2748 0018 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemPllClockFrequency
 2749 001c 7860     	 str r0,[r7,#4]
 2750 001e 05E0     	 b .L188
 2751              	.L187:
 749:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 750:../Libraries/XMCLib/src/xmc4_scu.c ****   else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
 2752              	 .loc 3 750 0
 2753 0020 3B68     	 ldr r3,[r7]
 2754 0022 002B     	 cmp r3,#0
 2755 0024 02D1     	 bne .L188
 751:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 752:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 2756              	 .loc 3 752 0
 2757 0026 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetUsbPllClockFrequency
 2758 002a 7860     	 str r0,[r7,#4]
 2759              	.L188:
 753:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 754:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 755:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 756:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 757:../Libraries/XMCLib/src/xmc4_scu.c **** 
 758:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 2760              	 .loc 3 758 0
 2761 002c 054B     	 ldr r3,.L190
 2762 002e 9B69     	 ldr r3,[r3,#24]
 2763 0030 03F00703 	 and r3,r3,#7
 759:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 2764              	 .loc 3 759 0
 2765 0034 0133     	 adds r3,r3,#1
 758:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 2766              	 .loc 3 758 0
 2767 0036 7A68     	 ldr r2,[r7,#4]
 2768 0038 B2FBF3F3 	 udiv r3,r2,r3
 760:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2769              	 .loc 3 760 0
 2770 003c 1846     	 mov r0,r3
 2771 003e 0837     	 adds r7,r7,#8
 2772              	.LCFI259:
 2773              	 .cfi_def_cfa_offset 8
 2774 0040 BD46     	 mov sp,r7
 2775              	.LCFI260:
 2776              	 .cfi_def_cfa_register 13
 2777              	 
 2778 0042 80BD     	 pop {r7,pc}
 2779              	.L191:
 2780              	 .align 2
 2781              	.L190:
 2782 0044 00460050 	 .word 1342195200
 2783              	 .cfi_endproc
 2784              	.LFE203:
 2786              	 .section .text.XMC_SCU_CLOCK_GetECATClockFrequency,"ax",%progbits
 2787              	 .align 2
 2788              	 .global XMC_SCU_CLOCK_GetECATClockFrequency
 2789              	 .thumb
 2790              	 .thumb_func
 2792              	XMC_SCU_CLOCK_GetECATClockFrequency:
 2793              	.LFB204:
 761:../Libraries/XMCLib/src/xmc4_scu.c **** 
 762:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(EBU)
 763:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 764:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve EBU clock frequency
 765:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 766:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
 767:../Libraries/XMCLib/src/xmc4_scu.c **** {
 768:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 769:../Libraries/XMCLib/src/xmc4_scu.c ****   
 770:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 771:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 772:../Libraries/XMCLib/src/xmc4_scu.c **** }
 773:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 774:../Libraries/XMCLib/src/xmc4_scu.c **** 
 775:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(ECAT0)
 776:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 777:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve ECAT clock frequency
 778:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 779:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetECATClockFrequency(void)
 780:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2794              	 .loc 3 780 0
 2795              	 .cfi_startproc
 2796              	 
 2797              	 
 2798 0000 80B5     	 push {r7,lr}
 2799              	.LCFI261:
 2800              	 .cfi_def_cfa_offset 8
 2801              	 .cfi_offset 7,-8
 2802              	 .cfi_offset 14,-4
 2803 0002 82B0     	 sub sp,sp,#8
 2804              	.LCFI262:
 2805              	 .cfi_def_cfa_offset 16
 2806 0004 00AF     	 add r7,sp,#0
 2807              	.LCFI263:
 2808              	 .cfi_def_cfa_register 7
 781:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency;
 782:../Libraries/XMCLib/src/xmc4_scu.c **** 
 783:../Libraries/XMCLib/src/xmc4_scu.c ****   if ((SCU_CLK->ECATCLKCR & SCU_CLK_ECATCLKCR_ECATSEL_Msk) != 0U)
 2809              	 .loc 3 783 0
 2810 0006 0C4B     	 ldr r3,.L196
 2811 0008 9B6B     	 ldr r3,[r3,#56]
 2812 000a 03F48033 	 and r3,r3,#65536
 2813 000e 002B     	 cmp r3,#0
 2814 0010 03D0     	 beq .L193
 784:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 785:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency =  XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 2815              	 .loc 3 785 0
 2816 0012 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemPllClockFrequency
 2817 0016 7860     	 str r0,[r7,#4]
 2818 0018 02E0     	 b .L194
 2819              	.L193:
 786:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 787:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 788:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 789:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency =  XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 2820              	 .loc 3 789 0
 2821 001a FFF7FEFF 	 bl XMC_SCU_CLOCK_GetUsbPllClockFrequency
 2822 001e 7860     	 str r0,[r7,#4]
 2823              	.L194:
 790:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 791:../Libraries/XMCLib/src/xmc4_scu.c **** 
 792:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)((frequency / (XMC_SCU_CLOCK_GetECATClockDivider() + 1UL)));
 2824              	 .loc 3 792 0
 2825 0020 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetECATClockDivider
 2826 0024 0346     	 mov r3,r0
 2827 0026 0133     	 adds r3,r3,#1
 2828 0028 7A68     	 ldr r2,[r7,#4]
 2829 002a B2FBF3F3 	 udiv r3,r2,r3
 793:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2830              	 .loc 3 793 0
 2831 002e 1846     	 mov r0,r3
 2832 0030 0837     	 adds r7,r7,#8
 2833              	.LCFI264:
 2834              	 .cfi_def_cfa_offset 8
 2835 0032 BD46     	 mov sp,r7
 2836              	.LCFI265:
 2837              	 .cfi_def_cfa_register 13
 2838              	 
 2839 0034 80BD     	 pop {r7,pc}
 2840              	.L197:
 2841 0036 00BF     	 .align 2
 2842              	.L196:
 2843 0038 00460050 	 .word 1342195200
 2844              	 .cfi_endproc
 2845              	.LFE204:
 2847              	 .section .text.XMC_SCU_CLOCK_GetWdtClockFrequency,"ax",%progbits
 2848              	 .align 2
 2849              	 .global XMC_SCU_CLOCK_GetWdtClockFrequency
 2850              	 .thumb
 2851              	 .thumb_func
 2853              	XMC_SCU_CLOCK_GetWdtClockFrequency:
 2854              	.LFB205:
 794:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 795:../Libraries/XMCLib/src/xmc4_scu.c **** 
 796:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 797:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve WDT clock frequency
 798:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 799:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
 800:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2855              	 .loc 3 800 0
 2856              	 .cfi_startproc
 2857              	 
 2858              	 
 2859 0000 80B5     	 push {r7,lr}
 2860              	.LCFI266:
 2861              	 .cfi_def_cfa_offset 8
 2862              	 .cfi_offset 7,-8
 2863              	 .cfi_offset 14,-4
 2864 0002 82B0     	 sub sp,sp,#8
 2865              	.LCFI267:
 2866              	 .cfi_def_cfa_offset 16
 2867 0004 00AF     	 add r7,sp,#0
 2868              	.LCFI268:
 2869              	 .cfi_def_cfa_register 7
 801:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = 0UL;
 2870              	 .loc 3 801 0
 2871 0006 0023     	 movs r3,#0
 2872 0008 7B60     	 str r3,[r7,#4]
 802:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;
 803:../Libraries/XMCLib/src/xmc4_scu.c **** 
 804:../Libraries/XMCLib/src/xmc4_scu.c ****   clksrc = XMC_SCU_CLOCK_GetWdtClockSource();
 2873              	 .loc 3 804 0
 2874 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_GetWdtClockSource
 2875 000e 3860     	 str r0,[r7]
 805:../Libraries/XMCLib/src/xmc4_scu.c **** 
 806:../Libraries/XMCLib/src/xmc4_scu.c ****   if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 2876              	 .loc 3 806 0
 2877 0010 3B68     	 ldr r3,[r7]
 2878 0012 B3F5003F 	 cmp r3,#131072
 2879 0016 03D1     	 bne .L199
 807:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 808:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 2880              	 .loc 3 808 0
 2881 0018 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemPllClockFrequency
 2882 001c 7860     	 str r0,[r7,#4]
 2883 001e 0CE0     	 b .L200
 2884              	.L199:
 809:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 810:../Libraries/XMCLib/src/xmc4_scu.c ****   else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 2885              	 .loc 3 810 0
 2886 0020 3B68     	 ldr r3,[r7]
 2887 0022 002B     	 cmp r3,#0
 2888 0024 02D1     	 bne .L201
 811:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 812:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = OFI_FREQUENCY;
 2889              	 .loc 3 812 0
 2890 0026 0A4B     	 ldr r3,.L203
 2891 0028 7B60     	 str r3,[r7,#4]
 2892 002a 06E0     	 b .L200
 2893              	.L201:
 813:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 814:../Libraries/XMCLib/src/xmc4_scu.c ****   else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
 2894              	 .loc 3 814 0
 2895 002c 3B68     	 ldr r3,[r7]
 2896 002e B3F5803F 	 cmp r3,#65536
 2897 0032 02D1     	 bne .L200
 815:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 816:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = OSI_FREQUENCY;
 2898              	 .loc 3 816 0
 2899 0034 4FF40043 	 mov r3,#32768
 2900 0038 7B60     	 str r3,[r7,#4]
 2901              	.L200:
 817:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 818:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 819:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 820:../Libraries/XMCLib/src/xmc4_scu.c **** 
 821:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 822:../Libraries/XMCLib/src/xmc4_scu.c **** 
 823:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 2902              	 .loc 3 823 0
 2903 003a 064B     	 ldr r3,.L203+4
 2904 003c 5B6A     	 ldr r3,[r3,#36]
 2905 003e DBB2     	 uxtb r3,r3
 824:../Libraries/XMCLib/src/xmc4_scu.c ****                                     SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 2906              	 .loc 3 824 0
 2907 0040 0133     	 adds r3,r3,#1
 823:../Libraries/XMCLib/src/xmc4_scu.c ****                                     SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 2908              	 .loc 3 823 0
 2909 0042 7A68     	 ldr r2,[r7,#4]
 2910 0044 B2FBF3F3 	 udiv r3,r2,r3
 825:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2911              	 .loc 3 825 0
 2912 0048 1846     	 mov r0,r3
 2913 004a 0837     	 adds r7,r7,#8
 2914              	.LCFI269:
 2915              	 .cfi_def_cfa_offset 8
 2916 004c BD46     	 mov sp,r7
 2917              	.LCFI270:
 2918              	 .cfi_def_cfa_register 13
 2919              	 
 2920 004e 80BD     	 pop {r7,pc}
 2921              	.L204:
 2922              	 .align 2
 2923              	.L203:
 2924 0050 00366E01 	 .word 24000000
 2925 0054 00460050 	 .word 1342195200
 2926              	 .cfi_endproc
 2927              	.LFE205:
 2929              	 .section .text.XMC_SCU_CLOCK_GetExternalOutputClockFrequency,"ax",%progbits
 2930              	 .align 2
 2931              	 .global XMC_SCU_CLOCK_GetExternalOutputClockFrequency
 2932              	 .thumb
 2933              	 .thumb_func
 2935              	XMC_SCU_CLOCK_GetExternalOutputClockFrequency:
 2936              	.LFB206:
 826:../Libraries/XMCLib/src/xmc4_scu.c **** 
 827:../Libraries/XMCLib/src/xmc4_scu.c **** /**
 828:../Libraries/XMCLib/src/xmc4_scu.c ****  * @brief API to retrieve EXTERNAL-OUT clock frequency
 829:../Libraries/XMCLib/src/xmc4_scu.c ****  * @retval Clock frequency
 830:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 831:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
 832:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2937              	 .loc 3 832 0
 2938              	 .cfi_startproc
 2939              	 
 2940              	 
 2941 0000 80B5     	 push {r7,lr}
 2942              	.LCFI271:
 2943              	 .cfi_def_cfa_offset 8
 2944              	 .cfi_offset 7,-8
 2945              	 .cfi_offset 14,-4
 2946 0002 82B0     	 sub sp,sp,#8
 2947              	.LCFI272:
 2948              	 .cfi_def_cfa_offset 16
 2949 0004 00AF     	 add r7,sp,#0
 2950              	.LCFI273:
 2951              	 .cfi_def_cfa_register 7
 833:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = 0UL;
 2952              	 .loc 3 833 0
 2953 0006 0023     	 movs r3,#0
 2954 0008 7B60     	 str r3,[r7,#4]
 834:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;
 835:../Libraries/XMCLib/src/xmc4_scu.c **** 
 836:../Libraries/XMCLib/src/xmc4_scu.c ****   clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();
 2955              	 .loc 3 836 0
 2956 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_GetExternalOutputClockSource
 2957 000e 0346     	 mov r3,r0
 2958 0010 FB70     	 strb r3,[r7,#3]
 837:../Libraries/XMCLib/src/xmc4_scu.c **** 
 838:../Libraries/XMCLib/src/xmc4_scu.c ****   if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 2959              	 .loc 3 838 0
 2960 0012 FB78     	 ldrb r3,[r7,#3]
 2961 0014 032B     	 cmp r3,#3
 2962 0016 0DD1     	 bne .L206
 839:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 840:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 2963              	 .loc 3 840 0
 2964 0018 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemPllClockFrequency
 2965 001c 7860     	 str r0,[r7,#4]
 841:../Libraries/XMCLib/src/xmc4_scu.c ****     
 842:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 2966              	 .loc 3 842 0
 2967 001e 134B     	 ldr r3,.L210
 2968 0020 9A6A     	 ldr r2,[r3,#40]
 2969 0022 134B     	 ldr r3,.L210+4
 2970 0024 1340     	 ands r3,r3,r2
 2971 0026 1B0C     	 lsrs r3,r3,#16
 843:../Libraries/XMCLib/src/xmc4_scu.c ****                  SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 2972              	 .loc 3 843 0
 2973 0028 0133     	 adds r3,r3,#1
 842:../Libraries/XMCLib/src/xmc4_scu.c ****                  SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 2974              	 .loc 3 842 0
 2975 002a 7A68     	 ldr r2,[r7,#4]
 2976 002c B2FBF3F3 	 udiv r3,r2,r3
 2977 0030 7B60     	 str r3,[r7,#4]
 2978 0032 16E0     	 b .L207
 2979              	.L206:
 844:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 845:../Libraries/XMCLib/src/xmc4_scu.c ****   else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 2980              	 .loc 3 845 0
 2981 0034 FB78     	 ldrb r3,[r7,#3]
 2982 0036 002B     	 cmp r3,#0
 2983 0038 03D1     	 bne .L208
 846:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 847:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 2984              	 .loc 3 847 0
 2985 003a FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemClockFrequency
 2986 003e 7860     	 str r0,[r7,#4]
 2987 0040 0FE0     	 b .L207
 2988              	.L208:
 848:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 849:../Libraries/XMCLib/src/xmc4_scu.c ****   else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 2989              	 .loc 3 849 0
 2990 0042 FB78     	 ldrb r3,[r7,#3]
 2991 0044 022B     	 cmp r3,#2
 2992 0046 0CD1     	 bne .L207
 850:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 851:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 2993              	 .loc 3 851 0
 2994 0048 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetUsbPllClockFrequency
 2995 004c 7860     	 str r0,[r7,#4]
 852:../Libraries/XMCLib/src/xmc4_scu.c ****     
 853:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 2996              	 .loc 3 853 0
 2997 004e 074B     	 ldr r3,.L210
 2998 0050 9A6A     	 ldr r2,[r3,#40]
 2999 0052 074B     	 ldr r3,.L210+4
 3000 0054 1340     	 ands r3,r3,r2
 3001 0056 1B0C     	 lsrs r3,r3,#16
 854:../Libraries/XMCLib/src/xmc4_scu.c ****                  SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 3002              	 .loc 3 854 0
 3003 0058 0133     	 adds r3,r3,#1
 853:../Libraries/XMCLib/src/xmc4_scu.c ****                  SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 3004              	 .loc 3 853 0
 3005 005a 7A68     	 ldr r2,[r7,#4]
 3006 005c B2FBF3F3 	 udiv r3,r2,r3
 3007 0060 7B60     	 str r3,[r7,#4]
 3008              	.L207:
 855:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 856:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 857:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 858:../Libraries/XMCLib/src/xmc4_scu.c **** 
 859:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 860:../Libraries/XMCLib/src/xmc4_scu.c **** 
 861:../Libraries/XMCLib/src/xmc4_scu.c ****   return (frequency);
 3009              	 .loc 3 861 0
 3010 0062 7B68     	 ldr r3,[r7,#4]
 862:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3011              	 .loc 3 862 0
 3012 0064 1846     	 mov r0,r3
 3013 0066 0837     	 adds r7,r7,#8
 3014              	.LCFI274:
 3015              	 .cfi_def_cfa_offset 8
 3016 0068 BD46     	 mov sp,r7
 3017              	.LCFI275:
 3018              	 .cfi_def_cfa_register 13
 3019              	 
 3020 006a 80BD     	 pop {r7,pc}
 3021              	.L211:
 3022              	 .align 2
 3023              	.L210:
 3024 006c 00460050 	 .word 1342195200
 3025 0070 0000FF01 	 .word 33488896
 3026              	 .cfi_endproc
 3027              	.LFE206:
 3029              	 .section .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency,"ax",%progbits
 3030              	 .align 2
 3031              	 .global XMC_SCU_CLOCK_GetPeripheralClockFrequency
 3032              	 .thumb
 3033              	 .thumb_func
 3035              	XMC_SCU_CLOCK_GetPeripheralClockFrequency:
 3036              	.LFB207:
 863:../Libraries/XMCLib/src/xmc4_scu.c **** 
 864:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 865:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional c
 866:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 867:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
 868:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3037              	 .loc 3 868 0
 3038              	 .cfi_startproc
 3039              	 
 3040              	 
 3041 0000 80B5     	 push {r7,lr}
 3042              	.LCFI276:
 3043              	 .cfi_def_cfa_offset 8
 3044              	 .cfi_offset 7,-8
 3045              	 .cfi_offset 14,-4
 3046 0002 00AF     	 add r7,sp,#0
 3047              	.LCFI277:
 3048              	 .cfi_def_cfa_register 7
 869:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 3049              	 .loc 3 869 0
 3050 0004 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetCpuClockFrequency
 3051 0008 0246     	 mov r2,r0
 870:../Libraries/XMCLib/src/xmc4_scu.c ****          ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 3052              	 .loc 3 870 0
 3053 000a 044B     	 ldr r3,.L214
 3054 000c 5B69     	 ldr r3,[r3,#20]
 869:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 3055              	 .loc 3 869 0
 3056 000e 03F00103 	 and r3,r3,#1
 3057 0012 22FA03F3 	 lsr r3,r2,r3
 871:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3058              	 .loc 3 871 0
 3059 0016 1846     	 mov r0,r3
 3060 0018 80BD     	 pop {r7,pc}
 3061              	.L215:
 3062 001a 00BF     	 .align 2
 3063              	.L214:
 3064 001c 00460050 	 .word 1342195200
 3065              	 .cfi_endproc
 3066              	.LFE207:
 3068              	 .section .text.XMC_SCU_CLOCK_SetSystemClockSource,"ax",%progbits
 3069              	 .align 2
 3070              	 .global XMC_SCU_CLOCK_SetSystemClockSource
 3071              	 .thumb
 3072              	 .thumb_func
 3074              	XMC_SCU_CLOCK_SetSystemClockSource:
 3075              	.LFB208:
 872:../Libraries/XMCLib/src/xmc4_scu.c **** 
 873:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fSYS */
 874:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
 875:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3076              	 .loc 3 875 0
 3077              	 .cfi_startproc
 3078              	 
 3079              	 
 3080              	 
 3081 0000 80B4     	 push {r7}
 3082              	.LCFI278:
 3083              	 .cfi_def_cfa_offset 4
 3084              	 .cfi_offset 7,-4
 3085 0002 83B0     	 sub sp,sp,#12
 3086              	.LCFI279:
 3087              	 .cfi_def_cfa_offset 16
 3088 0004 00AF     	 add r7,sp,#0
 3089              	.LCFI280:
 3090              	 .cfi_def_cfa_register 7
 3091 0006 7860     	 str r0,[r7,#4]
 876:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 3092              	 .loc 3 876 0
 3093 0008 0649     	 ldr r1,.L217
 3094 000a 064B     	 ldr r3,.L217
 3095 000c DB68     	 ldr r3,[r3,#12]
 3096 000e 23F48032 	 bic r2,r3,#65536
 3097 0012 7B68     	 ldr r3,[r7,#4]
 3098 0014 1343     	 orrs r3,r3,r2
 3099 0016 CB60     	 str r3,[r1,#12]
 877:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)source);
 878:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3100              	 .loc 3 878 0
 3101 0018 0C37     	 adds r7,r7,#12
 3102              	.LCFI281:
 3103              	 .cfi_def_cfa_offset 4
 3104 001a BD46     	 mov sp,r7
 3105              	.LCFI282:
 3106              	 .cfi_def_cfa_register 13
 3107              	 
 3108 001c 5DF8047B 	 ldr r7,[sp],#4
 3109              	.LCFI283:
 3110              	 .cfi_restore 7
 3111              	 .cfi_def_cfa_offset 0
 3112 0020 7047     	 bx lr
 3113              	.L218:
 3114 0022 00BF     	 .align 2
 3115              	.L217:
 3116 0024 00460050 	 .word 1342195200
 3117              	 .cfi_endproc
 3118              	.LFE208:
 3120              	 .section .text.XMC_SCU_CLOCK_SetUsbClockSource,"ax",%progbits
 3121              	 .align 2
 3122              	 .global XMC_SCU_CLOCK_SetUsbClockSource
 3123              	 .thumb
 3124              	 .thumb_func
 3126              	XMC_SCU_CLOCK_SetUsbClockSource:
 3127              	.LFB209:
 879:../Libraries/XMCLib/src/xmc4_scu.c **** 
 880:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fUSB */
 881:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
 882:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3128              	 .loc 3 882 0
 3129              	 .cfi_startproc
 3130              	 
 3131              	 
 3132              	 
 3133 0000 80B4     	 push {r7}
 3134              	.LCFI284:
 3135              	 .cfi_def_cfa_offset 4
 3136              	 .cfi_offset 7,-4
 3137 0002 83B0     	 sub sp,sp,#12
 3138              	.LCFI285:
 3139              	 .cfi_def_cfa_offset 16
 3140 0004 00AF     	 add r7,sp,#0
 3141              	.LCFI286:
 3142              	 .cfi_def_cfa_register 7
 3143 0006 7860     	 str r0,[r7,#4]
 883:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 3144              	 .loc 3 883 0
 3145 0008 0649     	 ldr r1,.L220
 3146 000a 064B     	 ldr r3,.L220
 3147 000c 9B69     	 ldr r3,[r3,#24]
 3148 000e 23F48032 	 bic r2,r3,#65536
 3149 0012 7B68     	 ldr r3,[r7,#4]
 3150 0014 1343     	 orrs r3,r3,r2
 3151 0016 8B61     	 str r3,[r1,#24]
 884:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)source);
 885:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3152              	 .loc 3 885 0
 3153 0018 0C37     	 adds r7,r7,#12
 3154              	.LCFI287:
 3155              	 .cfi_def_cfa_offset 4
 3156 001a BD46     	 mov sp,r7
 3157              	.LCFI288:
 3158              	 .cfi_def_cfa_register 13
 3159              	 
 3160 001c 5DF8047B 	 ldr r7,[sp],#4
 3161              	.LCFI289:
 3162              	 .cfi_restore 7
 3163              	 .cfi_def_cfa_offset 0
 3164 0020 7047     	 bx lr
 3165              	.L221:
 3166 0022 00BF     	 .align 2
 3167              	.L220:
 3168 0024 00460050 	 .word 1342195200
 3169              	 .cfi_endproc
 3170              	.LFE209:
 3172              	 .section .text.XMC_SCU_CLOCK_SetWdtClockSource,"ax",%progbits
 3173              	 .align 2
 3174              	 .global XMC_SCU_CLOCK_SetWdtClockSource
 3175              	 .thumb
 3176              	 .thumb_func
 3178              	XMC_SCU_CLOCK_SetWdtClockSource:
 3179              	.LFB210:
 886:../Libraries/XMCLib/src/xmc4_scu.c **** 
 887:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fWDT */
 888:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
 889:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3180              	 .loc 3 889 0
 3181              	 .cfi_startproc
 3182              	 
 3183              	 
 3184              	 
 3185 0000 80B4     	 push {r7}
 3186              	.LCFI290:
 3187              	 .cfi_def_cfa_offset 4
 3188              	 .cfi_offset 7,-4
 3189 0002 83B0     	 sub sp,sp,#12
 3190              	.LCFI291:
 3191              	 .cfi_def_cfa_offset 16
 3192 0004 00AF     	 add r7,sp,#0
 3193              	.LCFI292:
 3194              	 .cfi_def_cfa_register 7
 3195 0006 7860     	 str r0,[r7,#4]
 890:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 3196              	 .loc 3 890 0
 3197 0008 0649     	 ldr r1,.L223
 3198 000a 064B     	 ldr r3,.L223
 3199 000c 5B6A     	 ldr r3,[r3,#36]
 3200 000e 23F44032 	 bic r2,r3,#196608
 3201 0012 7B68     	 ldr r3,[r7,#4]
 3202 0014 1343     	 orrs r3,r3,r2
 3203 0016 4B62     	 str r3,[r1,#36]
 891:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)source);
 892:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3204              	 .loc 3 892 0
 3205 0018 0C37     	 adds r7,r7,#12
 3206              	.LCFI293:
 3207              	 .cfi_def_cfa_offset 4
 3208 001a BD46     	 mov sp,r7
 3209              	.LCFI294:
 3210              	 .cfi_def_cfa_register 13
 3211              	 
 3212 001c 5DF8047B 	 ldr r7,[sp],#4
 3213              	.LCFI295:
 3214              	 .cfi_restore 7
 3215              	 .cfi_def_cfa_offset 0
 3216 0020 7047     	 bx lr
 3217              	.L224:
 3218 0022 00BF     	 .align 2
 3219              	.L223:
 3220 0024 00460050 	 .word 1342195200
 3221              	 .cfi_endproc
 3222              	.LFE210:
 3224              	 .section .text.XMC_SCU_CLOCK_SetExternalOutputClockSource,"ax",%progbits
 3225              	 .align 2
 3226              	 .global XMC_SCU_CLOCK_SetExternalOutputClockSource
 3227              	 .thumb
 3228              	 .thumb_func
 3230              	XMC_SCU_CLOCK_SetExternalOutputClockSource:
 3231              	.LFB211:
 893:../Libraries/XMCLib/src/xmc4_scu.c **** 
 894:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fEXT */
 895:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
 896:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3232              	 .loc 3 896 0
 3233              	 .cfi_startproc
 3234              	 
 3235              	 
 3236              	 
 3237 0000 80B4     	 push {r7}
 3238              	.LCFI296:
 3239              	 .cfi_def_cfa_offset 4
 3240              	 .cfi_offset 7,-4
 3241 0002 83B0     	 sub sp,sp,#12
 3242              	.LCFI297:
 3243              	 .cfi_def_cfa_offset 16
 3244 0004 00AF     	 add r7,sp,#0
 3245              	.LCFI298:
 3246              	 .cfi_def_cfa_register 7
 3247 0006 0346     	 mov r3,r0
 3248 0008 FB71     	 strb r3,[r7,#7]
 897:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 3249              	 .loc 3 897 0
 3250 000a 0649     	 ldr r1,.L226
 3251 000c 054B     	 ldr r3,.L226
 3252 000e 9B6A     	 ldr r3,[r3,#40]
 3253 0010 23F00302 	 bic r2,r3,#3
 898:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)source);
 3254              	 .loc 3 898 0
 3255 0014 FB79     	 ldrb r3,[r7,#7]
 897:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 3256              	 .loc 3 897 0
 3257 0016 1343     	 orrs r3,r3,r2
 3258 0018 8B62     	 str r3,[r1,#40]
 899:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3259              	 .loc 3 899 0
 3260 001a 0C37     	 adds r7,r7,#12
 3261              	.LCFI299:
 3262              	 .cfi_def_cfa_offset 4
 3263 001c BD46     	 mov sp,r7
 3264              	.LCFI300:
 3265              	 .cfi_def_cfa_register 13
 3266              	 
 3267 001e 5DF8047B 	 ldr r7,[sp],#4
 3268              	.LCFI301:
 3269              	 .cfi_restore 7
 3270              	 .cfi_def_cfa_offset 0
 3271 0022 7047     	 bx lr
 3272              	.L227:
 3273              	 .align 2
 3274              	.L226:
 3275 0024 00460050 	 .word 1342195200
 3276              	 .cfi_endproc
 3277              	.LFE211:
 3279              	 .section .text.XMC_SCU_CLOCK_SetSystemPllClockSource,"ax",%progbits
 3280              	 .align 2
 3281              	 .global XMC_SCU_CLOCK_SetSystemPllClockSource
 3282              	 .thumb
 3283              	 .thumb_func
 3285              	XMC_SCU_CLOCK_SetSystemPllClockSource:
 3286              	.LFB212:
 900:../Libraries/XMCLib/src/xmc4_scu.c **** 
 901:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fPLL */
 902:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
 903:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3287              	 .loc 3 903 0
 3288              	 .cfi_startproc
 3289              	 
 3290              	 
 3291              	 
 3292 0000 80B4     	 push {r7}
 3293              	.LCFI302:
 3294              	 .cfi_def_cfa_offset 4
 3295              	 .cfi_offset 7,-4
 3296 0002 83B0     	 sub sp,sp,#12
 3297              	.LCFI303:
 3298              	 .cfi_def_cfa_offset 16
 3299 0004 00AF     	 add r7,sp,#0
 3300              	.LCFI304:
 3301              	 .cfi_def_cfa_register 7
 3302 0006 0346     	 mov r3,r0
 3303 0008 FB80     	 strh r3,[r7,#6]
 904:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Check input clock */
 905:../Libraries/XMCLib/src/xmc4_scu.c ****   if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 3304              	 .loc 3 905 0
 3305 000a FB88     	 ldrh r3,[r7,#6]
 3306 000c 002B     	 cmp r3,#0
 3307 000e 08D1     	 bne .L229
 906:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 907:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 3308              	 .loc 3 907 0
 3309 0010 0A4A     	 ldr r2,.L231
 3310 0012 0A4B     	 ldr r3,.L231
 3311 0014 DB68     	 ldr r3,[r3,#12]
 3312 0016 23F48073 	 bic r3,r3,#256
 3313 001a 23F00103 	 bic r3,r3,#1
 3314 001e D360     	 str r3,[r2,#12]
 3315 0020 07E0     	 b .L228
 3316              	.L229:
 908:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 909:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 910:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 911:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 3317              	 .loc 3 911 0
 3318 0022 064A     	 ldr r2,.L231
 3319 0024 054B     	 ldr r3,.L231
 3320 0026 DB68     	 ldr r3,[r3,#12]
 3321 0028 43F48073 	 orr r3,r3,#256
 3322 002c 43F00103 	 orr r3,r3,#1
 3323 0030 D360     	 str r3,[r2,#12]
 3324              	.L228:
 912:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 913:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3325              	 .loc 3 913 0
 3326 0032 0C37     	 adds r7,r7,#12
 3327              	.LCFI305:
 3328              	 .cfi_def_cfa_offset 4
 3329 0034 BD46     	 mov sp,r7
 3330              	.LCFI306:
 3331              	 .cfi_def_cfa_register 13
 3332              	 
 3333 0036 5DF8047B 	 ldr r7,[sp],#4
 3334              	.LCFI307:
 3335              	 .cfi_restore 7
 3336              	 .cfi_def_cfa_offset 0
 3337 003a 7047     	 bx lr
 3338              	.L232:
 3339              	 .align 2
 3340              	.L231:
 3341 003c 10470050 	 .word 1342195472
 3342              	 .cfi_endproc
 3343              	.LFE212:
 3345              	 .section .text.XMC_SCU_HIB_SetRtcClockSource,"ax",%progbits
 3346              	 .align 2
 3347              	 .global XMC_SCU_HIB_SetRtcClockSource
 3348              	 .thumb
 3349              	 .thumb_func
 3351              	XMC_SCU_HIB_SetRtcClockSource:
 3352              	.LFB213:
 914:../Libraries/XMCLib/src/xmc4_scu.c **** 
 915:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fRTC */
 916:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
 917:../Libraries/XMCLib/src/xmc4_scu.c **** { 
 3353              	 .loc 3 917 0
 3354              	 .cfi_startproc
 3355              	 
 3356              	 
 3357              	 
 3358 0000 80B4     	 push {r7}
 3359              	.LCFI308:
 3360              	 .cfi_def_cfa_offset 4
 3361              	 .cfi_offset 7,-4
 3362 0002 83B0     	 sub sp,sp,#12
 3363              	.LCFI309:
 3364              	 .cfi_def_cfa_offset 16
 3365 0004 00AF     	 add r7,sp,#0
 3366              	.LCFI310:
 3367              	 .cfi_def_cfa_register 7
 3368 0006 0346     	 mov r3,r0
 3369 0008 FB71     	 strb r3,[r7,#7]
 918:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Wait until the update of HDCR register in hibernate domain is completed */
 919:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 3370              	 .loc 3 919 0
 3371 000a 00BF     	 nop
 3372              	.L234:
 3373              	 .loc 3 919 0 is_stmt 0 discriminator 1
 3374 000c 094B     	 ldr r3,.L235
 3375 000e D3F8C430 	 ldr r3,[r3,#196]
 3376 0012 03F00803 	 and r3,r3,#8
 3377 0016 002B     	 cmp r3,#0
 3378 0018 F8D1     	 bne .L234
 920:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 921:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 922:../Libraries/XMCLib/src/xmc4_scu.c **** 
 923:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 3379              	 .loc 3 923 0 is_stmt 1
 3380 001a 0749     	 ldr r1,.L235+4
 3381 001c 064B     	 ldr r3,.L235+4
 3382 001e DB68     	 ldr r3,[r3,#12]
 3383 0020 23F04002 	 bic r2,r3,#64
 924:../Libraries/XMCLib/src/xmc4_scu.c ****                         ((uint32_t)source);
 3384              	 .loc 3 924 0
 3385 0024 FB79     	 ldrb r3,[r7,#7]
 923:../Libraries/XMCLib/src/xmc4_scu.c ****                         ((uint32_t)source);
 3386              	 .loc 3 923 0
 3387 0026 1343     	 orrs r3,r3,r2
 3388 0028 CB60     	 str r3,[r1,#12]
 925:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3389              	 .loc 3 925 0
 3390 002a 0C37     	 adds r7,r7,#12
 3391              	.LCFI311:
 3392              	 .cfi_def_cfa_offset 4
 3393 002c BD46     	 mov sp,r7
 3394              	.LCFI312:
 3395              	 .cfi_def_cfa_register 13
 3396              	 
 3397 002e 5DF8047B 	 ldr r7,[sp],#4
 3398              	.LCFI313:
 3399              	 .cfi_restore 7
 3400              	 .cfi_def_cfa_offset 0
 3401 0032 7047     	 bx lr
 3402              	.L236:
 3403              	 .align 2
 3404              	.L235:
 3405 0034 00400050 	 .word 1342193664
 3406 0038 00430050 	 .word 1342194432
 3407              	 .cfi_endproc
 3408              	.LFE213:
 3410              	 .section .text.XMC_SCU_HIB_SetStandbyClockSource,"ax",%progbits
 3411              	 .align 2
 3412              	 .global XMC_SCU_HIB_SetStandbyClockSource
 3413              	 .thumb
 3414              	 .thumb_func
 3416              	XMC_SCU_HIB_SetStandbyClockSource:
 3417              	.LFB214:
 926:../Libraries/XMCLib/src/xmc4_scu.c **** 
 927:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fSTDBY */
 928:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
 929:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3418              	 .loc 3 929 0
 3419              	 .cfi_startproc
 3420              	 
 3421              	 
 3422              	 
 3423 0000 80B4     	 push {r7}
 3424              	.LCFI314:
 3425              	 .cfi_def_cfa_offset 4
 3426              	 .cfi_offset 7,-4
 3427 0002 83B0     	 sub sp,sp,#12
 3428              	.LCFI315:
 3429              	 .cfi_def_cfa_offset 16
 3430 0004 00AF     	 add r7,sp,#0
 3431              	.LCFI316:
 3432              	 .cfi_def_cfa_register 7
 3433 0006 0346     	 mov r3,r0
 3434 0008 FB71     	 strb r3,[r7,#7]
 930:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 3435              	 .loc 3 930 0
 3436 000a 00BF     	 nop
 3437              	.L238:
 3438              	 .loc 3 930 0 is_stmt 0 discriminator 1
 3439 000c 094B     	 ldr r3,.L239
 3440 000e D3F8C430 	 ldr r3,[r3,#196]
 3441 0012 03F00803 	 and r3,r3,#8
 3442 0016 002B     	 cmp r3,#0
 3443 0018 F8D1     	 bne .L238
 931:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 932:../Libraries/XMCLib/src/xmc4_scu.c ****     /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 933:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 934:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 3444              	 .loc 3 934 0 is_stmt 1
 3445 001a 0749     	 ldr r1,.L239+4
 3446 001c 064B     	 ldr r3,.L239+4
 3447 001e DB68     	 ldr r3,[r3,#12]
 3448 0020 23F08002 	 bic r2,r3,#128
 935:../Libraries/XMCLib/src/xmc4_scu.c ****                         ((uint32_t)source);
 3449              	 .loc 3 935 0
 3450 0024 FB79     	 ldrb r3,[r7,#7]
 934:../Libraries/XMCLib/src/xmc4_scu.c ****                         ((uint32_t)source);
 3451              	 .loc 3 934 0
 3452 0026 1343     	 orrs r3,r3,r2
 3453 0028 CB60     	 str r3,[r1,#12]
 936:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3454              	 .loc 3 936 0
 3455 002a 0C37     	 adds r7,r7,#12
 3456              	.LCFI317:
 3457              	 .cfi_def_cfa_offset 4
 3458 002c BD46     	 mov sp,r7
 3459              	.LCFI318:
 3460              	 .cfi_def_cfa_register 13
 3461              	 
 3462 002e 5DF8047B 	 ldr r7,[sp],#4
 3463              	.LCFI319:
 3464              	 .cfi_restore 7
 3465              	 .cfi_def_cfa_offset 0
 3466 0032 7047     	 bx lr
 3467              	.L240:
 3468              	 .align 2
 3469              	.L239:
 3470 0034 00400050 	 .word 1342193664
 3471 0038 00430050 	 .word 1342194432
 3472              	 .cfi_endproc
 3473              	.LFE214:
 3475              	 .section .text.XMC_SCU_CLOCK_SetSystemClockDivider,"ax",%progbits
 3476              	 .align 2
 3477              	 .global XMC_SCU_CLOCK_SetSystemClockDivider
 3478              	 .thumb
 3479              	 .thumb_func
 3481              	XMC_SCU_CLOCK_SetSystemClockDivider:
 3482              	.LFB215:
 937:../Libraries/XMCLib/src/xmc4_scu.c **** 
 938:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fsys and its parent */
 939:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
 940:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3483              	 .loc 3 940 0
 3484              	 .cfi_startproc
 3485              	 
 3486              	 
 3487              	 
 3488 0000 80B4     	 push {r7}
 3489              	.LCFI320:
 3490              	 .cfi_def_cfa_offset 4
 3491              	 .cfi_offset 7,-4
 3492 0002 83B0     	 sub sp,sp,#12
 3493              	.LCFI321:
 3494              	 .cfi_def_cfa_offset 16
 3495 0004 00AF     	 add r7,sp,#0
 3496              	.LCFI322:
 3497              	 .cfi_def_cfa_register 7
 3498 0006 7860     	 str r0,[r7,#4]
 941:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
 942:../Libraries/XMCLib/src/xmc4_scu.c ****               (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );
 943:../Libraries/XMCLib/src/xmc4_scu.c **** 
 944:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 3499              	 .loc 3 944 0
 3500 0008 0649     	 ldr r1,.L242
 3501 000a 064B     	 ldr r3,.L242
 3502 000c DB68     	 ldr r3,[r3,#12]
 3503 000e 23F0FF02 	 bic r2,r3,#255
 945:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 3504              	 .loc 3 945 0
 3505 0012 7B68     	 ldr r3,[r7,#4]
 3506 0014 013B     	 subs r3,r3,#1
 944:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 3507              	 .loc 3 944 0
 3508 0016 1343     	 orrs r3,r3,r2
 3509 0018 CB60     	 str r3,[r1,#12]
 946:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3510              	 .loc 3 946 0
 3511 001a 0C37     	 adds r7,r7,#12
 3512              	.LCFI323:
 3513              	 .cfi_def_cfa_offset 4
 3514 001c BD46     	 mov sp,r7
 3515              	.LCFI324:
 3516              	 .cfi_def_cfa_register 13
 3517              	 
 3518 001e 5DF8047B 	 ldr r7,[sp],#4
 3519              	.LCFI325:
 3520              	 .cfi_restore 7
 3521              	 .cfi_def_cfa_offset 0
 3522 0022 7047     	 bx lr
 3523              	.L243:
 3524              	 .align 2
 3525              	.L242:
 3526 0024 00460050 	 .word 1342195200
 3527              	 .cfi_endproc
 3528              	.LFE215:
 3530              	 .section .text.XMC_SCU_CLOCK_SetCcuClockDivider,"ax",%progbits
 3531              	 .align 2
 3532              	 .global XMC_SCU_CLOCK_SetCcuClockDivider
 3533              	 .thumb
 3534              	 .thumb_func
 3536              	XMC_SCU_CLOCK_SetCcuClockDivider:
 3537              	.LFB216:
 947:../Libraries/XMCLib/src/xmc4_scu.c **** 
 948:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fccu and its parent */
 949:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
 950:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3538              	 .loc 3 950 0
 3539              	 .cfi_startproc
 3540              	 
 3541              	 
 3542              	 
 3543 0000 80B4     	 push {r7}
 3544              	.LCFI326:
 3545              	 .cfi_def_cfa_offset 4
 3546              	 .cfi_offset 7,-4
 3547 0002 83B0     	 sub sp,sp,#12
 3548              	.LCFI327:
 3549              	 .cfi_def_cfa_offset 16
 3550 0004 00AF     	 add r7,sp,#0
 3551              	.LCFI328:
 3552              	 .cfi_def_cfa_register 7
 3553 0006 7860     	 str r0,[r7,#4]
 951:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );
 952:../Libraries/XMCLib/src/xmc4_scu.c **** 
 953:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 3554              	 .loc 3 953 0
 3555 0008 0649     	 ldr r1,.L245
 3556 000a 064B     	 ldr r3,.L245
 3557 000c 1B6A     	 ldr r3,[r3,#32]
 3558 000e 23F00102 	 bic r2,r3,#1
 954:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 3559              	 .loc 3 954 0
 3560 0012 7B68     	 ldr r3,[r7,#4]
 3561 0014 013B     	 subs r3,r3,#1
 953:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 3562              	 .loc 3 953 0
 3563 0016 1343     	 orrs r3,r3,r2
 3564 0018 0B62     	 str r3,[r1,#32]
 955:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3565              	 .loc 3 955 0
 3566 001a 0C37     	 adds r7,r7,#12
 3567              	.LCFI329:
 3568              	 .cfi_def_cfa_offset 4
 3569 001c BD46     	 mov sp,r7
 3570              	.LCFI330:
 3571              	 .cfi_def_cfa_register 13
 3572              	 
 3573 001e 5DF8047B 	 ldr r7,[sp],#4
 3574              	.LCFI331:
 3575              	 .cfi_restore 7
 3576              	 .cfi_def_cfa_offset 0
 3577 0022 7047     	 bx lr
 3578              	.L246:
 3579              	 .align 2
 3580              	.L245:
 3581 0024 00460050 	 .word 1342195200
 3582              	 .cfi_endproc
 3583              	.LFE216:
 3585              	 .section .text.XMC_SCU_CLOCK_SetCpuClockDivider,"ax",%progbits
 3586              	 .align 2
 3587              	 .global XMC_SCU_CLOCK_SetCpuClockDivider
 3588              	 .thumb
 3589              	 .thumb_func
 3591              	XMC_SCU_CLOCK_SetCpuClockDivider:
 3592              	.LFB217:
 956:../Libraries/XMCLib/src/xmc4_scu.c **** 
 957:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fcpu and its parent */
 958:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
 959:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3593              	 .loc 3 959 0
 3594              	 .cfi_startproc
 3595              	 
 3596              	 
 3597              	 
 3598 0000 80B4     	 push {r7}
 3599              	.LCFI332:
 3600              	 .cfi_def_cfa_offset 4
 3601              	 .cfi_offset 7,-4
 3602 0002 83B0     	 sub sp,sp,#12
 3603              	.LCFI333:
 3604              	 .cfi_def_cfa_offset 16
 3605 0004 00AF     	 add r7,sp,#0
 3606              	.LCFI334:
 3607              	 .cfi_def_cfa_register 7
 3608 0006 7860     	 str r0,[r7,#4]
 960:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );
 961:../Libraries/XMCLib/src/xmc4_scu.c **** 
 962:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 3609              	 .loc 3 962 0
 3610 0008 0649     	 ldr r1,.L248
 3611 000a 064B     	 ldr r3,.L248
 3612 000c 1B69     	 ldr r3,[r3,#16]
 3613 000e 23F00102 	 bic r2,r3,#1
 963:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 3614              	 .loc 3 963 0
 3615 0012 7B68     	 ldr r3,[r7,#4]
 3616 0014 013B     	 subs r3,r3,#1
 962:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 3617              	 .loc 3 962 0
 3618 0016 1343     	 orrs r3,r3,r2
 3619 0018 0B61     	 str r3,[r1,#16]
 964:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3620              	 .loc 3 964 0
 3621 001a 0C37     	 adds r7,r7,#12
 3622              	.LCFI335:
 3623              	 .cfi_def_cfa_offset 4
 3624 001c BD46     	 mov sp,r7
 3625              	.LCFI336:
 3626              	 .cfi_def_cfa_register 13
 3627              	 
 3628 001e 5DF8047B 	 ldr r7,[sp],#4
 3629              	.LCFI337:
 3630              	 .cfi_restore 7
 3631              	 .cfi_def_cfa_offset 0
 3632 0022 7047     	 bx lr
 3633              	.L249:
 3634              	 .align 2
 3635              	.L248:
 3636 0024 00460050 	 .word 1342195200
 3637              	 .cfi_endproc
 3638              	.LFE217:
 3640              	 .section .text.XMC_SCU_CLOCK_SetPeripheralClockDivider,"ax",%progbits
 3641              	 .align 2
 3642              	 .global XMC_SCU_CLOCK_SetPeripheralClockDivider
 3643              	 .thumb
 3644              	 .thumb_func
 3646              	XMC_SCU_CLOCK_SetPeripheralClockDivider:
 3647              	.LFB218:
 965:../Libraries/XMCLib/src/xmc4_scu.c **** 
 966:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fperiph and its parent */
 967:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
 968:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3648              	 .loc 3 968 0
 3649              	 .cfi_startproc
 3650              	 
 3651              	 
 3652              	 
 3653 0000 80B4     	 push {r7}
 3654              	.LCFI338:
 3655              	 .cfi_def_cfa_offset 4
 3656              	 .cfi_offset 7,-4
 3657 0002 83B0     	 sub sp,sp,#12
 3658              	.LCFI339:
 3659              	 .cfi_def_cfa_offset 16
 3660 0004 00AF     	 add r7,sp,#0
 3661              	.LCFI340:
 3662              	 .cfi_def_cfa_register 7
 3663 0006 7860     	 str r0,[r7,#4]
 969:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) 
 970:../Libraries/XMCLib/src/xmc4_scu.c **** 
 971:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 3664              	 .loc 3 971 0
 3665 0008 0649     	 ldr r1,.L251
 3666 000a 064B     	 ldr r3,.L251
 3667 000c 5B69     	 ldr r3,[r3,#20]
 3668 000e 23F00102 	 bic r2,r3,#1
 972:../Libraries/XMCLib/src/xmc4_scu.c ****                      ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 3669              	 .loc 3 972 0
 3670 0012 7B68     	 ldr r3,[r7,#4]
 3671 0014 013B     	 subs r3,r3,#1
 971:../Libraries/XMCLib/src/xmc4_scu.c ****                      ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 3672              	 .loc 3 971 0
 3673 0016 1343     	 orrs r3,r3,r2
 3674 0018 4B61     	 str r3,[r1,#20]
 973:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3675              	 .loc 3 973 0
 3676 001a 0C37     	 adds r7,r7,#12
 3677              	.LCFI341:
 3678              	 .cfi_def_cfa_offset 4
 3679 001c BD46     	 mov sp,r7
 3680              	.LCFI342:
 3681              	 .cfi_def_cfa_register 13
 3682              	 
 3683 001e 5DF8047B 	 ldr r7,[sp],#4
 3684              	.LCFI343:
 3685              	 .cfi_restore 7
 3686              	 .cfi_def_cfa_offset 0
 3687 0022 7047     	 bx lr
 3688              	.L252:
 3689              	 .align 2
 3690              	.L251:
 3691 0024 00460050 	 .word 1342195200
 3692              	 .cfi_endproc
 3693              	.LFE218:
 3695              	 .section .text.XMC_SCU_CLOCK_SetUsbClockDivider,"ax",%progbits
 3696              	 .align 2
 3697              	 .global XMC_SCU_CLOCK_SetUsbClockDivider
 3698              	 .thumb
 3699              	 .thumb_func
 3701              	XMC_SCU_CLOCK_SetUsbClockDivider:
 3702              	.LFB219:
 974:../Libraries/XMCLib/src/xmc4_scu.c **** 
 975:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fsdmmc and its parent */
 976:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
 977:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3703              	 .loc 3 977 0
 3704              	 .cfi_startproc
 3705              	 
 3706              	 
 3707              	 
 3708 0000 80B4     	 push {r7}
 3709              	.LCFI344:
 3710              	 .cfi_def_cfa_offset 4
 3711              	 .cfi_offset 7,-4
 3712 0002 83B0     	 sub sp,sp,#12
 3713              	.LCFI345:
 3714              	 .cfi_def_cfa_offset 16
 3715 0004 00AF     	 add r7,sp,#0
 3716              	.LCFI346:
 3717              	 .cfi_def_cfa_register 7
 3718 0006 7860     	 str r0,[r7,#4]
 978:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
 979:../Libraries/XMCLib/src/xmc4_scu.c ****               (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );
 980:../Libraries/XMCLib/src/xmc4_scu.c **** 
 981:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 3719              	 .loc 3 981 0
 3720 0008 0649     	 ldr r1,.L254
 3721 000a 064B     	 ldr r3,.L254
 3722 000c 9B69     	 ldr r3,[r3,#24]
 3723 000e 23F00702 	 bic r2,r3,#7
 982:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 3724              	 .loc 3 982 0
 3725 0012 7B68     	 ldr r3,[r7,#4]
 3726 0014 013B     	 subs r3,r3,#1
 981:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 3727              	 .loc 3 981 0
 3728 0016 1343     	 orrs r3,r3,r2
 3729 0018 8B61     	 str r3,[r1,#24]
 983:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3730              	 .loc 3 983 0
 3731 001a 0C37     	 adds r7,r7,#12
 3732              	.LCFI347:
 3733              	 .cfi_def_cfa_offset 4
 3734 001c BD46     	 mov sp,r7
 3735              	.LCFI348:
 3736              	 .cfi_def_cfa_register 13
 3737              	 
 3738 001e 5DF8047B 	 ldr r7,[sp],#4
 3739              	.LCFI349:
 3740              	 .cfi_restore 7
 3741              	 .cfi_def_cfa_offset 0
 3742 0022 7047     	 bx lr
 3743              	.L255:
 3744              	 .align 2
 3745              	.L254:
 3746 0024 00460050 	 .word 1342195200
 3747              	 .cfi_endproc
 3748              	.LFE219:
 3750              	 .section .text.XMC_SCU_CLOCK_SetWdtClockDivider,"ax",%progbits
 3751              	 .align 2
 3752              	 .global XMC_SCU_CLOCK_SetWdtClockDivider
 3753              	 .thumb
 3754              	 .thumb_func
 3756              	XMC_SCU_CLOCK_SetWdtClockDivider:
 3757              	.LFB220:
 984:../Libraries/XMCLib/src/xmc4_scu.c **** 
 985:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(EBU)
 986:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between febu and its parent */
 987:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
 988:../Libraries/XMCLib/src/xmc4_scu.c **** {
 989:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
 990:../Libraries/XMCLib/src/xmc4_scu.c ****               (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );
 991:../Libraries/XMCLib/src/xmc4_scu.c **** 
 992:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 993:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 994:../Libraries/XMCLib/src/xmc4_scu.c **** }
 995:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 996:../Libraries/XMCLib/src/xmc4_scu.c **** 
 997:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fwdt and its parent */
 998:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
 999:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3758              	 .loc 3 999 0
 3759              	 .cfi_startproc
 3760              	 
 3761              	 
 3762              	 
 3763 0000 80B4     	 push {r7}
 3764              	.LCFI350:
 3765              	 .cfi_def_cfa_offset 4
 3766              	 .cfi_offset 7,-4
 3767 0002 83B0     	 sub sp,sp,#12
 3768              	.LCFI351:
 3769              	 .cfi_def_cfa_offset 16
 3770 0004 00AF     	 add r7,sp,#0
 3771              	.LCFI352:
 3772              	 .cfi_def_cfa_register 7
 3773 0006 7860     	 str r0,[r7,#4]
1000:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
1001:../Libraries/XMCLib/src/xmc4_scu.c ****               (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );
1002:../Libraries/XMCLib/src/xmc4_scu.c **** 
1003:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 3774              	 .loc 3 1003 0
 3775 0008 0649     	 ldr r1,.L257
 3776 000a 064B     	 ldr r3,.L257
 3777 000c 5B6A     	 ldr r3,[r3,#36]
 3778 000e 23F0FF02 	 bic r2,r3,#255
1004:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 3779              	 .loc 3 1004 0
 3780 0012 7B68     	 ldr r3,[r7,#4]
 3781 0014 013B     	 subs r3,r3,#1
1003:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 3782              	 .loc 3 1003 0
 3783 0016 1343     	 orrs r3,r3,r2
 3784 0018 4B62     	 str r3,[r1,#36]
1005:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3785              	 .loc 3 1005 0
 3786 001a 0C37     	 adds r7,r7,#12
 3787              	.LCFI353:
 3788              	 .cfi_def_cfa_offset 4
 3789 001c BD46     	 mov sp,r7
 3790              	.LCFI354:
 3791              	 .cfi_def_cfa_register 13
 3792              	 
 3793 001e 5DF8047B 	 ldr r7,[sp],#4
 3794              	.LCFI355:
 3795              	 .cfi_restore 7
 3796              	 .cfi_def_cfa_offset 0
 3797 0022 7047     	 bx lr
 3798              	.L258:
 3799              	 .align 2
 3800              	.L257:
 3801 0024 00460050 	 .word 1342195200
 3802              	 .cfi_endproc
 3803              	.LFE220:
 3805              	 .section .text.XMC_SCU_CLOCK_SetExternalOutputClockDivider,"ax",%progbits
 3806              	 .align 2
 3807              	 .global XMC_SCU_CLOCK_SetExternalOutputClockDivider
 3808              	 .thumb
 3809              	 .thumb_func
 3811              	XMC_SCU_CLOCK_SetExternalOutputClockDivider:
 3812              	.LFB221:
1006:../Libraries/XMCLib/src/xmc4_scu.c **** 
1007:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fext and its parent */
1008:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
1009:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3813              	 .loc 3 1009 0
 3814              	 .cfi_startproc
 3815              	 
 3816              	 
 3817              	 
 3818 0000 80B4     	 push {r7}
 3819              	.LCFI356:
 3820              	 .cfi_def_cfa_offset 4
 3821              	 .cfi_offset 7,-4
 3822 0002 83B0     	 sub sp,sp,#12
 3823              	.LCFI357:
 3824              	 .cfi_def_cfa_offset 16
 3825 0004 00AF     	 add r7,sp,#0
 3826              	.LCFI358:
 3827              	 .cfi_def_cfa_register 7
 3828 0006 7860     	 str r0,[r7,#4]
1010:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
1011:../Libraries/XMCLib/src/xmc4_scu.c ****               (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );
1012:../Libraries/XMCLib/src/xmc4_scu.c **** 
1013:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 3829              	 .loc 3 1013 0
 3830 0008 0849     	 ldr r1,.L260
 3831 000a 084B     	 ldr r3,.L260
 3832 000c 9B6A     	 ldr r3,[r3,#40]
 3833 000e 23F0FF73 	 bic r3,r3,#33423360
 3834 0012 23F48033 	 bic r3,r3,#65536
1014:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 3835              	 .loc 3 1014 0
 3836 0016 7A68     	 ldr r2,[r7,#4]
 3837 0018 013A     	 subs r2,r2,#1
 3838 001a 1204     	 lsls r2,r2,#16
1013:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 3839              	 .loc 3 1013 0
 3840 001c 1343     	 orrs r3,r3,r2
 3841 001e 8B62     	 str r3,[r1,#40]
1015:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3842              	 .loc 3 1015 0
 3843 0020 0C37     	 adds r7,r7,#12
 3844              	.LCFI359:
 3845              	 .cfi_def_cfa_offset 4
 3846 0022 BD46     	 mov sp,r7
 3847              	.LCFI360:
 3848              	 .cfi_def_cfa_register 13
 3849              	 
 3850 0024 5DF8047B 	 ldr r7,[sp],#4
 3851              	.LCFI361:
 3852              	 .cfi_restore 7
 3853              	 .cfi_def_cfa_offset 0
 3854 0028 7047     	 bx lr
 3855              	.L261:
 3856 002a 00BF     	 .align 2
 3857              	.L260:
 3858 002c 00460050 	 .word 1342195200
 3859              	 .cfi_endproc
 3860              	.LFE221:
 3862              	 .section .text.XMC_SCU_CLOCK_SetECATClockDivider,"ax",%progbits
 3863              	 .align 2
 3864              	 .global XMC_SCU_CLOCK_SetECATClockDivider
 3865              	 .thumb
 3866              	 .thumb_func
 3868              	XMC_SCU_CLOCK_SetECATClockDivider:
 3869              	.LFB222:
1016:../Libraries/XMCLib/src/xmc4_scu.c **** 
1017:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(ECAT0)
1018:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
1019:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
1020:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3870              	 .loc 3 1020 0
 3871              	 .cfi_startproc
 3872              	 
 3873              	 
 3874              	 
 3875 0000 80B4     	 push {r7}
 3876              	.LCFI362:
 3877              	 .cfi_def_cfa_offset 4
 3878              	 .cfi_offset 7,-4
 3879 0002 83B0     	 sub sp,sp,#12
 3880              	.LCFI363:
 3881              	 .cfi_def_cfa_offset 16
 3882 0004 00AF     	 add r7,sp,#0
 3883              	.LCFI364:
 3884              	 .cfi_def_cfa_register 7
 3885 0006 7860     	 str r0,[r7,#4]
1021:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 3886              	 .loc 3 1021 0
 3887 0008 0649     	 ldr r1,.L263
 3888 000a 064B     	 ldr r3,.L263
 3889 000c 9B6B     	 ldr r3,[r3,#56]
 3890 000e 23F00302 	 bic r2,r3,#3
1022:../Libraries/XMCLib/src/xmc4_scu.c ****                        (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
 3891              	 .loc 3 1022 0
 3892 0012 7B68     	 ldr r3,[r7,#4]
 3893 0014 013B     	 subs r3,r3,#1
1021:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 3894              	 .loc 3 1021 0
 3895 0016 1343     	 orrs r3,r3,r2
 3896 0018 8B63     	 str r3,[r1,#56]
1023:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3897              	 .loc 3 1023 0
 3898 001a 0C37     	 adds r7,r7,#12
 3899              	.LCFI365:
 3900              	 .cfi_def_cfa_offset 4
 3901 001c BD46     	 mov sp,r7
 3902              	.LCFI366:
 3903              	 .cfi_def_cfa_register 13
 3904              	 
 3905 001e 5DF8047B 	 ldr r7,[sp],#4
 3906              	.LCFI367:
 3907              	 .cfi_restore 7
 3908              	 .cfi_def_cfa_offset 0
 3909 0022 7047     	 bx lr
 3910              	.L264:
 3911              	 .align 2
 3912              	.L263:
 3913 0024 00460050 	 .word 1342195200
 3914              	 .cfi_endproc
 3915              	.LFE222:
 3917              	 .section .text.XMC_SCU_CLOCK_EnableClock,"ax",%progbits
 3918              	 .align 2
 3919              	 .global XMC_SCU_CLOCK_EnableClock
 3920              	 .thumb
 3921              	 .thumb_func
 3923              	XMC_SCU_CLOCK_EnableClock:
 3924              	.LFB223:
1024:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1025:../Libraries/XMCLib/src/xmc4_scu.c **** 
1026:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable a given module clock */
1027:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
1028:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3925              	 .loc 3 1028 0
 3926              	 .cfi_startproc
 3927              	 
 3928              	 
 3929              	 
 3930 0000 80B4     	 push {r7}
 3931              	.LCFI368:
 3932              	 .cfi_def_cfa_offset 4
 3933              	 .cfi_offset 7,-4
 3934 0002 83B0     	 sub sp,sp,#12
 3935              	.LCFI369:
 3936              	 .cfi_def_cfa_offset 16
 3937 0004 00AF     	 add r7,sp,#0
 3938              	.LCFI370:
 3939              	 .cfi_def_cfa_register 7
 3940 0006 0346     	 mov r3,r0
 3941 0008 FB71     	 strb r3,[r7,#7]
1029:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->CLKSET = ((uint32_t)clock);
 3942              	 .loc 3 1029 0
 3943 000a 044A     	 ldr r2,.L266
 3944 000c FB79     	 ldrb r3,[r7,#7]
 3945 000e 5360     	 str r3,[r2,#4]
1030:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3946              	 .loc 3 1030 0
 3947 0010 0C37     	 adds r7,r7,#12
 3948              	.LCFI371:
 3949              	 .cfi_def_cfa_offset 4
 3950 0012 BD46     	 mov sp,r7
 3951              	.LCFI372:
 3952              	 .cfi_def_cfa_register 13
 3953              	 
 3954 0014 5DF8047B 	 ldr r7,[sp],#4
 3955              	.LCFI373:
 3956              	 .cfi_restore 7
 3957              	 .cfi_def_cfa_offset 0
 3958 0018 7047     	 bx lr
 3959              	.L267:
 3960 001a 00BF     	 .align 2
 3961              	.L266:
 3962 001c 00460050 	 .word 1342195200
 3963              	 .cfi_endproc
 3964              	.LFE223:
 3966              	 .section .text.XMC_SCU_CLOCK_DisableClock,"ax",%progbits
 3967              	 .align 2
 3968              	 .global XMC_SCU_CLOCK_DisableClock
 3969              	 .thumb
 3970              	 .thumb_func
 3972              	XMC_SCU_CLOCK_DisableClock:
 3973              	.LFB224:
1031:../Libraries/XMCLib/src/xmc4_scu.c **** 
1032:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable a given module clock */
1033:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
1034:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3974              	 .loc 3 1034 0
 3975              	 .cfi_startproc
 3976              	 
 3977              	 
 3978              	 
 3979 0000 80B4     	 push {r7}
 3980              	.LCFI374:
 3981              	 .cfi_def_cfa_offset 4
 3982              	 .cfi_offset 7,-4
 3983 0002 83B0     	 sub sp,sp,#12
 3984              	.LCFI375:
 3985              	 .cfi_def_cfa_offset 16
 3986 0004 00AF     	 add r7,sp,#0
 3987              	.LCFI376:
 3988              	 .cfi_def_cfa_register 7
 3989 0006 0346     	 mov r3,r0
 3990 0008 FB71     	 strb r3,[r7,#7]
1035:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->CLKCLR = ((uint32_t)clock);
 3991              	 .loc 3 1035 0
 3992 000a 044A     	 ldr r2,.L269
 3993 000c FB79     	 ldrb r3,[r7,#7]
 3994 000e 9360     	 str r3,[r2,#8]
1036:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3995              	 .loc 3 1036 0
 3996 0010 0C37     	 adds r7,r7,#12
 3997              	.LCFI377:
 3998              	 .cfi_def_cfa_offset 4
 3999 0012 BD46     	 mov sp,r7
 4000              	.LCFI378:
 4001              	 .cfi_def_cfa_register 13
 4002              	 
 4003 0014 5DF8047B 	 ldr r7,[sp],#4
 4004              	.LCFI379:
 4005              	 .cfi_restore 7
 4006              	 .cfi_def_cfa_offset 0
 4007 0018 7047     	 bx lr
 4008              	.L270:
 4009 001a 00BF     	 .align 2
 4010              	.L269:
 4011 001c 00460050 	 .word 1342195200
 4012              	 .cfi_endproc
 4013              	.LFE224:
 4015              	 .section .text.XMC_SCU_CLOCK_IsClockEnabled,"ax",%progbits
 4016              	 .align 2
 4017              	 .global XMC_SCU_CLOCK_IsClockEnabled
 4018              	 .thumb
 4019              	 .thumb_func
 4021              	XMC_SCU_CLOCK_IsClockEnabled:
 4022              	.LFB225:
1037:../Libraries/XMCLib/src/xmc4_scu.c **** 
1038:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to determine if module clock of the given peripheral is enabled */
1039:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
1040:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4023              	 .loc 3 1040 0
 4024              	 .cfi_startproc
 4025              	 
 4026              	 
 4027              	 
 4028 0000 80B4     	 push {r7}
 4029              	.LCFI380:
 4030              	 .cfi_def_cfa_offset 4
 4031              	 .cfi_offset 7,-4
 4032 0002 83B0     	 sub sp,sp,#12
 4033              	.LCFI381:
 4034              	 .cfi_def_cfa_offset 16
 4035 0004 00AF     	 add r7,sp,#0
 4036              	.LCFI382:
 4037              	 .cfi_def_cfa_register 7
 4038 0006 0346     	 mov r3,r0
 4039 0008 FB71     	 strb r3,[r7,#7]
1041:../Libraries/XMCLib/src/xmc4_scu.c ****   return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 4040              	 .loc 3 1041 0
 4041 000a 074B     	 ldr r3,.L273
 4042 000c 1A68     	 ldr r2,[r3]
 4043 000e FB79     	 ldrb r3,[r7,#7]
 4044 0010 1340     	 ands r3,r3,r2
 4045 0012 002B     	 cmp r3,#0
 4046 0014 14BF     	 ite ne
 4047 0016 0123     	 movne r3,#1
 4048 0018 0023     	 moveq r3,#0
 4049 001a DBB2     	 uxtb r3,r3
1042:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4050              	 .loc 3 1042 0
 4051 001c 1846     	 mov r0,r3
 4052 001e 0C37     	 adds r7,r7,#12
 4053              	.LCFI383:
 4054              	 .cfi_def_cfa_offset 4
 4055 0020 BD46     	 mov sp,r7
 4056              	.LCFI384:
 4057              	 .cfi_def_cfa_register 13
 4058              	 
 4059 0022 5DF8047B 	 ldr r7,[sp],#4
 4060              	.LCFI385:
 4061              	 .cfi_restore 7
 4062              	 .cfi_def_cfa_offset 0
 4063 0026 7047     	 bx lr
 4064              	.L274:
 4065              	 .align 2
 4066              	.L273:
 4067 0028 00460050 	 .word 1342195200
 4068              	 .cfi_endproc
 4069              	.LFE225:
 4071              	 .section .text.XMC_SCU_CLOCK_GatePeripheralClock,"ax",%progbits
 4072              	 .align 2
 4073              	 .global XMC_SCU_CLOCK_GatePeripheralClock
 4074              	 .thumb
 4075              	 .thumb_func
 4077              	XMC_SCU_CLOCK_GatePeripheralClock:
 4078              	.LFB226:
1043:../Libraries/XMCLib/src/xmc4_scu.c **** 
1044:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(CLOCK_GATING_SUPPORTED)
1045:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to gate a given module clock */
1046:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
1047:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4079              	 .loc 3 1047 0
 4080              	 .cfi_startproc
 4081              	 
 4082              	 
 4083              	 
 4084 0000 80B4     	 push {r7}
 4085              	.LCFI386:
 4086              	 .cfi_def_cfa_offset 4
 4087              	 .cfi_offset 7,-4
 4088 0002 85B0     	 sub sp,sp,#20
 4089              	.LCFI387:
 4090              	 .cfi_def_cfa_offset 24
 4091 0004 00AF     	 add r7,sp,#0
 4092              	.LCFI388:
 4093              	 .cfi_def_cfa_register 7
 4094 0006 7860     	 str r0,[r7,#4]
1048:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (peripheral & 0xf0000000UL) >> 28UL;
 4095              	 .loc 3 1048 0
 4096 0008 7B68     	 ldr r3,[r7,#4]
 4097 000a 1B0F     	 lsrs r3,r3,#28
 4098 000c FB60     	 str r3,[r7,#12]
1049:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 4099              	 .loc 3 1049 0
 4100 000e 7B68     	 ldr r3,[r7,#4]
 4101 0010 23F07043 	 bic r3,r3,#-268435456
 4102 0014 BB60     	 str r3,[r7,#8]
1050:../Libraries/XMCLib/src/xmc4_scu.c **** 
1051:../Libraries/XMCLib/src/xmc4_scu.c ****   *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
 4103              	 .loc 3 1051 0
 4104 0016 FA68     	 ldr r2,[r7,#12]
 4105 0018 1346     	 mov r3,r2
 4106 001a 5B00     	 lsls r3,r3,#1
 4107 001c 1344     	 add r3,r3,r2
 4108 001e 9B00     	 lsls r3,r3,#2
 4109 0020 1A46     	 mov r2,r3
 4110 0022 044B     	 ldr r3,.L276
 4111 0024 1344     	 add r3,r3,r2
 4112 0026 BA68     	 ldr r2,[r7,#8]
 4113 0028 1A60     	 str r2,[r3]
1052:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4114              	 .loc 3 1052 0
 4115 002a 1437     	 adds r7,r7,#20
 4116              	.LCFI389:
 4117              	 .cfi_def_cfa_offset 4
 4118 002c BD46     	 mov sp,r7
 4119              	.LCFI390:
 4120              	 .cfi_def_cfa_register 13
 4121              	 
 4122 002e 5DF8047B 	 ldr r7,[sp],#4
 4123              	.LCFI391:
 4124              	 .cfi_restore 7
 4125              	 .cfi_def_cfa_offset 0
 4126 0032 7047     	 bx lr
 4127              	.L277:
 4128              	 .align 2
 4129              	.L276:
 4130 0034 44460050 	 .word 1342195268
 4131              	 .cfi_endproc
 4132              	.LFE226:
 4134              	 .section .text.XMC_SCU_CLOCK_UngatePeripheralClock,"ax",%progbits
 4135              	 .align 2
 4136              	 .global XMC_SCU_CLOCK_UngatePeripheralClock
 4137              	 .thumb
 4138              	 .thumb_func
 4140              	XMC_SCU_CLOCK_UngatePeripheralClock:
 4141              	.LFB227:
1053:../Libraries/XMCLib/src/xmc4_scu.c **** 
1054:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to ungate a given module clock */
1055:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
1056:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4142              	 .loc 3 1056 0
 4143              	 .cfi_startproc
 4144              	 
 4145              	 
 4146              	 
 4147 0000 80B4     	 push {r7}
 4148              	.LCFI392:
 4149              	 .cfi_def_cfa_offset 4
 4150              	 .cfi_offset 7,-4
 4151 0002 85B0     	 sub sp,sp,#20
 4152              	.LCFI393:
 4153              	 .cfi_def_cfa_offset 24
 4154 0004 00AF     	 add r7,sp,#0
 4155              	.LCFI394:
 4156              	 .cfi_def_cfa_register 7
 4157 0006 7860     	 str r0,[r7,#4]
1057:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 4158              	 .loc 3 1057 0
 4159 0008 7B68     	 ldr r3,[r7,#4]
 4160 000a 1B0F     	 lsrs r3,r3,#28
 4161 000c FB60     	 str r3,[r7,#12]
1058:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 4162              	 .loc 3 1058 0
 4163 000e 7B68     	 ldr r3,[r7,#4]
 4164 0010 23F07043 	 bic r3,r3,#-268435456
 4165 0014 BB60     	 str r3,[r7,#8]
1059:../Libraries/XMCLib/src/xmc4_scu.c **** 
1060:../Libraries/XMCLib/src/xmc4_scu.c ****   *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 4166              	 .loc 3 1060 0
 4167 0016 FA68     	 ldr r2,[r7,#12]
 4168 0018 1346     	 mov r3,r2
 4169 001a 5B00     	 lsls r3,r3,#1
 4170 001c 1344     	 add r3,r3,r2
 4171 001e 9B00     	 lsls r3,r3,#2
 4172 0020 1A46     	 mov r2,r3
 4173 0022 044B     	 ldr r3,.L279
 4174 0024 1344     	 add r3,r3,r2
 4175 0026 BA68     	 ldr r2,[r7,#8]
 4176 0028 1A60     	 str r2,[r3]
1061:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4177              	 .loc 3 1061 0
 4178 002a 1437     	 adds r7,r7,#20
 4179              	.LCFI395:
 4180              	 .cfi_def_cfa_offset 4
 4181 002c BD46     	 mov sp,r7
 4182              	.LCFI396:
 4183              	 .cfi_def_cfa_register 13
 4184              	 
 4185 002e 5DF8047B 	 ldr r7,[sp],#4
 4186              	.LCFI397:
 4187              	 .cfi_restore 7
 4188              	 .cfi_def_cfa_offset 0
 4189 0032 7047     	 bx lr
 4190              	.L280:
 4191              	 .align 2
 4192              	.L279:
 4193 0034 48460050 	 .word 1342195272
 4194              	 .cfi_endproc
 4195              	.LFE227:
 4197              	 .section .text.XMC_SCU_CLOCK_IsPeripheralClockGated,"ax",%progbits
 4198              	 .align 2
 4199              	 .global XMC_SCU_CLOCK_IsPeripheralClockGated
 4200              	 .thumb
 4201              	 .thumb_func
 4203              	XMC_SCU_CLOCK_IsPeripheralClockGated:
 4204              	.LFB228:
1062:../Libraries/XMCLib/src/xmc4_scu.c **** 
1063:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to ungate a given module clock */
1064:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
1065:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4205              	 .loc 3 1065 0
 4206              	 .cfi_startproc
 4207              	 
 4208              	 
 4209              	 
 4210 0000 80B4     	 push {r7}
 4211              	.LCFI398:
 4212              	 .cfi_def_cfa_offset 4
 4213              	 .cfi_offset 7,-4
 4214 0002 85B0     	 sub sp,sp,#20
 4215              	.LCFI399:
 4216              	 .cfi_def_cfa_offset 24
 4217 0004 00AF     	 add r7,sp,#0
 4218              	.LCFI400:
 4219              	 .cfi_def_cfa_register 7
 4220 0006 7860     	 str r0,[r7,#4]
1066:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 4221              	 .loc 3 1066 0
 4222 0008 7B68     	 ldr r3,[r7,#4]
 4223 000a 1B0F     	 lsrs r3,r3,#28
 4224 000c FB60     	 str r3,[r7,#12]
1067:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 4225              	 .loc 3 1067 0
 4226 000e 7B68     	 ldr r3,[r7,#4]
 4227 0010 23F07043 	 bic r3,r3,#-268435456
 4228 0014 BB60     	 str r3,[r7,#8]
1068:../Libraries/XMCLib/src/xmc4_scu.c **** 
1069:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 4229              	 .loc 3 1069 0
 4230 0016 FA68     	 ldr r2,[r7,#12]
 4231 0018 1346     	 mov r3,r2
 4232 001a 5B00     	 lsls r3,r3,#1
 4233 001c 1344     	 add r3,r3,r2
 4234 001e 9B00     	 lsls r3,r3,#2
 4235 0020 1A46     	 mov r2,r3
 4236 0022 084B     	 ldr r3,.L283
 4237 0024 1344     	 add r3,r3,r2
 4238 0026 1A68     	 ldr r2,[r3]
 4239 0028 BB68     	 ldr r3,[r7,#8]
 4240 002a 1340     	 ands r3,r3,r2
 4241 002c 002B     	 cmp r3,#0
 4242 002e 14BF     	 ite ne
 4243 0030 0123     	 movne r3,#1
 4244 0032 0023     	 moveq r3,#0
 4245 0034 DBB2     	 uxtb r3,r3
1070:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4246              	 .loc 3 1070 0
 4247 0036 1846     	 mov r0,r3
 4248 0038 1437     	 adds r7,r7,#20
 4249              	.LCFI401:
 4250              	 .cfi_def_cfa_offset 4
 4251 003a BD46     	 mov sp,r7
 4252              	.LCFI402:
 4253              	 .cfi_def_cfa_register 13
 4254              	 
 4255 003c 5DF8047B 	 ldr r7,[sp],#4
 4256              	.LCFI403:
 4257              	 .cfi_restore 7
 4258              	 .cfi_def_cfa_offset 0
 4259 0040 7047     	 bx lr
 4260              	.L284:
 4261 0042 00BF     	 .align 2
 4262              	.L283:
 4263 0044 40460050 	 .word 1342195264
 4264              	 .cfi_endproc
 4265              	.LFE228:
 4267              	 .section .text.XMC_SCU_POWER_GetEVR13Voltage,"ax",%progbits
 4268              	 .align 2
 4269              	 .global XMC_SCU_POWER_GetEVR13Voltage
 4270              	 .thumb
 4271              	 .thumb_func
 4273              	XMC_SCU_POWER_GetEVR13Voltage:
 4274              	.LFB229:
1071:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1072:../Libraries/XMCLib/src/xmc4_scu.c **** 
1073:../Libraries/XMCLib/src/xmc4_scu.c **** float XMC_SCU_POWER_GetEVR13Voltage(void)
1074:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4275              	 .loc 3 1074 0
 4276              	 .cfi_startproc
 4277              	 
 4278              	 
 4279              	 
 4280 0000 80B4     	 push {r7}
 4281              	.LCFI404:
 4282              	 .cfi_def_cfa_offset 4
 4283              	 .cfi_offset 7,-4
 4284 0002 00AF     	 add r7,sp,#0
 4285              	.LCFI405:
 4286              	 .cfi_def_cfa_register 7
1075:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 4287              	 .loc 3 1075 0
 4288 0004 084B     	 ldr r3,.L287
 4289 0006 5B69     	 ldr r3,[r3,#20]
 4290 0008 DBB2     	 uxtb r3,r3
 4291 000a 07EE903A 	 fmsr s15,r3
 4292 000e F8EE677A 	 fuitos s15,s15
 4293 0012 9FED067A 	 flds s14,.L287+4
 4294 0016 67EE877A 	 fmuls s15,s15,s14
 4295 001a 17EE903A 	 fmrs r3,s15
1076:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4296              	 .loc 3 1076 0
 4297 001e 1846     	 mov r0,r3
 4298 0020 BD46     	 mov sp,r7
 4299              	.LCFI406:
 4300              	 .cfi_def_cfa_register 13
 4301              	 
 4302 0022 5DF8047B 	 ldr r7,[sp],#4
 4303              	.LCFI407:
 4304              	 .cfi_restore 7
 4305              	 .cfi_def_cfa_offset 0
 4306 0026 7047     	 bx lr
 4307              	.L288:
 4308              	 .align 2
 4309              	.L287:
 4310 0028 00420050 	 .word 1342194176
 4311 002c ED0DBE3B 	 .word 1002311149
 4312              	 .cfi_endproc
 4313              	.LFE229:
 4315              	 .section .text.XMC_SCU_POWER_GetEVR33Voltage,"ax",%progbits
 4316              	 .align 2
 4317              	 .global XMC_SCU_POWER_GetEVR33Voltage
 4318              	 .thumb
 4319              	 .thumb_func
 4321              	XMC_SCU_POWER_GetEVR33Voltage:
 4322              	.LFB230:
1077:../Libraries/XMCLib/src/xmc4_scu.c **** 
1078:../Libraries/XMCLib/src/xmc4_scu.c **** float XMC_SCU_POWER_GetEVR33Voltage(void)
1079:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4323              	 .loc 3 1079 0
 4324              	 .cfi_startproc
 4325              	 
 4326              	 
 4327              	 
 4328 0000 80B4     	 push {r7}
 4329              	.LCFI408:
 4330              	 .cfi_def_cfa_offset 4
 4331              	 .cfi_offset 7,-4
 4332 0002 00AF     	 add r7,sp,#0
 4333              	.LCFI409:
 4334              	 .cfi_def_cfa_register 7
1080:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VAD
 4335              	 .loc 3 1080 0
 4336 0004 094B     	 ldr r3,.L291
 4337 0006 5B69     	 ldr r3,[r3,#20]
 4338 0008 03F47F43 	 and r3,r3,#65280
 4339 000c 1B0A     	 lsrs r3,r3,#8
 4340 000e 07EE903A 	 fmsr s15,r3
 4341 0012 F8EE677A 	 fuitos s15,s15
 4342 0016 9FED067A 	 flds s14,.L291+4
 4343 001a 67EE877A 	 fmuls s15,s15,s14
 4344 001e 17EE903A 	 fmrs r3,s15
1081:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4345              	 .loc 3 1081 0
 4346 0022 1846     	 mov r0,r3
 4347 0024 BD46     	 mov sp,r7
 4348              	.LCFI410:
 4349              	 .cfi_def_cfa_register 13
 4350              	 
 4351 0026 5DF8047B 	 ldr r7,[sp],#4
 4352              	.LCFI411:
 4353              	 .cfi_restore 7
 4354              	 .cfi_def_cfa_offset 0
 4355 002a 7047     	 bx lr
 4356              	.L292:
 4357              	 .align 2
 4358              	.L291:
 4359 002c 00420050 	 .word 1342194176
 4360 0030 EC51B83C 	 .word 1018712556
 4361              	 .cfi_endproc
 4362              	.LFE230:
 4364              	 .section .text.XMC_SCU_CLOCK_EnableUsbPll,"ax",%progbits
 4365              	 .align 2
 4366              	 .global XMC_SCU_CLOCK_EnableUsbPll
 4367              	 .thumb
 4368              	 .thumb_func
 4370              	XMC_SCU_CLOCK_EnableUsbPll:
 4371              	.LFB231:
1082:../Libraries/XMCLib/src/xmc4_scu.c **** 
1083:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable USB PLL for USB clock */
1084:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableUsbPll(void)
1085:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4372              	 .loc 3 1085 0
 4373              	 .cfi_startproc
 4374              	 
 4375              	 
 4376              	 
 4377 0000 80B4     	 push {r7}
 4378              	.LCFI412:
 4379              	 .cfi_def_cfa_offset 4
 4380              	 .cfi_offset 7,-4
 4381 0002 00AF     	 add r7,sp,#0
 4382              	.LCFI413:
 4383              	 .cfi_def_cfa_register 7
1086:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 4384              	 .loc 3 1086 0
 4385 0004 054A     	 ldr r2,.L294
 4386 0006 054B     	 ldr r3,.L294
 4387 0008 5B69     	 ldr r3,[r3,#20]
 4388 000a 23F48033 	 bic r3,r3,#65536
 4389 000e 23F00203 	 bic r3,r3,#2
 4390 0012 5361     	 str r3,[r2,#20]
1087:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4391              	 .loc 3 1087 0
 4392 0014 BD46     	 mov sp,r7
 4393              	.LCFI414:
 4394              	 .cfi_def_cfa_register 13
 4395              	 
 4396 0016 5DF8047B 	 ldr r7,[sp],#4
 4397              	.LCFI415:
 4398              	 .cfi_restore 7
 4399              	 .cfi_def_cfa_offset 0
 4400 001a 7047     	 bx lr
 4401              	.L295:
 4402              	 .align 2
 4403              	.L294:
 4404 001c 10470050 	 .word 1342195472
 4405              	 .cfi_endproc
 4406              	.LFE231:
 4408              	 .section .text.XMC_SCU_CLOCK_DisableUsbPll,"ax",%progbits
 4409              	 .align 2
 4410              	 .global XMC_SCU_CLOCK_DisableUsbPll
 4411              	 .thumb
 4412              	 .thumb_func
 4414              	XMC_SCU_CLOCK_DisableUsbPll:
 4415              	.LFB232:
1088:../Libraries/XMCLib/src/xmc4_scu.c **** 
1089:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable USB PLL for USB clock */
1090:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableUsbPll(void)
1091:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4416              	 .loc 3 1091 0
 4417              	 .cfi_startproc
 4418              	 
 4419              	 
 4420              	 
 4421 0000 80B4     	 push {r7}
 4422              	.LCFI416:
 4423              	 .cfi_def_cfa_offset 4
 4424              	 .cfi_offset 7,-4
 4425 0002 00AF     	 add r7,sp,#0
 4426              	.LCFI417:
 4427              	 .cfi_def_cfa_register 7
1092:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 4428              	 .loc 3 1092 0
 4429 0004 054A     	 ldr r2,.L297
 4430 0006 054B     	 ldr r3,.L297
 4431 0008 5B69     	 ldr r3,[r3,#20]
 4432 000a 43F48033 	 orr r3,r3,#65536
 4433 000e 43F00203 	 orr r3,r3,#2
 4434 0012 5361     	 str r3,[r2,#20]
1093:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4435              	 .loc 3 1093 0
 4436 0014 BD46     	 mov sp,r7
 4437              	.LCFI418:
 4438              	 .cfi_def_cfa_register 13
 4439              	 
 4440 0016 5DF8047B 	 ldr r7,[sp],#4
 4441              	.LCFI419:
 4442              	 .cfi_restore 7
 4443              	 .cfi_def_cfa_offset 0
 4444 001a 7047     	 bx lr
 4445              	.L298:
 4446              	 .align 2
 4447              	.L297:
 4448 001c 10470050 	 .word 1342195472
 4449              	 .cfi_endproc
 4450              	.LFE232:
 4452              	 .section .text.XMC_SCU_CLOCK_StartUsbPll,"ax",%progbits
 4453              	 .align 2
 4454              	 .global XMC_SCU_CLOCK_StartUsbPll
 4455              	 .thumb
 4456              	 .thumb_func
 4458              	XMC_SCU_CLOCK_StartUsbPll:
 4459              	.LFB233:
1094:../Libraries/XMCLib/src/xmc4_scu.c **** 
1095:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to configure USB PLL */
1096:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
1097:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4460              	 .loc 3 1097 0
 4461              	 .cfi_startproc
 4462              	 
 4463              	 
 4464              	 
 4465 0000 80B4     	 push {r7}
 4466              	.LCFI420:
 4467              	 .cfi_def_cfa_offset 4
 4468              	 .cfi_offset 7,-4
 4469 0002 83B0     	 sub sp,sp,#12
 4470              	.LCFI421:
 4471              	 .cfi_def_cfa_offset 16
 4472 0004 00AF     	 add r7,sp,#0
 4473              	.LCFI422:
 4474              	 .cfi_def_cfa_register 7
 4475 0006 7860     	 str r0,[r7,#4]
 4476 0008 3960     	 str r1,[r7]
1098:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Go to bypass the USB PLL */
1099:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 4477              	 .loc 3 1099 0
 4478 000a 194A     	 ldr r2,.L301
 4479 000c 184B     	 ldr r3,.L301
 4480 000e 5B69     	 ldr r3,[r3,#20]
 4481 0010 43F00103 	 orr r3,r3,#1
 4482 0014 5361     	 str r3,[r2,#20]
1100:../Libraries/XMCLib/src/xmc4_scu.c **** 
1101:../Libraries/XMCLib/src/xmc4_scu.c ****   /* disconnect Oscillator from USB PLL */
1102:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 4483              	 .loc 3 1102 0
 4484 0016 164A     	 ldr r2,.L301
 4485 0018 154B     	 ldr r3,.L301
 4486 001a 5B69     	 ldr r3,[r3,#20]
 4487 001c 43F01003 	 orr r3,r3,#16
 4488 0020 5361     	 str r3,[r2,#20]
1103:../Libraries/XMCLib/src/xmc4_scu.c **** 
1104:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Setup Divider settings for USB PLL */
1105:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 4489              	 .loc 3 1105 0
 4490 0022 1349     	 ldr r1,.L301
 4491 0024 3B68     	 ldr r3,[r7]
 4492 0026 013B     	 subs r3,r3,#1
 4493 0028 1A02     	 lsls r2,r3,#8
1106:../Libraries/XMCLib/src/xmc4_scu.c ****                        (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 4494              	 .loc 3 1106 0
 4495 002a 7B68     	 ldr r3,[r7,#4]
 4496 002c 013B     	 subs r3,r3,#1
 4497 002e 1B06     	 lsls r3,r3,#24
1105:../Libraries/XMCLib/src/xmc4_scu.c ****                        (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 4498              	 .loc 3 1105 0
 4499 0030 1343     	 orrs r3,r3,r2
 4500 0032 4B61     	 str r3,[r1,#20]
1107:../Libraries/XMCLib/src/xmc4_scu.c **** 
1108:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Set OSCDISCDIS */
1109:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 4501              	 .loc 3 1109 0
 4502 0034 0E4A     	 ldr r2,.L301
 4503 0036 0E4B     	 ldr r3,.L301
 4504 0038 5B69     	 ldr r3,[r3,#20]
 4505 003a 43F04003 	 orr r3,r3,#64
 4506 003e 5361     	 str r3,[r2,#20]
1110:../Libraries/XMCLib/src/xmc4_scu.c **** 
1111:../Libraries/XMCLib/src/xmc4_scu.c ****   /* connect Oscillator to USB PLL */
1112:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 4507              	 .loc 3 1112 0
 4508 0040 0B4A     	 ldr r2,.L301
 4509 0042 0B4B     	 ldr r3,.L301
 4510 0044 5B69     	 ldr r3,[r3,#20]
 4511 0046 23F01003 	 bic r3,r3,#16
 4512 004a 5361     	 str r3,[r2,#20]
1113:../Libraries/XMCLib/src/xmc4_scu.c **** 
1114:../Libraries/XMCLib/src/xmc4_scu.c ****   /* restart PLL Lock detection */
1115:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 4513              	 .loc 3 1115 0
 4514 004c 084A     	 ldr r2,.L301
 4515 004e 084B     	 ldr r3,.L301
 4516 0050 5B69     	 ldr r3,[r3,#20]
 4517 0052 43F48023 	 orr r3,r3,#262144
 4518 0056 5361     	 str r3,[r2,#20]
1116:../Libraries/XMCLib/src/xmc4_scu.c **** 
1117:../Libraries/XMCLib/src/xmc4_scu.c ****   while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 4519              	 .loc 3 1117 0
 4520 0058 00BF     	 nop
 4521              	.L300:
 4522              	 .loc 3 1117 0 is_stmt 0 discriminator 1
 4523 005a 054B     	 ldr r3,.L301
 4524 005c 1B69     	 ldr r3,[r3,#16]
 4525 005e 03F00403 	 and r3,r3,#4
 4526 0062 002B     	 cmp r3,#0
 4527 0064 F9D0     	 beq .L300
1118:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1119:../Libraries/XMCLib/src/xmc4_scu.c ****     /* wait for PLL Lock */
1120:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1121:../Libraries/XMCLib/src/xmc4_scu.c **** 
1122:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4528              	 .loc 3 1122 0 is_stmt 1
 4529 0066 0C37     	 adds r7,r7,#12
 4530              	.LCFI423:
 4531              	 .cfi_def_cfa_offset 4
 4532 0068 BD46     	 mov sp,r7
 4533              	.LCFI424:
 4534              	 .cfi_def_cfa_register 13
 4535              	 
 4536 006a 5DF8047B 	 ldr r7,[sp],#4
 4537              	.LCFI425:
 4538              	 .cfi_restore 7
 4539              	 .cfi_def_cfa_offset 0
 4540 006e 7047     	 bx lr
 4541              	.L302:
 4542              	 .align 2
 4543              	.L301:
 4544 0070 10470050 	 .word 1342195472
 4545              	 .cfi_endproc
 4546              	.LFE233:
 4548              	 .section .text.XMC_SCU_CLOCK_StopUsbPll,"ax",%progbits
 4549              	 .align 2
 4550              	 .global XMC_SCU_CLOCK_StopUsbPll
 4551              	 .thumb
 4552              	 .thumb_func
 4554              	XMC_SCU_CLOCK_StopUsbPll:
 4555              	.LFB234:
1123:../Libraries/XMCLib/src/xmc4_scu.c **** 
1124:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable USB PLL operation */
1125:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_StopUsbPll(void)
1126:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4556              	 .loc 3 1126 0
 4557              	 .cfi_startproc
 4558              	 
 4559              	 
 4560              	 
 4561 0000 80B4     	 push {r7}
 4562              	.LCFI426:
 4563              	 .cfi_def_cfa_offset 4
 4564              	 .cfi_offset 7,-4
 4565 0002 00AF     	 add r7,sp,#0
 4566              	.LCFI427:
 4567              	 .cfi_def_cfa_register 7
1127:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 4568              	 .loc 3 1127 0
 4569 0004 034B     	 ldr r3,.L304
 4570 0006 044A     	 ldr r2,.L304+4
 4571 0008 5A61     	 str r2,[r3,#20]
1128:../Libraries/XMCLib/src/xmc4_scu.c ****                                   SCU_PLL_USBPLLCON_VCOBYP_Msk);
1129:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4572              	 .loc 3 1129 0
 4573 000a BD46     	 mov sp,r7
 4574              	.LCFI428:
 4575              	 .cfi_def_cfa_register 13
 4576              	 
 4577 000c 5DF8047B 	 ldr r7,[sp],#4
 4578              	.LCFI429:
 4579              	 .cfi_restore 7
 4580              	 .cfi_def_cfa_offset 0
 4581 0010 7047     	 bx lr
 4582              	.L305:
 4583 0012 00BF     	 .align 2
 4584              	.L304:
 4585 0014 10470050 	 .word 1342195472
 4586 0018 03000100 	 .word 65539
 4587              	 .cfi_endproc
 4588              	.LFE234:
 4590              	 .section .text.XMC_SCU_CLOCK_SetBackupClockCalibrationMode,"ax",%progbits
 4591              	 .align 2
 4592              	 .global XMC_SCU_CLOCK_SetBackupClockCalibrationMode
 4593              	 .thumb
 4594              	 .thumb_func
 4596              	XMC_SCU_CLOCK_SetBackupClockCalibrationMode:
 4597              	.LFB235:
1130:../Libraries/XMCLib/src/xmc4_scu.c **** 
1131:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to onfigure the calibration mode for internal oscillator */
1132:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
1133:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4598              	 .loc 3 1133 0
 4599              	 .cfi_startproc
 4600              	 
 4601              	 
 4602 0000 80B5     	 push {r7,lr}
 4603              	.LCFI430:
 4604              	 .cfi_def_cfa_offset 8
 4605              	 .cfi_offset 7,-8
 4606              	 .cfi_offset 14,-4
 4607 0002 82B0     	 sub sp,sp,#8
 4608              	.LCFI431:
 4609              	 .cfi_def_cfa_offset 16
 4610 0004 00AF     	 add r7,sp,#0
 4611              	.LCFI432:
 4612              	 .cfi_def_cfa_register 7
 4613 0006 0346     	 mov r3,r0
 4614 0008 FB71     	 strb r3,[r7,#7]
1134:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Enable factory calibration based trimming */
1135:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 4615              	 .loc 3 1135 0
 4616 000a 0F4A     	 ldr r2,.L308
 4617 000c 0E4B     	 ldr r3,.L308
 4618 000e 5B68     	 ldr r3,[r3,#4]
 4619 0010 43F48013 	 orr r3,r3,#1048576
 4620 0014 5360     	 str r3,[r2,#4]
1136:../Libraries/XMCLib/src/xmc4_scu.c **** 
1137:../Libraries/XMCLib/src/xmc4_scu.c ****   if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 4621              	 .loc 3 1137 0
 4622 0016 FB79     	 ldrb r3,[r7,#7]
 4623 0018 012B     	 cmp r3,#1
 4624 001a 0ED1     	 bne .L307
1138:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1139:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Disable factory calibration based trimming */
1140:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 4625              	 .loc 3 1140 0
 4626 001c 0A4A     	 ldr r2,.L308
 4627 001e 0A4B     	 ldr r3,.L308
 4628 0020 5B68     	 ldr r3,[r3,#4]
 4629 0022 23F48013 	 bic r3,r3,#1048576
 4630 0026 5360     	 str r3,[r2,#4]
1141:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_lDelay(100UL);
 4631              	 .loc 3 1141 0
 4632 0028 6420     	 movs r0,#100
 4633 002a FFF7FEFF 	 bl XMC_SCU_lDelay
1142:../Libraries/XMCLib/src/xmc4_scu.c **** 
1143:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Enable automatic calibration */
1144:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 4634              	 .loc 3 1144 0
 4635 002e 064A     	 ldr r2,.L308
 4636 0030 054B     	 ldr r3,.L308
 4637 0032 5B68     	 ldr r3,[r3,#4]
 4638 0034 43F40023 	 orr r3,r3,#524288
 4639 0038 5360     	 str r3,[r2,#4]
 4640              	.L307:
1145:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1146:../Libraries/XMCLib/src/xmc4_scu.c **** 
1147:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_lDelay(100UL);
 4641              	 .loc 3 1147 0
 4642 003a 6420     	 movs r0,#100
 4643 003c FFF7FEFF 	 bl XMC_SCU_lDelay
1148:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4644              	 .loc 3 1148 0
 4645 0040 0837     	 adds r7,r7,#8
 4646              	.LCFI433:
 4647              	 .cfi_def_cfa_offset 8
 4648 0042 BD46     	 mov sp,r7
 4649              	.LCFI434:
 4650              	 .cfi_def_cfa_register 13
 4651              	 
 4652 0044 80BD     	 pop {r7,pc}
 4653              	.L309:
 4654 0046 00BF     	 .align 2
 4655              	.L308:
 4656 0048 10470050 	 .word 1342195472
 4657              	 .cfi_endproc
 4658              	.LFE235:
 4660              	 .section .text.XMC_SCU_POWER_EnableUsb,"ax",%progbits
 4661              	 .align 2
 4662              	 .global XMC_SCU_POWER_EnableUsb
 4663              	 .thumb
 4664              	 .thumb_func
 4666              	XMC_SCU_POWER_EnableUsb:
 4667              	.LFB236:
1149:../Libraries/XMCLib/src/xmc4_scu.c **** 
1150:../Libraries/XMCLib/src/xmc4_scu.c **** 
1151:../Libraries/XMCLib/src/xmc4_scu.c **** 
1152:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable USB Phy and comparator */
1153:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_POWER_EnableUsb(void)
1154:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4668              	 .loc 3 1154 0
 4669              	 .cfi_startproc
 4670              	 
 4671              	 
 4672              	 
 4673 0000 80B4     	 push {r7}
 4674              	.LCFI435:
 4675              	 .cfi_def_cfa_offset 4
 4676              	 .cfi_offset 7,-4
 4677 0002 00AF     	 add r7,sp,#0
 4678              	.LCFI436:
 4679              	 .cfi_def_cfa_register 7
1155:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(USB_OTG_SUPPORTED)
1156:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 4680              	 .loc 3 1156 0
 4681 0004 034B     	 ldr r3,.L311
 4682 0006 4FF44032 	 mov r2,#196608
 4683 000a 5A60     	 str r2,[r3,#4]
1157:../Libraries/XMCLib/src/xmc4_scu.c **** #else
1158:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
1159:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1160:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4684              	 .loc 3 1160 0
 4685 000c BD46     	 mov sp,r7
 4686              	.LCFI437:
 4687              	 .cfi_def_cfa_register 13
 4688              	 
 4689 000e 5DF8047B 	 ldr r7,[sp],#4
 4690              	.LCFI438:
 4691              	 .cfi_restore 7
 4692              	 .cfi_def_cfa_offset 0
 4693 0012 7047     	 bx lr
 4694              	.L312:
 4695              	 .align 2
 4696              	.L311:
 4697 0014 00420050 	 .word 1342194176
 4698              	 .cfi_endproc
 4699              	.LFE236:
 4701              	 .section .text.XMC_SCU_POWER_DisableUsb,"ax",%progbits
 4702              	 .align 2
 4703              	 .global XMC_SCU_POWER_DisableUsb
 4704              	 .thumb
 4705              	 .thumb_func
 4707              	XMC_SCU_POWER_DisableUsb:
 4708              	.LFB237:
1161:../Libraries/XMCLib/src/xmc4_scu.c **** 
1162:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to power down USB Phy and comparator */
1163:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_POWER_DisableUsb(void)
1164:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4709              	 .loc 3 1164 0
 4710              	 .cfi_startproc
 4711              	 
 4712              	 
 4713              	 
 4714 0000 80B4     	 push {r7}
 4715              	.LCFI439:
 4716              	 .cfi_def_cfa_offset 4
 4717              	 .cfi_offset 7,-4
 4718 0002 00AF     	 add r7,sp,#0
 4719              	.LCFI440:
 4720              	 .cfi_def_cfa_register 7
1165:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(USB_OTG_SUPPORTED)
1166:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 4721              	 .loc 3 1166 0
 4722 0004 034B     	 ldr r3,.L314
 4723 0006 4FF44032 	 mov r2,#196608
 4724 000a 9A60     	 str r2,[r3,#8]
1167:../Libraries/XMCLib/src/xmc4_scu.c **** #else
1168:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
1169:../Libraries/XMCLib/src/xmc4_scu.c **** #endif    
1170:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4725              	 .loc 3 1170 0
 4726 000c BD46     	 mov sp,r7
 4727              	.LCFI441:
 4728              	 .cfi_def_cfa_register 13
 4729              	 
 4730 000e 5DF8047B 	 ldr r7,[sp],#4
 4731              	.LCFI442:
 4732              	 .cfi_restore 7
 4733              	 .cfi_def_cfa_offset 0
 4734 0012 7047     	 bx lr
 4735              	.L315:
 4736              	 .align 2
 4737              	.L314:
 4738 0014 00420050 	 .word 1342194176
 4739              	 .cfi_endproc
 4740              	.LFE237:
 4742              	 .section .text.XMC_SCU_CLOCK_IsUsbPllLocked,"ax",%progbits
 4743              	 .align 2
 4744              	 .global XMC_SCU_CLOCK_IsUsbPllLocked
 4745              	 .thumb
 4746              	 .thumb_func
 4748              	XMC_SCU_CLOCK_IsUsbPllLocked:
 4749              	.LFB238:
1171:../Libraries/XMCLib/src/xmc4_scu.c **** 
1172:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to check USB PLL is locked or not */
1173:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
1174:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4750              	 .loc 3 1174 0
 4751              	 .cfi_startproc
 4752              	 
 4753              	 
 4754              	 
 4755 0000 80B4     	 push {r7}
 4756              	.LCFI443:
 4757              	 .cfi_def_cfa_offset 4
 4758              	 .cfi_offset 7,-4
 4759 0002 00AF     	 add r7,sp,#0
 4760              	.LCFI444:
 4761              	 .cfi_def_cfa_register 7
1175:../Libraries/XMCLib/src/xmc4_scu.c ****   return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 4762              	 .loc 3 1175 0
 4763 0004 064B     	 ldr r3,.L318
 4764 0006 1B69     	 ldr r3,[r3,#16]
 4765 0008 03F00403 	 and r3,r3,#4
 4766 000c 002B     	 cmp r3,#0
 4767 000e 14BF     	 ite ne
 4768 0010 0123     	 movne r3,#1
 4769 0012 0023     	 moveq r3,#0
 4770 0014 DBB2     	 uxtb r3,r3
1176:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4771              	 .loc 3 1176 0
 4772 0016 1846     	 mov r0,r3
 4773 0018 BD46     	 mov sp,r7
 4774              	.LCFI445:
 4775              	 .cfi_def_cfa_register 13
 4776              	 
 4777 001a 5DF8047B 	 ldr r7,[sp],#4
 4778              	.LCFI446:
 4779              	 .cfi_restore 7
 4780              	 .cfi_def_cfa_offset 0
 4781 001e 7047     	 bx lr
 4782              	.L319:
 4783              	 .align 2
 4784              	.L318:
 4785 0020 10470050 	 .word 1342195472
 4786              	 .cfi_endproc
 4787              	.LFE238:
 4789              	 .section .text.XMC_SCU_HIB_EnableHibernateDomain,"ax",%progbits
 4790              	 .align 2
 4791              	 .global XMC_SCU_HIB_EnableHibernateDomain
 4792              	 .thumb
 4793              	 .thumb_func
 4795              	XMC_SCU_HIB_EnableHibernateDomain:
 4796              	.LFB239:
1177:../Libraries/XMCLib/src/xmc4_scu.c **** 
1178:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to power up the hibernation domain */
1179:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_EnableHibernateDomain(void)
1180:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4797              	 .loc 3 1180 0
 4798              	 .cfi_startproc
 4799              	 
 4800              	 
 4801              	 
 4802 0000 80B4     	 push {r7}
 4803              	.LCFI447:
 4804              	 .cfi_def_cfa_offset 4
 4805              	 .cfi_offset 7,-4
 4806 0002 00AF     	 add r7,sp,#0
 4807              	.LCFI448:
 4808              	 .cfi_def_cfa_register 7
1181:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Power up HIB domain if and only if it is currently powered down */
1182:../Libraries/XMCLib/src/xmc4_scu.c ****   if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 4809              	 .loc 3 1182 0
 4810 0004 124B     	 ldr r3,.L325
 4811 0006 1B68     	 ldr r3,[r3]
 4812 0008 03F00103 	 and r3,r3,#1
 4813 000c 002B     	 cmp r3,#0
 4814 000e 09D1     	 bne .L321
1183:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1184:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 4815              	 .loc 3 1184 0
 4816 0010 0F4B     	 ldr r3,.L325
 4817 0012 0122     	 movs r2,#1
 4818 0014 5A60     	 str r2,[r3,#4]
1185:../Libraries/XMCLib/src/xmc4_scu.c ****     
1186:../Libraries/XMCLib/src/xmc4_scu.c ****     while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 4819              	 .loc 3 1186 0
 4820 0016 00BF     	 nop
 4821              	.L322:
 4822              	 .loc 3 1186 0 is_stmt 0 discriminator 1
 4823 0018 0D4B     	 ldr r3,.L325
 4824 001a 1B68     	 ldr r3,[r3]
 4825 001c 03F00103 	 and r3,r3,#1
 4826 0020 002B     	 cmp r3,#0
 4827 0022 F9D0     	 beq .L322
 4828              	.L321:
1187:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1188:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait until HIB domain is enabled */
1189:../Libraries/XMCLib/src/xmc4_scu.c ****     }    
1190:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1191:../Libraries/XMCLib/src/xmc4_scu.c ****   
1192:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Remove the reset only if HIB domain were in a state of reset */
1193:../Libraries/XMCLib/src/xmc4_scu.c ****   if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 4829              	 .loc 3 1193 0 is_stmt 1
 4830 0024 0B4B     	 ldr r3,.L325+4
 4831 0026 1B68     	 ldr r3,[r3]
 4832 0028 03F40073 	 and r3,r3,#512
 4833 002c 002B     	 cmp r3,#0
 4834 002e 0AD0     	 beq .L320
1194:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1195:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 4835              	 .loc 3 1195 0
 4836 0030 084B     	 ldr r3,.L325+4
 4837 0032 4FF40072 	 mov r2,#512
 4838 0036 9A60     	 str r2,[r3,#8]
1196:../Libraries/XMCLib/src/xmc4_scu.c ****     while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 4839              	 .loc 3 1196 0
 4840 0038 00BF     	 nop
 4841              	.L324:
 4842              	 .loc 3 1196 0 is_stmt 0 discriminator 1
 4843 003a 064B     	 ldr r3,.L325+4
 4844 003c 1B68     	 ldr r3,[r3]
 4845 003e 03F40073 	 and r3,r3,#512
 4846 0042 002B     	 cmp r3,#0
 4847 0044 F9D1     	 bne .L324
 4848              	.L320:
1197:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1198:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait until HIB domain is enabled */
1199:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1200:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1201:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4849              	 .loc 3 1201 0 is_stmt 1
 4850 0046 BD46     	 mov sp,r7
 4851              	.LCFI449:
 4852              	 .cfi_def_cfa_register 13
 4853              	 
 4854 0048 5DF8047B 	 ldr r7,[sp],#4
 4855              	.LCFI450:
 4856              	 .cfi_restore 7
 4857              	 .cfi_def_cfa_offset 0
 4858 004c 7047     	 bx lr
 4859              	.L326:
 4860 004e 00BF     	 .align 2
 4861              	.L325:
 4862 0050 00420050 	 .word 1342194176
 4863 0054 00440050 	 .word 1342194688
 4864              	 .cfi_endproc
 4865              	.LFE239:
 4867              	 .section .text.XMC_SCU_HIB_DisableHibernateDomain,"ax",%progbits
 4868              	 .align 2
 4869              	 .global XMC_SCU_HIB_DisableHibernateDomain
 4870              	 .thumb
 4871              	 .thumb_func
 4873              	XMC_SCU_HIB_DisableHibernateDomain:
 4874              	.LFB240:
1202:../Libraries/XMCLib/src/xmc4_scu.c **** 
1203:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to power down the hibernation domain */
1204:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_DisableHibernateDomain(void)
1205:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4875              	 .loc 3 1205 0
 4876              	 .cfi_startproc
 4877              	 
 4878              	 
 4879              	 
 4880 0000 80B4     	 push {r7}
 4881              	.LCFI451:
 4882              	 .cfi_def_cfa_offset 4
 4883              	 .cfi_offset 7,-4
 4884 0002 00AF     	 add r7,sp,#0
 4885              	.LCFI452:
 4886              	 .cfi_def_cfa_register 7
1206:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Disable hibernate domain */   
1207:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 4887              	 .loc 3 1207 0
 4888 0004 054B     	 ldr r3,.L328
 4889 0006 0122     	 movs r2,#1
 4890 0008 9A60     	 str r2,[r3,#8]
1208:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Reset of hibernate domain reset */  
1209:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 4891              	 .loc 3 1209 0
 4892 000a 054B     	 ldr r3,.L328+4
 4893 000c 4FF40072 	 mov r2,#512
 4894 0010 5A60     	 str r2,[r3,#4]
1210:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4895              	 .loc 3 1210 0
 4896 0012 BD46     	 mov sp,r7
 4897              	.LCFI453:
 4898              	 .cfi_def_cfa_register 13
 4899              	 
 4900 0014 5DF8047B 	 ldr r7,[sp],#4
 4901              	.LCFI454:
 4902              	 .cfi_restore 7
 4903              	 .cfi_def_cfa_offset 0
 4904 0018 7047     	 bx lr
 4905              	.L329:
 4906 001a 00BF     	 .align 2
 4907              	.L328:
 4908 001c 00420050 	 .word 1342194176
 4909 0020 00440050 	 .word 1342194688
 4910              	 .cfi_endproc
 4911              	.LFE240:
 4913              	 .section .text.XMC_SCU_HIB_IsHibernateDomainEnabled,"ax",%progbits
 4914              	 .align 2
 4915              	 .global XMC_SCU_HIB_IsHibernateDomainEnabled
 4916              	 .thumb
 4917              	 .thumb_func
 4919              	XMC_SCU_HIB_IsHibernateDomainEnabled:
 4920              	.LFB241:
1211:../Libraries/XMCLib/src/xmc4_scu.c **** 
1212:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to check the hibernation domain is enabled or not */
1213:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
1214:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4921              	 .loc 3 1214 0
 4922              	 .cfi_startproc
 4923              	 
 4924              	 
 4925              	 
 4926 0000 80B4     	 push {r7}
 4927              	.LCFI455:
 4928              	 .cfi_def_cfa_offset 4
 4929              	 .cfi_offset 7,-4
 4930 0002 00AF     	 add r7,sp,#0
 4931              	.LCFI456:
 4932              	 .cfi_def_cfa_register 7
1215:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 4933              	 .loc 3 1215 0
 4934 0004 0B4B     	 ldr r3,.L334
 4935 0006 1B68     	 ldr r3,[r3]
 4936 0008 03F00103 	 and r3,r3,#1
 4937 000c 002B     	 cmp r3,#0
 4938 000e 07D0     	 beq .L331
1216:../Libraries/XMCLib/src/xmc4_scu.c ****           !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 4939              	 .loc 3 1216 0 discriminator 1
 4940 0010 094B     	 ldr r3,.L334+4
 4941 0012 1B68     	 ldr r3,[r3]
 4942 0014 03F40073 	 and r3,r3,#512
1215:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 4943              	 .loc 3 1215 0 discriminator 1
 4944 0018 002B     	 cmp r3,#0
 4945 001a 01D1     	 bne .L331
1215:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 4946              	 .loc 3 1215 0 is_stmt 0 discriminator 3
 4947 001c 0123     	 movs r3,#1
 4948 001e 00E0     	 b .L332
 4949              	.L331:
1215:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 4950              	 .loc 3 1215 0 discriminator 4
 4951 0020 0023     	 movs r3,#0
 4952              	.L332:
1215:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 4953              	 .loc 3 1215 0 discriminator 6
 4954 0022 03F00103 	 and r3,r3,#1
 4955 0026 DBB2     	 uxtb r3,r3
1217:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4956              	 .loc 3 1217 0 is_stmt 1 discriminator 6
 4957 0028 1846     	 mov r0,r3
 4958 002a BD46     	 mov sp,r7
 4959              	.LCFI457:
 4960              	 .cfi_def_cfa_register 13
 4961              	 
 4962 002c 5DF8047B 	 ldr r7,[sp],#4
 4963              	.LCFI458:
 4964              	 .cfi_restore 7
 4965              	 .cfi_def_cfa_offset 0
 4966 0030 7047     	 bx lr
 4967              	.L335:
 4968 0032 00BF     	 .align 2
 4969              	.L334:
 4970 0034 00420050 	 .word 1342194176
 4971 0038 00440050 	 .word 1342194688
 4972              	 .cfi_endproc
 4973              	.LFE241:
 4975              	 .section .text.XMC_SCU_HIB_EnableInternalSlowClock,"ax",%progbits
 4976              	 .align 2
 4977              	 .global XMC_SCU_HIB_EnableInternalSlowClock
 4978              	 .thumb
 4979              	 .thumb_func
 4981              	XMC_SCU_HIB_EnableInternalSlowClock:
 4982              	.LFB242:
1218:../Libraries/XMCLib/src/xmc4_scu.c **** 
1219:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
1220:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_EnableInternalSlowClock(void)
1221:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4983              	 .loc 3 1221 0
 4984              	 .cfi_startproc
 4985              	 
 4986              	 
 4987              	 
 4988 0000 80B4     	 push {r7}
 4989              	.LCFI459:
 4990              	 .cfi_def_cfa_offset 4
 4991              	 .cfi_offset 7,-4
 4992 0002 00AF     	 add r7,sp,#0
 4993              	.LCFI460:
 4994              	 .cfi_def_cfa_register 7
1222:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 4995              	 .loc 3 1222 0
 4996 0004 00BF     	 nop
 4997              	.L337:
 4998              	 .loc 3 1222 0 is_stmt 0 discriminator 1
 4999 0006 084B     	 ldr r3,.L338
 5000 0008 D3F8C430 	 ldr r3,[r3,#196]
 5001 000c 03F02003 	 and r3,r3,#32
 5002 0010 002B     	 cmp r3,#0
 5003 0012 F8D1     	 bne .L337
1223:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1224:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
1225:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1226:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 5004              	 .loc 3 1226 0 is_stmt 1
 5005 0014 054A     	 ldr r2,.L338+4
 5006 0016 054B     	 ldr r3,.L338+4
 5007 0018 5B69     	 ldr r3,[r3,#20]
 5008 001a 23F00103 	 bic r3,r3,#1
 5009 001e 5361     	 str r3,[r2,#20]
1227:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5010              	 .loc 3 1227 0
 5011 0020 BD46     	 mov sp,r7
 5012              	.LCFI461:
 5013              	 .cfi_def_cfa_register 13
 5014              	 
 5015 0022 5DF8047B 	 ldr r7,[sp],#4
 5016              	.LCFI462:
 5017              	 .cfi_restore 7
 5018              	 .cfi_def_cfa_offset 0
 5019 0026 7047     	 bx lr
 5020              	.L339:
 5021              	 .align 2
 5022              	.L338:
 5023 0028 00400050 	 .word 1342193664
 5024 002c 00430050 	 .word 1342194432
 5025              	 .cfi_endproc
 5026              	.LFE242:
 5028              	 .section .text.XMC_SCU_HIB_DisableInternalSlowClock,"ax",%progbits
 5029              	 .align 2
 5030              	 .global XMC_SCU_HIB_DisableInternalSlowClock
 5031              	 .thumb
 5032              	 .thumb_func
 5034              	XMC_SCU_HIB_DisableInternalSlowClock:
 5035              	.LFB243:
1228:../Libraries/XMCLib/src/xmc4_scu.c **** 
1229:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
1230:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_DisableInternalSlowClock(void)
1231:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5036              	 .loc 3 1231 0
 5037              	 .cfi_startproc
 5038              	 
 5039              	 
 5040              	 
 5041 0000 80B4     	 push {r7}
 5042              	.LCFI463:
 5043              	 .cfi_def_cfa_offset 4
 5044              	 .cfi_offset 7,-4
 5045 0002 00AF     	 add r7,sp,#0
 5046              	.LCFI464:
 5047              	 .cfi_def_cfa_register 7
1232:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 5048              	 .loc 3 1232 0
 5049 0004 00BF     	 nop
 5050              	.L341:
 5051              	 .loc 3 1232 0 is_stmt 0 discriminator 1
 5052 0006 084B     	 ldr r3,.L342
 5053 0008 D3F8C430 	 ldr r3,[r3,#196]
 5054 000c 03F02003 	 and r3,r3,#32
 5055 0010 002B     	 cmp r3,#0
 5056 0012 F8D1     	 bne .L341
1233:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1234:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
1235:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1236:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 5057              	 .loc 3 1236 0 is_stmt 1
 5058 0014 054A     	 ldr r2,.L342+4
 5059 0016 054B     	 ldr r3,.L342+4
 5060 0018 5B69     	 ldr r3,[r3,#20]
 5061 001a 43F00103 	 orr r3,r3,#1
 5062 001e 5361     	 str r3,[r2,#20]
1237:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5063              	 .loc 3 1237 0
 5064 0020 BD46     	 mov sp,r7
 5065              	.LCFI465:
 5066              	 .cfi_def_cfa_register 13
 5067              	 
 5068 0022 5DF8047B 	 ldr r7,[sp],#4
 5069              	.LCFI466:
 5070              	 .cfi_restore 7
 5071              	 .cfi_def_cfa_offset 0
 5072 0026 7047     	 bx lr
 5073              	.L343:
 5074              	 .align 2
 5075              	.L342:
 5076 0028 00400050 	 .word 1342193664
 5077 002c 00430050 	 .word 1342194432
 5078              	 .cfi_endproc
 5079              	.LFE243:
 5081              	 .section .text.XMC_SCU_HIB_ClearEventStatus,"ax",%progbits
 5082              	 .align 2
 5083              	 .global XMC_SCU_HIB_ClearEventStatus
 5084              	 .thumb
 5085              	 .thumb_func
 5087              	XMC_SCU_HIB_ClearEventStatus:
 5088              	.LFB244:
1238:../Libraries/XMCLib/src/xmc4_scu.c **** 
1239:../Libraries/XMCLib/src/xmc4_scu.c **** /** TODO
1240:../Libraries/XMCLib/src/xmc4_scu.c ****  *
1241:../Libraries/XMCLib/src/xmc4_scu.c ****  */
1242:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_ClearEventStatus(int32_t event)
1243:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5089              	 .loc 3 1243 0
 5090              	 .cfi_startproc
 5091              	 
 5092              	 
 5093              	 
 5094 0000 80B4     	 push {r7}
 5095              	.LCFI467:
 5096              	 .cfi_def_cfa_offset 4
 5097              	 .cfi_offset 7,-4
 5098 0002 83B0     	 sub sp,sp,#12
 5099              	.LCFI468:
 5100              	 .cfi_def_cfa_offset 16
 5101 0004 00AF     	 add r7,sp,#0
 5102              	.LCFI469:
 5103              	 .cfi_def_cfa_register 7
 5104 0006 7860     	 str r0,[r7,#4]
1244:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 5105              	 .loc 3 1244 0
 5106 0008 00BF     	 nop
 5107              	.L345:
 5108              	 .loc 3 1244 0 is_stmt 0 discriminator 1
 5109 000a 074B     	 ldr r3,.L346
 5110 000c D3F8C430 	 ldr r3,[r3,#196]
 5111 0010 03F00203 	 and r3,r3,#2
 5112 0014 002B     	 cmp r3,#0
 5113 0016 F8D1     	 bne .L345
1245:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1246:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
1247:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1248:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCLR = event;
 5114              	 .loc 3 1248 0 is_stmt 1
 5115 0018 044A     	 ldr r2,.L346+4
 5116 001a 7B68     	 ldr r3,[r7,#4]
 5117 001c 5360     	 str r3,[r2,#4]
1249:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5118              	 .loc 3 1249 0
 5119 001e 0C37     	 adds r7,r7,#12
 5120              	.LCFI470:
 5121              	 .cfi_def_cfa_offset 4
 5122 0020 BD46     	 mov sp,r7
 5123              	.LCFI471:
 5124              	 .cfi_def_cfa_register 13
 5125              	 
 5126 0022 5DF8047B 	 ldr r7,[sp],#4
 5127              	.LCFI472:
 5128              	 .cfi_restore 7
 5129              	 .cfi_def_cfa_offset 0
 5130 0026 7047     	 bx lr
 5131              	.L347:
 5132              	 .align 2
 5133              	.L346:
 5134 0028 00400050 	 .word 1342193664
 5135 002c 00430050 	 .word 1342194432
 5136              	 .cfi_endproc
 5137              	.LFE244:
 5139              	 .section .text.XMC_SCU_HIB_TriggerEvent,"ax",%progbits
 5140              	 .align 2
 5141              	 .global XMC_SCU_HIB_TriggerEvent
 5142              	 .thumb
 5143              	 .thumb_func
 5145              	XMC_SCU_HIB_TriggerEvent:
 5146              	.LFB245:
1250:../Libraries/XMCLib/src/xmc4_scu.c **** 
1251:../Libraries/XMCLib/src/xmc4_scu.c **** /** TODO
1252:../Libraries/XMCLib/src/xmc4_scu.c ****  *
1253:../Libraries/XMCLib/src/xmc4_scu.c ****  */
1254:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_TriggerEvent(int32_t event)
1255:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5147              	 .loc 3 1255 0
 5148              	 .cfi_startproc
 5149              	 
 5150              	 
 5151              	 
 5152 0000 80B4     	 push {r7}
 5153              	.LCFI473:
 5154              	 .cfi_def_cfa_offset 4
 5155              	 .cfi_offset 7,-4
 5156 0002 83B0     	 sub sp,sp,#12
 5157              	.LCFI474:
 5158              	 .cfi_def_cfa_offset 16
 5159 0004 00AF     	 add r7,sp,#0
 5160              	.LCFI475:
 5161              	 .cfi_def_cfa_register 7
 5162 0006 7860     	 str r0,[r7,#4]
1256:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 5163              	 .loc 3 1256 0
 5164 0008 00BF     	 nop
 5165              	.L349:
 5166              	 .loc 3 1256 0 is_stmt 0 discriminator 1
 5167 000a 074B     	 ldr r3,.L350
 5168 000c D3F8C430 	 ldr r3,[r3,#196]
 5169 0010 03F00403 	 and r3,r3,#4
 5170 0014 002B     	 cmp r3,#0
 5171 0016 F8D1     	 bne .L349
1257:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1258:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDSET register in hibernate domain is ready to accept a write */    
1259:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1260:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDSET = event;
 5172              	 .loc 3 1260 0 is_stmt 1
 5173 0018 044A     	 ldr r2,.L350+4
 5174 001a 7B68     	 ldr r3,[r7,#4]
 5175 001c 9360     	 str r3,[r2,#8]
1261:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5176              	 .loc 3 1261 0
 5177 001e 0C37     	 adds r7,r7,#12
 5178              	.LCFI476:
 5179              	 .cfi_def_cfa_offset 4
 5180 0020 BD46     	 mov sp,r7
 5181              	.LCFI477:
 5182              	 .cfi_def_cfa_register 13
 5183              	 
 5184 0022 5DF8047B 	 ldr r7,[sp],#4
 5185              	.LCFI478:
 5186              	 .cfi_restore 7
 5187              	 .cfi_def_cfa_offset 0
 5188 0026 7047     	 bx lr
 5189              	.L351:
 5190              	 .align 2
 5191              	.L350:
 5192 0028 00400050 	 .word 1342193664
 5193 002c 00430050 	 .word 1342194432
 5194              	 .cfi_endproc
 5195              	.LFE245:
 5197              	 .section .text.XMC_SCU_HIB_EnableEvent,"ax",%progbits
 5198              	 .align 2
 5199              	 .global XMC_SCU_HIB_EnableEvent
 5200              	 .thumb
 5201              	 .thumb_func
 5203              	XMC_SCU_HIB_EnableEvent:
 5204              	.LFB246:
1262:../Libraries/XMCLib/src/xmc4_scu.c **** 
1263:../Libraries/XMCLib/src/xmc4_scu.c **** /** TODO
1264:../Libraries/XMCLib/src/xmc4_scu.c ****  *
1265:../Libraries/XMCLib/src/xmc4_scu.c ****  */
1266:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_EnableEvent(int32_t event)
1267:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5205              	 .loc 3 1267 0
 5206              	 .cfi_startproc
 5207              	 
 5208              	 
 5209              	 
 5210 0000 80B4     	 push {r7}
 5211              	.LCFI479:
 5212              	 .cfi_def_cfa_offset 4
 5213              	 .cfi_offset 7,-4
 5214 0002 83B0     	 sub sp,sp,#12
 5215              	.LCFI480:
 5216              	 .cfi_def_cfa_offset 16
 5217 0004 00AF     	 add r7,sp,#0
 5218              	.LCFI481:
 5219              	 .cfi_def_cfa_register 7
 5220 0006 7860     	 str r0,[r7,#4]
1268:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 5221              	 .loc 3 1268 0
 5222 0008 00BF     	 nop
 5223              	.L353:
 5224              	 .loc 3 1268 0 is_stmt 0 discriminator 1
 5225 000a 094B     	 ldr r3,.L354
 5226 000c D3F8C430 	 ldr r3,[r3,#196]
 5227 0010 03F00803 	 and r3,r3,#8
 5228 0014 002B     	 cmp r3,#0
 5229 0016 F8D1     	 bne .L353
1269:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1270:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1271:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1272:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR |= event;
 5230              	 .loc 3 1272 0 is_stmt 1
 5231 0018 0649     	 ldr r1,.L354+4
 5232 001a 064B     	 ldr r3,.L354+4
 5233 001c DA68     	 ldr r2,[r3,#12]
 5234 001e 7B68     	 ldr r3,[r7,#4]
 5235 0020 1343     	 orrs r3,r3,r2
 5236 0022 CB60     	 str r3,[r1,#12]
1273:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5237              	 .loc 3 1273 0
 5238 0024 0C37     	 adds r7,r7,#12
 5239              	.LCFI482:
 5240              	 .cfi_def_cfa_offset 4
 5241 0026 BD46     	 mov sp,r7
 5242              	.LCFI483:
 5243              	 .cfi_def_cfa_register 13
 5244              	 
 5245 0028 5DF8047B 	 ldr r7,[sp],#4
 5246              	.LCFI484:
 5247              	 .cfi_restore 7
 5248              	 .cfi_def_cfa_offset 0
 5249 002c 7047     	 bx lr
 5250              	.L355:
 5251 002e 00BF     	 .align 2
 5252              	.L354:
 5253 0030 00400050 	 .word 1342193664
 5254 0034 00430050 	 .word 1342194432
 5255              	 .cfi_endproc
 5256              	.LFE246:
 5258              	 .section .text.XMC_SCU_HIB_DisableEvent,"ax",%progbits
 5259              	 .align 2
 5260              	 .global XMC_SCU_HIB_DisableEvent
 5261              	 .thumb
 5262              	 .thumb_func
 5264              	XMC_SCU_HIB_DisableEvent:
 5265              	.LFB247:
1274:../Libraries/XMCLib/src/xmc4_scu.c **** 
1275:../Libraries/XMCLib/src/xmc4_scu.c **** /** TODO
1276:../Libraries/XMCLib/src/xmc4_scu.c ****  *
1277:../Libraries/XMCLib/src/xmc4_scu.c ****  */
1278:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_DisableEvent(int32_t event)
1279:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5266              	 .loc 3 1279 0
 5267              	 .cfi_startproc
 5268              	 
 5269              	 
 5270              	 
 5271 0000 80B4     	 push {r7}
 5272              	.LCFI485:
 5273              	 .cfi_def_cfa_offset 4
 5274              	 .cfi_offset 7,-4
 5275 0002 83B0     	 sub sp,sp,#12
 5276              	.LCFI486:
 5277              	 .cfi_def_cfa_offset 16
 5278 0004 00AF     	 add r7,sp,#0
 5279              	.LCFI487:
 5280              	 .cfi_def_cfa_register 7
 5281 0006 7860     	 str r0,[r7,#4]
1280:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 5282              	 .loc 3 1280 0
 5283 0008 00BF     	 nop
 5284              	.L357:
 5285              	 .loc 3 1280 0 is_stmt 0 discriminator 1
 5286 000a 094B     	 ldr r3,.L358
 5287 000c D3F8C430 	 ldr r3,[r3,#196]
 5288 0010 03F00803 	 and r3,r3,#8
 5289 0014 002B     	 cmp r3,#0
 5290 0016 F8D1     	 bne .L357
1281:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1282:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1283:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1284:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR &= ~event;
 5291              	 .loc 3 1284 0 is_stmt 1
 5292 0018 0649     	 ldr r1,.L358+4
 5293 001a 064B     	 ldr r3,.L358+4
 5294 001c DB68     	 ldr r3,[r3,#12]
 5295 001e 7A68     	 ldr r2,[r7,#4]
 5296 0020 D243     	 mvns r2,r2
 5297 0022 1340     	 ands r3,r3,r2
 5298 0024 CB60     	 str r3,[r1,#12]
1285:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5299              	 .loc 3 1285 0
 5300 0026 0C37     	 adds r7,r7,#12
 5301              	.LCFI488:
 5302              	 .cfi_def_cfa_offset 4
 5303 0028 BD46     	 mov sp,r7
 5304              	.LCFI489:
 5305              	 .cfi_def_cfa_register 13
 5306              	 
 5307 002a 5DF8047B 	 ldr r7,[sp],#4
 5308              	.LCFI490:
 5309              	 .cfi_restore 7
 5310              	 .cfi_def_cfa_offset 0
 5311 002e 7047     	 bx lr
 5312              	.L359:
 5313              	 .align 2
 5314              	.L358:
 5315 0030 00400050 	 .word 1342193664
 5316 0034 00430050 	 .word 1342194432
 5317              	 .cfi_endproc
 5318              	.LFE247:
 5320              	 .section .text.XMC_SCU_HIB_EnterHibernateState,"ax",%progbits
 5321              	 .align 2
 5322              	 .global XMC_SCU_HIB_EnterHibernateState
 5323              	 .thumb
 5324              	 .thumb_func
 5326              	XMC_SCU_HIB_EnterHibernateState:
 5327              	.LFB248:
1286:../Libraries/XMCLib/src/xmc4_scu.c **** 
1287:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_EnterHibernateState(void) 
1288:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5328              	 .loc 3 1288 0
 5329              	 .cfi_startproc
 5330              	 
 5331              	 
 5332              	 
 5333 0000 80B4     	 push {r7}
 5334              	.LCFI491:
 5335              	 .cfi_def_cfa_offset 4
 5336              	 .cfi_offset 7,-4
 5337 0002 00AF     	 add r7,sp,#0
 5338              	.LCFI492:
 5339              	 .cfi_def_cfa_register 7
1289:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 5340              	 .loc 3 1289 0
 5341 0004 00BF     	 nop
 5342              	.L361:
 5343              	 .loc 3 1289 0 is_stmt 0 discriminator 1
 5344 0006 084B     	 ldr r3,.L362
 5345 0008 D3F8C430 	 ldr r3,[r3,#196]
 5346 000c 03F00803 	 and r3,r3,#8
 5347 0010 002B     	 cmp r3,#0
 5348 0012 F8D1     	 bne .L361
1290:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1291:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1292:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1293:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 5349              	 .loc 3 1293 0 is_stmt 1
 5350 0014 054A     	 ldr r2,.L362+4
 5351 0016 054B     	 ldr r3,.L362+4
 5352 0018 DB68     	 ldr r3,[r3,#12]
 5353 001a 43F01003 	 orr r3,r3,#16
 5354 001e D360     	 str r3,[r2,#12]
1294:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5355              	 .loc 3 1294 0
 5356 0020 BD46     	 mov sp,r7
 5357              	.LCFI493:
 5358              	 .cfi_def_cfa_register 13
 5359              	 
 5360 0022 5DF8047B 	 ldr r7,[sp],#4
 5361              	.LCFI494:
 5362              	 .cfi_restore 7
 5363              	 .cfi_def_cfa_offset 0
 5364 0026 7047     	 bx lr
 5365              	.L363:
 5366              	 .align 2
 5367              	.L362:
 5368 0028 00400050 	 .word 1342193664
 5369 002c 00430050 	 .word 1342194432
 5370              	 .cfi_endproc
 5371              	.LFE248:
 5373              	 .section .text.XMC_SCU_HIB_SetWakeupTriggerInput,"ax",%progbits
 5374              	 .align 2
 5375              	 .global XMC_SCU_HIB_SetWakeupTriggerInput
 5376              	 .thumb
 5377              	 .thumb_func
 5379              	XMC_SCU_HIB_SetWakeupTriggerInput:
 5380              	.LFB249:
1295:../Libraries/XMCLib/src/xmc4_scu.c **** 
1296:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
1297:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5381              	 .loc 3 1297 0
 5382              	 .cfi_startproc
 5383              	 
 5384              	 
 5385              	 
 5386 0000 80B4     	 push {r7}
 5387              	.LCFI495:
 5388              	 .cfi_def_cfa_offset 4
 5389              	 .cfi_offset 7,-4
 5390 0002 83B0     	 sub sp,sp,#12
 5391              	.LCFI496:
 5392              	 .cfi_def_cfa_offset 16
 5393 0004 00AF     	 add r7,sp,#0
 5394              	.LCFI497:
 5395              	 .cfi_def_cfa_register 7
 5396 0006 0346     	 mov r3,r0
 5397 0008 FB71     	 strb r3,[r7,#7]
1298:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 5398              	 .loc 3 1298 0
 5399 000a 00BF     	 nop
 5400              	.L365:
 5401              	 .loc 3 1298 0 is_stmt 0 discriminator 1
 5402 000c 0D4B     	 ldr r3,.L368
 5403 000e D3F8C430 	 ldr r3,[r3,#196]
 5404 0012 03F00803 	 and r3,r3,#8
 5405 0016 002B     	 cmp r3,#0
 5406 0018 F8D1     	 bne .L365
1299:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1300:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1301:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1302:../Libraries/XMCLib/src/xmc4_scu.c **** 
1303:../Libraries/XMCLib/src/xmc4_scu.c ****   if (pin == XMC_SCU_HIB_IO_0)
 5407              	 .loc 3 1303 0 is_stmt 1
 5408 001a FB79     	 ldrb r3,[r7,#7]
 5409 001c 002B     	 cmp r3,#0
 5410 001e 06D1     	 bne .L366
1304:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1305:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 5411              	 .loc 3 1305 0
 5412 0020 094A     	 ldr r2,.L368+4
 5413 0022 094B     	 ldr r3,.L368+4
 5414 0024 DB68     	 ldr r3,[r3,#12]
 5415 0026 43F48073 	 orr r3,r3,#256
 5416 002a D360     	 str r3,[r2,#12]
 5417 002c 05E0     	 b .L364
 5418              	.L366:
1306:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1307:../Libraries/XMCLib/src/xmc4_scu.c ****   else
1308:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1309:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 5419              	 .loc 3 1309 0
 5420 002e 064A     	 ldr r2,.L368+4
 5421 0030 054B     	 ldr r3,.L368+4
 5422 0032 DB68     	 ldr r3,[r3,#12]
 5423 0034 23F48073 	 bic r3,r3,#256
 5424 0038 D360     	 str r3,[r2,#12]
 5425              	.L364:
1310:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1311:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5426              	 .loc 3 1311 0
 5427 003a 0C37     	 adds r7,r7,#12
 5428              	.LCFI498:
 5429              	 .cfi_def_cfa_offset 4
 5430 003c BD46     	 mov sp,r7
 5431              	.LCFI499:
 5432              	 .cfi_def_cfa_register 13
 5433              	 
 5434 003e 5DF8047B 	 ldr r7,[sp],#4
 5435              	.LCFI500:
 5436              	 .cfi_restore 7
 5437              	 .cfi_def_cfa_offset 0
 5438 0042 7047     	 bx lr
 5439              	.L369:
 5440              	 .align 2
 5441              	.L368:
 5442 0044 00400050 	 .word 1342193664
 5443 0048 00430050 	 .word 1342194432
 5444              	 .cfi_endproc
 5445              	.LFE249:
 5447              	 .section .text.XMC_SCU_HIB_SetPinMode,"ax",%progbits
 5448              	 .align 2
 5449              	 .global XMC_SCU_HIB_SetPinMode
 5450              	 .thumb
 5451              	 .thumb_func
 5453              	XMC_SCU_HIB_SetPinMode:
 5454              	.LFB250:
1312:../Libraries/XMCLib/src/xmc4_scu.c **** 
1313:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
1314:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5455              	 .loc 3 1314 0
 5456              	 .cfi_startproc
 5457              	 
 5458              	 
 5459              	 
 5460 0000 80B4     	 push {r7}
 5461              	.LCFI501:
 5462              	 .cfi_def_cfa_offset 4
 5463              	 .cfi_offset 7,-4
 5464 0002 83B0     	 sub sp,sp,#12
 5465              	.LCFI502:
 5466              	 .cfi_def_cfa_offset 16
 5467 0004 00AF     	 add r7,sp,#0
 5468              	.LCFI503:
 5469              	 .cfi_def_cfa_register 7
 5470 0006 0346     	 mov r3,r0
 5471 0008 3960     	 str r1,[r7]
 5472 000a FB71     	 strb r3,[r7,#7]
1315:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 5473              	 .loc 3 1315 0
 5474 000c 00BF     	 nop
 5475              	.L371:
 5476              	 .loc 3 1315 0 is_stmt 0 discriminator 1
 5477 000e 0F4B     	 ldr r3,.L372
 5478 0010 D3F8C430 	 ldr r3,[r3,#196]
 5479 0014 03F00803 	 and r3,r3,#8
 5480 0018 002B     	 cmp r3,#0
 5481 001a F8D1     	 bne .L371
1316:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1317:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1318:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1319:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE
 5482              	 .loc 3 1319 0 is_stmt 1
 5483 001c 0C49     	 ldr r1,.L372+4
 5484 001e 0C4B     	 ldr r3,.L372+4
 5485 0020 DA68     	 ldr r2,[r3,#12]
 5486 0022 FB79     	 ldrb r3,[r7,#7]
 5487 0024 9B00     	 lsls r3,r3,#2
 5488 0026 1846     	 mov r0,r3
 5489 0028 4FF47023 	 mov r3,#983040
 5490 002c 8340     	 lsls r3,r3,r0
 5491 002e DB43     	 mvns r3,r3
 5492 0030 1A40     	 ands r2,r2,r3
1320:../Libraries/XMCLib/src/xmc4_scu.c ****                         (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 5493              	 .loc 3 1320 0
 5494 0032 FB79     	 ldrb r3,[r7,#7]
 5495 0034 9B00     	 lsls r3,r3,#2
1319:../Libraries/XMCLib/src/xmc4_scu.c ****                         (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 5496              	 .loc 3 1319 0
 5497 0036 1846     	 mov r0,r3
 5498              	 .loc 3 1320 0
 5499 0038 3B68     	 ldr r3,[r7]
 5500 003a 8340     	 lsls r3,r3,r0
1319:../Libraries/XMCLib/src/xmc4_scu.c ****                         (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 5501              	 .loc 3 1319 0
 5502 003c 1343     	 orrs r3,r3,r2
 5503 003e CB60     	 str r3,[r1,#12]
1321:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5504              	 .loc 3 1321 0
 5505 0040 0C37     	 adds r7,r7,#12
 5506              	.LCFI504:
 5507              	 .cfi_def_cfa_offset 4
 5508 0042 BD46     	 mov sp,r7
 5509              	.LCFI505:
 5510              	 .cfi_def_cfa_register 13
 5511              	 
 5512 0044 5DF8047B 	 ldr r7,[sp],#4
 5513              	.LCFI506:
 5514              	 .cfi_restore 7
 5515              	 .cfi_def_cfa_offset 0
 5516 0048 7047     	 bx lr
 5517              	.L373:
 5518 004a 00BF     	 .align 2
 5519              	.L372:
 5520 004c 00400050 	 .word 1342193664
 5521 0050 00430050 	 .word 1342194432
 5522              	 .cfi_endproc
 5523              	.LFE250:
 5525              	 .section .text.XMC_SCU_HIB_SetPinOutputLevel,"ax",%progbits
 5526              	 .align 2
 5527              	 .global XMC_SCU_HIB_SetPinOutputLevel
 5528              	 .thumb
 5529              	 .thumb_func
 5531              	XMC_SCU_HIB_SetPinOutputLevel:
 5532              	.LFB251:
1322:../Libraries/XMCLib/src/xmc4_scu.c **** 
1323:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
1324:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5533              	 .loc 3 1324 0
 5534              	 .cfi_startproc
 5535              	 
 5536              	 
 5537              	 
 5538 0000 80B4     	 push {r7}
 5539              	.LCFI507:
 5540              	 .cfi_def_cfa_offset 4
 5541              	 .cfi_offset 7,-4
 5542 0002 83B0     	 sub sp,sp,#12
 5543              	.LCFI508:
 5544              	 .cfi_def_cfa_offset 16
 5545 0004 00AF     	 add r7,sp,#0
 5546              	.LCFI509:
 5547              	 .cfi_def_cfa_register 7
 5548 0006 0346     	 mov r3,r0
 5549 0008 0A46     	 mov r2,r1
 5550 000a FB71     	 strb r3,[r7,#7]
 5551 000c 1346     	 mov r3,r2
 5552 000e BB80     	 strh r3,[r7,#4]
1325:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 5553              	 .loc 3 1325 0
 5554 0010 00BF     	 nop
 5555              	.L375:
 5556              	 .loc 3 1325 0 is_stmt 0 discriminator 1
 5557 0012 0E4B     	 ldr r3,.L376
 5558 0014 D3F8C430 	 ldr r3,[r3,#196]
 5559 0018 03F00803 	 and r3,r3,#8
 5560 001c 002B     	 cmp r3,#0
 5561 001e F8D1     	 bne .L375
1326:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1327:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1328:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1329:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 5562              	 .loc 3 1329 0 is_stmt 1
 5563 0020 0B48     	 ldr r0,.L376+4
 5564 0022 0B4B     	 ldr r3,.L376+4
 5565 0024 DA68     	 ldr r2,[r3,#12]
 5566 0026 FB79     	 ldrb r3,[r7,#7]
 5567 0028 4FF48051 	 mov r1,#4096
 5568 002c 01FA03F3 	 lsl r3,r1,r3
 5569 0030 DB43     	 mvns r3,r3
 5570 0032 1340     	 ands r3,r3,r2
1330:../Libraries/XMCLib/src/xmc4_scu.c ****                         (level << pin);
 5571              	 .loc 3 1330 0
 5572 0034 B988     	 ldrh r1,[r7,#4]
 5573 0036 FA79     	 ldrb r2,[r7,#7]
 5574 0038 01FA02F2 	 lsl r2,r1,r2
1329:../Libraries/XMCLib/src/xmc4_scu.c ****                         (level << pin);
 5575              	 .loc 3 1329 0
 5576 003c 1343     	 orrs r3,r3,r2
 5577 003e C360     	 str r3,[r0,#12]
1331:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5578              	 .loc 3 1331 0
 5579 0040 0C37     	 adds r7,r7,#12
 5580              	.LCFI510:
 5581              	 .cfi_def_cfa_offset 4
 5582 0042 BD46     	 mov sp,r7
 5583              	.LCFI511:
 5584              	 .cfi_def_cfa_register 13
 5585              	 
 5586 0044 5DF8047B 	 ldr r7,[sp],#4
 5587              	.LCFI512:
 5588              	 .cfi_restore 7
 5589              	 .cfi_def_cfa_offset 0
 5590 0048 7047     	 bx lr
 5591              	.L377:
 5592 004a 00BF     	 .align 2
 5593              	.L376:
 5594 004c 00400050 	 .word 1342193664
 5595 0050 00430050 	 .word 1342194432
 5596              	 .cfi_endproc
 5597              	.LFE251:
 5599              	 .section .text.XMC_SCU_HIB_SetInput0,"ax",%progbits
 5600              	 .align 2
 5601              	 .global XMC_SCU_HIB_SetInput0
 5602              	 .thumb
 5603              	 .thumb_func
 5605              	XMC_SCU_HIB_SetInput0:
 5606              	.LFB252:
1332:../Libraries/XMCLib/src/xmc4_scu.c **** 
1333:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
1334:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5607              	 .loc 3 1334 0
 5608              	 .cfi_startproc
 5609              	 
 5610              	 
 5611              	 
 5612 0000 80B4     	 push {r7}
 5613              	.LCFI513:
 5614              	 .cfi_def_cfa_offset 4
 5615              	 .cfi_offset 7,-4
 5616 0002 83B0     	 sub sp,sp,#12
 5617              	.LCFI514:
 5618              	 .cfi_def_cfa_offset 16
 5619 0004 00AF     	 add r7,sp,#0
 5620              	.LCFI515:
 5621              	 .cfi_def_cfa_register 7
 5622 0006 0346     	 mov r3,r0
 5623 0008 FB71     	 strb r3,[r7,#7]
1335:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 5624              	 .loc 3 1335 0
 5625 000a 00BF     	 nop
 5626              	.L379:
 5627              	 .loc 3 1335 0 is_stmt 0 discriminator 1
 5628 000c 0D4B     	 ldr r3,.L382
 5629 000e D3F8C430 	 ldr r3,[r3,#196]
 5630 0012 03F00803 	 and r3,r3,#8
 5631 0016 002B     	 cmp r3,#0
 5632 0018 F8D1     	 bne .L379
1336:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1337:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1338:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1339:../Libraries/XMCLib/src/xmc4_scu.c **** 
1340:../Libraries/XMCLib/src/xmc4_scu.c ****   if (pin == XMC_SCU_HIB_IO_0)
 5633              	 .loc 3 1340 0 is_stmt 1
 5634 001a FB79     	 ldrb r3,[r7,#7]
 5635 001c 002B     	 cmp r3,#0
 5636 001e 06D1     	 bne .L380
1341:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1342:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 5637              	 .loc 3 1342 0
 5638 0020 094A     	 ldr r2,.L382+4
 5639 0022 094B     	 ldr r3,.L382+4
 5640 0024 DB68     	 ldr r3,[r3,#12]
 5641 0026 43F48063 	 orr r3,r3,#1024
 5642 002a D360     	 str r3,[r2,#12]
 5643 002c 05E0     	 b .L378
 5644              	.L380:
1343:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1344:../Libraries/XMCLib/src/xmc4_scu.c ****   else
1345:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1346:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 5645              	 .loc 3 1346 0
 5646 002e 064A     	 ldr r2,.L382+4
 5647 0030 054B     	 ldr r3,.L382+4
 5648 0032 DB68     	 ldr r3,[r3,#12]
 5649 0034 23F48063 	 bic r3,r3,#1024
 5650 0038 D360     	 str r3,[r2,#12]
 5651              	.L378:
1347:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1348:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5652              	 .loc 3 1348 0
 5653 003a 0C37     	 adds r7,r7,#12
 5654              	.LCFI516:
 5655              	 .cfi_def_cfa_offset 4
 5656 003c BD46     	 mov sp,r7
 5657              	.LCFI517:
 5658              	 .cfi_def_cfa_register 13
 5659              	 
 5660 003e 5DF8047B 	 ldr r7,[sp],#4
 5661              	.LCFI518:
 5662              	 .cfi_restore 7
 5663              	 .cfi_def_cfa_offset 0
 5664 0042 7047     	 bx lr
 5665              	.L383:
 5666              	 .align 2
 5667              	.L382:
 5668 0044 00400050 	 .word 1342193664
 5669 0048 00430050 	 .word 1342194432
 5670              	 .cfi_endproc
 5671              	.LFE252:
 5673              	 .section .text.XMC_SCU_CLOCK_EnableLowPowerOscillator,"ax",%progbits
 5674              	 .align 2
 5675              	 .global XMC_SCU_CLOCK_EnableLowPowerOscillator
 5676              	 .thumb
 5677              	 .thumb_func
 5679              	XMC_SCU_CLOCK_EnableLowPowerOscillator:
 5680              	.LFB253:
1349:../Libraries/XMCLib/src/xmc4_scu.c **** 
1350:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to configure the 32khz Ultra Low Power oscillator */
1351:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
1352:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5681              	 .loc 3 1352 0
 5682              	 .cfi_startproc
 5683              	 
 5684              	 
 5685 0000 80B5     	 push {r7,lr}
 5686              	.LCFI519:
 5687              	 .cfi_def_cfa_offset 8
 5688              	 .cfi_offset 7,-8
 5689              	 .cfi_offset 14,-4
 5690 0002 00AF     	 add r7,sp,#0
 5691              	.LCFI520:
 5692              	 .cfi_def_cfa_register 7
1353:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 5693              	 .loc 3 1353 0
 5694 0004 00BF     	 nop
 5695              	.L385:
 5696              	 .loc 3 1353 0 is_stmt 0 discriminator 1
 5697 0006 194B     	 ldr r3,.L389
 5698 0008 D3F8C430 	 ldr r3,[r3,#196]
 5699 000c 03F08003 	 and r3,r3,#128
 5700 0010 002B     	 cmp r3,#0
 5701 0012 F8D1     	 bne .L385
1354:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1355:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until the update of OSCULCTRL register in hibernate domain is completed */
1356:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1357:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 5702              	 .loc 3 1357 0 is_stmt 1
 5703 0014 164A     	 ldr r2,.L389+4
 5704 0016 164B     	 ldr r3,.L389+4
 5705 0018 DB69     	 ldr r3,[r3,#28]
 5706 001a 23F03003 	 bic r3,r3,#48
 5707 001e D361     	 str r3,[r2,#28]
1358:../Libraries/XMCLib/src/xmc4_scu.c **** 
1359:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Check if the input clock is OK using OSCULP Oscillator Watchdog*/
1360:../Libraries/XMCLib/src/xmc4_scu.c ****   while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 5708              	 .loc 3 1360 0
 5709 0020 00BF     	 nop
 5710              	.L386:
 5711              	 .loc 3 1360 0 is_stmt 0 discriminator 1
 5712 0022 124B     	 ldr r3,.L389
 5713 0024 D3F8C430 	 ldr r3,[r3,#196]
 5714 0028 03F00803 	 and r3,r3,#8
 5715 002c 002B     	 cmp r3,#0
 5716 002e F8D1     	 bne .L386
1361:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1362:../Libraries/XMCLib/src/xmc4_scu.c ****     /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
1363:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1364:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 5717              	 .loc 3 1364 0 is_stmt 1
 5718 0030 0F4A     	 ldr r2,.L389+4
 5719 0032 0F4B     	 ldr r3,.L389+4
 5720 0034 DB68     	 ldr r3,[r3,#12]
 5721 0036 43F00803 	 orr r3,r3,#8
 5722 003a D360     	 str r3,[r2,#12]
 5723              	.L388:
1365:../Libraries/XMCLib/src/xmc4_scu.c **** 
1366:../Libraries/XMCLib/src/xmc4_scu.c ****   /* wait till clock is stable */
1367:../Libraries/XMCLib/src/xmc4_scu.c ****   do
1368:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1369:../Libraries/XMCLib/src/xmc4_scu.c ****     while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 5724              	 .loc 3 1369 0
 5725 003c 00BF     	 nop
 5726              	.L387:
 5727              	 .loc 3 1369 0 is_stmt 0 discriminator 1
 5728 003e 0B4B     	 ldr r3,.L389
 5729 0040 D3F8C430 	 ldr r3,[r3,#196]
 5730 0044 03F00203 	 and r3,r3,#2
 5731 0048 002B     	 cmp r3,#0
 5732 004a F8D1     	 bne .L387
1370:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1371:../Libraries/XMCLib/src/xmc4_scu.c ****       /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
1372:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1373:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_HIBERNATE->HDCLR |= (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 5733              	 .loc 3 1373 0 is_stmt 1
 5734 004c 084A     	 ldr r2,.L389+4
 5735 004e 084B     	 ldr r3,.L389+4
 5736 0050 5B68     	 ldr r3,[r3,#4]
 5737 0052 43F00803 	 orr r3,r3,#8
 5738 0056 5360     	 str r3,[r2,#4]
1374:../Libraries/XMCLib/src/xmc4_scu.c **** 
1375:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_lDelay(50U);
 5739              	 .loc 3 1375 0
 5740 0058 3220     	 movs r0,#50
 5741 005a FFF7FEFF 	 bl XMC_SCU_lDelay
1376:../Libraries/XMCLib/src/xmc4_scu.c **** 
1377:../Libraries/XMCLib/src/xmc4_scu.c ****   } while ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) != 0UL);
 5742              	 .loc 3 1377 0
 5743 005e 044B     	 ldr r3,.L389+4
 5744 0060 1B68     	 ldr r3,[r3]
 5745 0062 03F00803 	 and r3,r3,#8
 5746 0066 002B     	 cmp r3,#0
 5747 0068 E8D1     	 bne .L388
1378:../Libraries/XMCLib/src/xmc4_scu.c **** 
1379:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5748              	 .loc 3 1379 0
 5749 006a 80BD     	 pop {r7,pc}
 5750              	.L390:
 5751              	 .align 2
 5752              	.L389:
 5753 006c 00400050 	 .word 1342193664
 5754 0070 00430050 	 .word 1342194432
 5755              	 .cfi_endproc
 5756              	.LFE253:
 5758              	 .section .text.XMC_SCU_CLOCK_DisableLowPowerOscillator,"ax",%progbits
 5759              	 .align 2
 5760              	 .global XMC_SCU_CLOCK_DisableLowPowerOscillator
 5761              	 .thumb
 5762              	 .thumb_func
 5764              	XMC_SCU_CLOCK_DisableLowPowerOscillator:
 5765              	.LFB254:
1380:../Libraries/XMCLib/src/xmc4_scu.c **** 
1381:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to configure the 32khz Ultra Low Power oscillator */
1382:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
1383:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5766              	 .loc 3 1383 0
 5767              	 .cfi_startproc
 5768              	 
 5769              	 
 5770              	 
 5771 0000 80B4     	 push {r7}
 5772              	.LCFI521:
 5773              	 .cfi_def_cfa_offset 4
 5774              	 .cfi_offset 7,-4
 5775 0002 00AF     	 add r7,sp,#0
 5776              	.LCFI522:
 5777              	 .cfi_def_cfa_register 7
1384:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 5778              	 .loc 3 1384 0
 5779 0004 00BF     	 nop
 5780              	.L392:
 5781              	 .loc 3 1384 0 is_stmt 0 discriminator 1
 5782 0006 084B     	 ldr r3,.L393
 5783 0008 D3F8C430 	 ldr r3,[r3,#196]
 5784 000c 03F08003 	 and r3,r3,#128
 5785 0010 002B     	 cmp r3,#0
 5786 0012 F8D1     	 bne .L392
1385:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1386:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
1387:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1388:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 5787              	 .loc 3 1388 0 is_stmt 1
 5788 0014 054A     	 ldr r2,.L393+4
 5789 0016 054B     	 ldr r3,.L393+4
 5790 0018 DB69     	 ldr r3,[r3,#28]
 5791 001a 43F03003 	 orr r3,r3,#48
 5792 001e D361     	 str r3,[r2,#28]
1389:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5793              	 .loc 3 1389 0
 5794 0020 BD46     	 mov sp,r7
 5795              	.LCFI523:
 5796              	 .cfi_def_cfa_register 13
 5797              	 
 5798 0022 5DF8047B 	 ldr r7,[sp],#4
 5799              	.LCFI524:
 5800              	 .cfi_restore 7
 5801              	 .cfi_def_cfa_offset 0
 5802 0026 7047     	 bx lr
 5803              	.L394:
 5804              	 .align 2
 5805              	.L393:
 5806 0028 00400050 	 .word 1342193664
 5807 002c 00430050 	 .word 1342194432
 5808              	 .cfi_endproc
 5809              	.LFE254:
 5811              	 .section .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillator,"ax",%progbits
 5812              	 .align 2
 5813              	 .global XMC_SCU_CLOCK_EnableHighPerformanceOscillator
 5814              	 .thumb
 5815              	 .thumb_func
 5817              	XMC_SCU_CLOCK_EnableHighPerformanceOscillator:
 5818              	.LFB255:
1390:../Libraries/XMCLib/src/xmc4_scu.c **** 
1391:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable High Precision High Speed oscillator */
1392:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
1393:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5819              	 .loc 3 1393 0
 5820              	 .cfi_startproc
 5821              	 
 5822              	 
 5823 0000 B0B5     	 push {r4,r5,r7,lr}
 5824              	.LCFI525:
 5825              	 .cfi_def_cfa_offset 16
 5826              	 .cfi_offset 4,-16
 5827              	 .cfi_offset 5,-12
 5828              	 .cfi_offset 7,-8
 5829              	 .cfi_offset 14,-4
 5830 0002 00AF     	 add r7,sp,#0
 5831              	.LCFI526:
 5832              	 .cfi_def_cfa_register 7
1394:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 5833              	 .loc 3 1394 0
 5834 0004 134A     	 ldr r2,.L397
 5835 0006 134B     	 ldr r3,.L397
 5836 0008 5B68     	 ldr r3,[r3,#4]
 5837 000a 23F48033 	 bic r3,r3,#65536
 5838 000e 5360     	 str r3,[r2,#4]
1395:../Libraries/XMCLib/src/xmc4_scu.c **** 
1396:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCH
 5839              	 .loc 3 1396 0
 5840 0010 114D     	 ldr r5,.L397+4
 5841 0012 114B     	 ldr r3,.L397+4
 5842 0014 5B68     	 ldr r3,[r3,#4]
 5843 0016 23F47024 	 bic r4,r3,#983040
 5844 001a 24F03004 	 bic r4,r4,#48
1397:../Libraries/XMCLib/src/xmc4_scu.c ****                                   (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OS
 5845              	 .loc 3 1397 0
 5846 001e FFF7FEFF 	 bl OSCHP_GetFrequency
 5847 0022 0246     	 mov r2,r0
 5848 0024 0D4B     	 ldr r3,.L397+8
 5849 0026 A3FB0223 	 umull r2,r3,r3,r2
 5850 002a 1B0D     	 lsrs r3,r3,#20
 5851 002c 013B     	 subs r3,r3,#1
 5852 002e 1B04     	 lsls r3,r3,#16
1396:../Libraries/XMCLib/src/xmc4_scu.c ****                                   (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OS
 5853              	 .loc 3 1396 0
 5854 0030 2343     	 orrs r3,r3,r4
 5855 0032 6B60     	 str r3,[r5,#4]
1398:../Libraries/XMCLib/src/xmc4_scu.c **** 
1399:../Libraries/XMCLib/src/xmc4_scu.c ****   /* restart OSC Watchdog */
1400:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 5856              	 .loc 3 1400 0
 5857 0034 074A     	 ldr r2,.L397
 5858 0036 074B     	 ldr r3,.L397
 5859 0038 5B68     	 ldr r3,[r3,#4]
 5860 003a 23F40033 	 bic r3,r3,#131072
 5861 003e 5360     	 str r3,[r2,#4]
1401:../Libraries/XMCLib/src/xmc4_scu.c **** 
1402:../Libraries/XMCLib/src/xmc4_scu.c ****   while ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) != XMC_SCU_PLL_PLLSTAT_OSC_USABLE)
 5862              	 .loc 3 1402 0
 5863 0040 00BF     	 nop
 5864              	.L396:
 5865              	 .loc 3 1402 0 is_stmt 0 discriminator 1
 5866 0042 044B     	 ldr r3,.L397
 5867 0044 1B68     	 ldr r3,[r3]
 5868 0046 03F46073 	 and r3,r3,#896
 5869 004a B3F5607F 	 cmp r3,#896
 5870 004e F8D1     	 bne .L396
1403:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1404:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait till OSC_HP output frequency is usable */
1405:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1406:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5871              	 .loc 3 1406 0 is_stmt 1
 5872 0050 B0BD     	 pop {r4,r5,r7,pc}
 5873              	.L398:
 5874 0052 00BF     	 .align 2
 5875              	.L397:
 5876 0054 10470050 	 .word 1342195472
 5877 0058 00470050 	 .word 1342195456
 5878 005c 6BCA5F6B 	 .word 1801439851
 5879              	 .cfi_endproc
 5880              	.LFE255:
 5882              	 .section .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillator,"ax",%progbits
 5883              	 .align 2
 5884              	 .global XMC_SCU_CLOCK_DisableHighPerformanceOscillator
 5885              	 .thumb
 5886              	 .thumb_func
 5888              	XMC_SCU_CLOCK_DisableHighPerformanceOscillator:
 5889              	.LFB256:
1407:../Libraries/XMCLib/src/xmc4_scu.c **** 
1408:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable High Precision High Speed oscillator */
1409:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
1410:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5890              	 .loc 3 1410 0
 5891              	 .cfi_startproc
 5892              	 
 5893              	 
 5894              	 
 5895 0000 80B4     	 push {r7}
 5896              	.LCFI527:
 5897              	 .cfi_def_cfa_offset 4
 5898              	 .cfi_offset 7,-4
 5899 0002 00AF     	 add r7,sp,#0
 5900              	.LCFI528:
 5901              	 .cfi_def_cfa_register 7
1411:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 5902              	 .loc 3 1411 0
 5903 0004 044A     	 ldr r2,.L400
 5904 0006 044B     	 ldr r3,.L400
 5905 0008 5B68     	 ldr r3,[r3,#4]
 5906 000a 43F03003 	 orr r3,r3,#48
 5907 000e 5360     	 str r3,[r2,#4]
1412:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5908              	 .loc 3 1412 0
 5909 0010 BD46     	 mov sp,r7
 5910              	.LCFI529:
 5911              	 .cfi_def_cfa_register 13
 5912              	 
 5913 0012 5DF8047B 	 ldr r7,[sp],#4
 5914              	.LCFI530:
 5915              	 .cfi_restore 7
 5916              	 .cfi_def_cfa_offset 0
 5917 0016 7047     	 bx lr
 5918              	.L401:
 5919              	 .align 2
 5920              	.L400:
 5921 0018 00470050 	 .word 1342195456
 5922              	 .cfi_endproc
 5923              	.LFE256:
 5925              	 .section .text.XMC_SCU_CLOCK_EnableSystemPll,"ax",%progbits
 5926              	 .align 2
 5927              	 .global XMC_SCU_CLOCK_EnableSystemPll
 5928              	 .thumb
 5929              	 .thumb_func
 5931              	XMC_SCU_CLOCK_EnableSystemPll:
 5932              	.LFB257:
1413:../Libraries/XMCLib/src/xmc4_scu.c **** 
1414:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable main PLL */
1415:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableSystemPll(void)
1416:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5933              	 .loc 3 1416 0
 5934              	 .cfi_startproc
 5935              	 
 5936              	 
 5937              	 
 5938 0000 80B4     	 push {r7}
 5939              	.LCFI531:
 5940              	 .cfi_def_cfa_offset 4
 5941              	 .cfi_offset 7,-4
 5942 0002 00AF     	 add r7,sp,#0
 5943              	.LCFI532:
 5944              	 .cfi_def_cfa_register 7
1417:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 5945              	 .loc 3 1417 0
 5946 0004 054A     	 ldr r2,.L403
 5947 0006 054B     	 ldr r3,.L403
 5948 0008 5B68     	 ldr r3,[r3,#4]
 5949 000a 23F48033 	 bic r3,r3,#65536
 5950 000e 23F00203 	 bic r3,r3,#2
 5951 0012 5360     	 str r3,[r2,#4]
1418:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5952              	 .loc 3 1418 0
 5953 0014 BD46     	 mov sp,r7
 5954              	.LCFI533:
 5955              	 .cfi_def_cfa_register 13
 5956              	 
 5957 0016 5DF8047B 	 ldr r7,[sp],#4
 5958              	.LCFI534:
 5959              	 .cfi_restore 7
 5960              	 .cfi_def_cfa_offset 0
 5961 001a 7047     	 bx lr
 5962              	.L404:
 5963              	 .align 2
 5964              	.L403:
 5965 001c 10470050 	 .word 1342195472
 5966              	 .cfi_endproc
 5967              	.LFE257:
 5969              	 .section .text.XMC_SCU_CLOCK_DisableSystemPll,"ax",%progbits
 5970              	 .align 2
 5971              	 .global XMC_SCU_CLOCK_DisableSystemPll
 5972              	 .thumb
 5973              	 .thumb_func
 5975              	XMC_SCU_CLOCK_DisableSystemPll:
 5976              	.LFB258:
1419:../Libraries/XMCLib/src/xmc4_scu.c **** 
1420:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable main PLL */
1421:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableSystemPll(void)
1422:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5977              	 .loc 3 1422 0
 5978              	 .cfi_startproc
 5979              	 
 5980              	 
 5981              	 
 5982 0000 80B4     	 push {r7}
 5983              	.LCFI535:
 5984              	 .cfi_def_cfa_offset 4
 5985              	 .cfi_offset 7,-4
 5986 0002 00AF     	 add r7,sp,#0
 5987              	.LCFI536:
 5988              	 .cfi_def_cfa_register 7
1423:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 5989              	 .loc 3 1423 0
 5990 0004 054A     	 ldr r2,.L406
 5991 0006 054B     	 ldr r3,.L406
 5992 0008 5B68     	 ldr r3,[r3,#4]
 5993 000a 43F48033 	 orr r3,r3,#65536
 5994 000e 43F00203 	 orr r3,r3,#2
 5995 0012 5360     	 str r3,[r2,#4]
1424:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5996              	 .loc 3 1424 0
 5997 0014 BD46     	 mov sp,r7
 5998              	.LCFI537:
 5999              	 .cfi_def_cfa_register 13
 6000              	 
 6001 0016 5DF8047B 	 ldr r7,[sp],#4
 6002              	.LCFI538:
 6003              	 .cfi_restore 7
 6004              	 .cfi_def_cfa_offset 0
 6005 001a 7047     	 bx lr
 6006              	.L407:
 6007              	 .align 2
 6008              	.L406:
 6009 001c 10470050 	 .word 1342195472
 6010              	 .cfi_endproc
 6011              	.LFE258:
 6013              	 .section .text.XMC_SCU_CLOCK_StartSystemPll,"ax",%progbits
 6014              	 .align 2
 6015              	 .global XMC_SCU_CLOCK_StartSystemPll
 6016              	 .thumb
 6017              	 .thumb_func
 6019              	XMC_SCU_CLOCK_StartSystemPll:
 6020              	.LFB259:
1425:../Libraries/XMCLib/src/xmc4_scu.c **** 
1426:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to configure main PLL */
1427:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
1428:../Libraries/XMCLib/src/xmc4_scu.c ****                                   XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
1429:../Libraries/XMCLib/src/xmc4_scu.c ****                                   uint32_t pdiv,
1430:../Libraries/XMCLib/src/xmc4_scu.c ****                                   uint32_t ndiv,
1431:../Libraries/XMCLib/src/xmc4_scu.c ****                                   uint32_t kdiv)
1432:../Libraries/XMCLib/src/xmc4_scu.c **** {
 6021              	 .loc 3 1432 0
 6022              	 .cfi_startproc
 6023              	 
 6024              	 
 6025 0000 80B5     	 push {r7,lr}
 6026              	.LCFI539:
 6027              	 .cfi_def_cfa_offset 8
 6028              	 .cfi_offset 7,-8
 6029              	 .cfi_offset 14,-4
 6030 0002 86B0     	 sub sp,sp,#24
 6031              	.LCFI540:
 6032              	 .cfi_def_cfa_offset 32
 6033 0004 00AF     	 add r7,sp,#0
 6034              	.LCFI541:
 6035              	 .cfi_def_cfa_register 7
 6036 0006 BA60     	 str r2,[r7,#8]
 6037 0008 7B60     	 str r3,[r7,#4]
 6038 000a 0346     	 mov r3,r0
 6039 000c FB81     	 strh r3,[r7,#14]
 6040 000e 0B46     	 mov r3,r1
 6041 0010 7B73     	 strb r3,[r7,#13]
1433:../Libraries/XMCLib/src/xmc4_scu.c **** 
1434:../Libraries/XMCLib/src/xmc4_scu.c ****   float vco_frequency;
1435:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t kdiv_temp;
1436:../Libraries/XMCLib/src/xmc4_scu.c **** 
1437:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 6042              	 .loc 3 1437 0
 6043 0012 FB89     	 ldrh r3,[r7,#14]
 6044 0014 1846     	 mov r0,r3
 6045 0016 FFF7FEFF 	 bl XMC_SCU_CLOCK_SetSystemPllClockSource
1438:../Libraries/XMCLib/src/xmc4_scu.c **** 
1439:../Libraries/XMCLib/src/xmc4_scu.c ****   if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 6046              	 .loc 3 1439 0
 6047 001a 7B7B     	 ldrb r3,[r7,#13]
 6048 001c 012B     	 cmp r3,#1
 6049 001e 40F09980 	 bne .L409
1440:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1441:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Calculate initial step to be close to fOFI */
1442:../Libraries/XMCLib/src/xmc4_scu.c ****     if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 6050              	 .loc 3 1442 0
 6051 0022 FB89     	 ldrh r3,[r7,#14]
 6052 0024 002B     	 cmp r3,#0
 6053 0026 08D1     	 bne .L410
1443:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1444:../Libraries/XMCLib/src/xmc4_scu.c ****       vco_frequency = (float)OSCHP_GetFrequency();
 6054              	 .loc 3 1444 0
 6055 0028 FFF7FEFF 	 bl OSCHP_GetFrequency
 6056 002c 07EE900A 	 fmsr s15,r0
 6057 0030 F8EE677A 	 fuitos s15,s15
 6058 0034 C7ED057A 	 fsts s15,[r7,#20]
 6059 0038 01E0     	 b .L411
 6060              	.L410:
1445:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1446:../Libraries/XMCLib/src/xmc4_scu.c ****     else
1447:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1448:../Libraries/XMCLib/src/xmc4_scu.c ****       vco_frequency = (float)OFI_FREQUENCY;
 6061              	 .loc 3 1448 0
 6062 003a 534B     	 ldr r3,.L418
 6063 003c 7B61     	 str r3,[r7,#20]
 6064              	.L411:
1449:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1450:../Libraries/XMCLib/src/xmc4_scu.c ****     vco_frequency = (float)((vco_frequency * (float)ndiv) / (float)pdiv);
 6065              	 .loc 3 1450 0
 6066 003e 7B68     	 ldr r3,[r7,#4]
 6067 0040 07EE903A 	 fmsr s15,r3
 6068 0044 B8EE677A 	 fuitos s14,s15
 6069 0048 D7ED057A 	 flds s15,[r7,#20]
 6070 004c 27EE277A 	 fmuls s14,s14,s15
 6071 0050 BB68     	 ldr r3,[r7,#8]
 6072 0052 07EE903A 	 fmsr s15,r3
 6073 0056 F8EE677A 	 fuitos s15,s15
 6074 005a C7EE277A 	 fdivs s15,s14,s15
 6075 005e C7ED057A 	 fsts s15,[r7,#20]
1451:../Libraries/XMCLib/src/xmc4_scu.c ****     kdiv_temp = (uint32_t)((uint32_t)vco_frequency / OFI_FREQUENCY);
 6076              	 .loc 3 1451 0
 6077 0062 D7ED057A 	 flds s15,[r7,#20]
 6078 0066 FCEEE77A 	 ftouizs s15,s15
 6079 006a 17EE902A 	 fmrs r2,s15
 6080 006e 474B     	 ldr r3,.L418+4
 6081 0070 A3FB0223 	 umull r2,r3,r3,r2
 6082 0074 5B0D     	 lsrs r3,r3,#21
 6083 0076 3B61     	 str r3,[r7,#16]
1452:../Libraries/XMCLib/src/xmc4_scu.c **** 
1453:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Switch to prescaler mode */
1454:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 6084              	 .loc 3 1454 0
 6085 0078 454A     	 ldr r2,.L418+8
 6086 007a 454B     	 ldr r3,.L418+8
 6087 007c 5B68     	 ldr r3,[r3,#4]
 6088 007e 43F00103 	 orr r3,r3,#1
 6089 0082 5360     	 str r3,[r2,#4]
1455:../Libraries/XMCLib/src/xmc4_scu.c **** 
1456:../Libraries/XMCLib/src/xmc4_scu.c ****     /* disconnect Oscillator from PLL */
1457:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 6090              	 .loc 3 1457 0
 6091 0084 424A     	 ldr r2,.L418+8
 6092 0086 424B     	 ldr r3,.L418+8
 6093 0088 5B68     	 ldr r3,[r3,#4]
 6094 008a 43F01003 	 orr r3,r3,#16
 6095 008e 5360     	 str r3,[r2,#4]
1458:../Libraries/XMCLib/src/xmc4_scu.c **** 
1459:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Setup divider settings for main PLL */
1460:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_
 6096              	 .loc 3 1460 0
 6097 0090 3F49     	 ldr r1,.L418+8
 6098 0092 3F4B     	 ldr r3,.L418+8
 6099 0094 9A68     	 ldr r2,[r3,#8]
 6100 0096 3F4B     	 ldr r3,.L418+12
 6101 0098 1340     	 ands r3,r3,r2
1461:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_ND
 6102              	 .loc 3 1461 0
 6103 009a 7A68     	 ldr r2,[r7,#4]
 6104 009c 013A     	 subs r2,r2,#1
 6105 009e 1202     	 lsls r2,r2,#8
 6106 00a0 1A43     	 orrs r2,r2,r3
1462:../Libraries/XMCLib/src/xmc4_scu.c ****                                    ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 6107              	 .loc 3 1462 0
 6108 00a2 3B69     	 ldr r3,[r7,#16]
 6109 00a4 013B     	 subs r3,r3,#1
 6110 00a6 1B04     	 lsls r3,r3,#16
1461:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_ND
 6111              	 .loc 3 1461 0
 6112 00a8 1A43     	 orrs r2,r2,r3
1463:../Libraries/XMCLib/src/xmc4_scu.c ****                                    ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 6113              	 .loc 3 1463 0
 6114 00aa BB68     	 ldr r3,[r7,#8]
 6115 00ac 013B     	 subs r3,r3,#1
 6116 00ae 1B06     	 lsls r3,r3,#24
1460:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_ND
 6117              	 .loc 3 1460 0
 6118 00b0 1343     	 orrs r3,r3,r2
 6119 00b2 8B60     	 str r3,[r1,#8]
1464:../Libraries/XMCLib/src/xmc4_scu.c **** 
1465:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
1466:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 6120              	 .loc 3 1466 0
 6121 00b4 364A     	 ldr r2,.L418+8
 6122 00b6 364B     	 ldr r3,.L418+8
 6123 00b8 5B68     	 ldr r3,[r3,#4]
 6124 00ba 43F04003 	 orr r3,r3,#64
 6125 00be 5360     	 str r3,[r2,#4]
1467:../Libraries/XMCLib/src/xmc4_scu.c **** 
1468:../Libraries/XMCLib/src/xmc4_scu.c ****     /* connect Oscillator to PLL */
1469:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 6126              	 .loc 3 1469 0
 6127 00c0 334A     	 ldr r2,.L418+8
 6128 00c2 334B     	 ldr r3,.L418+8
 6129 00c4 5B68     	 ldr r3,[r3,#4]
 6130 00c6 23F01003 	 bic r3,r3,#16
 6131 00ca 5360     	 str r3,[r2,#4]
1470:../Libraries/XMCLib/src/xmc4_scu.c **** 
1471:../Libraries/XMCLib/src/xmc4_scu.c ****     /* restart PLL Lock detection */
1472:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 6132              	 .loc 3 1472 0
 6133 00cc 304A     	 ldr r2,.L418+8
 6134 00ce 304B     	 ldr r3,.L418+8
 6135 00d0 5B68     	 ldr r3,[r3,#4]
 6136 00d2 43F48023 	 orr r3,r3,#262144
 6137 00d6 5360     	 str r3,[r2,#4]
1473:../Libraries/XMCLib/src/xmc4_scu.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 6138              	 .loc 3 1473 0
 6139 00d8 00BF     	 nop
 6140              	.L412:
 6141              	 .loc 3 1473 0 is_stmt 0 discriminator 1
 6142 00da 2D4B     	 ldr r3,.L418+8
 6143 00dc 1B68     	 ldr r3,[r3]
 6144 00de 03F00403 	 and r3,r3,#4
 6145 00e2 002B     	 cmp r3,#0
 6146 00e4 F9D0     	 beq .L412
1474:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1475:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait for PLL Lock */
1476:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1477:../Libraries/XMCLib/src/xmc4_scu.c **** 
1478:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Switch to normal mode */
1479:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 6147              	 .loc 3 1479 0 is_stmt 1
 6148 00e6 2A4A     	 ldr r2,.L418+8
 6149 00e8 294B     	 ldr r3,.L418+8
 6150 00ea 5B68     	 ldr r3,[r3,#4]
 6151 00ec 23F00103 	 bic r3,r3,#1
 6152 00f0 5360     	 str r3,[r2,#4]
1480:../Libraries/XMCLib/src/xmc4_scu.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 6153              	 .loc 3 1480 0
 6154 00f2 00BF     	 nop
 6155              	.L413:
 6156              	 .loc 3 1480 0 is_stmt 0 discriminator 1
 6157 00f4 264B     	 ldr r3,.L418+8
 6158 00f6 1B68     	 ldr r3,[r3]
 6159 00f8 03F00103 	 and r3,r3,#1
 6160 00fc 002B     	 cmp r3,#0
 6161 00fe F9D1     	 bne .L413
1481:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1482:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait for normal mode */
1483:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1484:../Libraries/XMCLib/src/xmc4_scu.c **** 
1485:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Ramp up PLL frequency in steps */
1486:../Libraries/XMCLib/src/xmc4_scu.c ****     kdiv_temp = (uint32_t)((uint32_t)vco_frequency / 60000000UL);
 6162              	 .loc 3 1486 0 is_stmt 1
 6163 0100 D7ED057A 	 flds s15,[r7,#20]
 6164 0104 FCEEE77A 	 ftouizs s15,s15
 6165 0108 17EE903A 	 fmrs r3,s15
 6166 010c 1B0A     	 lsrs r3,r3,#8
 6167 010e 224A     	 ldr r2,.L418+16
 6168 0110 A2FB0323 	 umull r2,r3,r2,r3
 6169 0114 9B0A     	 lsrs r3,r3,#10
 6170 0116 3B61     	 str r3,[r7,#16]
1487:../Libraries/XMCLib/src/xmc4_scu.c ****     if (kdiv < kdiv_temp)
 6171              	 .loc 3 1487 0
 6172 0118 3A6A     	 ldr r2,[r7,#32]
 6173 011a 3B69     	 ldr r3,[r7,#16]
 6174 011c 9A42     	 cmp r2,r3
 6175 011e 02D2     	 bcs .L414
1488:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1489:../Libraries/XMCLib/src/xmc4_scu.c ****       XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 6176              	 .loc 3 1489 0
 6177 0120 3869     	 ldr r0,[r7,#16]
 6178 0122 FFF7FEFF 	 bl XMC_SCU_CLOCK_StepSystemPllFrequency
 6179              	.L414:
1490:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1491:../Libraries/XMCLib/src/xmc4_scu.c **** 
1492:../Libraries/XMCLib/src/xmc4_scu.c ****     kdiv_temp = (uint32_t)((uint32_t)vco_frequency / 90000000UL);
 6180              	 .loc 3 1492 0
 6181 0126 D7ED057A 	 flds s15,[r7,#20]
 6182 012a FCEEE77A 	 ftouizs s15,s15
 6183 012e 17EE903A 	 fmrs r3,s15
 6184 0132 DB09     	 lsrs r3,r3,#7
 6185 0134 194A     	 ldr r2,.L418+20
 6186 0136 A2FB0323 	 umull r2,r3,r2,r3
 6187 013a DB0A     	 lsrs r3,r3,#11
 6188 013c 3B61     	 str r3,[r7,#16]
1493:../Libraries/XMCLib/src/xmc4_scu.c ****     if (kdiv < kdiv_temp)
 6189              	 .loc 3 1493 0
 6190 013e 3A6A     	 ldr r2,[r7,#32]
 6191 0140 3B69     	 ldr r3,[r7,#16]
 6192 0142 9A42     	 cmp r2,r3
 6193 0144 02D2     	 bcs .L415
1494:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1495:../Libraries/XMCLib/src/xmc4_scu.c ****       XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 6194              	 .loc 3 1495 0
 6195 0146 3869     	 ldr r0,[r7,#16]
 6196 0148 FFF7FEFF 	 bl XMC_SCU_CLOCK_StepSystemPllFrequency
 6197              	.L415:
1496:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1497:../Libraries/XMCLib/src/xmc4_scu.c **** 
1498:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 6198              	 .loc 3 1498 0
 6199 014c 386A     	 ldr r0,[r7,#32]
 6200 014e FFF7FEFF 	 bl XMC_SCU_CLOCK_StepSystemPllFrequency
 6201 0152 15E0     	 b .L408
 6202              	.L409:
1499:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1500:../Libraries/XMCLib/src/xmc4_scu.c ****   else
1501:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1502:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 6203              	 .loc 3 1502 0
 6204 0154 0E49     	 ldr r1,.L418+8
 6205 0156 0E4B     	 ldr r3,.L418+8
 6206 0158 9B68     	 ldr r3,[r3,#8]
 6207 015a 23F07F02 	 bic r2,r3,#127
1503:../Libraries/XMCLib/src/xmc4_scu.c ****                        ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 6208              	 .loc 3 1503 0
 6209 015e 3B6A     	 ldr r3,[r7,#32]
 6210 0160 013B     	 subs r3,r3,#1
1502:../Libraries/XMCLib/src/xmc4_scu.c ****                        ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 6211              	 .loc 3 1502 0
 6212 0162 1343     	 orrs r3,r3,r2
 6213 0164 8B60     	 str r3,[r1,#8]
1504:../Libraries/XMCLib/src/xmc4_scu.c **** 
1505:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Switch to prescaler mode */
1506:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 6214              	 .loc 3 1506 0
 6215 0166 0A4A     	 ldr r2,.L418+8
 6216 0168 094B     	 ldr r3,.L418+8
 6217 016a 5B68     	 ldr r3,[r3,#4]
 6218 016c 43F00103 	 orr r3,r3,#1
 6219 0170 5360     	 str r3,[r2,#4]
1507:../Libraries/XMCLib/src/xmc4_scu.c **** 
1508:../Libraries/XMCLib/src/xmc4_scu.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 6220              	 .loc 3 1508 0
 6221 0172 00BF     	 nop
 6222              	.L417:
 6223              	 .loc 3 1508 0 is_stmt 0 discriminator 1
 6224 0174 064B     	 ldr r3,.L418+8
 6225 0176 1B68     	 ldr r3,[r3]
 6226 0178 03F00103 	 and r3,r3,#1
 6227 017c 002B     	 cmp r3,#0
 6228 017e F9D0     	 beq .L417
 6229              	.L408:
1509:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1510:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait for prescaler mode */
1511:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1512:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1513:../Libraries/XMCLib/src/xmc4_scu.c **** }
 6230              	 .loc 3 1513 0 is_stmt 1
 6231 0180 1837     	 adds r7,r7,#24
 6232              	.LCFI542:
 6233              	 .cfi_def_cfa_offset 8
 6234 0182 BD46     	 mov sp,r7
 6235              	.LCFI543:
 6236              	 .cfi_def_cfa_register 13
 6237              	 
 6238 0184 80BD     	 pop {r7,pc}
 6239              	.L419:
 6240 0186 00BF     	 .align 2
 6241              	.L418:
 6242 0188 001BB74B 	 .word 1270291200
 6243 018c 819F5E16 	 .word 375299969
 6244 0190 10470050 	 .word 1342195472
 6245 0194 FF8080F0 	 .word -260013825
 6246 0198 C7541E01 	 .word 18764999
 6247 019c 2FE3BE00 	 .word 12509999
 6248              	 .cfi_endproc
 6249              	.LFE259:
 6251              	 .section .text.XMC_SCU_CLOCK_StopSystemPll,"ax",%progbits
 6252              	 .align 2
 6253              	 .global XMC_SCU_CLOCK_StopSystemPll
 6254              	 .thumb
 6255              	 .thumb_func
 6257              	XMC_SCU_CLOCK_StopSystemPll:
 6258              	.LFB260:
1514:../Libraries/XMCLib/src/xmc4_scu.c **** 
1515:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to stop main PLL operation */
1516:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_StopSystemPll(void)
1517:../Libraries/XMCLib/src/xmc4_scu.c **** {
 6259              	 .loc 3 1517 0
 6260              	 .cfi_startproc
 6261              	 
 6262              	 
 6263              	 
 6264 0000 80B4     	 push {r7}
 6265              	.LCFI544:
 6266              	 .cfi_def_cfa_offset 4
 6267              	 .cfi_offset 7,-4
 6268 0002 00AF     	 add r7,sp,#0
 6269              	.LCFI545:
 6270              	 .cfi_def_cfa_register 7
1518:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 6271              	 .loc 3 1518 0
 6272 0004 044A     	 ldr r2,.L421
 6273 0006 044B     	 ldr r3,.L421
 6274 0008 5B68     	 ldr r3,[r3,#4]
 6275 000a 43F48033 	 orr r3,r3,#65536
 6276 000e 5360     	 str r3,[r2,#4]
1519:../Libraries/XMCLib/src/xmc4_scu.c **** }
 6277              	 .loc 3 1519 0
 6278 0010 BD46     	 mov sp,r7
 6279              	.LCFI546:
 6280              	 .cfi_def_cfa_register 13
 6281              	 
 6282 0012 5DF8047B 	 ldr r7,[sp],#4
 6283              	.LCFI547:
 6284              	 .cfi_restore 7
 6285              	 .cfi_def_cfa_offset 0
 6286 0016 7047     	 bx lr
 6287              	.L422:
 6288              	 .align 2
 6289              	.L421:
 6290 0018 10470050 	 .word 1342195472
 6291              	 .cfi_endproc
 6292              	.LFE260:
 6294              	 .section .text.XMC_SCU_CLOCK_StepSystemPllFrequency,"ax",%progbits
 6295              	 .align 2
 6296              	 .global XMC_SCU_CLOCK_StepSystemPllFrequency
 6297              	 .thumb
 6298              	 .thumb_func
 6300              	XMC_SCU_CLOCK_StepSystemPllFrequency:
 6301              	.LFB261:
1520:../Libraries/XMCLib/src/xmc4_scu.c **** 
1521:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to step up/down the main PLL frequency */
1522:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
1523:../Libraries/XMCLib/src/xmc4_scu.c **** {
 6302              	 .loc 3 1523 0
 6303              	 .cfi_startproc
 6304              	 
 6305              	 
 6306 0000 80B5     	 push {r7,lr}
 6307              	.LCFI548:
 6308              	 .cfi_def_cfa_offset 8
 6309              	 .cfi_offset 7,-8
 6310              	 .cfi_offset 14,-4
 6311 0002 82B0     	 sub sp,sp,#8
 6312              	.LCFI549:
 6313              	 .cfi_def_cfa_offset 16
 6314 0004 00AF     	 add r7,sp,#0
 6315              	.LCFI550:
 6316              	 .cfi_def_cfa_register 7
 6317 0006 7860     	 str r0,[r7,#4]
1524:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 6318              	 .loc 3 1524 0
 6319 0008 0749     	 ldr r1,.L424
 6320 000a 074B     	 ldr r3,.L424
 6321 000c 9B68     	 ldr r3,[r3,#8]
 6322 000e 23F4FE02 	 bic r2,r3,#8323072
1525:../Libraries/XMCLib/src/xmc4_scu.c ****                      ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 6323              	 .loc 3 1525 0
 6324 0012 7B68     	 ldr r3,[r7,#4]
 6325 0014 013B     	 subs r3,r3,#1
 6326 0016 1B04     	 lsls r3,r3,#16
1524:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 6327              	 .loc 3 1524 0
 6328 0018 1343     	 orrs r3,r3,r2
 6329 001a 8B60     	 str r3,[r1,#8]
1526:../Libraries/XMCLib/src/xmc4_scu.c **** 
1527:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_lDelay(50U);
 6330              	 .loc 3 1527 0
 6331 001c 3220     	 movs r0,#50
 6332 001e FFF7FEFF 	 bl XMC_SCU_lDelay
1528:../Libraries/XMCLib/src/xmc4_scu.c **** }
 6333              	 .loc 3 1528 0
 6334 0022 0837     	 adds r7,r7,#8
 6335              	.LCFI551:
 6336              	 .cfi_def_cfa_offset 8
 6337 0024 BD46     	 mov sp,r7
 6338              	.LCFI552:
 6339              	 .cfi_def_cfa_register 13
 6340              	 
 6341 0026 80BD     	 pop {r7,pc}
 6342              	.L425:
 6343              	 .align 2
 6344              	.L424:
 6345 0028 10470050 	 .word 1342195472
 6346              	 .cfi_endproc
 6347              	.LFE261:
 6349              	 .section .text.XMC_SCU_CLOCK_IsSystemPllLocked,"ax",%progbits
 6350              	 .align 2
 6351              	 .global XMC_SCU_CLOCK_IsSystemPllLocked
 6352              	 .thumb
 6353              	 .thumb_func
 6355              	XMC_SCU_CLOCK_IsSystemPllLocked:
 6356              	.LFB262:
1529:../Libraries/XMCLib/src/xmc4_scu.c **** 
1530:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to check main PLL is locked or not */
1531:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
1532:../Libraries/XMCLib/src/xmc4_scu.c **** {
 6357              	 .loc 3 1532 0
 6358              	 .cfi_startproc
 6359              	 
 6360              	 
 6361              	 
 6362 0000 80B4     	 push {r7}
 6363              	.LCFI553:
 6364              	 .cfi_def_cfa_offset 4
 6365              	 .cfi_offset 7,-4
 6366 0002 00AF     	 add r7,sp,#0
 6367              	.LCFI554:
 6368              	 .cfi_def_cfa_register 7
1533:../Libraries/XMCLib/src/xmc4_scu.c ****   return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 6369              	 .loc 3 1533 0
 6370 0004 064B     	 ldr r3,.L428
 6371 0006 1B68     	 ldr r3,[r3]
 6372 0008 03F00403 	 and r3,r3,#4
 6373 000c 002B     	 cmp r3,#0
 6374 000e 14BF     	 ite ne
 6375 0010 0123     	 movne r3,#1
 6376 0012 0023     	 moveq r3,#0
 6377 0014 DBB2     	 uxtb r3,r3
1534:../Libraries/XMCLib/src/xmc4_scu.c **** }
 6378              	 .loc 3 1534 0
 6379 0016 1846     	 mov r0,r3
 6380 0018 BD46     	 mov sp,r7
 6381              	.LCFI555:
 6382              	 .cfi_def_cfa_register 13
 6383              	 
 6384 001a 5DF8047B 	 ldr r7,[sp],#4
 6385              	.LCFI556:
 6386              	 .cfi_restore 7
 6387              	 .cfi_def_cfa_offset 0
 6388 001e 7047     	 bx lr
 6389              	.L429:
 6390              	 .align 2
 6391              	.L428:
 6392 0020 10470050 	 .word 1342195472
 6393              	 .cfi_endproc
 6394              	.LFE262:
 6396              	 .section .text.XMC_SCU_INTERRUPT_SetEventHandler,"ax",%progbits
 6397              	 .align 2
 6398              	 .global XMC_SCU_INTERRUPT_SetEventHandler
 6399              	 .thumb
 6400              	 .thumb_func
 6402              	XMC_SCU_INTERRUPT_SetEventHandler:
 6403              	.LFB263:
1535:../Libraries/XMCLib/src/xmc4_scu.c **** 
1536:../Libraries/XMCLib/src/xmc4_scu.c **** /*
1537:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to assign the event handler function to be executed on occurrence of the selected event.
1538:../Libraries/XMCLib/src/xmc4_scu.c ****  */
1539:../Libraries/XMCLib/src/xmc4_scu.c **** XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(const XMC_SCU_INTERRUPT_EVENT_t event,
1540:../Libraries/XMCLib/src/xmc4_scu.c ****                                                    const XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
1541:../Libraries/XMCLib/src/xmc4_scu.c **** {
 6404              	 .loc 3 1541 0
 6405              	 .cfi_startproc
 6406              	 
 6407              	 
 6408              	 
 6409 0000 80B4     	 push {r7}
 6410              	.LCFI557:
 6411              	 .cfi_def_cfa_offset 4
 6412              	 .cfi_offset 7,-4
 6413 0002 85B0     	 sub sp,sp,#20
 6414              	.LCFI558:
 6415              	 .cfi_def_cfa_offset 24
 6416 0004 00AF     	 add r7,sp,#0
 6417              	.LCFI559:
 6418              	 .cfi_def_cfa_register 7
 6419 0006 7860     	 str r0,[r7,#4]
 6420 0008 3960     	 str r1,[r7]
1542:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index;
1543:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_STATUS_t status;
1544:../Libraries/XMCLib/src/xmc4_scu.c ****   
1545:../Libraries/XMCLib/src/xmc4_scu.c ****   index = 0U;
 6421              	 .loc 3 1545 0
 6422 000a 0023     	 movs r3,#0
 6423 000c FB60     	 str r3,[r7,#12]
1546:../Libraries/XMCLib/src/xmc4_scu.c ****   while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EV
 6424              	 .loc 3 1546 0
 6425 000e 02E0     	 b .L431
 6426              	.L433:
1547:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1548:../Libraries/XMCLib/src/xmc4_scu.c ****     index++;
 6427              	 .loc 3 1548 0
 6428 0010 FB68     	 ldr r3,[r7,#12]
 6429 0012 0133     	 adds r3,r3,#1
 6430 0014 FB60     	 str r3,[r7,#12]
 6431              	.L431:
1546:../Libraries/XMCLib/src/xmc4_scu.c ****   while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EV
 6432              	 .loc 3 1546 0
 6433 0016 FB68     	 ldr r3,[r7,#12]
 6434 0018 7A68     	 ldr r2,[r7,#4]
 6435 001a 22FA03F3 	 lsr r3,r2,r3
 6436 001e 03F00103 	 and r3,r3,#1
 6437 0022 002B     	 cmp r3,#0
 6438 0024 02D1     	 bne .L432
1546:../Libraries/XMCLib/src/xmc4_scu.c ****   while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EV
 6439              	 .loc 3 1546 0 is_stmt 0 discriminator 1
 6440 0026 FB68     	 ldr r3,[r7,#12]
 6441 0028 1F2B     	 cmp r3,#31
 6442 002a F1D9     	 bls .L433
 6443              	.L432:
1549:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1550:../Libraries/XMCLib/src/xmc4_scu.c ****   
1551:../Libraries/XMCLib/src/xmc4_scu.c ****   if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 6444              	 .loc 3 1551 0 is_stmt 1
 6445 002c FB68     	 ldr r3,[r7,#12]
 6446 002e 202B     	 cmp r3,#32
 6447 0030 02D1     	 bne .L434
1552:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1553:../Libraries/XMCLib/src/xmc4_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 6448              	 .loc 3 1553 0
 6449 0032 0123     	 movs r3,#1
 6450 0034 FB72     	 strb r3,[r7,#11]
 6451 0036 06E0     	 b .L435
 6452              	.L434:
1554:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1555:../Libraries/XMCLib/src/xmc4_scu.c ****   else
1556:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1557:../Libraries/XMCLib/src/xmc4_scu.c ****     event_handler_list[index] = handler;
 6453              	 .loc 3 1557 0
 6454 0038 0649     	 ldr r1,.L437
 6455 003a FB68     	 ldr r3,[r7,#12]
 6456 003c 3A68     	 ldr r2,[r7]
 6457 003e 41F82320 	 str r2,[r1,r3,lsl#2]
1558:../Libraries/XMCLib/src/xmc4_scu.c ****     status = XMC_SCU_STATUS_OK;      
 6458              	 .loc 3 1558 0
 6459 0042 0023     	 movs r3,#0
 6460 0044 FB72     	 strb r3,[r7,#11]
 6461              	.L435:
1559:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1560:../Libraries/XMCLib/src/xmc4_scu.c ****   
1561:../Libraries/XMCLib/src/xmc4_scu.c ****   return (status);
 6462              	 .loc 3 1561 0
 6463 0046 FB7A     	 ldrb r3,[r7,#11]
1562:../Libraries/XMCLib/src/xmc4_scu.c **** }
 6464              	 .loc 3 1562 0
 6465 0048 1846     	 mov r0,r3
 6466 004a 1437     	 adds r7,r7,#20
 6467              	.LCFI560:
 6468              	 .cfi_def_cfa_offset 4
 6469 004c BD46     	 mov sp,r7
 6470              	.LCFI561:
 6471              	 .cfi_def_cfa_register 13
 6472              	 
 6473 004e 5DF8047B 	 ldr r7,[sp],#4
 6474              	.LCFI562:
 6475              	 .cfi_restore 7
 6476              	 .cfi_def_cfa_offset 0
 6477 0052 7047     	 bx lr
 6478              	.L438:
 6479              	 .align 2
 6480              	.L437:
 6481 0054 00000000 	 .word event_handler_list
 6482              	 .cfi_endproc
 6483              	.LFE263:
 6485              	 .section .text.XMC_SCU_IRQHandler,"ax",%progbits
 6486              	 .align 2
 6487              	 .global XMC_SCU_IRQHandler
 6488              	 .thumb
 6489              	 .thumb_func
 6491              	XMC_SCU_IRQHandler:
 6492              	.LFB264:
1563:../Libraries/XMCLib/src/xmc4_scu.c **** 
1564:../Libraries/XMCLib/src/xmc4_scu.c **** /*
1565:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to execute callback functions for multiple events.
1566:../Libraries/XMCLib/src/xmc4_scu.c ****  */
1567:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_IRQHandler(uint32_t sr_num)
1568:../Libraries/XMCLib/src/xmc4_scu.c **** {
 6493              	 .loc 3 1568 0
 6494              	 .cfi_startproc
 6495              	 
 6496              	 
 6497 0000 80B5     	 push {r7,lr}
 6498              	.LCFI563:
 6499              	 .cfi_def_cfa_offset 8
 6500              	 .cfi_offset 7,-8
 6501              	 .cfi_offset 14,-4
 6502 0002 86B0     	 sub sp,sp,#24
 6503              	.LCFI564:
 6504              	 .cfi_def_cfa_offset 32
 6505 0004 00AF     	 add r7,sp,#0
 6506              	.LCFI565:
 6507              	 .cfi_def_cfa_register 7
 6508 0006 7860     	 str r0,[r7,#4]
1569:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index;
1570:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_INTERRUPT_EVENT_t event;
1571:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
1572:../Libraries/XMCLib/src/xmc4_scu.c ****   
1573:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_UNUSED_ARG(sr_num);
1574:../Libraries/XMCLib/src/xmc4_scu.c ****   
1575:../Libraries/XMCLib/src/xmc4_scu.c ****   index = 0U;
 6509              	 .loc 3 1575 0
 6510 0008 0023     	 movs r3,#0
 6511 000a 7B61     	 str r3,[r7,#20]
1576:../Libraries/XMCLib/src/xmc4_scu.c ****   event = XMC_SCU_INTERUPT_GetEventStatus();
 6512              	 .loc 3 1576 0
 6513 000c FFF7FEFF 	 bl XMC_SCU_INTERUPT_GetEventStatus
 6514 0010 3861     	 str r0,[r7,#16]
1577:../Libraries/XMCLib/src/xmc4_scu.c ****   while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 6515              	 .loc 3 1577 0
 6516 0012 1CE0     	 b .L440
 6517              	.L444:
1578:../Libraries/XMCLib/src/xmc4_scu.c ****   {    
1579:../Libraries/XMCLib/src/xmc4_scu.c ****     if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 6518              	 .loc 3 1579 0
 6519 0014 7B69     	 ldr r3,[r7,#20]
 6520 0016 3A69     	 ldr r2,[r7,#16]
 6521 0018 22FA03F3 	 lsr r3,r2,r3
 6522 001c 03F00103 	 and r3,r3,#1
 6523 0020 002B     	 cmp r3,#0
 6524 0022 11D0     	 beq .L441
1580:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1581:../Libraries/XMCLib/src/xmc4_scu.c ****       event_handler = event_handler_list[index];
 6525              	 .loc 3 1581 0
 6526 0024 0D4A     	 ldr r2,.L445
 6527 0026 7B69     	 ldr r3,[r7,#20]
 6528 0028 52F82330 	 ldr r3,[r2,r3,lsl#2]
 6529 002c FB60     	 str r3,[r7,#12]
1582:../Libraries/XMCLib/src/xmc4_scu.c ****       if (event_handler != NULL)
 6530              	 .loc 3 1582 0
 6531 002e FB68     	 ldr r3,[r7,#12]
 6532 0030 002B     	 cmp r3,#0
 6533 0032 01D0     	 beq .L442
1583:../Libraries/XMCLib/src/xmc4_scu.c ****       {
1584:../Libraries/XMCLib/src/xmc4_scu.c ****           (event_handler)();
 6534              	 .loc 3 1584 0
 6535 0034 FB68     	 ldr r3,[r7,#12]
 6536 0036 9847     	 blx r3
 6537              	.L442:
1585:../Libraries/XMCLib/src/xmc4_scu.c ****       }
1586:../Libraries/XMCLib/src/xmc4_scu.c ****       
1587:../Libraries/XMCLib/src/xmc4_scu.c ****       XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 6538              	 .loc 3 1587 0
 6539 0038 7B69     	 ldr r3,[r7,#20]
 6540 003a 0122     	 movs r2,#1
 6541 003c 02FA03F3 	 lsl r3,r2,r3
 6542 0040 1846     	 mov r0,r3
 6543 0042 FFF7FEFF 	 bl XMC_SCU_INTERRUPT_ClearEventStatus
1588:../Libraries/XMCLib/src/xmc4_scu.c ****       
1589:../Libraries/XMCLib/src/xmc4_scu.c ****       break;
 6544              	 .loc 3 1589 0
 6545 0046 05E0     	 b .L439
 6546              	.L441:
1590:../Libraries/XMCLib/src/xmc4_scu.c ****     }   
1591:../Libraries/XMCLib/src/xmc4_scu.c ****     index++;    
 6547              	 .loc 3 1591 0
 6548 0048 7B69     	 ldr r3,[r7,#20]
 6549 004a 0133     	 adds r3,r3,#1
 6550 004c 7B61     	 str r3,[r7,#20]
 6551              	.L440:
1577:../Libraries/XMCLib/src/xmc4_scu.c ****   {    
 6552              	 .loc 3 1577 0
 6553 004e 7B69     	 ldr r3,[r7,#20]
 6554 0050 1F2B     	 cmp r3,#31
 6555 0052 DFD9     	 bls .L444
 6556              	.L439:
1592:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1593:../Libraries/XMCLib/src/xmc4_scu.c **** }
 6557              	 .loc 3 1593 0
 6558 0054 1837     	 adds r7,r7,#24
 6559              	.LCFI566:
 6560              	 .cfi_def_cfa_offset 8
 6561 0056 BD46     	 mov sp,r7
 6562              	.LCFI567:
 6563              	 .cfi_def_cfa_register 13
 6564              	 
 6565 0058 80BD     	 pop {r7,pc}
 6566              	.L446:
 6567 005a 00BF     	 .align 2
 6568              	.L445:
 6569 005c 00000000 	 .word event_handler_list
 6570              	 .cfi_endproc
 6571              	.LFE264:
 6573              	 .text
 6574              	.Letext0:
 6575              	 .file 5 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 6576              	 .file 6 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 6577              	 .file 7 "E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Infineon/XMC4300_series/Include/XMC4300.h"
 6578              	 .file 8 "E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Include/core_cm4.h"
 6579              	 .file 9 "E:/xmc_1124/XMC4300_Relax_EtherCat_APP_Slave_SSC/Libraries/CMSIS/Infineon/XMC4300_series/Include/system_XMC4300.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc4_scu.c
    {standard input}:20     .text.XMC_SCU_CLOCK_GetUsbClockSource:00000000 $t
    {standard input}:24     .text.XMC_SCU_CLOCK_GetUsbClockSource:00000000 XMC_SCU_CLOCK_GetUsbClockSource
    {standard input}:57     .text.XMC_SCU_CLOCK_GetUsbClockSource:00000018 $d
    {standard input}:62     .text.XMC_SCU_CLOCK_GetWdtClockSource:00000000 $t
    {standard input}:66     .text.XMC_SCU_CLOCK_GetWdtClockSource:00000000 XMC_SCU_CLOCK_GetWdtClockSource
    {standard input}:98     .text.XMC_SCU_CLOCK_GetWdtClockSource:00000018 $d
    {standard input}:103    .text.XMC_SCU_CLOCK_GetExternalOutputClockSource:00000000 $t
    {standard input}:107    .text.XMC_SCU_CLOCK_GetExternalOutputClockSource:00000000 XMC_SCU_CLOCK_GetExternalOutputClockSource
    {standard input}:141    .text.XMC_SCU_CLOCK_GetExternalOutputClockSource:0000001c $d
    {standard input}:146    .text.XMC_SCU_CLOCK_GetECATClockDivider:00000000 $t
    {standard input}:150    .text.XMC_SCU_CLOCK_GetECATClockDivider:00000000 XMC_SCU_CLOCK_GetECATClockDivider
    {standard input}:182    .text.XMC_SCU_CLOCK_GetECATClockDivider:00000018 $d
    {standard input}:187    .text.XMC_SCU_CLOCK_GetSystemClockFrequency:00000000 $t
    {standard input}:191    .text.XMC_SCU_CLOCK_GetSystemClockFrequency:00000000 XMC_SCU_CLOCK_GetSystemClockFrequency
    {standard input}:226    .text.XMC_SCU_CLOCK_GetSystemClockFrequency:00000020 $d
    {standard input}:232    .text.XMC_SCU_CLOCK_GetCpuClockFrequency:00000000 $t
    {standard input}:236    .text.XMC_SCU_CLOCK_GetCpuClockFrequency:00000000 XMC_SCU_CLOCK_GetCpuClockFrequency
    {standard input}:268    .text.XMC_SCU_CLOCK_GetCpuClockFrequency:00000014 $d
                            *COM*:00000080 event_handler_list
    {standard input}:274    .text.XMC_SCU_lDelay:00000000 $t
    {standard input}:278    .text.XMC_SCU_lDelay:00000000 XMC_SCU_lDelay
    {standard input}:345    .text.XMC_SCU_lDelay:0000003c $d
    {standard input}:351    .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 $t
    {standard input}:356    .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 XMC_SCU_INTERRUPT_EnableEvent
    {standard input}:397    .text.XMC_SCU_INTERRUPT_EnableEvent:00000020 $d
    {standard input}:402    .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 $t
    {standard input}:407    .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 XMC_SCU_INTERRUPT_DisableEvent
    {standard input}:449    .text.XMC_SCU_INTERRUPT_DisableEvent:00000020 $d
    {standard input}:454    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 $t
    {standard input}:459    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 XMC_SCU_INTERRUPT_TriggerEvent
    {standard input}:500    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000020 $d
    {standard input}:505    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 $t
    {standard input}:510    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 XMC_SCU_INTERUPT_GetEventStatus
    {standard input}:541    .text.XMC_SCU_INTERUPT_GetEventStatus:00000014 $d
    {standard input}:546    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 $t
    {standard input}:551    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 XMC_SCU_INTERRUPT_ClearEventStatus
    {standard input}:589    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000018 $d
    {standard input}:594    .text.XMC_SCU_GetBootMode:00000000 $t
    {standard input}:599    .text.XMC_SCU_GetBootMode:00000000 XMC_SCU_GetBootMode
    {standard input}:631    .text.XMC_SCU_GetBootMode:00000018 $d
    {standard input}:636    .text.XMC_SCU_SetBootMode:00000000 $t
    {standard input}:641    .text.XMC_SCU_SetBootMode:00000000 XMC_SCU_SetBootMode
    {standard input}:680    .text.XMC_SCU_SetBootMode:0000001c $d
    {standard input}:685    .text.XMC_SCU_ReadGPR:00000000 $t
    {standard input}:690    .text.XMC_SCU_ReadGPR:00000000 XMC_SCU_ReadGPR
    {standard input}:732    .text.XMC_SCU_ReadGPR:00000020 $d
    {standard input}:737    .text.XMC_SCU_WriteGPR:00000000 $t
    {standard input}:742    .text.XMC_SCU_WriteGPR:00000000 XMC_SCU_WriteGPR
    {standard input}:785    .text.XMC_SCU_WriteGPR:00000024 $d
    {standard input}:790    .text.XMC_SCU_EnableOutOfRangeComparator:00000000 $t
    {standard input}:795    .text.XMC_SCU_EnableOutOfRangeComparator:00000000 XMC_SCU_EnableOutOfRangeComparator
    {standard input}:843    .text.XMC_SCU_EnableOutOfRangeComparator:00000034 $d
    {standard input}:848    .text.XMC_SCU_DisableOutOfRangeComparator:00000000 $t
    {standard input}:853    .text.XMC_SCU_DisableOutOfRangeComparator:00000000 XMC_SCU_DisableOutOfRangeComparator
    {standard input}:902    .text.XMC_SCU_DisableOutOfRangeComparator:00000034 $d
    {standard input}:907    .text.XMC_SCU_CalibrateTemperatureSensor:00000000 $t
    {standard input}:912    .text.XMC_SCU_CalibrateTemperatureSensor:00000000 XMC_SCU_CalibrateTemperatureSensor
    {standard input}:960    .text.XMC_SCU_CalibrateTemperatureSensor:00000028 $d
    {standard input}:965    .text.XMC_SCU_EnableTemperatureSensor:00000000 $t
    {standard input}:970    .text.XMC_SCU_EnableTemperatureSensor:00000000 XMC_SCU_EnableTemperatureSensor
    {standard input}:1003   .text.XMC_SCU_EnableTemperatureSensor:0000001c $d
    {standard input}:1008   .text.XMC_SCU_DisableTemperatureSensor:00000000 $t
    {standard input}:1013   .text.XMC_SCU_DisableTemperatureSensor:00000000 XMC_SCU_DisableTemperatureSensor
    {standard input}:1046   .text.XMC_SCU_DisableTemperatureSensor:0000001c $d
    {standard input}:1051   .text.XMC_SCU_IsTemperatureSensorEnabled:00000000 $t
    {standard input}:1056   .text.XMC_SCU_IsTemperatureSensorEnabled:00000000 XMC_SCU_IsTemperatureSensorEnabled
    {standard input}:1093   .text.XMC_SCU_IsTemperatureSensorEnabled:00000024 $d
    {standard input}:1098   .text.XMC_SCU_IsTemperatureSensorReady:00000000 $t
    {standard input}:1103   .text.XMC_SCU_IsTemperatureSensorReady:00000000 XMC_SCU_IsTemperatureSensorReady
    {standard input}:1140   .text.XMC_SCU_IsTemperatureSensorReady:00000024 $d
    {standard input}:1145   .text.XMC_SCU_StartTemperatureMeasurement:00000000 $t
    {standard input}:1150   .text.XMC_SCU_StartTemperatureMeasurement:00000000 XMC_SCU_StartTemperatureMeasurement
    {standard input}:1281   .text.XMC_SCU_IsTemperatureSensorBusy:00000000 XMC_SCU_IsTemperatureSensorBusy
    {standard input}:1211   .text.XMC_SCU_StartTemperatureMeasurement:00000048 $d
    {standard input}:1216   .text.XMC_SCU_GetTemperatureMeasurement:00000000 $t
    {standard input}:1221   .text.XMC_SCU_GetTemperatureMeasurement:00000000 XMC_SCU_GetTemperatureMeasurement
    {standard input}:1271   .text.XMC_SCU_GetTemperatureMeasurement:00000034 $d
    {standard input}:1276   .text.XMC_SCU_IsTemperatureSensorBusy:00000000 $t
    {standard input}:1318   .text.XMC_SCU_IsTemperatureSensorBusy:00000024 $d
    {standard input}:1323   .text.XMC_SCU_WriteToRetentionMemory:00000000 $t
    {standard input}:1328   .text.XMC_SCU_WriteToRetentionMemory:00000000 XMC_SCU_WriteToRetentionMemory
    {standard input}:1389   .text.XMC_SCU_WriteToRetentionMemory:00000048 $d
    {standard input}:1394   .text.XMC_SCU_ReadFromRetentionMemory:00000000 $t
    {standard input}:1399   .text.XMC_SCU_ReadFromRetentionMemory:00000000 XMC_SCU_ReadFromRetentionMemory
    {standard input}:1459   .text.XMC_SCU_ReadFromRetentionMemory:00000044 $d
    {standard input}:1464   .text.XMC_SCU_CLOCK_Init:00000000 $t
    {standard input}:1469   .text.XMC_SCU_CLOCK_Init:00000000 XMC_SCU_CLOCK_Init
    {standard input}:3074   .text.XMC_SCU_CLOCK_SetSystemClockSource:00000000 XMC_SCU_CLOCK_SetSystemClockSource
    {standard input}:4795   .text.XMC_SCU_HIB_EnableHibernateDomain:00000000 XMC_SCU_HIB_EnableHibernateDomain
    {standard input}:5679   .text.XMC_SCU_CLOCK_EnableLowPowerOscillator:00000000 XMC_SCU_CLOCK_EnableLowPowerOscillator
    {standard input}:3416   .text.XMC_SCU_HIB_SetStandbyClockSource:00000000 XMC_SCU_HIB_SetStandbyClockSource
    {standard input}:4596   .text.XMC_SCU_CLOCK_SetBackupClockCalibrationMode:00000000 XMC_SCU_CLOCK_SetBackupClockCalibrationMode
    {standard input}:3481   .text.XMC_SCU_CLOCK_SetSystemClockDivider:00000000 XMC_SCU_CLOCK_SetSystemClockDivider
    {standard input}:3591   .text.XMC_SCU_CLOCK_SetCpuClockDivider:00000000 XMC_SCU_CLOCK_SetCpuClockDivider
    {standard input}:3536   .text.XMC_SCU_CLOCK_SetCcuClockDivider:00000000 XMC_SCU_CLOCK_SetCcuClockDivider
    {standard input}:3646   .text.XMC_SCU_CLOCK_SetPeripheralClockDivider:00000000 XMC_SCU_CLOCK_SetPeripheralClockDivider
    {standard input}:5817   .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillator:00000000 XMC_SCU_CLOCK_EnableHighPerformanceOscillator
    {standard input}:5975   .text.XMC_SCU_CLOCK_DisableSystemPll:00000000 XMC_SCU_CLOCK_DisableSystemPll
    {standard input}:5931   .text.XMC_SCU_CLOCK_EnableSystemPll:00000000 XMC_SCU_CLOCK_EnableSystemPll
    {standard input}:6019   .text.XMC_SCU_CLOCK_StartSystemPll:00000000 XMC_SCU_CLOCK_StartSystemPll
    {standard input}:1601   .text.XMC_SCU_TRAP_Enable:00000000 $t
    {standard input}:1606   .text.XMC_SCU_TRAP_Enable:00000000 XMC_SCU_TRAP_Enable
    {standard input}:1648   .text.XMC_SCU_TRAP_Enable:00000020 $d
    {standard input}:1653   .text.XMC_SCU_TRAP_Disable:00000000 $t
    {standard input}:1658   .text.XMC_SCU_TRAP_Disable:00000000 XMC_SCU_TRAP_Disable
    {standard input}:1699   .text.XMC_SCU_TRAP_Disable:00000020 $d
    {standard input}:1704   .text.XMC_SCU_TRAP_GetStatus:00000000 $t
    {standard input}:1709   .text.XMC_SCU_TRAP_GetStatus:00000000 XMC_SCU_TRAP_GetStatus
    {standard input}:1740   .text.XMC_SCU_TRAP_GetStatus:00000014 $d
    {standard input}:1745   .text.XMC_SCU_TRAP_Trigger:00000000 $t
    {standard input}:1750   .text.XMC_SCU_TRAP_Trigger:00000000 XMC_SCU_TRAP_Trigger
    {standard input}:1788   .text.XMC_SCU_TRAP_Trigger:00000018 $d
    {standard input}:1793   .text.XMC_SCU_TRAP_ClearStatus:00000000 $t
    {standard input}:1798   .text.XMC_SCU_TRAP_ClearStatus:00000000 XMC_SCU_TRAP_ClearStatus
    {standard input}:1836   .text.XMC_SCU_TRAP_ClearStatus:00000018 $d
    {standard input}:1841   .text.XMC_SCU_PARITY_ClearStatus:00000000 $t
    {standard input}:1846   .text.XMC_SCU_PARITY_ClearStatus:00000000 XMC_SCU_PARITY_ClearStatus
    {standard input}:1887   .text.XMC_SCU_PARITY_ClearStatus:00000020 $d
    {standard input}:1892   .text.XMC_SCU_PARITY_GetStatus:00000000 $t
    {standard input}:1897   .text.XMC_SCU_PARITY_GetStatus:00000000 XMC_SCU_PARITY_GetStatus
    {standard input}:1928   .text.XMC_SCU_PARITY_GetStatus:00000014 $d
    {standard input}:1933   .text.XMC_SCU_PARITY_Enable:00000000 $t
    {standard input}:1938   .text.XMC_SCU_PARITY_Enable:00000000 XMC_SCU_PARITY_Enable
    {standard input}:1979   .text.XMC_SCU_PARITY_Enable:00000020 $d
    {standard input}:1984   .text.XMC_SCU_PARITY_Disable:00000000 $t
    {standard input}:1989   .text.XMC_SCU_PARITY_Disable:00000000 XMC_SCU_PARITY_Disable
    {standard input}:2031   .text.XMC_SCU_PARITY_Disable:00000020 $d
    {standard input}:2036   .text.XMC_SCU_PARITY_EnableTrapGeneration:00000000 $t
    {standard input}:2041   .text.XMC_SCU_PARITY_EnableTrapGeneration:00000000 XMC_SCU_PARITY_EnableTrapGeneration
    {standard input}:2082   .text.XMC_SCU_PARITY_EnableTrapGeneration:00000020 $d
    {standard input}:2087   .text.XMC_SCU_PARITY_DisableTrapGeneration:00000000 $t
    {standard input}:2092   .text.XMC_SCU_PARITY_DisableTrapGeneration:00000000 XMC_SCU_PARITY_DisableTrapGeneration
    {standard input}:2134   .text.XMC_SCU_PARITY_DisableTrapGeneration:00000020 $d
    {standard input}:2139   .text.XMC_SCU_INTERRUPT_EnableNmiRequest:00000000 $t
    {standard input}:2144   .text.XMC_SCU_INTERRUPT_EnableNmiRequest:00000000 XMC_SCU_INTERRUPT_EnableNmiRequest
    {standard input}:2185   .text.XMC_SCU_INTERRUPT_EnableNmiRequest:00000020 $d
    {standard input}:2190   .text.XMC_SCU_INTERRUPT_DisableNmiRequest:00000000 $t
    {standard input}:2195   .text.XMC_SCU_INTERRUPT_DisableNmiRequest:00000000 XMC_SCU_INTERRUPT_DisableNmiRequest
    {standard input}:2237   .text.XMC_SCU_INTERRUPT_DisableNmiRequest:00000020 $d
    {standard input}:2242   .text.XMC_SCU_RESET_AssertPeripheralReset:00000000 $t
    {standard input}:2247   .text.XMC_SCU_RESET_AssertPeripheralReset:00000000 XMC_SCU_RESET_AssertPeripheralReset
    {standard input}:2300   .text.XMC_SCU_RESET_AssertPeripheralReset:00000034 $d
    {standard input}:2305   .text.XMC_SCU_RESET_DeassertPeripheralReset:00000000 $t
    {standard input}:2310   .text.XMC_SCU_RESET_DeassertPeripheralReset:00000000 XMC_SCU_RESET_DeassertPeripheralReset
    {standard input}:2363   .text.XMC_SCU_RESET_DeassertPeripheralReset:00000034 $d
    {standard input}:2368   .text.XMC_SCU_RESET_IsPeripheralResetAsserted:00000000 $t
    {standard input}:2373   .text.XMC_SCU_RESET_IsPeripheralResetAsserted:00000000 XMC_SCU_RESET_IsPeripheralResetAsserted
    {standard input}:2433   .text.XMC_SCU_RESET_IsPeripheralResetAsserted:00000044 $d
    {standard input}:2438   .text.XMC_SCU_CLOCK_GetSystemPllClockFrequency:00000000 $t
    {standard input}:2443   .text.XMC_SCU_CLOCK_GetSystemPllClockFrequency:00000000 XMC_SCU_CLOCK_GetSystemPllClockFrequency
    {standard input}:2536   .text.XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency:00000000 XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency
    {standard input}:2526   .text.XMC_SCU_CLOCK_GetSystemPllClockFrequency:00000078 $d
    {standard input}:2531   .text.XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency:00000000 $t
    {standard input}:2583   .text.XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency:00000028 $d
    {standard input}:2589   .text.XMC_SCU_CLOCK_GetUsbPllClockFrequency:00000000 $t
    {standard input}:2594   .text.XMC_SCU_CLOCK_GetUsbPllClockFrequency:00000000 XMC_SCU_CLOCK_GetUsbPllClockFrequency
    {standard input}:2658   .text.XMC_SCU_CLOCK_GetUsbPllClockFrequency:00000050 $d
    {standard input}:2663   .text.XMC_SCU_CLOCK_GetCcuClockFrequency:00000000 $t
    {standard input}:2668   .text.XMC_SCU_CLOCK_GetCcuClockFrequency:00000000 XMC_SCU_CLOCK_GetCcuClockFrequency
    {standard input}:2710   .text.XMC_SCU_CLOCK_GetCcuClockFrequency:00000028 $d
    {standard input}:2715   .text.XMC_SCU_CLOCK_GetUsbClockFrequency:00000000 $t
    {standard input}:2720   .text.XMC_SCU_CLOCK_GetUsbClockFrequency:00000000 XMC_SCU_CLOCK_GetUsbClockFrequency
    {standard input}:2782   .text.XMC_SCU_CLOCK_GetUsbClockFrequency:00000044 $d
    {standard input}:2787   .text.XMC_SCU_CLOCK_GetECATClockFrequency:00000000 $t
    {standard input}:2792   .text.XMC_SCU_CLOCK_GetECATClockFrequency:00000000 XMC_SCU_CLOCK_GetECATClockFrequency
    {standard input}:2843   .text.XMC_SCU_CLOCK_GetECATClockFrequency:00000038 $d
    {standard input}:2848   .text.XMC_SCU_CLOCK_GetWdtClockFrequency:00000000 $t
    {standard input}:2853   .text.XMC_SCU_CLOCK_GetWdtClockFrequency:00000000 XMC_SCU_CLOCK_GetWdtClockFrequency
    {standard input}:2924   .text.XMC_SCU_CLOCK_GetWdtClockFrequency:00000050 $d
    {standard input}:2930   .text.XMC_SCU_CLOCK_GetExternalOutputClockFrequency:00000000 $t
    {standard input}:2935   .text.XMC_SCU_CLOCK_GetExternalOutputClockFrequency:00000000 XMC_SCU_CLOCK_GetExternalOutputClockFrequency
    {standard input}:3024   .text.XMC_SCU_CLOCK_GetExternalOutputClockFrequency:0000006c $d
    {standard input}:3030   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 $t
    {standard input}:3035   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 XMC_SCU_CLOCK_GetPeripheralClockFrequency
    {standard input}:3064   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:0000001c $d
    {standard input}:3069   .text.XMC_SCU_CLOCK_SetSystemClockSource:00000000 $t
    {standard input}:3116   .text.XMC_SCU_CLOCK_SetSystemClockSource:00000024 $d
    {standard input}:3121   .text.XMC_SCU_CLOCK_SetUsbClockSource:00000000 $t
    {standard input}:3126   .text.XMC_SCU_CLOCK_SetUsbClockSource:00000000 XMC_SCU_CLOCK_SetUsbClockSource
    {standard input}:3168   .text.XMC_SCU_CLOCK_SetUsbClockSource:00000024 $d
    {standard input}:3173   .text.XMC_SCU_CLOCK_SetWdtClockSource:00000000 $t
    {standard input}:3178   .text.XMC_SCU_CLOCK_SetWdtClockSource:00000000 XMC_SCU_CLOCK_SetWdtClockSource
    {standard input}:3220   .text.XMC_SCU_CLOCK_SetWdtClockSource:00000024 $d
    {standard input}:3225   .text.XMC_SCU_CLOCK_SetExternalOutputClockSource:00000000 $t
    {standard input}:3230   .text.XMC_SCU_CLOCK_SetExternalOutputClockSource:00000000 XMC_SCU_CLOCK_SetExternalOutputClockSource
    {standard input}:3275   .text.XMC_SCU_CLOCK_SetExternalOutputClockSource:00000024 $d
    {standard input}:3280   .text.XMC_SCU_CLOCK_SetSystemPllClockSource:00000000 $t
    {standard input}:3285   .text.XMC_SCU_CLOCK_SetSystemPllClockSource:00000000 XMC_SCU_CLOCK_SetSystemPllClockSource
    {standard input}:3341   .text.XMC_SCU_CLOCK_SetSystemPllClockSource:0000003c $d
    {standard input}:3346   .text.XMC_SCU_HIB_SetRtcClockSource:00000000 $t
    {standard input}:3351   .text.XMC_SCU_HIB_SetRtcClockSource:00000000 XMC_SCU_HIB_SetRtcClockSource
    {standard input}:3405   .text.XMC_SCU_HIB_SetRtcClockSource:00000034 $d
    {standard input}:3411   .text.XMC_SCU_HIB_SetStandbyClockSource:00000000 $t
    {standard input}:3470   .text.XMC_SCU_HIB_SetStandbyClockSource:00000034 $d
    {standard input}:3476   .text.XMC_SCU_CLOCK_SetSystemClockDivider:00000000 $t
    {standard input}:3526   .text.XMC_SCU_CLOCK_SetSystemClockDivider:00000024 $d
    {standard input}:3531   .text.XMC_SCU_CLOCK_SetCcuClockDivider:00000000 $t
    {standard input}:3581   .text.XMC_SCU_CLOCK_SetCcuClockDivider:00000024 $d
    {standard input}:3586   .text.XMC_SCU_CLOCK_SetCpuClockDivider:00000000 $t
    {standard input}:3636   .text.XMC_SCU_CLOCK_SetCpuClockDivider:00000024 $d
    {standard input}:3641   .text.XMC_SCU_CLOCK_SetPeripheralClockDivider:00000000 $t
    {standard input}:3691   .text.XMC_SCU_CLOCK_SetPeripheralClockDivider:00000024 $d
    {standard input}:3696   .text.XMC_SCU_CLOCK_SetUsbClockDivider:00000000 $t
    {standard input}:3701   .text.XMC_SCU_CLOCK_SetUsbClockDivider:00000000 XMC_SCU_CLOCK_SetUsbClockDivider
    {standard input}:3746   .text.XMC_SCU_CLOCK_SetUsbClockDivider:00000024 $d
    {standard input}:3751   .text.XMC_SCU_CLOCK_SetWdtClockDivider:00000000 $t
    {standard input}:3756   .text.XMC_SCU_CLOCK_SetWdtClockDivider:00000000 XMC_SCU_CLOCK_SetWdtClockDivider
    {standard input}:3801   .text.XMC_SCU_CLOCK_SetWdtClockDivider:00000024 $d
    {standard input}:3806   .text.XMC_SCU_CLOCK_SetExternalOutputClockDivider:00000000 $t
    {standard input}:3811   .text.XMC_SCU_CLOCK_SetExternalOutputClockDivider:00000000 XMC_SCU_CLOCK_SetExternalOutputClockDivider
    {standard input}:3858   .text.XMC_SCU_CLOCK_SetExternalOutputClockDivider:0000002c $d
    {standard input}:3863   .text.XMC_SCU_CLOCK_SetECATClockDivider:00000000 $t
    {standard input}:3868   .text.XMC_SCU_CLOCK_SetECATClockDivider:00000000 XMC_SCU_CLOCK_SetECATClockDivider
    {standard input}:3913   .text.XMC_SCU_CLOCK_SetECATClockDivider:00000024 $d
    {standard input}:3918   .text.XMC_SCU_CLOCK_EnableClock:00000000 $t
    {standard input}:3923   .text.XMC_SCU_CLOCK_EnableClock:00000000 XMC_SCU_CLOCK_EnableClock
    {standard input}:3962   .text.XMC_SCU_CLOCK_EnableClock:0000001c $d
    {standard input}:3967   .text.XMC_SCU_CLOCK_DisableClock:00000000 $t
    {standard input}:3972   .text.XMC_SCU_CLOCK_DisableClock:00000000 XMC_SCU_CLOCK_DisableClock
    {standard input}:4011   .text.XMC_SCU_CLOCK_DisableClock:0000001c $d
    {standard input}:4016   .text.XMC_SCU_CLOCK_IsClockEnabled:00000000 $t
    {standard input}:4021   .text.XMC_SCU_CLOCK_IsClockEnabled:00000000 XMC_SCU_CLOCK_IsClockEnabled
    {standard input}:4067   .text.XMC_SCU_CLOCK_IsClockEnabled:00000028 $d
    {standard input}:4072   .text.XMC_SCU_CLOCK_GatePeripheralClock:00000000 $t
    {standard input}:4077   .text.XMC_SCU_CLOCK_GatePeripheralClock:00000000 XMC_SCU_CLOCK_GatePeripheralClock
    {standard input}:4130   .text.XMC_SCU_CLOCK_GatePeripheralClock:00000034 $d
    {standard input}:4135   .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000000 $t
    {standard input}:4140   .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000000 XMC_SCU_CLOCK_UngatePeripheralClock
    {standard input}:4193   .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000034 $d
    {standard input}:4198   .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000000 $t
    {standard input}:4203   .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000000 XMC_SCU_CLOCK_IsPeripheralClockGated
    {standard input}:4263   .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000044 $d
    {standard input}:4268   .text.XMC_SCU_POWER_GetEVR13Voltage:00000000 $t
    {standard input}:4273   .text.XMC_SCU_POWER_GetEVR13Voltage:00000000 XMC_SCU_POWER_GetEVR13Voltage
    {standard input}:4310   .text.XMC_SCU_POWER_GetEVR13Voltage:00000028 $d
    {standard input}:4316   .text.XMC_SCU_POWER_GetEVR33Voltage:00000000 $t
    {standard input}:4321   .text.XMC_SCU_POWER_GetEVR33Voltage:00000000 XMC_SCU_POWER_GetEVR33Voltage
    {standard input}:4359   .text.XMC_SCU_POWER_GetEVR33Voltage:0000002c $d
    {standard input}:4365   .text.XMC_SCU_CLOCK_EnableUsbPll:00000000 $t
    {standard input}:4370   .text.XMC_SCU_CLOCK_EnableUsbPll:00000000 XMC_SCU_CLOCK_EnableUsbPll
    {standard input}:4404   .text.XMC_SCU_CLOCK_EnableUsbPll:0000001c $d
    {standard input}:4409   .text.XMC_SCU_CLOCK_DisableUsbPll:00000000 $t
    {standard input}:4414   .text.XMC_SCU_CLOCK_DisableUsbPll:00000000 XMC_SCU_CLOCK_DisableUsbPll
    {standard input}:4448   .text.XMC_SCU_CLOCK_DisableUsbPll:0000001c $d
    {standard input}:4453   .text.XMC_SCU_CLOCK_StartUsbPll:00000000 $t
    {standard input}:4458   .text.XMC_SCU_CLOCK_StartUsbPll:00000000 XMC_SCU_CLOCK_StartUsbPll
    {standard input}:4544   .text.XMC_SCU_CLOCK_StartUsbPll:00000070 $d
    {standard input}:4549   .text.XMC_SCU_CLOCK_StopUsbPll:00000000 $t
    {standard input}:4554   .text.XMC_SCU_CLOCK_StopUsbPll:00000000 XMC_SCU_CLOCK_StopUsbPll
    {standard input}:4585   .text.XMC_SCU_CLOCK_StopUsbPll:00000014 $d
    {standard input}:4591   .text.XMC_SCU_CLOCK_SetBackupClockCalibrationMode:00000000 $t
    {standard input}:4656   .text.XMC_SCU_CLOCK_SetBackupClockCalibrationMode:00000048 $d
    {standard input}:4661   .text.XMC_SCU_POWER_EnableUsb:00000000 $t
    {standard input}:4666   .text.XMC_SCU_POWER_EnableUsb:00000000 XMC_SCU_POWER_EnableUsb
    {standard input}:4697   .text.XMC_SCU_POWER_EnableUsb:00000014 $d
    {standard input}:4702   .text.XMC_SCU_POWER_DisableUsb:00000000 $t
    {standard input}:4707   .text.XMC_SCU_POWER_DisableUsb:00000000 XMC_SCU_POWER_DisableUsb
    {standard input}:4738   .text.XMC_SCU_POWER_DisableUsb:00000014 $d
    {standard input}:4743   .text.XMC_SCU_CLOCK_IsUsbPllLocked:00000000 $t
    {standard input}:4748   .text.XMC_SCU_CLOCK_IsUsbPllLocked:00000000 XMC_SCU_CLOCK_IsUsbPllLocked
    {standard input}:4785   .text.XMC_SCU_CLOCK_IsUsbPllLocked:00000020 $d
    {standard input}:4790   .text.XMC_SCU_HIB_EnableHibernateDomain:00000000 $t
    {standard input}:4862   .text.XMC_SCU_HIB_EnableHibernateDomain:00000050 $d
    {standard input}:4868   .text.XMC_SCU_HIB_DisableHibernateDomain:00000000 $t
    {standard input}:4873   .text.XMC_SCU_HIB_DisableHibernateDomain:00000000 XMC_SCU_HIB_DisableHibernateDomain
    {standard input}:4908   .text.XMC_SCU_HIB_DisableHibernateDomain:0000001c $d
    {standard input}:4914   .text.XMC_SCU_HIB_IsHibernateDomainEnabled:00000000 $t
    {standard input}:4919   .text.XMC_SCU_HIB_IsHibernateDomainEnabled:00000000 XMC_SCU_HIB_IsHibernateDomainEnabled
    {standard input}:4970   .text.XMC_SCU_HIB_IsHibernateDomainEnabled:00000034 $d
    {standard input}:4976   .text.XMC_SCU_HIB_EnableInternalSlowClock:00000000 $t
    {standard input}:4981   .text.XMC_SCU_HIB_EnableInternalSlowClock:00000000 XMC_SCU_HIB_EnableInternalSlowClock
    {standard input}:5023   .text.XMC_SCU_HIB_EnableInternalSlowClock:00000028 $d
    {standard input}:5029   .text.XMC_SCU_HIB_DisableInternalSlowClock:00000000 $t
    {standard input}:5034   .text.XMC_SCU_HIB_DisableInternalSlowClock:00000000 XMC_SCU_HIB_DisableInternalSlowClock
    {standard input}:5076   .text.XMC_SCU_HIB_DisableInternalSlowClock:00000028 $d
    {standard input}:5082   .text.XMC_SCU_HIB_ClearEventStatus:00000000 $t
    {standard input}:5087   .text.XMC_SCU_HIB_ClearEventStatus:00000000 XMC_SCU_HIB_ClearEventStatus
    {standard input}:5134   .text.XMC_SCU_HIB_ClearEventStatus:00000028 $d
    {standard input}:5140   .text.XMC_SCU_HIB_TriggerEvent:00000000 $t
    {standard input}:5145   .text.XMC_SCU_HIB_TriggerEvent:00000000 XMC_SCU_HIB_TriggerEvent
    {standard input}:5192   .text.XMC_SCU_HIB_TriggerEvent:00000028 $d
    {standard input}:5198   .text.XMC_SCU_HIB_EnableEvent:00000000 $t
    {standard input}:5203   .text.XMC_SCU_HIB_EnableEvent:00000000 XMC_SCU_HIB_EnableEvent
    {standard input}:5253   .text.XMC_SCU_HIB_EnableEvent:00000030 $d
    {standard input}:5259   .text.XMC_SCU_HIB_DisableEvent:00000000 $t
    {standard input}:5264   .text.XMC_SCU_HIB_DisableEvent:00000000 XMC_SCU_HIB_DisableEvent
    {standard input}:5315   .text.XMC_SCU_HIB_DisableEvent:00000030 $d
    {standard input}:5321   .text.XMC_SCU_HIB_EnterHibernateState:00000000 $t
    {standard input}:5326   .text.XMC_SCU_HIB_EnterHibernateState:00000000 XMC_SCU_HIB_EnterHibernateState
    {standard input}:5368   .text.XMC_SCU_HIB_EnterHibernateState:00000028 $d
    {standard input}:5374   .text.XMC_SCU_HIB_SetWakeupTriggerInput:00000000 $t
    {standard input}:5379   .text.XMC_SCU_HIB_SetWakeupTriggerInput:00000000 XMC_SCU_HIB_SetWakeupTriggerInput
    {standard input}:5442   .text.XMC_SCU_HIB_SetWakeupTriggerInput:00000044 $d
    {standard input}:5448   .text.XMC_SCU_HIB_SetPinMode:00000000 $t
    {standard input}:5453   .text.XMC_SCU_HIB_SetPinMode:00000000 XMC_SCU_HIB_SetPinMode
    {standard input}:5520   .text.XMC_SCU_HIB_SetPinMode:0000004c $d
    {standard input}:5526   .text.XMC_SCU_HIB_SetPinOutputLevel:00000000 $t
    {standard input}:5531   .text.XMC_SCU_HIB_SetPinOutputLevel:00000000 XMC_SCU_HIB_SetPinOutputLevel
    {standard input}:5594   .text.XMC_SCU_HIB_SetPinOutputLevel:0000004c $d
    {standard input}:5600   .text.XMC_SCU_HIB_SetInput0:00000000 $t
    {standard input}:5605   .text.XMC_SCU_HIB_SetInput0:00000000 XMC_SCU_HIB_SetInput0
    {standard input}:5668   .text.XMC_SCU_HIB_SetInput0:00000044 $d
    {standard input}:5674   .text.XMC_SCU_CLOCK_EnableLowPowerOscillator:00000000 $t
    {standard input}:5753   .text.XMC_SCU_CLOCK_EnableLowPowerOscillator:0000006c $d
    {standard input}:5759   .text.XMC_SCU_CLOCK_DisableLowPowerOscillator:00000000 $t
    {standard input}:5764   .text.XMC_SCU_CLOCK_DisableLowPowerOscillator:00000000 XMC_SCU_CLOCK_DisableLowPowerOscillator
    {standard input}:5806   .text.XMC_SCU_CLOCK_DisableLowPowerOscillator:00000028 $d
    {standard input}:5812   .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillator:00000000 $t
    {standard input}:5876   .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillator:00000054 $d
    {standard input}:5883   .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillator:00000000 $t
    {standard input}:5888   .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillator:00000000 XMC_SCU_CLOCK_DisableHighPerformanceOscillator
    {standard input}:5921   .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillator:00000018 $d
    {standard input}:5926   .text.XMC_SCU_CLOCK_EnableSystemPll:00000000 $t
    {standard input}:5965   .text.XMC_SCU_CLOCK_EnableSystemPll:0000001c $d
    {standard input}:5970   .text.XMC_SCU_CLOCK_DisableSystemPll:00000000 $t
    {standard input}:6009   .text.XMC_SCU_CLOCK_DisableSystemPll:0000001c $d
    {standard input}:6014   .text.XMC_SCU_CLOCK_StartSystemPll:00000000 $t
    {standard input}:6300   .text.XMC_SCU_CLOCK_StepSystemPllFrequency:00000000 XMC_SCU_CLOCK_StepSystemPllFrequency
    {standard input}:6242   .text.XMC_SCU_CLOCK_StartSystemPll:00000188 $d
    {standard input}:6252   .text.XMC_SCU_CLOCK_StopSystemPll:00000000 $t
    {standard input}:6257   .text.XMC_SCU_CLOCK_StopSystemPll:00000000 XMC_SCU_CLOCK_StopSystemPll
    {standard input}:6290   .text.XMC_SCU_CLOCK_StopSystemPll:00000018 $d
    {standard input}:6295   .text.XMC_SCU_CLOCK_StepSystemPllFrequency:00000000 $t
    {standard input}:6345   .text.XMC_SCU_CLOCK_StepSystemPllFrequency:00000028 $d
    {standard input}:6350   .text.XMC_SCU_CLOCK_IsSystemPllLocked:00000000 $t
    {standard input}:6355   .text.XMC_SCU_CLOCK_IsSystemPllLocked:00000000 XMC_SCU_CLOCK_IsSystemPllLocked
    {standard input}:6392   .text.XMC_SCU_CLOCK_IsSystemPllLocked:00000020 $d
    {standard input}:6397   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 $t
    {standard input}:6402   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 XMC_SCU_INTERRUPT_SetEventHandler
    {standard input}:6481   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000054 $d
    {standard input}:6486   .text.XMC_SCU_IRQHandler:00000000 $t
    {standard input}:6491   .text.XMC_SCU_IRQHandler:00000000 XMC_SCU_IRQHandler
    {standard input}:6569   .text.XMC_SCU_IRQHandler:0000005c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SystemCoreClock
SystemCoreClockUpdate
OSCHP_GetFrequency
